

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Oct 24 00:04:30 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    27                           	psect	inittext,global,class=CODE,delta=2
    28                           	psect	clrtext,global,class=CODE,delta=2
    29                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    31                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    32                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    34                           	psect	text1,local,class=CODE,merge=1,delta=2
    35                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text3,local,class=CODE,merge=1,delta=2
    37                           	psect	text4,local,class=CODE,merge=1,delta=2
    38                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text6,local,class=CODE,merge=1,delta=2
    40                           	psect	text7,local,class=CODE,merge=1,delta=2
    41                           	psect	text8,local,class=CODE,merge=1,delta=2
    42                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text11,local,class=CODE,merge=1,delta=2
    45                           	psect	text12,local,class=CODE,merge=1,delta=2
    46                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text23,local,class=CODE,merge=1,delta=2
    57                           	psect	text24,local,class=CODE,merge=1,delta=2
    58                           	psect	text25,local,class=CODE,merge=1,delta=2
    59                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text27,local,class=CODE,merge=1,delta=2
    61                           	psect	text28,local,class=CODE,merge=1,delta=2
    62                           	psect	text29,local,class=CODE,merge=1,delta=2
    63                           	psect	text30,local,class=CODE,merge=1,delta=2
    64                           	psect	text31,local,class=CODE,merge=1,delta=2
    65                           	psect	text32,local,class=CODE,merge=1,delta=2
    66                           	psect	text33,local,class=CODE,merge=1,delta=2
    67                           	psect	text34,local,class=CODE,merge=1,delta=2
    68                           	psect	text35,local,class=CODE,merge=1,delta=2
    69                           	psect	text36,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text38,local,class=CODE,merge=1,delta=2
    72                           	psect	text39,local,class=CODE,merge=1,delta=2
    73                           	psect	text40,local,class=CODE,merge=1,delta=2
    74                           	psect	text41,local,class=CODE,merge=1,delta=2
    75                           	psect	text42,local,class=CODE,merge=1,delta=2
    76                           	psect	text43,local,class=CODE,merge=1,delta=2
    77                           	psect	text44,local,class=CODE,merge=1,delta=2
    78                           	psect	text45,local,class=CODE,merge=1,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 1.42
    82                           ; Generated 13/04/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F1937 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  008F                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0110                     	;# 
   170  0111                     	;# 
   171  0112                     	;# 
   172  0113                     	;# 
   173  0114                     	;# 
   174  0115                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0118                     	;# 
   178  0119                     	;# 
   179  011A                     	;# 
   180  011B                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018F                     	;# 
   185  0190                     	;# 
   186  0191                     	;# 
   187  0191                     	;# 
   188  0192                     	;# 
   189  0193                     	;# 
   190  0193                     	;# 
   191  0193                     	;# 
   192  0194                     	;# 
   193  0195                     	;# 
   194  0196                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019C                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  020D                     	;# 
   207  0210                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0213                     	;# 
   211  0214                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0216                     	;# 
   215  0217                     	;# 
   216  0291                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0293                     	;# 
   220  0294                     	;# 
   221  0295                     	;# 
   222  0295                     	;# 
   223  0296                     	;# 
   224  0298                     	;# 
   225  0298                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029B                     	;# 
   229  029C                     	;# 
   230  029C                     	;# 
   231  029D                     	;# 
   232  029E                     	;# 
   233  029F                     	;# 
   234  0311                     	;# 
   235  0311                     	;# 
   236  0312                     	;# 
   237  0313                     	;# 
   238  0314                     	;# 
   239  0315                     	;# 
   240  0315                     	;# 
   241  0316                     	;# 
   242  0318                     	;# 
   243  0318                     	;# 
   244  0319                     	;# 
   245  031A                     	;# 
   246  031C                     	;# 
   247  031C                     	;# 
   248  031D                     	;# 
   249  031E                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0415                     	;# 
   254  0416                     	;# 
   255  0417                     	;# 
   256  041C                     	;# 
   257  041D                     	;# 
   258  041E                     	;# 
   259  0791                     	;# 
   260  0792                     	;# 
   261  0793                     	;# 
   262  0794                     	;# 
   263  0795                     	;# 
   264  0798                     	;# 
   265  0799                     	;# 
   266  079A                     	;# 
   267  07A0                     	;# 
   268  07A1                     	;# 
   269  07A2                     	;# 
   270  07A3                     	;# 
   271  07A4                     	;# 
   272  07A5                     	;# 
   273  07A6                     	;# 
   274  07A7                     	;# 
   275  07A8                     	;# 
   276  07A9                     	;# 
   277  07AA                     	;# 
   278  07AB                     	;# 
   279  0FE4                     	;# 
   280  0FE5                     	;# 
   281  0FE6                     	;# 
   282  0FE7                     	;# 
   283  0FE8                     	;# 
   284  0FE9                     	;# 
   285  0FEA                     	;# 
   286  0FEB                     	;# 
   287  0FED                     	;# 
   288  0FEE                     	;# 
   289  0FEF                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000F                     	;# 
   306  0010                     	;# 
   307  0011                     	;# 
   308  0012                     	;# 
   309  0013                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  008F                     	;# 
   325  0090                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0093                     	;# 
   329  0095                     	;# 
   330  0096                     	;# 
   331  0097                     	;# 
   332  0098                     	;# 
   333  0099                     	;# 
   334  009A                     	;# 
   335  009B                     	;# 
   336  009B                     	;# 
   337  009C                     	;# 
   338  009D                     	;# 
   339  009E                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  010F                     	;# 
   344  0110                     	;# 
   345  0111                     	;# 
   346  0112                     	;# 
   347  0113                     	;# 
   348  0114                     	;# 
   349  0115                     	;# 
   350  0116                     	;# 
   351  0117                     	;# 
   352  0118                     	;# 
   353  0119                     	;# 
   354  011A                     	;# 
   355  011B                     	;# 
   356  011D                     	;# 
   357  018C                     	;# 
   358  018D                     	;# 
   359  018F                     	;# 
   360  0190                     	;# 
   361  0191                     	;# 
   362  0191                     	;# 
   363  0192                     	;# 
   364  0193                     	;# 
   365  0193                     	;# 
   366  0193                     	;# 
   367  0194                     	;# 
   368  0195                     	;# 
   369  0196                     	;# 
   370  0199                     	;# 
   371  019A                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019C                     	;# 
   378  019D                     	;# 
   379  019E                     	;# 
   380  019F                     	;# 
   381  020D                     	;# 
   382  0210                     	;# 
   383  0211                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0214                     	;# 
   387  0215                     	;# 
   388  0215                     	;# 
   389  0216                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0294                     	;# 
   396  0295                     	;# 
   397  0295                     	;# 
   398  0296                     	;# 
   399  0298                     	;# 
   400  0298                     	;# 
   401  0299                     	;# 
   402  029A                     	;# 
   403  029B                     	;# 
   404  029C                     	;# 
   405  029C                     	;# 
   406  029D                     	;# 
   407  029E                     	;# 
   408  029F                     	;# 
   409  0311                     	;# 
   410  0311                     	;# 
   411  0312                     	;# 
   412  0313                     	;# 
   413  0314                     	;# 
   414  0315                     	;# 
   415  0315                     	;# 
   416  0316                     	;# 
   417  0318                     	;# 
   418  0318                     	;# 
   419  0319                     	;# 
   420  031A                     	;# 
   421  031C                     	;# 
   422  031C                     	;# 
   423  031D                     	;# 
   424  031E                     	;# 
   425  0394                     	;# 
   426  0395                     	;# 
   427  0396                     	;# 
   428  0415                     	;# 
   429  0416                     	;# 
   430  0417                     	;# 
   431  041C                     	;# 
   432  041D                     	;# 
   433  041E                     	;# 
   434  0791                     	;# 
   435  0792                     	;# 
   436  0793                     	;# 
   437  0794                     	;# 
   438  0795                     	;# 
   439  0798                     	;# 
   440  0799                     	;# 
   441  079A                     	;# 
   442  07A0                     	;# 
   443  07A1                     	;# 
   444  07A2                     	;# 
   445  07A3                     	;# 
   446  07A4                     	;# 
   447  07A5                     	;# 
   448  07A6                     	;# 
   449  07A7                     	;# 
   450  07A8                     	;# 
   451  07A9                     	;# 
   452  07AA                     	;# 
   453  07AB                     	;# 
   454  0FE4                     	;# 
   455  0FE5                     	;# 
   456  0FE6                     	;# 
   457  0FE7                     	;# 
   458  0FE8                     	;# 
   459  0FE9                     	;# 
   460  0FEA                     	;# 
   461  0FEB                     	;# 
   462  0FED                     	;# 
   463  0FEE                     	;# 
   464  0FEF                     	;# 
   465  0000                     	;# 
   466  0001                     	;# 
   467  0002                     	;# 
   468  0003                     	;# 
   469  0004                     	;# 
   470  0005                     	;# 
   471  0006                     	;# 
   472  0007                     	;# 
   473  0008                     	;# 
   474  0009                     	;# 
   475  000A                     	;# 
   476  000B                     	;# 
   477  000C                     	;# 
   478  000D                     	;# 
   479  000E                     	;# 
   480  000F                     	;# 
   481  0010                     	;# 
   482  0011                     	;# 
   483  0012                     	;# 
   484  0013                     	;# 
   485  0015                     	;# 
   486  0016                     	;# 
   487  0016                     	;# 
   488  0017                     	;# 
   489  0018                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001C                     	;# 
   494  001E                     	;# 
   495  001F                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  008F                     	;# 
   500  0090                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0093                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0098                     	;# 
   508  0099                     	;# 
   509  009A                     	;# 
   510  009B                     	;# 
   511  009B                     	;# 
   512  009C                     	;# 
   513  009D                     	;# 
   514  009E                     	;# 
   515  010C                     	;# 
   516  010D                     	;# 
   517  010E                     	;# 
   518  010F                     	;# 
   519  0110                     	;# 
   520  0111                     	;# 
   521  0112                     	;# 
   522  0113                     	;# 
   523  0114                     	;# 
   524  0115                     	;# 
   525  0116                     	;# 
   526  0117                     	;# 
   527  0118                     	;# 
   528  0119                     	;# 
   529  011A                     	;# 
   530  011B                     	;# 
   531  011D                     	;# 
   532  018C                     	;# 
   533  018D                     	;# 
   534  018F                     	;# 
   535  0190                     	;# 
   536  0191                     	;# 
   537  0191                     	;# 
   538  0192                     	;# 
   539  0193                     	;# 
   540  0193                     	;# 
   541  0193                     	;# 
   542  0194                     	;# 
   543  0195                     	;# 
   544  0196                     	;# 
   545  0199                     	;# 
   546  019A                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019C                     	;# 
   552  019C                     	;# 
   553  019D                     	;# 
   554  019E                     	;# 
   555  019F                     	;# 
   556  020D                     	;# 
   557  0210                     	;# 
   558  0211                     	;# 
   559  0212                     	;# 
   560  0213                     	;# 
   561  0214                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0216                     	;# 
   565  0217                     	;# 
   566  0291                     	;# 
   567  0291                     	;# 
   568  0292                     	;# 
   569  0293                     	;# 
   570  0294                     	;# 
   571  0295                     	;# 
   572  0295                     	;# 
   573  0296                     	;# 
   574  0298                     	;# 
   575  0298                     	;# 
   576  0299                     	;# 
   577  029A                     	;# 
   578  029B                     	;# 
   579  029C                     	;# 
   580  029C                     	;# 
   581  029D                     	;# 
   582  029E                     	;# 
   583  029F                     	;# 
   584  0311                     	;# 
   585  0311                     	;# 
   586  0312                     	;# 
   587  0313                     	;# 
   588  0314                     	;# 
   589  0315                     	;# 
   590  0315                     	;# 
   591  0316                     	;# 
   592  0318                     	;# 
   593  0318                     	;# 
   594  0319                     	;# 
   595  031A                     	;# 
   596  031C                     	;# 
   597  031C                     	;# 
   598  031D                     	;# 
   599  031E                     	;# 
   600  0394                     	;# 
   601  0395                     	;# 
   602  0396                     	;# 
   603  0415                     	;# 
   604  0416                     	;# 
   605  0417                     	;# 
   606  041C                     	;# 
   607  041D                     	;# 
   608  041E                     	;# 
   609  0791                     	;# 
   610  0792                     	;# 
   611  0793                     	;# 
   612  0794                     	;# 
   613  0795                     	;# 
   614  0798                     	;# 
   615  0799                     	;# 
   616  079A                     	;# 
   617  07A0                     	;# 
   618  07A1                     	;# 
   619  07A2                     	;# 
   620  07A3                     	;# 
   621  07A4                     	;# 
   622  07A5                     	;# 
   623  07A6                     	;# 
   624  07A7                     	;# 
   625  07A8                     	;# 
   626  07A9                     	;# 
   627  07AA                     	;# 
   628  07AB                     	;# 
   629  0FE4                     	;# 
   630  0FE5                     	;# 
   631  0FE6                     	;# 
   632  0FE7                     	;# 
   633  0FE8                     	;# 
   634  0FE9                     	;# 
   635  0FEA                     	;# 
   636  0FEB                     	;# 
   637  0FED                     	;# 
   638  0FEE                     	;# 
   639  0FEF                     	;# 
   640  0000                     	;# 
   641  0001                     	;# 
   642  0002                     	;# 
   643  0003                     	;# 
   644  0004                     	;# 
   645  0005                     	;# 
   646  0006                     	;# 
   647  0007                     	;# 
   648  0008                     	;# 
   649  0009                     	;# 
   650  000A                     	;# 
   651  000B                     	;# 
   652  000C                     	;# 
   653  000D                     	;# 
   654  000E                     	;# 
   655  000F                     	;# 
   656  0010                     	;# 
   657  0011                     	;# 
   658  0012                     	;# 
   659  0013                     	;# 
   660  0015                     	;# 
   661  0016                     	;# 
   662  0016                     	;# 
   663  0017                     	;# 
   664  0018                     	;# 
   665  0019                     	;# 
   666  001A                     	;# 
   667  001B                     	;# 
   668  001C                     	;# 
   669  001E                     	;# 
   670  001F                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008F                     	;# 
   675  0090                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0093                     	;# 
   679  0095                     	;# 
   680  0096                     	;# 
   681  0097                     	;# 
   682  0098                     	;# 
   683  0099                     	;# 
   684  009A                     	;# 
   685  009B                     	;# 
   686  009B                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009E                     	;# 
   690  010C                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  010F                     	;# 
   694  0110                     	;# 
   695  0111                     	;# 
   696  0112                     	;# 
   697  0113                     	;# 
   698  0114                     	;# 
   699  0115                     	;# 
   700  0116                     	;# 
   701  0117                     	;# 
   702  0118                     	;# 
   703  0119                     	;# 
   704  011A                     	;# 
   705  011B                     	;# 
   706  011D                     	;# 
   707  018C                     	;# 
   708  018D                     	;# 
   709  018F                     	;# 
   710  0190                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0193                     	;# 
   717  0194                     	;# 
   718  0195                     	;# 
   719  0196                     	;# 
   720  0199                     	;# 
   721  019A                     	;# 
   722  019B                     	;# 
   723  019B                     	;# 
   724  019B                     	;# 
   725  019B                     	;# 
   726  019C                     	;# 
   727  019C                     	;# 
   728  019D                     	;# 
   729  019E                     	;# 
   730  019F                     	;# 
   731  020D                     	;# 
   732  0210                     	;# 
   733  0211                     	;# 
   734  0212                     	;# 
   735  0213                     	;# 
   736  0214                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0216                     	;# 
   740  0217                     	;# 
   741  0291                     	;# 
   742  0291                     	;# 
   743  0292                     	;# 
   744  0293                     	;# 
   745  0294                     	;# 
   746  0295                     	;# 
   747  0295                     	;# 
   748  0296                     	;# 
   749  0298                     	;# 
   750  0298                     	;# 
   751  0299                     	;# 
   752  029A                     	;# 
   753  029B                     	;# 
   754  029C                     	;# 
   755  029C                     	;# 
   756  029D                     	;# 
   757  029E                     	;# 
   758  029F                     	;# 
   759  0311                     	;# 
   760  0311                     	;# 
   761  0312                     	;# 
   762  0313                     	;# 
   763  0314                     	;# 
   764  0315                     	;# 
   765  0315                     	;# 
   766  0316                     	;# 
   767  0318                     	;# 
   768  0318                     	;# 
   769  0319                     	;# 
   770  031A                     	;# 
   771  031C                     	;# 
   772  031C                     	;# 
   773  031D                     	;# 
   774  031E                     	;# 
   775  0394                     	;# 
   776  0395                     	;# 
   777  0396                     	;# 
   778  0415                     	;# 
   779  0416                     	;# 
   780  0417                     	;# 
   781  041C                     	;# 
   782  041D                     	;# 
   783  041E                     	;# 
   784  0791                     	;# 
   785  0792                     	;# 
   786  0793                     	;# 
   787  0794                     	;# 
   788  0795                     	;# 
   789  0798                     	;# 
   790  0799                     	;# 
   791  079A                     	;# 
   792  07A0                     	;# 
   793  07A1                     	;# 
   794  07A2                     	;# 
   795  07A3                     	;# 
   796  07A4                     	;# 
   797  07A5                     	;# 
   798  07A6                     	;# 
   799  07A7                     	;# 
   800  07A8                     	;# 
   801  07A9                     	;# 
   802  07AA                     	;# 
   803  07AB                     	;# 
   804  0FE4                     	;# 
   805  0FE5                     	;# 
   806  0FE6                     	;# 
   807  0FE7                     	;# 
   808  0FE8                     	;# 
   809  0FE9                     	;# 
   810  0FEA                     	;# 
   811  0FEB                     	;# 
   812  0FED                     	;# 
   813  0FEE                     	;# 
   814  0FEF                     	;# 
   815  0000                     	;# 
   816  0001                     	;# 
   817  0002                     	;# 
   818  0003                     	;# 
   819  0004                     	;# 
   820  0005                     	;# 
   821  0006                     	;# 
   822  0007                     	;# 
   823  0008                     	;# 
   824  0009                     	;# 
   825  000A                     	;# 
   826  000B                     	;# 
   827  000C                     	;# 
   828  000D                     	;# 
   829  000E                     	;# 
   830  000F                     	;# 
   831  0010                     	;# 
   832  0011                     	;# 
   833  0012                     	;# 
   834  0013                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  001E                     	;# 
   845  001F                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  008F                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0093                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0098                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  010F                     	;# 
   869  0110                     	;# 
   870  0111                     	;# 
   871  0112                     	;# 
   872  0113                     	;# 
   873  0114                     	;# 
   874  0115                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  0118                     	;# 
   878  0119                     	;# 
   879  011A                     	;# 
   880  011B                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018F                     	;# 
   885  0190                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0194                     	;# 
   893  0195                     	;# 
   894  0196                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0217                     	;# 
   916  0291                     	;# 
   917  0291                     	;# 
   918  0292                     	;# 
   919  0293                     	;# 
   920  0294                     	;# 
   921  0295                     	;# 
   922  0295                     	;# 
   923  0296                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  029B                     	;# 
   929  029C                     	;# 
   930  029C                     	;# 
   931  029D                     	;# 
   932  029E                     	;# 
   933  029F                     	;# 
   934  0311                     	;# 
   935  0311                     	;# 
   936  0312                     	;# 
   937  0313                     	;# 
   938  0314                     	;# 
   939  0315                     	;# 
   940  0315                     	;# 
   941  0316                     	;# 
   942  0318                     	;# 
   943  0318                     	;# 
   944  0319                     	;# 
   945  031A                     	;# 
   946  031C                     	;# 
   947  031C                     	;# 
   948  031D                     	;# 
   949  031E                     	;# 
   950  0394                     	;# 
   951  0395                     	;# 
   952  0396                     	;# 
   953  0415                     	;# 
   954  0416                     	;# 
   955  0417                     	;# 
   956  041C                     	;# 
   957  041D                     	;# 
   958  041E                     	;# 
   959  0791                     	;# 
   960  0792                     	;# 
   961  0793                     	;# 
   962  0794                     	;# 
   963  0795                     	;# 
   964  0798                     	;# 
   965  0799                     	;# 
   966  079A                     	;# 
   967  07A0                     	;# 
   968  07A1                     	;# 
   969  07A2                     	;# 
   970  07A3                     	;# 
   971  07A4                     	;# 
   972  07A5                     	;# 
   973  07A6                     	;# 
   974  07A7                     	;# 
   975  07A8                     	;# 
   976  07A9                     	;# 
   977  07AA                     	;# 
   978  07AB                     	;# 
   979  0FE4                     	;# 
   980  0FE5                     	;# 
   981  0FE6                     	;# 
   982  0FE7                     	;# 
   983  0FE8                     	;# 
   984  0FE9                     	;# 
   985  0FEA                     	;# 
   986  0FEB                     	;# 
   987  0FED                     	;# 
   988  0FEE                     	;# 
   989  0FEF                     	;# 
   990  0000                     	;# 
   991  0001                     	;# 
   992  0002                     	;# 
   993  0003                     	;# 
   994  0004                     	;# 
   995  0005                     	;# 
   996  0006                     	;# 
   997  0007                     	;# 
   998  0008                     	;# 
   999  0009                     	;# 
  1000  000A                     	;# 
  1001  000B                     	;# 
  1002  000C                     	;# 
  1003  000D                     	;# 
  1004  000E                     	;# 
  1005  000F                     	;# 
  1006  0010                     	;# 
  1007  0011                     	;# 
  1008  0012                     	;# 
  1009  0013                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0016                     	;# 
  1013  0017                     	;# 
  1014  0018                     	;# 
  1015  0019                     	;# 
  1016  001A                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001E                     	;# 
  1020  001F                     	;# 
  1021  008C                     	;# 
  1022  008D                     	;# 
  1023  008E                     	;# 
  1024  008F                     	;# 
  1025  0090                     	;# 
  1026  0091                     	;# 
  1027  0092                     	;# 
  1028  0093                     	;# 
  1029  0095                     	;# 
  1030  0096                     	;# 
  1031  0097                     	;# 
  1032  0098                     	;# 
  1033  0099                     	;# 
  1034  009A                     	;# 
  1035  009B                     	;# 
  1036  009B                     	;# 
  1037  009C                     	;# 
  1038  009D                     	;# 
  1039  009E                     	;# 
  1040  010C                     	;# 
  1041  010D                     	;# 
  1042  010E                     	;# 
  1043  010F                     	;# 
  1044  0110                     	;# 
  1045  0111                     	;# 
  1046  0112                     	;# 
  1047  0113                     	;# 
  1048  0114                     	;# 
  1049  0115                     	;# 
  1050  0116                     	;# 
  1051  0117                     	;# 
  1052  0118                     	;# 
  1053  0119                     	;# 
  1054  011A                     	;# 
  1055  011B                     	;# 
  1056  011D                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018F                     	;# 
  1060  0190                     	;# 
  1061  0191                     	;# 
  1062  0191                     	;# 
  1063  0192                     	;# 
  1064  0193                     	;# 
  1065  0193                     	;# 
  1066  0193                     	;# 
  1067  0194                     	;# 
  1068  0195                     	;# 
  1069  0196                     	;# 
  1070  0199                     	;# 
  1071  019A                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019B                     	;# 
  1075  019B                     	;# 
  1076  019C                     	;# 
  1077  019C                     	;# 
  1078  019D                     	;# 
  1079  019E                     	;# 
  1080  019F                     	;# 
  1081  020D                     	;# 
  1082  0210                     	;# 
  1083  0211                     	;# 
  1084  0212                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0216                     	;# 
  1090  0217                     	;# 
  1091  0291                     	;# 
  1092  0291                     	;# 
  1093  0292                     	;# 
  1094  0293                     	;# 
  1095  0294                     	;# 
  1096  0295                     	;# 
  1097  0295                     	;# 
  1098  0296                     	;# 
  1099  0298                     	;# 
  1100  0298                     	;# 
  1101  0299                     	;# 
  1102  029A                     	;# 
  1103  029B                     	;# 
  1104  029C                     	;# 
  1105  029C                     	;# 
  1106  029D                     	;# 
  1107  029E                     	;# 
  1108  029F                     	;# 
  1109  0311                     	;# 
  1110  0311                     	;# 
  1111  0312                     	;# 
  1112  0313                     	;# 
  1113  0314                     	;# 
  1114  0315                     	;# 
  1115  0315                     	;# 
  1116  0316                     	;# 
  1117  0318                     	;# 
  1118  0318                     	;# 
  1119  0319                     	;# 
  1120  031A                     	;# 
  1121  031C                     	;# 
  1122  031C                     	;# 
  1123  031D                     	;# 
  1124  031E                     	;# 
  1125  0394                     	;# 
  1126  0395                     	;# 
  1127  0396                     	;# 
  1128  0415                     	;# 
  1129  0416                     	;# 
  1130  0417                     	;# 
  1131  041C                     	;# 
  1132  041D                     	;# 
  1133  041E                     	;# 
  1134  0791                     	;# 
  1135  0792                     	;# 
  1136  0793                     	;# 
  1137  0794                     	;# 
  1138  0795                     	;# 
  1139  0798                     	;# 
  1140  0799                     	;# 
  1141  079A                     	;# 
  1142  07A0                     	;# 
  1143  07A1                     	;# 
  1144  07A2                     	;# 
  1145  07A3                     	;# 
  1146  07A4                     	;# 
  1147  07A5                     	;# 
  1148  07A6                     	;# 
  1149  07A7                     	;# 
  1150  07A8                     	;# 
  1151  07A9                     	;# 
  1152  07AA                     	;# 
  1153  07AB                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  000F                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0013                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  001E                     	;# 
  1195  001F                     	;# 
  1196  008C                     	;# 
  1197  008D                     	;# 
  1198  008E                     	;# 
  1199  008F                     	;# 
  1200  0090                     	;# 
  1201  0091                     	;# 
  1202  0092                     	;# 
  1203  0093                     	;# 
  1204  0095                     	;# 
  1205  0096                     	;# 
  1206  0097                     	;# 
  1207  0098                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  010F                     	;# 
  1219  0110                     	;# 
  1220  0111                     	;# 
  1221  0112                     	;# 
  1222  0113                     	;# 
  1223  0114                     	;# 
  1224  0115                     	;# 
  1225  0116                     	;# 
  1226  0117                     	;# 
  1227  0118                     	;# 
  1228  0119                     	;# 
  1229  011A                     	;# 
  1230  011B                     	;# 
  1231  011D                     	;# 
  1232  018C                     	;# 
  1233  018D                     	;# 
  1234  018F                     	;# 
  1235  0190                     	;# 
  1236  0191                     	;# 
  1237  0191                     	;# 
  1238  0192                     	;# 
  1239  0193                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0194                     	;# 
  1243  0195                     	;# 
  1244  0196                     	;# 
  1245  0199                     	;# 
  1246  019A                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  019C                     	;# 
  1253  019D                     	;# 
  1254  019E                     	;# 
  1255  019F                     	;# 
  1256  020D                     	;# 
  1257  0210                     	;# 
  1258  0211                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0215                     	;# 
  1263  0215                     	;# 
  1264  0216                     	;# 
  1265  0217                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0298                     	;# 
  1275  0298                     	;# 
  1276  0299                     	;# 
  1277  029A                     	;# 
  1278  029B                     	;# 
  1279  029C                     	;# 
  1280  029C                     	;# 
  1281  029D                     	;# 
  1282  029E                     	;# 
  1283  029F                     	;# 
  1284  0311                     	;# 
  1285  0311                     	;# 
  1286  0312                     	;# 
  1287  0313                     	;# 
  1288  0314                     	;# 
  1289  0315                     	;# 
  1290  0315                     	;# 
  1291  0316                     	;# 
  1292  0318                     	;# 
  1293  0318                     	;# 
  1294  0319                     	;# 
  1295  031A                     	;# 
  1296  031C                     	;# 
  1297  031C                     	;# 
  1298  031D                     	;# 
  1299  031E                     	;# 
  1300  0394                     	;# 
  1301  0395                     	;# 
  1302  0396                     	;# 
  1303  0415                     	;# 
  1304  0416                     	;# 
  1305  0417                     	;# 
  1306  041C                     	;# 
  1307  041D                     	;# 
  1308  041E                     	;# 
  1309  0791                     	;# 
  1310  0792                     	;# 
  1311  0793                     	;# 
  1312  0794                     	;# 
  1313  0795                     	;# 
  1314  0798                     	;# 
  1315  0799                     	;# 
  1316  079A                     	;# 
  1317  07A0                     	;# 
  1318  07A1                     	;# 
  1319  07A2                     	;# 
  1320  07A3                     	;# 
  1321  07A4                     	;# 
  1322  07A5                     	;# 
  1323  07A6                     	;# 
  1324  07A7                     	;# 
  1325  07A8                     	;# 
  1326  07A9                     	;# 
  1327  07AA                     	;# 
  1328  07AB                     	;# 
  1329  0FE4                     	;# 
  1330  0FE5                     	;# 
  1331  0FE6                     	;# 
  1332  0FE7                     	;# 
  1333  0FE8                     	;# 
  1334  0FE9                     	;# 
  1335  0FEA                     	;# 
  1336  0FEB                     	;# 
  1337  0FED                     	;# 
  1338  0FEE                     	;# 
  1339  0FEF                     	;# 
  1340                           
  1341                           	psect	idataBANK2
  1342  0002                     __pidataBANK2:	
  1343                           
  1344                           ;initializer for turn_egs@step_nr
  1345  0002  3401               	retlw	1
  1346  0003  3400               	retlw	0
  1347                           
  1348                           	psect	idataBANK3
  1349  0ED5                     __pidataBANK3:	
  1350                           
  1351                           ;initializer for comparare@F3705
  1352  0ED5  34BA               	retlw	186
  1353  0ED6  340B               	retlw	11
  1354  0ED7  3481               	retlw	129
  1355  0ED8  340A               	retlw	10
  1356  0ED9  3449               	retlw	73
  1357  0EDA  3409               	retlw	9
  1358  0EDB  348A               	retlw	138
  1359  0EDC  3408               	retlw	8
  1360  0EDD  3467               	retlw	103
  1361  0EDE  3407               	retlw	7
  1362  0EDF  34AB               	retlw	171
  1363  0EE0  3406               	retlw	6
  1364  0EE1  34F0               	retlw	240
  1365  0EE2  3405               	retlw	5
  1366  0EE3  345E               	retlw	94
  1367  0EE4  3405               	retlw	5
  1368  0EE5  34CC               	retlw	204
  1369  0EE6  3404               	retlw	4
  1370  0EE7  345A               	retlw	90
  1371  0EE8  3404               	retlw	4
  1372  0EE9  34E8               	retlw	232
  1373  0EEA  3403               	retlw	3
  1374  0EEB  348C               	retlw	140
  1375  0EEC  3403               	retlw	3
  1376  0EED  3431               	retlw	49
  1377  0EEE  3403               	retlw	3
  1378  0EEF  34E9               	retlw	233
  1379  0EF0  3402               	retlw	2
  1380  0EF1  34A1               	retlw	161
  1381  0EF2  3402               	retlw	2
  1382  0EF3  3467               	retlw	103
  1383  0EF4  3402               	retlw	2
  1384  0EF5  342D               	retlw	45
  1385  0EF6  3402               	retlw	2
  1386  0EF7  34F0               	retlw	240
  1387  0EF8  3401               	retlw	1
  1388  0EF9  34CF               	retlw	207
  1389  0EFA  3401               	retlw	1
  1390  0EFB  34A9               	retlw	169
  1391  0EFC  3401               	retlw	1
  1392  0EFD  3483               	retlw	131
  1393  0EFE  3401               	retlw	1
  1394                           
  1395                           ;initializer for _line2
  1396  0EFF  346D               	retlw	109
  1397  0F00  3465               	retlw	101
  1398  0F01  3472               	retlw	114
  1399  0F02  3467               	retlw	103
  1400  0F03  3465               	retlw	101
  1401  0F04  3420               	retlw	32
  1402  0F05  3420               	retlw	32
  1403  0F06  3420               	retlw	32
  1404  0F07  3400               	retlw	0
  1405                           
  1406                           ;initializer for _line1
  1407  0F08  3468               	retlw	104
  1408  0F09  3461               	retlw	97
  1409  0F0A  3468               	retlw	104
  1410  0F0B  3461               	retlw	97
  1411  0F0C  3420               	retlw	32
  1412  0F0D  3420               	retlw	32
  1413  0F0E  3420               	retlw	32
  1414  0F0F  3400               	retlw	0
  1415                           
  1416                           	psect	stringtext1
  1417  1061                     __pstringtext1:	
  1418  1061                     _dpowers:	
  1419  1061  3401               	retlw	1
  1420  1062  3400               	retlw	0
  1421  1063  340A               	retlw	10
  1422  1064  3400               	retlw	0
  1423  1065  3464               	retlw	100
  1424  1066  3400               	retlw	0
  1425  1067  34E8               	retlw	232
  1426  1068  3403               	retlw	3
  1427  1069  3410               	retlw	16
  1428  106A  3427               	retlw	39
  1429  106B                     __end_of_dpowers:	
  1430                           
  1431                           	psect	nvBANK0
  1432  006D                     __pnvBANK0:	
  1433  006D                     _timer1ReloadVal:	
  1434  006D                     	ds	2
  1435                           
  1436                           	psect	nvBANK2
  1437  0166                     __pnvBANK2:	
  1438  0166                     _TMR1_InterruptHandler:	
  1439  0166                     	ds	2
  1440  0168                     _eusartTxBufferRemaining:	
  1441  0168                     	ds	1
  1442  0019                     _T1GCONbits	set	25
  1443  0018                     _T1CONbits	set	24
  1444  0016                     _TMR1L	set	22
  1445  0017                     _TMR1H	set	23
  1446  0019                     _T1GCON	set	25
  1447  0018                     _T1CON	set	24
  1448  0011                     _PIR1bits	set	17
  1449  000B                     _INTCONbits	set	11
  1450  008E                     _TRISCbits	set	142
  1451  009D                     _ADCON0bits	set	157
  1452  009C                     _ADRESH	set	156
  1453  009B                     _ADRESL	set	155
  1454  009E                     _ADCON1	set	158
  1455  009D                     _ADCON0	set	157
  1456  0091                     _PIE1bits	set	145
  1457  0095                     _OPTION_REGbits	set	149
  1458  008F                     _TRISD	set	143
  1459  008E                     _TRISC	set	142
  1460  008D                     _TRISB	set	141
  1461  008C                     _TRISA	set	140
  1462  0090                     _TRISE	set	144
  1463  0097                     _WDTCON	set	151
  1464  0098                     _OSCTUNE	set	152
  1465  0099                     _OSCCON	set	153
  1466  010E                     _LATCbits	set	270
  1467  010F                     _LATDbits	set	271
  1468  011D                     _APFCON	set	285
  1469  010E                     _LATC	set	270
  1470  010D                     _LATB	set	269
  1471  010C                     _LATA	set	268
  1472  010F                     _LATD	set	271
  1473  0110                     _LATE	set	272
  1474  0199                     _RCREG	set	409
  1475  019D                     _RCSTAbits	set	413
  1476  019A                     _TXREG	set	410
  1477  019C                     _SPBRGH	set	412
  1478  019B                     _SPBRGL	set	411
  1479  019E                     _TXSTA	set	414
  1480  019D                     _RCSTA	set	413
  1481  019F                     _BAUDCON	set	415
  1482  018C                     _ANSELA	set	396
  1483  0190                     _ANSELE	set	400
  1484  018F                     _ANSELD	set	399
  1485  018D                     _ANSELB	set	397
  1486  020D                     _WPUB	set	525
  1487  0210                     _WPUE	set	528
  1488                           
  1489                           	psect	stringtext2
  1490  1000                     __pstringtext2:	
  1491  1000                     STR_2:	
  1492  1000  3441               	retlw	65	;'A'
  1493  1001  3454               	retlw	84	;'T'
  1494  1002  342B               	retlw	43	;'+'
  1495  1003  3443               	retlw	67	;'C'
  1496  1004  344D               	retlw	77	;'M'
  1497  1005  3447               	retlw	71	;'G'
  1498  1006  3453               	retlw	83	;'S'
  1499  1007  343D               	retlw	61	;'='
  1500  1008  3422               	retlw	34	;'"'
  1501  1009  3430               	retlw	48	;'0'
  1502  100A  3437               	retlw	55	;'7'
  1503  100B  3435               	retlw	53	;'5'
  1504  100C  3437               	retlw	55	;'7'
  1505  100D  3434               	retlw	52	;'4'
  1506  100E  3439               	retlw	57	;'9'
  1507  100F  3434               	retlw	52	;'4'
  1508  1010  3438               	retlw	56	;'8'
  1509  1011  3432               	retlw	50	;'2'
  1510  1012  3433               	retlw	51	;'3'
  1511  1013  3422               	retlw	34	;'"'
  1512  1014  3400               	retlw	0
  1513                           
  1514                           	psect	stringtext3
  1515  1015                     __pstringtext3:	
  1516  1015                     STR_7:	
  1517  1015  3441               	retlw	65	;'A'
  1518  1016  3454               	retlw	84	;'T'
  1519  1017  342B               	retlw	43	;'+'
  1520  1018  3443               	retlw	67	;'C'
  1521  1019  344E               	retlw	78	;'N'
  1522  101A  344D               	retlw	77	;'M'
  1523  101B  3449               	retlw	73	;'I'
  1524  101C  343D               	retlw	61	;'='
  1525  101D  3431               	retlw	49	;'1'
  1526  101E  342C               	retlw	44	;','
  1527  101F  3432               	retlw	50	;'2'
  1528  1020  342C               	retlw	44	;','
  1529  1021  3430               	retlw	48	;'0'
  1530  1022  342C               	retlw	44	;','
  1531  1023  3430               	retlw	48	;'0'
  1532  1024  342C               	retlw	44	;','
  1533  1025  3430               	retlw	48	;'0'
  1534  1026  3400               	retlw	0
  1535                           
  1536                           	psect	stringtext4
  1537  1027                     __pstringtext4:	
  1538  1027                     STR_9:	
  1539  1027  3420               	retlw	32	;' '
  1540  1028  3454               	retlw	84	;'T'
  1541  1029  3465               	retlw	101	;'e'
  1542  102A  346D               	retlw	109	;'m'
  1543  102B  3470               	retlw	112	;'p'
  1544  102C  3465               	retlw	101	;'e'
  1545  102D  3472               	retlw	114	;'r'
  1546  102E  343D               	retlw	61	;'='
  1547  102F  3425               	retlw	37	;'%'
  1548  1030  3464               	retlw	100	;'d'
  1549  1031  3420               	retlw	32	;' '
  1550  1032  3420               	retlw	32	;' '
  1551  1033  3420               	retlw	32	;' '
  1552  1034  3420               	retlw	32	;' '
  1553  1035  3420               	retlw	32	;' '
  1554  1036  3420               	retlw	32	;' '
  1555  1037  3400               	retlw	0
  1556                           
  1557                           	psect	stringtext5
  1558  1038                     __pstringtext5:	
  1559  1038                     STR_5:	
  1560  1038  3441               	retlw	65	;'A'
  1561  1039  3454               	retlw	84	;'T'
  1562  103A  342B               	retlw	43	;'+'
  1563  103B  3443               	retlw	67	;'C'
  1564  103C  3450               	retlw	80	;'P'
  1565  103D  3449               	retlw	73	;'I'
  1566  103E  344E               	retlw	78	;'N'
  1567  103F  343D               	retlw	61	;'='
  1568  1040  3422               	retlw	34	;'"'
  1569  1041  3431               	retlw	49	;'1'
  1570  1042  3432               	retlw	50	;'2'
  1571  1043  3433               	retlw	51	;'3'
  1572  1044  3434               	retlw	52	;'4'
  1573  1045  3422               	retlw	34	;'"'
  1574  1046  3400               	retlw	0
  1575                           
  1576                           	psect	stringtext6
  1577  1047                     __pstringtext6:	
  1578  1047                     STR_1:	
  1579  1047  3441               	retlw	65	;'A'
  1580  1048  3454               	retlw	84	;'T'
  1581  1049  342B               	retlw	43	;'+'
  1582  104A  3443               	retlw	67	;'C'
  1583  104B  3453               	retlw	83	;'S'
  1584  104C  3443               	retlw	67	;'C'
  1585  104D  3453               	retlw	83	;'S'
  1586  104E  343D               	retlw	61	;'='
  1587  104F  3422               	retlw	34	;'"'
  1588  1050  3447               	retlw	71	;'G'
  1589  1051  3453               	retlw	83	;'S'
  1590  1052  344D               	retlw	77	;'M'
  1591  1053  3422               	retlw	34	;'"'
  1592  1054  3400               	retlw	0
  1593                           
  1594                           	psect	stringtext7
  1595  1055                     __pstringtext7:	
  1596  1055                     STR_3:	
  1597  1055  3469               	retlw	105	;'i'
  1598  1056  3475               	retlw	117	;'u'
  1599  1057  3470               	retlw	112	;'p'
  1600  1058  3469               	retlw	105	;'i'
  1601  1059  3469               	retlw	105	;'i'
  1602  105A  3420               	retlw	32	;' '
  1603  105B  346D               	retlw	109	;'m'
  1604  105C  3465               	retlw	101	;'e'
  1605  105D  3472               	retlw	114	;'r'
  1606  105E  3467               	retlw	103	;'g'
  1607  105F  3465               	retlw	101	;'e'
  1608  1060  3400               	retlw	0
  1609                           
  1610                           	psect	stringtext8
  1611  106B                     __pstringtext8:	
  1612  106B                     STR_6:	
  1613  106B  3441               	retlw	65	;'A'
  1614  106C  3454               	retlw	84	;'T'
  1615  106D  342B               	retlw	43	;'+'
  1616  106E  3443               	retlw	67	;'C'
  1617  106F  344D               	retlw	77	;'M'
  1618  1070  3447               	retlw	71	;'G'
  1619  1071  3446               	retlw	70	;'F'
  1620  1072  343D               	retlw	61	;'='
  1621  1073  3431               	retlw	49	;'1'
  1622  1074  3400               	retlw	0
  1623                           
  1624                           	psect	stringtext9
  1625  1075                     __pstringtext9:	
  1626  1075                     STR_4:	
  1627  1075  3441               	retlw	65	;'A'
  1628  1076  3454               	retlw	84	;'T'
  1629  1077  3400               	retlw	0
  1630                           
  1631                           	psect	stringtext10
  1632  0000                     __pstringtext10:	
  1633  1047                     
  1634                           ; #config settings
  1635  0000                     
  1636                           	psect	cinit
  1637  003E                     start_initialization:	
  1638  003E                     __initialization:	
  1639                           
  1640                           ; Initialize objects allocated to BANK2
  1641  003E  0022               	movlb	2	; select bank2
  1642  003F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  1643  0042  00E9               	movwf	__pdataBANK2& (0+127)
  1644  0043  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  1645  0046  00EA               	movwf	(__pdataBANK2+1)& (0+127)
  1646                           
  1647                           ; Initialize objects allocated to BANK3
  1648  0047  30D5               	movlw	low __pidataBANK3
  1649  0048  0084               	movwf	4
  1650  0049  308E               	movlw	(high __pidataBANK3)| (0+128)
  1651  004A  0085               	movwf	5
  1652  004B  30A0               	movlw	low __pdataBANK3
  1653  004C  0086               	movwf	6
  1654  004D  3001               	movlw	high __pdataBANK3
  1655  004E  0087               	movwf	7
  1656  004F  303B               	movlw	59
  1657  0050  318B  23EC  3180   	fcall	init_ram
  1658                           
  1659                           ; Clear objects allocated to COMMON
  1660  0053  01FA               	clrf	__pbssCOMMON& (0+127)
  1661  0054  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1662  0055  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  1663  0056  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  1664                           
  1665                           ; Clear objects allocated to BANK0
  1666  0057  0020               	movlb	0	; select bank0
  1667  0058  01E9               	clrf	__pbssBANK0& (0+127)
  1668  0059  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  1669  005A  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  1670  005B  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  1671                           
  1672                           ; Clear objects allocated to BANK1
  1673  005C  0021               	movlb	1	; select bank1
  1674  005D  01ED               	clrf	__pbssBANK1& (0+127)
  1675  005E  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  1676  005F  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  1677                           
  1678                           ; Clear objects allocated to BANK2
  1679  0060  304A               	movlw	low __pbssBANK2
  1680  0061  0084               	movwf	4
  1681  0062  3001               	movlw	high __pbssBANK2
  1682  0063  0085               	movwf	5
  1683  0064  301C               	movlw	28
  1684  0065  318B  23E6  3180   	fcall	clear_ram0
  1685                           
  1686                           ; Clear objects allocated to BANK3
  1687  0068  30DB               	movlw	low __pbssBANK3
  1688  0069  0084               	movwf	4
  1689  006A  3001               	movlw	high __pbssBANK3
  1690  006B  0085               	movwf	5
  1691  006C  3010               	movlw	16
  1692  006D  318B  23E6  3180   	fcall	clear_ram0
  1693                           
  1694                           ; Clear objects allocated to BANK4
  1695  0070  3020               	movlw	low __pbssBANK4
  1696  0071  0084               	movwf	4
  1697  0072  3002               	movlw	high __pbssBANK4
  1698  0073  0085               	movwf	5
  1699  0074  304B               	movlw	75
  1700  0075  318B  23E6         	fcall	clear_ram0
  1701  0077                     end_of_initialization:	
  1702                           ;End of C runtime variable initialization code
  1703                           
  1704  0077                     __end_of__initialization:	
  1705  0077  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1706  0078  0020               	movlb	0
  1707  0079  3184  2C3B         	ljmp	_main	;jump to C main() function
  1708                           
  1709                           	psect	bssCOMMON
  1710  007A                     __pbssCOMMON:	
  1711  007A                     turn_egs@step_index:	
  1712  007A                     	ds	1
  1713  007B                     _eusartRxHead:	
  1714  007B                     	ds	1
  1715  007C                     _eusartTxTail:	
  1716  007C                     	ds	1
  1717  007D                     _eusartTxHead:	
  1718  007D                     	ds	1
  1719                           
  1720                           	psect	bssBANK0
  1721  0069                     __pbssBANK0:	
  1722  0069                     int_gsm@sms1_index:	
  1723  0069                     	ds	2
  1724  006B                     _rcreg:	
  1725  006B                     	ds	1
  1726  006C                     _eusartRxTail:	
  1727  006C                     	ds	1
  1728                           
  1729                           	psect	bssBANK1
  1730  00ED                     __pbssBANK1:	
  1731  00ED                     _flag_4000_ms:	
  1732  00ED                     	ds	2
  1733  00EF                     _eusartRxCount:	
  1734  00EF                     	ds	1
  1735                           
  1736                           	psect	bssBANK2
  1737  014A                     __pbssBANK2:	
  1738  014A                     _flag_directie:	
  1739  014A                     	ds	2
  1740  014C                     TMR1_ISR@CountCallBack:	
  1741  014C                     	ds	2
  1742  014E                     _count_4000_ms:	
  1743  014E                     	ds	2
  1744  0150                     _count_1000_ms:	
  1745  0150                     	ds	2
  1746  0152                     _count_500_ms:	
  1747  0152                     	ds	2
  1748  0154                     _count_100_ms:	
  1749  0154                     	ds	2
  1750  0156                     _flag_1000_ms:	
  1751  0156                     	ds	2
  1752  0158                     _flag_500_ms:	
  1753  0158                     	ds	2
  1754  015A                     _flag_100_ms:	
  1755  015A                     	ds	2
  1756  015C                     _flag_10_ms:	
  1757  015C                     	ds	2
  1758  015E                     _flag_1_ms:	
  1759  015E                     	ds	2
  1760  0160                     _flag_G:	
  1761  0160                     	ds	2
  1762  0162                     _flag_N:	
  1763  0162                     	ds	2
  1764  0164                     _rez_conversie:	
  1765  0164                     	ds	2
  1766                           
  1767                           	psect	dataBANK2
  1768  0169                     __pdataBANK2:	
  1769  0169                     turn_egs@step_nr:	
  1770  0169                     	ds	2
  1771                           
  1772                           	psect	bssBANK3
  1773  01DB                     __pbssBANK3:	
  1774  01DB                     _eusartRxBuffer:	
  1775  01DB                     	ds	8
  1776  01E3                     _eusartTxBuffer:	
  1777  01E3                     	ds	8
  1778                           
  1779                           	psect	dataBANK3
  1780  01A0                     __pdataBANK3:	
  1781  01A0                     comparare@F3705:	
  1782  01A0                     	ds	42
  1783  01CA                     _line2:	
  1784  01CA                     	ds	9
  1785  01D3                     _line1:	
  1786  01D3                     	ds	8
  1787                           
  1788                           	psect	bssBANK4
  1789  0220                     __pbssBANK4:	
  1790  0220                     comparare@F3710:	
  1791  0220                     	ds	75
  1792                           
  1793                           	psect	inittext
  1794  0BEC                     init_ram:	
  1795  0BEC  00FE               	movwf	126
  1796  0BED                     initloop:	
  1797  0BED  0012               	moviw fsr0++
  1798  0BEE  001E               	movwi fsr1++
  1799  0BEF  0BFE               	decfsz	126,f
  1800  0BF0  2BED               	goto	initloop
  1801  0BF1  3400               	retlw	0
  1802                           
  1803                           	psect	clrtext
  1804  0BE6                     clear_ram0:	
  1805                           ;	Called with FSR0 containing the base address, and
  1806                           ;	WREG with the size to clear
  1807                           
  1808  0BE6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1809  0BE7                     clrloop0:	
  1810  0BE7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1811  0BE8  3101               	addfsr 0,1
  1812  0BE9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1813  0BEA  2BE7               	goto	clrloop0	;have we reached the end yet?
  1814  0BEB  3400               	retlw	0	;all done for this memory range, return
  1815                           
  1816                           	psect	cstackBANK2
  1817  0120                     __pcstackBANK2:	
  1818  0120                     comparare@res:	
  1819                           
  1820                           ; 42 bytes @ 0x0
  1821  0120                     	ds	42
  1822                           
  1823                           	psect	cstackBANK1
  1824  00A0                     __pcstackBANK1:	
  1825  00A0                     comparare@table:	
  1826                           
  1827                           ; 75 bytes @ 0x0
  1828  00A0                     	ds	75
  1829  00EB                     comparare@i:	
  1830                           
  1831                           ; 2 bytes @ 0x4B
  1832  00EB                     	ds	2
  1833                           
  1834                           	psect	cstackCOMMON
  1835  0070                     __pcstackCOMMON:	
  1836  0070                     ?_PIN_MANAGER_Initialize:	
  1837  0070                     ?_OSCILLATOR_Initialize:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_WDT_Initialize:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ?_TMR1_Initialize:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_ADC_Initialize:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ?_EUSART_Initialize:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_ADC_ISR:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_TMR1_ISR:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ??_TMR1_ISR:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_TMR1_DefaultInterruptHandler:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ??_TMR1_DefaultInterruptHandler:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_TMR1_StartTimer:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?_TMR1_CallBack:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ??_TMR1_CallBack:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_send_nibble:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ?_send_command_byte:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ?_SYSTEM_Initialize:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ?_EUSART_Write:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_EUSART_Transmit_ISR:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ??_EUSART_Transmit_ISR:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_EUSART_Receive_ISR:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ??_EUSART_Receive_ISR:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ?_INTERRUPT_InterruptManager:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_ADC_StartConversion:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_init_lcd:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_comand_lcd:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_send_data_byte:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_turn_egs:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ?_int_gsm:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ?_main:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ?i1_ADC_StartConversion:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ??i1_ADC_StartConversion:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_ADC_GetConversionResult:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933                           
  1934                           ; 2 bytes @ 0x0
  1935  0070                     	ds	2
  1936  0072                     ??_ADC_GetConversionResult:	
  1937                           
  1938                           ; 1 bytes @ 0x2
  1939  0072                     	ds	7
  1940  0079                     ??_ADC_ISR:	
  1941  0079                     ??_INTERRUPT_InterruptManager:	
  1942                           ; 1 bytes @ 0x9
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x9
  1946  0079                     	ds	1
  1947                           
  1948                           	psect	cstackBANK0
  1949  0020                     __pcstackBANK0:	
  1950  0020                     ??_PIN_MANAGER_Initialize:	
  1951  0020                     ??_OSCILLATOR_Initialize:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0020                     ??_WDT_Initialize:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0020                     ??_ADC_Initialize:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0020                     ??_EUSART_Initialize:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0020                     ?_TMR1_SetInterruptHandler:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0020                     ??_TMR1_StartTimer:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0020                     ??_send_nibble:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0020                     ??_EUSART_Write:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0020                     ??_ADC_StartConversion:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0020                     ??_turn_egs:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0020                     ?___bmul:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0020                     ?___wmul:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0020                     ?___lwdiv:	
  1988                           ; 2 bytes @ 0x0
  1989                           
  1990  0020                     ?___ftpack:	
  1991                           ; 2 bytes @ 0x0
  1992                           
  1993  0020                     ?___fttol:	
  1994                           ; 3 bytes @ 0x0
  1995                           
  1996  0020                     ___bmul@multiplicand:	
  1997                           ; 4 bytes @ 0x0
  1998                           
  1999  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0020                     ___wmul@multiplier:	
  2003                           ; 2 bytes @ 0x0
  2004                           
  2005  0020                     ___lwdiv@divisor:	
  2006                           ; 2 bytes @ 0x0
  2007                           
  2008  0020                     ___ftpack@arg:	
  2009                           ; 2 bytes @ 0x0
  2010                           
  2011  0020                     ___fttol@f1:	
  2012                           ; 3 bytes @ 0x0
  2013                           
  2014                           
  2015                           ; 3 bytes @ 0x0
  2016  0020                     	ds	1
  2017  0021                     ??___bmul:	
  2018  0021                     EUSART_Write@txData:	
  2019                           ; 1 bytes @ 0x1
  2020                           
  2021  0021                     send_nibble@nibble:	
  2022                           ; 1 bytes @ 0x1
  2023                           
  2024                           
  2025                           ; 1 bytes @ 0x1
  2026  0021                     	ds	1
  2027  0022                     ??_TMR1_Initialize:	
  2028  0022                     ??_TMR1_SetInterruptHandler:	
  2029                           ; 1 bytes @ 0x2
  2030                           
  2031  0022                     ??_send_command_byte:	
  2032                           ; 1 bytes @ 0x2
  2033                           
  2034  0022                     ??_SYSTEM_Initialize:	
  2035                           ; 1 bytes @ 0x2
  2036                           
  2037  0022                     ?_putch:	
  2038                           ; 1 bytes @ 0x2
  2039                           
  2040  0022                     ??_init_lcd:	
  2041                           ; 1 bytes @ 0x2
  2042                           
  2043  0022                     ??_send_data_byte:	
  2044                           ; 1 bytes @ 0x2
  2045                           
  2046  0022                     putch@txData:	
  2047                           ; 1 bytes @ 0x2
  2048                           
  2049  0022                     ___bmul@product:	
  2050                           ; 1 bytes @ 0x2
  2051                           
  2052  0022                     ___wmul@multiplicand:	
  2053                           ; 1 bytes @ 0x2
  2054                           
  2055  0022                     ___lwdiv@dividend:	
  2056                           ; 2 bytes @ 0x2
  2057                           
  2058                           
  2059                           ; 2 bytes @ 0x2
  2060  0022                     	ds	1
  2061  0023                     ??_putch:	
  2062  0023                     send_command_byte@byte:	
  2063                           ; 1 bytes @ 0x3
  2064                           
  2065  0023                     send_data_byte@byte:	
  2066                           ; 1 bytes @ 0x3
  2067                           
  2068  0023                     ___bmul@multiplier:	
  2069                           ; 1 bytes @ 0x3
  2070                           
  2071  0023                     ___ftpack@exp:	
  2072                           ; 1 bytes @ 0x3
  2073                           
  2074                           
  2075                           ; 1 bytes @ 0x3
  2076  0023                     	ds	1
  2077  0024                     ??_comand_lcd:	
  2078  0024                     ??___wmul:	
  2079                           ; 1 bytes @ 0x4
  2080                           
  2081  0024                     ??___fttol:	
  2082                           ; 1 bytes @ 0x4
  2083                           
  2084  0024                     ??___lwdiv:	
  2085                           ; 1 bytes @ 0x4
  2086                           
  2087  0024                     ___ftpack@sign:	
  2088                           ; 1 bytes @ 0x4
  2089                           
  2090  0024                     ___wmul@product:	
  2091                           ; 1 bytes @ 0x4
  2092                           
  2093                           
  2094                           ; 2 bytes @ 0x4
  2095  0024                     	ds	1
  2096  0025                     ??___ftpack:	
  2097  0025                     ___lwdiv@quotient:	
  2098                           ; 1 bytes @ 0x5
  2099                           
  2100                           
  2101                           ; 2 bytes @ 0x5
  2102  0025                     	ds	2
  2103  0027                     ___lwdiv@counter:	
  2104                           
  2105                           ; 1 bytes @ 0x7
  2106  0027                     	ds	1
  2107  0028                     ?___lwmod:	
  2108  0028                     ?___awtoft:	
  2109                           ; 2 bytes @ 0x8
  2110                           
  2111  0028                     ?___lwtoft:	
  2112                           ; 3 bytes @ 0x8
  2113                           
  2114  0028                     ___fttol@sign1:	
  2115                           ; 3 bytes @ 0x8
  2116                           
  2117  0028                     ___awtoft@c:	
  2118                           ; 1 bytes @ 0x8
  2119                           
  2120  0028                     ___lwmod@divisor:	
  2121                           ; 2 bytes @ 0x8
  2122                           
  2123  0028                     ___lwtoft@c:	
  2124                           ; 2 bytes @ 0x8
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0x8
  2128  0028                     	ds	1
  2129  0029                     ___fttol@lval:	
  2130                           
  2131                           ; 4 bytes @ 0x9
  2132  0029                     	ds	1
  2133  002A                     ___lwmod@dividend:	
  2134                           
  2135                           ; 2 bytes @ 0xA
  2136  002A                     	ds	1
  2137  002B                     ??___awtoft:	
  2138  002B                     ??___lwtoft:	
  2139                           ; 1 bytes @ 0xB
  2140                           
  2141                           
  2142                           ; 1 bytes @ 0xB
  2143  002B                     	ds	1
  2144  002C                     ??___lwmod:	
  2145                           
  2146                           ; 1 bytes @ 0xC
  2147  002C                     	ds	1
  2148  002D                     ___awtoft@sign:	
  2149  002D                     ___fttol@exp1:	
  2150                           ; 1 bytes @ 0xD
  2151                           
  2152  002D                     ___lwmod@counter:	
  2153                           ; 1 bytes @ 0xD
  2154                           
  2155                           
  2156                           ; 1 bytes @ 0xD
  2157  002D                     	ds	1
  2158  002E                     ?___ftge:	
  2159  002E                     ?__doprnt:	
  2160                           ; 1 bit 
  2161                           
  2162  002E                     ?___ftmul:	
  2163                           ; 2 bytes @ 0xE
  2164                           
  2165  002E                     __doprnt@f:	
  2166                           ; 3 bytes @ 0xE
  2167                           
  2168  002E                     ___ftge@ff1:	
  2169                           ; 2 bytes @ 0xE
  2170                           
  2171  002E                     ___ftmul@f1:	
  2172                           ; 3 bytes @ 0xE
  2173                           
  2174                           
  2175                           ; 3 bytes @ 0xE
  2176  002E                     	ds	2
  2177  0030                     __doprnt@ap:	
  2178                           
  2179                           ; 1 bytes @ 0x10
  2180  0030                     	ds	1
  2181  0031                     ??__doprnt:	
  2182  0031                     ___ftge@ff2:	
  2183                           ; 1 bytes @ 0x11
  2184                           
  2185  0031                     ___ftmul@f2:	
  2186                           ; 3 bytes @ 0x11
  2187                           
  2188                           
  2189                           ; 3 bytes @ 0x11
  2190  0031                     	ds	3
  2191  0034                     ??___ftge:	
  2192  0034                     ??___ftmul:	
  2193                           ; 1 bytes @ 0x14
  2194                           
  2195                           
  2196                           ; 1 bytes @ 0x14
  2197  0034                     	ds	1
  2198  0035                     __doprnt@flag:	
  2199                           
  2200                           ; 1 bytes @ 0x15
  2201  0035                     	ds	1
  2202  0036                     __doprnt@prec:	
  2203                           
  2204                           ; 1 bytes @ 0x16
  2205  0036                     	ds	1
  2206  0037                     __doprnt@val:	
  2207                           
  2208                           ; 2 bytes @ 0x17
  2209  0037                     	ds	1
  2210  0038                     ___ftmul@exp:	
  2211                           
  2212                           ; 1 bytes @ 0x18
  2213  0038                     	ds	1
  2214  0039                     __doprnt@c:	
  2215  0039                     ___ftmul@f3_as_product:	
  2216                           ; 1 bytes @ 0x19
  2217                           
  2218                           
  2219                           ; 3 bytes @ 0x19
  2220  0039                     	ds	1
  2221  003A                     __doprnt@pb:	
  2222                           
  2223                           ; 1 bytes @ 0x1A
  2224  003A                     	ds	1
  2225  003B                     ?_printf:	
  2226  003B                     ?_sprintf:	
  2227                           ; 2 bytes @ 0x1B
  2228                           
  2229  003B                     printf@f:	
  2230                           ; 2 bytes @ 0x1B
  2231                           
  2232  003B                     sprintf@f:	
  2233                           ; 2 bytes @ 0x1B
  2234                           
  2235                           
  2236                           ; 2 bytes @ 0x1B
  2237  003B                     	ds	1
  2238  003C                     ___ftmul@cntr:	
  2239                           
  2240                           ; 1 bytes @ 0x1C
  2241  003C                     	ds	1
  2242  003D                     ??_printf:	
  2243  003D                     ___ftmul@sign:	
  2244                           ; 1 bytes @ 0x1D
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0x1D
  2248  003D                     	ds	1
  2249  003E                     ?___ftdiv:	
  2250  003E                     ?___ftneg:	
  2251                           ; 3 bytes @ 0x1E
  2252                           
  2253  003E                     printf@ap:	
  2254                           ; 3 bytes @ 0x1E
  2255                           
  2256  003E                     ___ftdiv@f2:	
  2257                           ; 1 bytes @ 0x1E
  2258                           
  2259  003E                     ___ftneg@f1:	
  2260                           ; 3 bytes @ 0x1E
  2261                           
  2262                           
  2263                           ; 3 bytes @ 0x1E
  2264  003E                     	ds	1
  2265  003F                     ??_sprintf:	
  2266  003F                     printf@pb:	
  2267                           ; 1 bytes @ 0x1F
  2268                           
  2269                           
  2270                           ; 3 bytes @ 0x1F
  2271  003F                     	ds	1
  2272  0040                     sprintf@wh:	
  2273                           
  2274                           ; 1 bytes @ 0x20
  2275  0040                     	ds	1
  2276  0041                     ??___ftneg:	
  2277  0041                     ?___ftadd:	
  2278                           ; 1 bytes @ 0x21
  2279                           
  2280  0041                     sprintf@ap:	
  2281                           ; 3 bytes @ 0x21
  2282                           
  2283  0041                     ___ftadd@f1:	
  2284                           ; 1 bytes @ 0x21
  2285                           
  2286  0041                     ___ftdiv@f1:	
  2287                           ; 3 bytes @ 0x21
  2288                           
  2289                           
  2290                           ; 3 bytes @ 0x21
  2291  0041                     	ds	1
  2292  0042                     ??_int_gsm:	
  2293  0042                     sprintf@pb:	
  2294                           ; 1 bytes @ 0x22
  2295                           
  2296                           
  2297                           ; 3 bytes @ 0x22
  2298  0042                     	ds	2
  2299  0044                     ??___ftdiv:	
  2300  0044                     ___ftadd@f2:	
  2301                           ; 1 bytes @ 0x24
  2302                           
  2303                           
  2304                           ; 3 bytes @ 0x24
  2305  0044                     	ds	3
  2306  0047                     ??___ftadd:	
  2307                           
  2308                           ; 1 bytes @ 0x27
  2309  0047                     	ds	1
  2310  0048                     ___ftdiv@cntr:	
  2311                           
  2312                           ; 1 bytes @ 0x28
  2313  0048                     	ds	1
  2314  0049                     ___ftdiv@f3:	
  2315                           
  2316                           ; 3 bytes @ 0x29
  2317  0049                     	ds	2
  2318  004B                     ___ftadd@sign:	
  2319                           
  2320                           ; 1 bytes @ 0x2B
  2321  004B                     	ds	1
  2322  004C                     ___ftadd@exp2:	
  2323  004C                     ___ftdiv@exp:	
  2324                           ; 1 bytes @ 0x2C
  2325                           
  2326                           
  2327                           ; 1 bytes @ 0x2C
  2328  004C                     	ds	1
  2329  004D                     ___ftadd@exp1:	
  2330  004D                     ___ftdiv@sign:	
  2331                           ; 1 bytes @ 0x2D
  2332                           
  2333                           
  2334                           ; 1 bytes @ 0x2D
  2335  004D                     	ds	1
  2336  004E                     ?_comparare:	
  2337  004E                     comparare@resistor_value:	
  2338                           ; 2 bytes @ 0x2E
  2339                           
  2340                           
  2341                           ; 2 bytes @ 0x2E
  2342  004E                     	ds	2
  2343  0050                     ??_comparare:	
  2344                           
  2345                           ; 1 bytes @ 0x30
  2346  0050                     	ds	2
  2347  0052                     comparare@dif:	
  2348                           
  2349                           ; 3 bytes @ 0x32
  2350  0052                     	ds	3
  2351  0055                     comparare@step:	
  2352                           
  2353                           ; 3 bytes @ 0x35
  2354  0055                     	ds	3
  2355  0058                     comparare@result:	
  2356                           
  2357                           ; 2 bytes @ 0x38
  2358  0058                     	ds	2
  2359  005A                     comparare@j:	
  2360                           
  2361                           ; 2 bytes @ 0x3A
  2362  005A                     	ds	2
  2363  005C                     comparare@j_738:	
  2364                           
  2365                           ; 2 bytes @ 0x3C
  2366  005C                     	ds	2
  2367  005E                     ??_main:	
  2368                           
  2369                           ; 1 bytes @ 0x3E
  2370  005E                     	ds	1
  2371  005F                     main@x:	
  2372                           
  2373                           ; 1 bytes @ 0x3F
  2374  005F                     	ds	1
  2375  0060                     main@volt:	
  2376                           
  2377                           ; 3 bytes @ 0x40
  2378  0060                     	ds	3
  2379  0063                     main@temp:	
  2380                           
  2381                           ; 2 bytes @ 0x43
  2382  0063                     	ds	2
  2383  0065                     main@n:	
  2384                           
  2385                           ; 2 bytes @ 0x45
  2386  0065                     	ds	2
  2387  0067                     main@n_763:	
  2388                           
  2389                           ; 2 bytes @ 0x47
  2390  0067                     	ds	2
  2391                           
  2392                           	psect	maintext
  2393  043B                     __pmaintext:	
  2394 ;;
  2395 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2396 ;;
  2397 ;; *************** function _main *****************
  2398 ;; Defined at:
  2399 ;;		line 365 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  n               2   71[BANK0 ] int 
  2404 ;;  n               2   69[BANK0 ] int 
  2405 ;;  volt            3   64[BANK0 ] float 
  2406 ;;  temp            2   67[BANK0 ] int 
  2407 ;;  x               1   63[BANK0 ] unsigned char 
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2412 ;; Tracked objects:
  2413 ;;		On entry : B1F/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2417 ;;      Params:         0       0       0       0       0       0       0       0
  2418 ;;      Locals:         0      10       0       0       0       0       0       0
  2419 ;;      Temps:          0       1       0       0       0       0       0       0
  2420 ;;      Totals:         0      11       0       0       0       0       0       0
  2421 ;;Total ram usage:       11 bytes
  2422 ;; Hardware stack levels required when called:    9
  2423 ;; This function calls:
  2424 ;;		_ADC_StartConversion
  2425 ;;		_SYSTEM_Initialize
  2426 ;;		___ftdiv
  2427 ;;		___ftmul
  2428 ;;		___fttol
  2429 ;;		___lwtoft
  2430 ;;		_comand_lcd
  2431 ;;		_comparare
  2432 ;;		_init_lcd
  2433 ;;		_int_gsm
  2434 ;;		_send_command_byte
  2435 ;;		_send_data_byte
  2436 ;;		_sprintf
  2437 ;;		_turn_egs
  2438 ;; This function is called by:
  2439 ;;		Startup code after reset
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _main
  2445  043B                     _main:	
  2446                           
  2447                           ;main.c: 367: char x=0;
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2451  043B  0020               	movlb	0	; select bank0
  2452  043C  01DF               	clrf	main@x
  2453                           
  2454                           ;main.c: 370: SYSTEM_Initialize();
  2455  043D  318C  241A  3184   	fcall	_SYSTEM_Initialize
  2456                           
  2457                           ;main.c: 371: ADC_StartConversion();
  2458  0440  318B  23D7  3184   	fcall	_ADC_StartConversion
  2459                           
  2460                           ;main.c: 372: TRISCbits.TRISC0=0;
  2461  0443  0021               	movlb	1	; select bank1
  2462  0444  100E               	bcf	14,0	;volatile
  2463                           
  2464                           ;main.c: 373: TRISCbits.TRISC3=0;
  2465  0445  118E               	bcf	14,3	;volatile
  2466                           
  2467                           ;main.c: 374: TRISCbits.TRISC4=0;
  2468  0446  120E               	bcf	14,4	;volatile
  2469                           
  2470                           ;main.c: 375: TRISCbits.TRISC5=0;
  2471  0447  128E               	bcf	14,5	;volatile
  2472                           
  2473                           ;main.c: 376: TRISB = 0b00000000;
  2474  0448  018D               	clrf	13	;volatile
  2475                           
  2476                           ;main.c: 377: TRISD = 0x00;
  2477  0449  018F               	clrf	15	;volatile
  2478                           
  2479                           ;main.c: 378: ANSELD=ANSELD & 0b11100000;
  2480  044A  0023               	movlb	3	; select bank3
  2481  044B  080F               	movf	15,w	;volatile
  2482  044C  39E0               	andlw	224
  2483  044D  008F               	movwf	15	;volatile
  2484                           
  2485                           ;main.c: 383: (INTCONbits.GIE = 1);
  2486  044E  178B               	bsf	11,7	;volatile
  2487                           
  2488                           ;main.c: 386: (INTCONbits.PEIE = 1);
  2489  044F  170B               	bsf	11,6	;volatile
  2490                           
  2491                           ;main.c: 394: init_lcd();
  2492  0450  318E  2634  3184   	fcall	_init_lcd
  2493                           
  2494                           ;main.c: 395: comand_lcd();
  2495  0453  318C  243E  3184   	fcall	_comand_lcd
  2496                           
  2497                           ;main.c: 396: flag_directie=1;
  2498  0456  3001               	movlw	1
  2499  0457  0022               	movlb	2	; select bank2
  2500  0458  00CA               	movwf	_flag_directie^(0+256)
  2501  0459  3000               	movlw	0
  2502  045A  00CB               	movwf	(_flag_directie^(0+256)+1)
  2503  045B                     l4374:	
  2504                           ;main.c: 398: float volt;
  2505                           ;main.c: 399: int temp;
  2506                           ;main.c: 400: while (1)
  2507                           
  2508                           
  2509                           ;main.c: 401: {
  2510                           ;main.c: 404: if (flag_500_ms==1)
  2511  045B  0022               	movlb	2	; select bank2
  2512  045C  0358               	decf	_flag_500_ms^(0+256),w
  2513  045D  0459               	iorwf	(_flag_500_ms+1)^(0+256),w
  2514  045E  1D03               	btfss	3,2
  2515  045F  2CAC               	goto	l4382
  2516                           
  2517                           ;main.c: 405: {
  2518                           ;main.c: 407: volt=(rez_conversie*4.7461)/1.533;
  2519  0460  3039               	movlw	57
  2520  0461  0020               	movlb	0	; select bank0
  2521  0462  00BE               	movwf	___ftdiv@f2
  2522  0463  30C4               	movlw	196
  2523  0464  00BF               	movwf	___ftdiv@f2+1
  2524  0465  303F               	movlw	63
  2525  0466  00C0               	movwf	___ftdiv@f2+2
  2526  0467  30E0               	movlw	224
  2527  0468  00AE               	movwf	___ftmul@f1
  2528  0469  3097               	movlw	151
  2529  046A  00AF               	movwf	___ftmul@f1+1
  2530  046B  3040               	movlw	64
  2531  046C  00B0               	movwf	___ftmul@f1+2
  2532  046D  0022               	movlb	2	; select bank2
  2533  046E  0865               	movf	(_rez_conversie+1)^(0+256),w
  2534  046F  0020               	movlb	0	; select bank0
  2535  0470  00A9               	movwf	___lwtoft@c+1
  2536  0471  0022               	movlb	2	; select bank2
  2537  0472  0864               	movf	_rez_conversie^(0+256),w
  2538  0473  0020               	movlb	0	; select bank0
  2539  0474  00A8               	movwf	___lwtoft@c
  2540  0475  318C  2452  3184   	fcall	___lwtoft
  2541  0478  0020               	movlb	0	; select bank0
  2542  0479  0828               	movf	?___lwtoft,w
  2543  047A  00B1               	movwf	___ftmul@f2
  2544  047B  0829               	movf	?___lwtoft+1,w
  2545  047C  00B2               	movwf	___ftmul@f2+1
  2546  047D  082A               	movf	?___lwtoft+2,w
  2547  047E  00B3               	movwf	___ftmul@f2+2
  2548  047F  3185  25D3  3184   	fcall	___ftmul
  2549  0482  0020               	movlb	0	; select bank0
  2550  0483  082E               	movf	?___ftmul,w
  2551  0484  00C1               	movwf	___ftdiv@f1
  2552  0485  082F               	movf	?___ftmul+1,w
  2553  0486  00C2               	movwf	___ftdiv@f1+1
  2554  0487  0830               	movf	?___ftmul+2,w
  2555  0488  00C3               	movwf	___ftdiv@f1+2
  2556  0489  3186  2687  3184   	fcall	___ftdiv
  2557  048C  0020               	movlb	0	; select bank0
  2558  048D  083E               	movf	?___ftdiv,w
  2559  048E  00E0               	movwf	main@volt
  2560  048F  083F               	movf	?___ftdiv+1,w
  2561  0490  00E1               	movwf	main@volt+1
  2562  0491  0840               	movf	?___ftdiv+2,w
  2563  0492  00E2               	movwf	main@volt+2
  2564                           
  2565                           ;main.c: 408: temp=comparare(volt);
  2566  0493  0860               	movf	main@volt,w
  2567  0494  00A0               	movwf	___fttol@f1
  2568  0495  0861               	movf	main@volt+1,w
  2569  0496  00A1               	movwf	___fttol@f1+1
  2570  0497  0862               	movf	main@volt+2,w
  2571  0498  00A2               	movwf	___fttol@f1+2
  2572  0499  3187  2730  3184   	fcall	___fttol
  2573  049C  0020               	movlb	0	; select bank0
  2574  049D  0821               	movf	?___fttol+1,w
  2575  049E  00CF               	movwf	comparare@resistor_value+1
  2576  049F  0820               	movf	?___fttol,w
  2577  04A0  00CE               	movwf	comparare@resistor_value
  2578  04A1  3180  207B  3184   	fcall	_comparare
  2579  04A4  0020               	movlb	0	; select bank0
  2580  04A5  084F               	movf	?_comparare+1,w
  2581  04A6  00E4               	movwf	main@temp+1
  2582  04A7  084E               	movf	?_comparare,w
  2583  04A8  00E3               	movwf	main@temp
  2584                           
  2585                           ;main.c: 409: flag_500_ms=0;
  2586  04A9  0022               	movlb	2	; select bank2
  2587  04AA  01D8               	clrf	_flag_500_ms^(0+256)
  2588  04AB  01D9               	clrf	(_flag_500_ms+1)^(0+256)
  2589  04AC                     l4382:	
  2590                           
  2591                           ;main.c: 410: }
  2592                           ;main.c: 414: int_gsm();
  2593  04AC  3187  27B7  3184   	fcall	_int_gsm
  2594                           
  2595                           ;main.c: 415: send_command_byte(0x80);
  2596  04AF  3080               	movlw	128
  2597  04B0  318D  2539  3184   	fcall	_send_command_byte
  2598                           
  2599                           ;main.c: 416: _delay((unsigned long)((10)*(18432000/4000.0)));
  2600  04B3  303C               	movlw	60
  2601  04B4  0020               	movlb	0	; select bank0
  2602  04B5  00DE               	movwf	??_main
  2603  04B6  30D7               	movlw	215
  2604  04B7                     u5377:	
  2605  04B7  0B89               	decfsz	9,f
  2606  04B8  2CB7               	goto	u5377
  2607  04B9  0BDE               	decfsz	??_main,f
  2608  04BA  2CB7               	goto	u5377
  2609                           
  2610                           ;main.c: 418: for (int n=0 ; line2[n]!=0 ; n++) send_data_byte(line2[n]);
  2611  04BB  0020               	movlb	0	; select bank0
  2612  04BC  01E5               	clrf	main@n
  2613  04BD  01E6               	clrf	main@n+1
  2614  04BE                     l4394:	
  2615  04BE  0865               	movf	main@n,w
  2616  04BF  3ECA               	addlw	(low (_line2| (0+256)))& (0+255)
  2617  04C0  0086               	movwf	6
  2618  04C1  3001               	movlw	1	; select bank3/4
  2619  04C2  0087               	movwf	7
  2620  04C3  0801               	movf	1,w
  2621  04C4  1903               	btfsc	3,2
  2622  04C5  2CD5               	goto	l4396
  2623  04C6  0865               	movf	main@n,w
  2624  04C7  3ECA               	addlw	(low (_line2| (0+256)))& (0+255)
  2625  04C8  0086               	movwf	6
  2626  04C9  3001               	movlw	1	; select bank3/4
  2627  04CA  0087               	movwf	7
  2628  04CB  0801               	movf	1,w
  2629  04CC  318C  2467  3184   	fcall	_send_data_byte
  2630  04CF  3001               	movlw	1
  2631  04D0  0020               	movlb	0	; select bank0
  2632  04D1  07E5               	addwf	main@n,f
  2633  04D2  3000               	movlw	0
  2634  04D3  3DE6               	addwfc	main@n+1,f
  2635  04D4  2CBE               	goto	l4394
  2636  04D5                     l4396:	
  2637                           
  2638                           ;main.c: 419: send_command_byte(0xC0);
  2639  04D5  30C0               	movlw	192
  2640  04D6  318D  2539  3184   	fcall	_send_command_byte
  2641                           
  2642                           ;main.c: 420: _delay((unsigned long)((10)*(18432000/4000.0)));
  2643  04D9  303C               	movlw	60
  2644  04DA  0020               	movlb	0	; select bank0
  2645  04DB  00DE               	movwf	??_main
  2646  04DC  30D7               	movlw	215
  2647  04DD                     u5387:	
  2648  04DD  0B89               	decfsz	9,f
  2649  04DE  2CDD               	goto	u5387
  2650  04DF  0BDE               	decfsz	??_main,f
  2651  04E0  2CDD               	goto	u5387
  2652                           
  2653                           ;main.c: 421: sprintf(line1," Temper=%d      ", temp);
  2654  04E1  3027               	movlw	low (STR_9| (0+32768))
  2655  04E2  0020               	movlb	0	; select bank0
  2656  04E3  00BB               	movwf	sprintf@f
  2657  04E4  3090               	movlw	high (STR_9| (0+32768))
  2658  04E5  00BC               	movwf	sprintf@f+1
  2659  04E6  0864               	movf	main@temp+1,w
  2660  04E7  00BE               	movwf	?_sprintf+3
  2661  04E8  0863               	movf	main@temp,w
  2662  04E9  00BD               	movwf	?_sprintf+2
  2663  04EA  30D3               	movlw	(low (_line1| (0+256)))& (0+255)
  2664  04EB  318D  2557  3184   	fcall	_sprintf
  2665                           
  2666                           ;main.c: 422: for (int n=0 ; line1[n]!=0; n++) send_data_byte(line1[n]);
  2667  04EE  0020               	movlb	0	; select bank0
  2668  04EF  01E7               	clrf	main@n_763
  2669  04F0  01E8               	clrf	main@n_763+1
  2670  04F1                     l4408:	
  2671  04F1  0867               	movf	main@n_763,w
  2672  04F2  3ED3               	addlw	(low (_line1| (0+256)))& (0+255)
  2673  04F3  0086               	movwf	6
  2674  04F4  3001               	movlw	1	; select bank3/4
  2675  04F5  0087               	movwf	7
  2676  04F6  0801               	movf	1,w
  2677  04F7  1903               	btfsc	3,2
  2678  04F8  2D08               	goto	l4410
  2679  04F9  0867               	movf	main@n_763,w
  2680  04FA  3ED3               	addlw	(low (_line1| (0+256)))& (0+255)
  2681  04FB  0086               	movwf	6
  2682  04FC  3001               	movlw	1	; select bank3/4
  2683  04FD  0087               	movwf	7
  2684  04FE  0801               	movf	1,w
  2685  04FF  318C  2467  3184   	fcall	_send_data_byte
  2686  0502  3001               	movlw	1
  2687  0503  0020               	movlb	0	; select bank0
  2688  0504  07E7               	addwf	main@n_763,f
  2689  0505  3000               	movlw	0
  2690  0506  3DE8               	addwfc	main@n_763+1,f
  2691  0507  2CF1               	goto	l4408
  2692  0508                     l4410:	
  2693                           
  2694                           ;main.c: 423: _delay((unsigned long)((10)*(18432000/4000.0)));
  2695  0508  303C               	movlw	60
  2696  0509  0020               	movlb	0	; select bank0
  2697  050A  00DE               	movwf	??_main
  2698  050B  30D7               	movlw	215
  2699  050C                     u5397:	
  2700  050C  0B89               	decfsz	9,f
  2701  050D  2D0C               	goto	u5397
  2702  050E  0BDE               	decfsz	??_main,f
  2703  050F  2D0C               	goto	u5397
  2704                           
  2705                           ;main.c: 426: if (flag_G==1)
  2706  0510  0022               	movlb	2	; select bank2
  2707  0511  0360               	decf	_flag_G^(0+256),w
  2708  0512  0461               	iorwf	(_flag_G+1)^(0+256),w
  2709  0513  1D03               	btfss	3,2
  2710  0514  2C5B               	goto	l4374
  2711                           
  2712                           ;main.c: 427: {
  2713                           ;main.c: 428: if (flag_N==1)
  2714  0515  0362               	decf	_flag_N^(0+256),w
  2715  0516  0463               	iorwf	(_flag_N+1)^(0+256),w
  2716  0517  1D03               	btfss	3,2
  2717  0518  2C5B               	goto	l4374
  2718                           
  2719                           ;main.c: 429: {
  2720                           ;main.c: 431: turn_egs();
  2721  0519  3185  251D  3184   	fcall	_turn_egs
  2722  051C  2C5B               	goto	l4374
  2723  051D                     __end_of_main:	
  2724                           
  2725                           	psect	text1
  2726  051D                     __ptext1:	
  2727 ;; *************** function _turn_egs *****************
  2728 ;; Defined at:
  2729 ;;		line 141 in file "main.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2743 ;;      Params:         0       0       0       0       0       0       0       0
  2744 ;;      Locals:         0       0       0       0       0       0       0       0
  2745 ;;      Temps:          0       1       0       0       0       0       0       0
  2746 ;;      Totals:         0       1       0       0       0       0       0       0
  2747 ;;Total ram usage:        1 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    4
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function _turn_egs
  2759  051D                     _turn_egs:	
  2760                           
  2761                           ;main.c: 143: static unsigned char step_index;
  2762                           ;main.c: 144: static unsigned int step_nr=1;
  2763                           ;main.c: 151: if((step_nr<300)&&(flag_500_ms==1))
  2764                           
  2765                           ;incstack = 0
  2766                           ; Regs used in _turn_egs: [wreg+status,2+status,0]
  2767  051D  3001               	movlw	1
  2768  051E  0022               	movlb	2	; select bank2
  2769  051F  026A               	subwf	(turn_egs@step_nr+1)^(0+256),w
  2770  0520  302C               	movlw	44
  2771  0521  1903               	skipnz
  2772  0522  0269               	subwf	turn_egs@step_nr^(0+256),w
  2773  0523  1803               	skipnc
  2774  0524  2DB5               	goto	l2870
  2775  0525  0358               	decf	_flag_500_ms^(0+256),w
  2776  0526  0459               	iorwf	(_flag_500_ms+1)^(0+256),w
  2777  0527  1D03               	btfss	3,2
  2778  0528  2DB5               	goto	l2870
  2779                           
  2780                           ;main.c: 152: {
  2781                           ;main.c: 153: if(flag_directie==1)
  2782  0529  034A               	decf	_flag_directie^(0+256),w
  2783  052A  044B               	iorwf	(_flag_directie+1)^(0+256),w
  2784  052B  1D03               	btfss	3,2
  2785  052C  2D6F               	goto	l2814
  2786                           
  2787                           ;main.c: 154: {
  2788                           ;main.c: 155: step_nr++;
  2789  052D  3001               	movlw	1
  2790  052E  07E9               	addwf	turn_egs@step_nr^(0+256),f
  2791  052F  3000               	movlw	0
  2792  0530  3DEA               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  2793                           
  2794                           ;main.c: 156: if(step_index==0)
  2795  0531  087A               	movf	turn_egs@step_index,w
  2796  0532  1D03               	btfss	3,2
  2797  0533  2D3D               	goto	l2774
  2798                           
  2799                           ;main.c: 157: {
  2800                           ;main.c: 158: step_index++;
  2801  0534  3001               	movlw	1
  2802  0535  0020               	movlb	0	; select bank0
  2803  0536  00A0               	movwf	??_turn_egs
  2804  0537  0820               	movf	??_turn_egs,w
  2805  0538  07FA               	addwf	turn_egs@step_index,f
  2806                           
  2807                           ;main.c: 159: LATCbits.LATC0=1;
  2808  0539  0022               	movlb	2	; select bank2
  2809  053A  140E               	bsf	14,0	;volatile
  2810                           
  2811                           ;main.c: 160: LATCbits.LATC3=0;
  2812  053B  118E               	bcf	14,3	;volatile
  2813  053C  2D48               	goto	L1
  2814  053D                     l2774:	
  2815                           ;main.c: 163: }
  2816                           
  2817                           ;main.c: 162: LATCbits.LATC5=0;
  2818                           
  2819                           ;main.c: 161: LATCbits.LATC4=0;
  2820                           
  2821                           
  2822                           ;main.c: 164: else if(step_index==1)
  2823  053D  037A               	decf	turn_egs@step_index,w
  2824  053E  1D03               	btfss	3,2
  2825  053F  2D4A               	goto	l2786
  2826                           
  2827                           ;main.c: 165: {
  2828                           ;main.c: 166: step_index++;
  2829  0540  3001               	movlw	1
  2830  0541  0020               	movlb	0	; select bank0
  2831  0542  00A0               	movwf	??_turn_egs
  2832  0543  0820               	movf	??_turn_egs,w
  2833  0544  07FA               	addwf	turn_egs@step_index,f
  2834                           
  2835                           ;main.c: 167: LATCbits.LATC0=0;
  2836  0545  0022               	movlb	2	; select bank2
  2837  0546  100E               	bcf	14,0	;volatile
  2838                           
  2839                           ;main.c: 168: LATCbits.LATC3=1;
  2840  0547  158E               	bsf	14,3	;volatile
  2841  0548                     L1:	
  2842                           
  2843                           ;main.c: 169: LATCbits.LATC4=0;
  2844  0548  120E               	bcf	14,4	;volatile
  2845  0549  2D57               	goto	l2796
  2846  054A                     l2786:	
  2847                           ;main.c: 171: }
  2848                           
  2849                           ;main.c: 170: LATCbits.LATC5=0;
  2850                           
  2851                           
  2852                           ;main.c: 172: else if(step_index==2)
  2853  054A  3002               	movlw	2
  2854  054B  067A               	xorwf	turn_egs@step_index,w
  2855  054C  1D03               	btfss	3,2
  2856  054D  2D59               	goto	l2798
  2857                           
  2858                           ;main.c: 173: {
  2859                           ;main.c: 174: step_index++;
  2860  054E  3001               	movlw	1
  2861  054F  0020               	movlb	0	; select bank0
  2862  0550  00A0               	movwf	??_turn_egs
  2863  0551  0820               	movf	??_turn_egs,w
  2864  0552  07FA               	addwf	turn_egs@step_index,f
  2865                           
  2866                           ;main.c: 175: LATCbits.LATC0=0;
  2867  0553  0022               	movlb	2	; select bank2
  2868  0554  100E               	bcf	14,0	;volatile
  2869                           
  2870                           ;main.c: 176: LATCbits.LATC3=0;
  2871  0555  118E               	bcf	14,3	;volatile
  2872                           
  2873                           ;main.c: 177: LATCbits.LATC4=1;
  2874  0556  160E               	bsf	14,4	;volatile
  2875  0557                     l2796:	
  2876                           
  2877                           ;main.c: 178: LATCbits.LATC5=0;
  2878  0557  128E               	bcf	14,5	;volatile
  2879                           
  2880                           ;main.c: 179: }
  2881  0558  2D6C               	goto	l390
  2882  0559                     l2798:	
  2883                           
  2884                           ;main.c: 180: else if(step_index==3)
  2885  0559  3003               	movlw	3
  2886  055A  067A               	xorwf	turn_egs@step_index,w
  2887  055B  1D03               	btfss	3,2
  2888  055C  2D68               	goto	l2810
  2889                           
  2890                           ;main.c: 181: {
  2891                           ;main.c: 182: step_index++;
  2892  055D  3001               	movlw	1
  2893  055E  0020               	movlb	0	; select bank0
  2894  055F  00A0               	movwf	??_turn_egs
  2895  0560  0820               	movf	??_turn_egs,w
  2896  0561  07FA               	addwf	turn_egs@step_index,f
  2897                           
  2898                           ;main.c: 183: LATCbits.LATC0=0;
  2899  0562  0022               	movlb	2	; select bank2
  2900  0563  100E               	bcf	14,0	;volatile
  2901                           
  2902                           ;main.c: 184: LATCbits.LATC3=0;
  2903  0564  118E               	bcf	14,3	;volatile
  2904                           
  2905                           ;main.c: 185: LATCbits.LATC4=0;
  2906  0565  120E               	bcf	14,4	;volatile
  2907                           
  2908                           ;main.c: 186: LATCbits.LATC5=1;
  2909  0566  168E               	bsf	14,5	;volatile
  2910                           
  2911                           ;main.c: 187: }
  2912  0567  2D6C               	goto	l390
  2913  0568                     l2810:	
  2914                           
  2915                           ;main.c: 188: else if(step_index==4)
  2916  0568  3004               	movlw	4
  2917  0569  067A               	xorwf	turn_egs@step_index,w
  2918  056A  1903               	btfsc	3,2
  2919                           
  2920                           ;main.c: 189: {
  2921                           ;main.c: 190: step_index=0;
  2922  056B  01FA               	clrf	turn_egs@step_index
  2923  056C                     l390:	
  2924                           
  2925                           ;main.c: 191: }
  2926                           ;main.c: 193: flag_500_ms=0;
  2927  056C  01D8               	clrf	_flag_500_ms^(0+256)
  2928  056D  01D9               	clrf	(_flag_500_ms+1)^(0+256)
  2929                           
  2930                           ;main.c: 194: }
  2931  056E  0008               	return
  2932  056F                     l2814:	
  2933                           
  2934                           ;main.c: 195: else if(flag_directie==0)
  2935  056F  084A               	movf	_flag_directie^(0+256),w
  2936  0570  044B               	iorwf	(_flag_directie+1)^(0+256),w
  2937  0571  1D03               	btfss	3,2
  2938  0572  0008               	return
  2939                           
  2940                           ;main.c: 196: {
  2941                           ;main.c: 197: step_nr++;
  2942  0573  3001               	movlw	1
  2943  0574  07E9               	addwf	turn_egs@step_nr^(0+256),f
  2944  0575  3000               	movlw	0
  2945  0576  3DEA               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  2946                           
  2947                           ;main.c: 198: if(step_index==0)
  2948  0577  087A               	movf	turn_egs@step_index,w
  2949  0578  1D03               	btfss	3,2
  2950  0579  2D83               	goto	l2830
  2951                           
  2952                           ;main.c: 199: {
  2953                           ;main.c: 200: step_index++;
  2954  057A  3001               	movlw	1
  2955  057B  0020               	movlb	0	; select bank0
  2956  057C  00A0               	movwf	??_turn_egs
  2957  057D  0820               	movf	??_turn_egs,w
  2958  057E  07FA               	addwf	turn_egs@step_index,f
  2959                           
  2960                           ;main.c: 201: LATCbits.LATC5=1;
  2961  057F  0022               	movlb	2	; select bank2
  2962  0580  168E               	bsf	14,5	;volatile
  2963                           
  2964                           ;main.c: 202: LATCbits.LATC4=0;
  2965  0581  120E               	bcf	14,4	;volatile
  2966  0582  2D8E               	goto	L2
  2967  0583                     l2830:	
  2968                           ;main.c: 205: }
  2969                           
  2970                           ;main.c: 204: LATCbits.LATC0=0;
  2971                           
  2972                           ;main.c: 203: LATCbits.LATC3=0;
  2973                           
  2974                           
  2975                           ;main.c: 206: else if(step_index==1)
  2976  0583  037A               	decf	turn_egs@step_index,w
  2977  0584  1D03               	btfss	3,2
  2978  0585  2D90               	goto	l2842
  2979                           
  2980                           ;main.c: 207: {
  2981                           ;main.c: 208: step_index++;
  2982  0586  3001               	movlw	1
  2983  0587  0020               	movlb	0	; select bank0
  2984  0588  00A0               	movwf	??_turn_egs
  2985  0589  0820               	movf	??_turn_egs,w
  2986  058A  07FA               	addwf	turn_egs@step_index,f
  2987                           
  2988                           ;main.c: 209: LATCbits.LATC5=0;
  2989  058B  0022               	movlb	2	; select bank2
  2990  058C  128E               	bcf	14,5	;volatile
  2991                           
  2992                           ;main.c: 210: LATCbits.LATC4=1;
  2993  058D  160E               	bsf	14,4	;volatile
  2994  058E                     L2:	
  2995                           
  2996                           ;main.c: 211: LATCbits.LATC3=0;
  2997  058E  118E               	bcf	14,3	;volatile
  2998  058F  2D9D               	goto	l2852
  2999  0590                     l2842:	
  3000                           ;main.c: 213: }
  3001                           
  3002                           ;main.c: 212: LATCbits.LATC0=0;
  3003                           
  3004                           
  3005                           ;main.c: 214: else if(step_index==2)
  3006  0590  3002               	movlw	2
  3007  0591  067A               	xorwf	turn_egs@step_index,w
  3008  0592  1D03               	btfss	3,2
  3009  0593  2D9F               	goto	l2854
  3010                           
  3011                           ;main.c: 215: {
  3012                           ;main.c: 216: step_index++;
  3013  0594  3001               	movlw	1
  3014  0595  0020               	movlb	0	; select bank0
  3015  0596  00A0               	movwf	??_turn_egs
  3016  0597  0820               	movf	??_turn_egs,w
  3017  0598  07FA               	addwf	turn_egs@step_index,f
  3018                           
  3019                           ;main.c: 217: LATCbits.LATC5=0;
  3020  0599  0022               	movlb	2	; select bank2
  3021  059A  128E               	bcf	14,5	;volatile
  3022                           
  3023                           ;main.c: 218: LATCbits.LATC4=0;
  3024  059B  120E               	bcf	14,4	;volatile
  3025                           
  3026                           ;main.c: 219: LATCbits.LATC3=1;
  3027  059C  158E               	bsf	14,3	;volatile
  3028  059D                     l2852:	
  3029                           
  3030                           ;main.c: 220: LATCbits.LATC0=0;
  3031  059D  100E               	bcf	14,0	;volatile
  3032                           
  3033                           ;main.c: 221: }
  3034  059E  2DB2               	goto	l401
  3035  059F                     l2854:	
  3036                           
  3037                           ;main.c: 222: else if(step_index==3)
  3038  059F  3003               	movlw	3
  3039  05A0  067A               	xorwf	turn_egs@step_index,w
  3040  05A1  1D03               	btfss	3,2
  3041  05A2  2DAE               	goto	l2866
  3042                           
  3043                           ;main.c: 223: {
  3044                           ;main.c: 224: step_index++;
  3045  05A3  3001               	movlw	1
  3046  05A4  0020               	movlb	0	; select bank0
  3047  05A5  00A0               	movwf	??_turn_egs
  3048  05A6  0820               	movf	??_turn_egs,w
  3049  05A7  07FA               	addwf	turn_egs@step_index,f
  3050                           
  3051                           ;main.c: 225: LATCbits.LATC5=0;
  3052  05A8  0022               	movlb	2	; select bank2
  3053  05A9  128E               	bcf	14,5	;volatile
  3054                           
  3055                           ;main.c: 226: LATCbits.LATC4=0;
  3056  05AA  120E               	bcf	14,4	;volatile
  3057                           
  3058                           ;main.c: 227: LATCbits.LATC3=0;
  3059  05AB  118E               	bcf	14,3	;volatile
  3060                           
  3061                           ;main.c: 228: LATCbits.LATC0=1;
  3062  05AC  140E               	bsf	14,0	;volatile
  3063                           
  3064                           ;main.c: 229: }
  3065  05AD  2DB2               	goto	l401
  3066  05AE                     l2866:	
  3067                           
  3068                           ;main.c: 230: else if(step_index==4)
  3069  05AE  3004               	movlw	4
  3070  05AF  067A               	xorwf	turn_egs@step_index,w
  3071  05B0  1903               	btfsc	3,2
  3072                           
  3073                           ;main.c: 231: {
  3074                           ;main.c: 232: step_index=0;
  3075  05B1  01FA               	clrf	turn_egs@step_index
  3076  05B2                     l401:	
  3077                           
  3078                           ;main.c: 233: }
  3079                           ;main.c: 235: flag_500_ms=0;
  3080  05B2  01D8               	clrf	_flag_500_ms^(0+256)
  3081  05B3  01D9               	clrf	(_flag_500_ms+1)^(0+256)
  3082                           
  3083                           ;main.c: 236: }
  3084                           ;main.c: 237: }
  3085  05B4  0008               	return
  3086  05B5                     l2870:	
  3087                           
  3088                           ;main.c: 238: else if(step_nr==300)
  3089  05B5  302C               	movlw	44
  3090  05B6  0669               	xorwf	turn_egs@step_nr^(0+256),w
  3091  05B7  1D03               	skipz
  3092  05B8  0008               	return
  3093  05B9  036A               	decf	(turn_egs@step_nr+1)^(0+256),w
  3094  05BA  1D03               	btfss	3,2
  3095  05BB  0008               	return
  3096                           
  3097                           ;main.c: 239: {
  3098                           ;main.c: 240: flag_N=0;
  3099  05BC  01E2               	clrf	_flag_N^(0+256)
  3100  05BD  01E3               	clrf	(_flag_N+1)^(0+256)
  3101                           
  3102                           ;main.c: 241: flag_G=0;
  3103  05BE  01E0               	clrf	_flag_G^(0+256)
  3104  05BF  01E1               	clrf	(_flag_G+1)^(0+256)
  3105                           
  3106                           ;main.c: 242: step_nr=0;
  3107  05C0  01E9               	clrf	turn_egs@step_nr^(0+256)
  3108  05C1  01EA               	clrf	(turn_egs@step_nr+1)^(0+256)
  3109                           
  3110                           ;main.c: 243: if(flag_directie==1)
  3111  05C2  034A               	decf	_flag_directie^(0+256),w
  3112  05C3  044B               	iorwf	(_flag_directie+1)^(0+256),w
  3113  05C4  1D03               	btfss	3,2
  3114  05C5  2DC9               	goto	l2878
  3115                           
  3116                           ;main.c: 244: {
  3117                           ;main.c: 245: flag_directie=0;
  3118  05C6  01CA               	clrf	_flag_directie^(0+256)
  3119  05C7  01CB               	clrf	(_flag_directie+1)^(0+256)
  3120                           
  3121                           ;main.c: 246: }
  3122  05C8  2DD1               	goto	l2882
  3123  05C9                     l2878:	
  3124                           
  3125                           ;main.c: 247: else if(flag_directie==0)
  3126  05C9  084A               	movf	_flag_directie^(0+256),w
  3127  05CA  044B               	iorwf	(_flag_directie+1)^(0+256),w
  3128  05CB  1D03               	btfss	3,2
  3129  05CC  2DD1               	goto	l2882
  3130                           
  3131                           ;main.c: 248: {
  3132                           ;main.c: 249: flag_directie=1;
  3133  05CD  3001               	movlw	1
  3134  05CE  00CA               	movwf	_flag_directie^(0+256)
  3135  05CF  3000               	movlw	0
  3136  05D0  00CB               	movwf	(_flag_directie^(0+256)+1)
  3137  05D1                     l2882:	
  3138                           
  3139                           ;main.c: 250: }
  3140                           ;main.c: 251: step_index=0;
  3141  05D1  01FA               	clrf	turn_egs@step_index
  3142  05D2  0008               	return
  3143  05D3                     __end_of_turn_egs:	
  3144                           
  3145                           	psect	text2
  3146  0D57                     __ptext2:	
  3147 ;; *************** function _sprintf *****************
  3148 ;; Defined at:
  3149 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprintf.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  wh              1    wreg     PTR unsigned char 
  3152 ;;		 -> line1(8), 
  3153 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3154 ;;		 -> STR_9(17), 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  wh              1   32[BANK0 ] PTR unsigned char 
  3157 ;;		 -> line1(8), 
  3158 ;;  pb              3   34[BANK0 ] struct __prbuf
  3159 ;;  ap              1   33[BANK0 ] PTR void [1]
  3160 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2   27[BANK0 ] int 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3170 ;;      Params:         0       4       0       0       0       0       0       0
  3171 ;;      Locals:         0       5       0       0       0       0       0       0
  3172 ;;      Temps:          0       1       0       0       0       0       0       0
  3173 ;;      Totals:         0      10       0       0       0       0       0       0
  3174 ;;Total ram usage:       10 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    7
  3177 ;; This function calls:
  3178 ;;		__doprnt
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _sprintf
  3186  0D57                     _sprintf:	
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3190                           ;sprintf@wh stored from wreg
  3191  0D57  0020               	movlb	0	; select bank0
  3192  0D58  00C0               	movwf	sprintf@wh
  3193  0D59  0840               	movf	sprintf@wh,w
  3194  0D5A  00BF               	movwf	??_sprintf
  3195  0D5B  083F               	movf	??_sprintf,w
  3196  0D5C  00C2               	movwf	sprintf@pb
  3197  0D5D  01C3               	clrf	low ((sprintf@pb| 0+1))
  3198  0D5E  01C4               	clrf	(low ((sprintf@pb| 0+1))+1)
  3199  0D5F  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3200  0D60  00BF               	movwf	??_sprintf
  3201  0D61  083F               	movf	??_sprintf,w
  3202  0D62  00C1               	movwf	sprintf@ap
  3203  0D63  083C               	movf	sprintf@f+1,w
  3204  0D64  00AF               	movwf	__doprnt@f+1
  3205  0D65  083B               	movf	sprintf@f,w
  3206  0D66  00AE               	movwf	__doprnt@f
  3207  0D67  3041               	movlw	(low (sprintf@ap| 0))& (0+255)
  3208  0D68  00BF               	movwf	??_sprintf
  3209  0D69  083F               	movf	??_sprintf,w
  3210  0D6A  00B0               	movwf	__doprnt@ap
  3211  0D6B  3042               	movlw	(low (sprintf@pb| 0))& (0+255)
  3212  0D6C  3182  2225         	fcall	__doprnt
  3213  0D6E  0020               	movlb	0	; select bank0
  3214  0D6F  0842               	movf	sprintf@pb,w
  3215  0D70  0086               	movwf	6
  3216  0D71  3001               	movlw	1	; select bank2/3
  3217  0D72  0087               	movwf	7
  3218  0D73  0181               	clrf	1
  3219  0D74  0008               	return
  3220  0D75                     __end_of_sprintf:	
  3221                           ;	Return value of _sprintf is never used
  3222                           
  3223                           
  3224                           	psect	text3
  3225  0C67                     __ptext3:	
  3226 ;; *************** function _send_data_byte *****************
  3227 ;; Defined at:
  3228 ;;		line 135 in file "main.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  byte            1    wreg     unsigned char 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  byte            1    3[BANK0 ] unsigned char 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3242 ;;      Params:         0       0       0       0       0       0       0       0
  3243 ;;      Locals:         0       1       0       0       0       0       0       0
  3244 ;;      Temps:          0       1       0       0       0       0       0       0
  3245 ;;      Totals:         0       2       0       0       0       0       0       0
  3246 ;;Total ram usage:        2 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    5
  3249 ;; This function calls:
  3250 ;;		_send_nibble
  3251 ;; This function is called by:
  3252 ;;		_main
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           
  3257                           ;psect for function _send_data_byte
  3258  0C67                     _send_data_byte:	
  3259                           
  3260                           ;incstack = 0
  3261                           ; Regs used in _send_data_byte: [wreg+status,2+status,0+pclath+cstack]
  3262                           ;send_data_byte@byte stored from wreg
  3263  0C67  0020               	movlb	0	; select bank0
  3264  0C68  00A3               	movwf	send_data_byte@byte
  3265                           
  3266                           ;main.c: 137: LATDbits.LATD3 = 1;
  3267  0C69  0022               	movlb	2	; select bank2
  3268  0C6A  158F               	bsf	15,3	;volatile
  3269                           
  3270                           ;main.c: 138: send_nibble(byte >> 4);
  3271  0C6B  0020               	movlb	0	; select bank0
  3272  0C6C  0823               	movf	send_data_byte@byte,w
  3273  0C6D  00A2               	movwf	??_send_data_byte
  3274  0C6E  3004               	movlw	4
  3275  0C6F                     u2895:	
  3276  0C6F  36A2               	lsrf	??_send_data_byte,f
  3277  0C70  0B89               	decfsz	9,f
  3278  0C71  2C6F               	goto	u2895
  3279  0C72  0822               	movf	??_send_data_byte,w
  3280  0C73  318D  25BA  318C   	fcall	_send_nibble
  3281                           
  3282                           ;main.c: 139: send_nibble(byte & 0xF);
  3283  0C76  0020               	movlb	0	; select bank0
  3284  0C77  0823               	movf	send_data_byte@byte,w
  3285  0C78  390F               	andlw	15
  3286  0C79  318D  25BA         	fcall	_send_nibble
  3287  0C7B  0008               	return
  3288  0C7C                     __end_of_send_data_byte:	
  3289                           
  3290                           	psect	text4
  3291  07B7                     __ptext4:	
  3292 ;; *************** function _int_gsm *****************
  3293 ;; Defined at:
  3294 ;;		line 291 in file "main.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3308 ;;      Params:         0       0       0       0       0       0       0       0
  3309 ;;      Locals:         0       0       0       0       0       0       0       0
  3310 ;;      Temps:          0       1       0       0       0       0       0       0
  3311 ;;      Totals:         0       1       0       0       0       0       0       0
  3312 ;;Total ram usage:        1 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    8
  3315 ;; This function calls:
  3316 ;;		_printf
  3317 ;;		_putch
  3318 ;; This function is called by:
  3319 ;;		_main
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           
  3324                           ;psect for function _int_gsm
  3325  07B7                     _int_gsm:	
  3326                           
  3327                           ;main.c: 293: static int sms1_index;
  3328                           ;main.c: 294: if (flag_4000_ms==1)
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _int_gsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3332  07B7  0021               	movlb	1	; select bank1
  3333  07B8  036D               	decf	_flag_4000_ms^(0+128),w
  3334  07B9  046E               	iorwf	(_flag_4000_ms+1)^(0+128),w
  3335  07BA  1D03               	btfss	3,2
  3336  07BB  0008               	return
  3337                           
  3338                           ;main.c: 295: {
  3339                           ;main.c: 296: if (sms1_index==0)
  3340  07BC  0020               	movlb	0	; select bank0
  3341  07BD  0869               	movf	int_gsm@sms1_index,w
  3342  07BE  046A               	iorwf	int_gsm@sms1_index+1,w
  3343  07BF  1D03               	btfss	3,2
  3344  07C0  2FC5               	goto	l4240
  3345                           
  3346                           ;main.c: 297: {
  3347                           ;main.c: 298: printf("AT");
  3348  07C1  3075               	movlw	low (STR_4| (0+32768))
  3349  07C2  00BB               	movwf	printf@f
  3350  07C3  3090               	movlw	high (STR_4| (0+32768))
  3351  07C4  2FE7               	goto	L3
  3352  07C5                     l4240:	
  3353                           ;main.c: 301: }
  3354                           
  3355                           ;main.c: 300: sms1_index++;
  3356                           
  3357                           ;main.c: 299: putch(0x0d);
  3358                           
  3359                           
  3360                           ;main.c: 302: else if (sms1_index==1)
  3361  07C5  0369               	decf	int_gsm@sms1_index,w
  3362  07C6  046A               	iorwf	int_gsm@sms1_index+1,w
  3363  07C7  1D03               	btfss	3,2
  3364  07C8  2FCD               	goto	l4248
  3365                           
  3366                           ;main.c: 303: {
  3367                           ;main.c: 304: printf("AT+CPIN=\"1234\"");
  3368  07C9  3038               	movlw	low (STR_5| (0+32768))
  3369  07CA  00BB               	movwf	printf@f
  3370  07CB  3090               	movlw	high (STR_5| (0+32768))
  3371  07CC  2FE7               	goto	L3
  3372  07CD                     l4248:	
  3373                           ;main.c: 307: }
  3374                           
  3375                           ;main.c: 306: sms1_index++;
  3376                           
  3377                           ;main.c: 305: putch(0x0d);
  3378                           
  3379                           
  3380                           ;main.c: 308: else if (sms1_index==2)
  3381  07CD  3002               	movlw	2
  3382  07CE  0669               	xorwf	int_gsm@sms1_index,w
  3383  07CF  046A               	iorwf	int_gsm@sms1_index+1,w
  3384  07D0  1D03               	btfss	3,2
  3385  07D1  2FD6               	goto	l4256
  3386                           
  3387                           ;main.c: 309: {
  3388                           ;main.c: 310: printf("AT+CMGF=1");
  3389  07D2  306B               	movlw	low (STR_6| (0+32768))
  3390  07D3  00BB               	movwf	printf@f
  3391  07D4  3090               	movlw	high (STR_6| (0+32768))
  3392  07D5  2FE7               	goto	L3
  3393  07D6                     l4256:	
  3394                           ;main.c: 313: }
  3395                           
  3396                           ;main.c: 312: sms1_index++;
  3397                           
  3398                           ;main.c: 311: putch(0x0d);
  3399                           
  3400                           
  3401                           ;main.c: 314: else if (sms1_index==3)
  3402  07D6  3003               	movlw	3
  3403  07D7  0669               	xorwf	int_gsm@sms1_index,w
  3404  07D8  046A               	iorwf	int_gsm@sms1_index+1,w
  3405  07D9  1D03               	btfss	3,2
  3406  07DA  2FDF               	goto	l4264
  3407                           
  3408                           ;main.c: 315: {
  3409                           ;main.c: 316: printf("AT+CNMI=1,2,0,0,0");
  3410  07DB  3015               	movlw	low (STR_7| (0+32768))
  3411  07DC  00BB               	movwf	printf@f
  3412  07DD  3090               	movlw	high (STR_7| (0+32768))
  3413  07DE  2FE7               	goto	L3
  3414  07DF                     l4264:	
  3415                           ;main.c: 319: }
  3416                           
  3417                           ;main.c: 318: sms1_index++;
  3418                           
  3419                           ;main.c: 317: putch(0x0d);
  3420                           
  3421                           
  3422                           ;main.c: 320: else if (sms1_index==4)
  3423  07DF  3004               	movlw	4
  3424  07E0  0669               	xorwf	int_gsm@sms1_index,w
  3425  07E1  046A               	iorwf	int_gsm@sms1_index+1,w
  3426  07E2  1D03               	btfss	3,2
  3427  07E3  2FF7               	goto	l4272
  3428                           
  3429                           ;main.c: 321: {
  3430                           ;main.c: 322: printf("AT+CSCS=\"GSM\"");
  3431  07E4  3047               	movlw	low (STR_1| (0+32768))
  3432  07E5  00BB               	movwf	printf@f
  3433  07E6  3090               	movlw	high (STR_1| (0+32768))
  3434  07E7                     L3:	
  3435  07E7  00BC               	movwf	printf@f+1
  3436  07E8  318C  247C  3187   	fcall	_printf
  3437                           
  3438                           ;main.c: 323: putch(0x0d);
  3439  07EB  300D               	movlw	13
  3440  07EC  0020               	movlb	0	; select bank0
  3441  07ED  00C2               	movwf	??_int_gsm
  3442  07EE  0842               	movf	??_int_gsm,w
  3443  07EF  00A2               	movwf	putch@txData
  3444  07F0  3187  27FB         	fcall	_putch
  3445                           
  3446                           ;main.c: 324: sms1_index++;
  3447  07F2  3001               	movlw	1
  3448  07F3  0020               	movlb	0	; select bank0
  3449  07F4  07E9               	addwf	int_gsm@sms1_index,f
  3450  07F5  3000               	movlw	0
  3451  07F6  3DEA               	addwfc	int_gsm@sms1_index+1,f
  3452  07F7                     l4272:	
  3453                           
  3454                           ;main.c: 325: }
  3455                           ;main.c: 326: flag_4000_ms=0;
  3456  07F7  0021               	movlb	1	; select bank1
  3457  07F8  01ED               	clrf	_flag_4000_ms^(0+128)
  3458  07F9  01EE               	clrf	(_flag_4000_ms+1)^(0+128)
  3459  07FA  0008               	return
  3460  07FB                     __end_of_int_gsm:	
  3461                           
  3462                           	psect	text5
  3463  0C7C                     __ptext5:	
  3464 ;; *************** function _printf *****************
  3465 ;; Defined at:
  3466 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\printf.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3469 ;;		 -> STR_8(14), STR_7(18), STR_6(10), STR_5(15), 
  3470 ;;		 -> STR_4(3), STR_3(12), STR_2(21), STR_1(14), 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  pb              3   31[BANK0 ] struct __prbuf
  3473 ;;  ap              1   30[BANK0 ] PTR void [1]
  3474 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  2   27[BANK0 ] int 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3484 ;;      Params:         0       2       0       0       0       0       0       0
  3485 ;;      Locals:         0       4       0       0       0       0       0       0
  3486 ;;      Temps:          0       1       0       0       0       0       0       0
  3487 ;;      Totals:         0       7       0       0       0       0       0       0
  3488 ;;Total ram usage:        7 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    7
  3491 ;; This function calls:
  3492 ;;		__doprnt
  3493 ;; This function is called by:
  3494 ;;		_int_gsm
  3495 ;;		_sms_text
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _printf
  3501  0C7C                     _printf:	
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3505  0C7C  0020               	movlb	0	; select bank0
  3506  0C7D  01BF               	clrf	printf@pb
  3507  0C7E  30FB               	movlw	low _putch
  3508  0C7F  00C0               	movwf	low ((printf@pb| 0+1))
  3509  0C80  3007               	movlw	high _putch
  3510  0C81  00C1               	movwf	(low ((printf@pb| 0+1))+1)
  3511  0C82  303D               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3512  0C83  00BD               	movwf	??_printf
  3513  0C84  083D               	movf	??_printf,w
  3514  0C85  00BE               	movwf	printf@ap
  3515                           
  3516                           ;	Return value of _printf is never used
  3517  0C86  083C               	movf	printf@f+1,w
  3518  0C87  00AF               	movwf	__doprnt@f+1
  3519  0C88  083B               	movf	printf@f,w
  3520  0C89  00AE               	movwf	__doprnt@f
  3521  0C8A  303E               	movlw	(low (printf@ap| 0))& (0+255)
  3522  0C8B  00BD               	movwf	??_printf
  3523  0C8C  083D               	movf	??_printf,w
  3524  0C8D  00B0               	movwf	__doprnt@ap
  3525  0C8E  303F               	movlw	(low (printf@pb| 0))& (0+255)
  3526  0C8F  3182  2225         	fcall	__doprnt
  3527  0C91  0008               	return
  3528  0C92                     __end_of_printf:	
  3529                           
  3530                           	psect	text6
  3531  0225                     __ptext6:	
  3532 ;; *************** function __doprnt *****************
  3533 ;; Defined at:
  3534 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  pb              1    wreg     PTR struct __prbuf
  3537 ;;		 -> sprintf@pb(3), printf@pb(3), 
  3538 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3539 ;;		 -> STR_9(17), STR_8(14), STR_7(18), STR_6(10), 
  3540 ;;		 -> STR_5(15), STR_4(3), STR_3(12), STR_2(21), 
  3541 ;;		 -> STR_1(14), 
  3542 ;;  ap              1   16[BANK0 ] PTR PTR void 
  3543 ;;		 -> sprintf@ap(1), printf@ap(1), 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  pb              1   26[BANK0 ] PTR struct __prbuf
  3546 ;;		 -> sprintf@pb(3), printf@pb(3), 
  3547 ;;  tmpval          4    0        struct .
  3548 ;;  val             2   23[BANK0 ] unsigned int 
  3549 ;;  cp              2    0        PTR const unsigned char 
  3550 ;;  len             2    0        unsigned int 
  3551 ;;  c               1   25[BANK0 ] char 
  3552 ;;  prec            1   22[BANK0 ] char 
  3553 ;;  flag            1   21[BANK0 ] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  2   14[BANK0 ] int 
  3556 ;; Registers used:
  3557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3563 ;;      Params:         0       3       0       0       0       0       0       0
  3564 ;;      Locals:         0       6       0       0       0       0       0       0
  3565 ;;      Temps:          0       4       0       0       0       0       0       0
  3566 ;;      Totals:         0      13       0       0       0       0       0       0
  3567 ;;Total ram usage:       13 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    6
  3570 ;; This function calls:
  3571 ;;		Absolute function
  3572 ;;		___lwdiv
  3573 ;;		___lwmod
  3574 ;;		_putch
  3575 ;; This function is called by:
  3576 ;;		_printf
  3577 ;;		_sprintf
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function __doprnt
  3583  0225                     __doprnt:	
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3587                           ;__doprnt@pb stored from wreg
  3588  0225  0020               	movlb	0	; select bank0
  3589  0226  00BA               	movwf	__doprnt@pb
  3590  0227                     l4170:	
  3591                           ;doprnt.c: 499: signed char c;
  3592                           ;doprnt.c: 506: signed char prec;
  3593                           ;doprnt.c: 508: unsigned char flag;
  3594                           ;doprnt.c: 523: union {
  3595                           ;doprnt.c: 524: unsigned long vd;
  3596                           ;doprnt.c: 525: double integ;
  3597                           ;doprnt.c: 526: } tmpval;
  3598                           ;doprnt.c: 528: unsigned int val;
  3599                           ;doprnt.c: 529: unsigned len;
  3600                           ;doprnt.c: 530: const char * cp;
  3601                           ;doprnt.c: 536: while(c = *f++) {
  3602                           
  3603  0227  0020               	movlb	0	; select bank0
  3604  0228  082F               	movf	__doprnt@f+1,w
  3605  0229  00B2               	movwf	??__doprnt+1
  3606  022A  082E               	movf	__doprnt@f,w
  3607  022B  00B1               	movwf	??__doprnt
  3608  022C  0AAE               	incf	__doprnt@f,f
  3609  022D  1903               	skipnz
  3610  022E  0AAF               	incf	__doprnt@f+1,f
  3611  022F  0831               	movf	??__doprnt,w
  3612  0230  0084               	movwf	4
  3613  0231  0832               	movf	??__doprnt+1,w
  3614  0232  0085               	movwf	5
  3615  0233  0800               	movf	0,w	;code access
  3616  0234  00B3               	movwf	??__doprnt+2
  3617  0235  0833               	movf	??__doprnt+2,w
  3618  0236  00B9               	movwf	__doprnt@c
  3619  0237  0839               	movf	__doprnt@c,w
  3620  0238  1903               	btfsc	3,2
  3621  0239  2B42               	goto	l4172
  3622                           
  3623                           ;doprnt.c: 538: if(c != '%')
  3624  023A  3025               	movlw	37
  3625  023B  0639               	xorwf	__doprnt@c,w
  3626  023C  1903               	btfsc	3,2
  3627  023D  2A66               	goto	l4120
  3628                           
  3629                           ;doprnt.c: 540: {
  3630                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3631  023E  0A3A               	incf	__doprnt@pb,w
  3632  023F  0086               	movwf	6
  3633  0240  0187               	clrf	7
  3634  0241  0016               	moviw fsr1++
  3635  0242  0401               	iorwf	1,w
  3636  0243  1903               	btfsc	3,2
  3637  0244  2A52               	goto	l4116
  3638  0245  0839               	movf	__doprnt@c,w
  3639  0246  00B1               	movwf	??__doprnt
  3640  0247  0831               	movf	??__doprnt,w
  3641  0248  00A2               	movwf	putch@txData
  3642  0249  0A3A               	incf	__doprnt@pb,w
  3643  024A  0086               	movwf	6
  3644  024B  0187               	clrf	7
  3645  024C  3F41               	moviw [1]fsr1
  3646  024D  008A               	movwf	10
  3647  024E  3F40               	moviw [0]fsr1
  3648  024F  000A               	callw
  3649  0250  3182               	pagesel	$
  3650  0251  2A27               	goto	l4170
  3651  0252                     l4116:	
  3652  0252  0020               	movlb	0	; select bank0
  3653  0253  0839               	movf	__doprnt@c,w
  3654  0254  00B1               	movwf	??__doprnt
  3655  0255  083A               	movf	__doprnt@pb,w
  3656  0256  0086               	movwf	6
  3657  0257  0187               	clrf	7
  3658  0258  0801               	movf	1,w
  3659  0259  0086               	movwf	6
  3660  025A  3001               	movlw	1	; select bank2/3
  3661  025B  0087               	movwf	7
  3662  025C  0831               	movf	??__doprnt,w
  3663  025D  0081               	movwf	1
  3664  025E  3001               	movlw	1
  3665  025F  00B1               	movwf	??__doprnt
  3666  0260  083A               	movf	__doprnt@pb,w
  3667  0261  0086               	movwf	6
  3668  0262  0187               	clrf	7
  3669  0263  0831               	movf	??__doprnt,w
  3670  0264  0781               	addwf	1,f
  3671                           
  3672                           ;doprnt.c: 542: continue;
  3673  0265  2A27               	goto	l4170
  3674  0266                     l4120:	
  3675                           
  3676                           ;doprnt.c: 543: }
  3677                           ;doprnt.c: 548: flag = 0;
  3678  0266  01B5               	clrf	__doprnt@flag
  3679                           
  3680                           ;doprnt.c: 822: }
  3681                           
  3682                           ;doprnt.c: 813: continue;
  3683                           
  3684                           ;doprnt.c: 802: default:
  3685                           
  3686                           ;doprnt.c: 698: case 'i':
  3687                           ;doprnt.c: 699: break;
  3688                           
  3689                           ;doprnt.c: 697: case 'd':
  3690                           
  3691                           ;doprnt.c: 638: goto alldone;
  3692                           
  3693                           ;doprnt.c: 637: case 0:
  3694                           
  3695                           ;doprnt.c: 635: switch(c = *f++) {
  3696  0267  082F               	movf	__doprnt@f+1,w
  3697  0268  00B2               	movwf	??__doprnt+1
  3698  0269  082E               	movf	__doprnt@f,w
  3699  026A  00B1               	movwf	??__doprnt
  3700  026B  0AAE               	incf	__doprnt@f,f
  3701  026C  1903               	skipnz
  3702  026D  0AAF               	incf	__doprnt@f+1,f
  3703  026E  0831               	movf	??__doprnt,w
  3704  026F  0084               	movwf	4
  3705  0270  0832               	movf	??__doprnt+1,w
  3706  0271  0085               	movwf	5
  3707  0272  0800               	movf	0,w	;code access
  3708  0273  00B9               	movwf	__doprnt@c
  3709                           
  3710                           ; Switch size 1, requested type "space"
  3711                           ; Number of cases is 3, Range of values is 0 to 105
  3712                           ; switch strategies available:
  3713                           ; Name         Instructions Cycles
  3714                           ; simple_byte           10     6 (average)
  3715                           ; direct_byte          218     6 (fixed)
  3716                           ; jumptable            260     6 (fixed)
  3717                           ;	Chosen strategy is simple_byte
  3718  0274  3A00               	xorlw	0	; case 0
  3719  0275  1903               	skipnz
  3720  0276  2B42               	goto	l4172
  3721  0277  3A64               	xorlw	100	; case 100
  3722  0278  1903               	skipnz
  3723  0279  2A7E               	goto	l4126
  3724  027A  3A0D               	xorlw	13	; case 105
  3725  027B  1903               	skipnz
  3726  027C  2A7E               	goto	l4126
  3727  027D  2A27               	goto	l4170
  3728  027E                     l4126:	
  3729                           
  3730                           ;doprnt.c: 1253: {
  3731                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3732  027E  0830               	movf	__doprnt@ap,w
  3733  027F  0086               	movwf	6
  3734  0280  0187               	clrf	7
  3735  0281  0801               	movf	1,w
  3736  0282  0084               	movwf	4
  3737  0283  0185               	clrf	5
  3738  0284  3002               	movlw	2
  3739  0285  0781               	addwf	1,f
  3740  0286  3F00               	moviw [0]fsr0
  3741  0287  00B7               	movwf	__doprnt@val
  3742  0288  3F01               	moviw [1]fsr0
  3743  0289  00B8               	movwf	__doprnt@val+1
  3744                           
  3745                           ;doprnt.c: 1261: if((int)val < 0) {
  3746  028A  1FB8               	btfss	__doprnt@val+1,7
  3747  028B  2A95               	goto	l4134
  3748                           
  3749                           ;doprnt.c: 1262: flag |= 0x03;
  3750  028C  3003               	movlw	3
  3751  028D  00B1               	movwf	??__doprnt
  3752  028E  0831               	movf	??__doprnt,w
  3753  028F  04B5               	iorwf	__doprnt@flag,f
  3754                           
  3755                           ;doprnt.c: 1263: val = -val;
  3756  0290  09B7               	comf	__doprnt@val,f
  3757  0291  09B8               	comf	__doprnt@val+1,f
  3758  0292  0AB7               	incf	__doprnt@val,f
  3759  0293  1903               	skipnz
  3760  0294  0AB8               	incf	__doprnt@val+1,f
  3761  0295                     l4134:	
  3762                           
  3763                           ;doprnt.c: 1264: }
  3764                           ;doprnt.c: 1266: }
  3765                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3766  0295  01B9               	clrf	__doprnt@c
  3767  0296  0AB9               	incf	__doprnt@c,f
  3768  0297  3005               	movlw	5
  3769  0298  0639               	xorwf	__doprnt@c,w
  3770  0299  1903               	btfsc	3,2
  3771  029A  2ABA               	goto	l4146
  3772  029B                     l4140:	
  3773                           
  3774                           ;doprnt.c: 1306: if(val < dpowers[c])
  3775  029B  0839               	movf	__doprnt@c,w
  3776  029C  00B1               	movwf	??__doprnt
  3777  029D  01B2               	clrf	??__doprnt+1
  3778  029E  35B1               	lslf	??__doprnt,f
  3779  029F  0DB2               	rlf	??__doprnt+1,f
  3780  02A0  3061               	movlw	low (_dpowers| (0+32768))
  3781  02A1  0731               	addwf	??__doprnt,w
  3782  02A2  0084               	movwf	4
  3783  02A3  3090               	movlw	high (_dpowers| (0+32768))
  3784  02A4  3D32               	addwfc	??__doprnt+1,w
  3785  02A5  0085               	movwf	5
  3786  02A6  3F00               	moviw [0]fsr0
  3787  02A7  00B3               	movwf	??__doprnt+2
  3788  02A8  3F01               	moviw [1]fsr0
  3789  02A9  00B4               	movwf	??__doprnt+3
  3790  02AA  0834               	movf	??__doprnt+3,w
  3791  02AB  0238               	subwf	__doprnt@val+1,w
  3792  02AC  1D03               	skipz
  3793  02AD  2AB0               	goto	u4965
  3794  02AE  0833               	movf	??__doprnt+2,w
  3795  02AF  0237               	subwf	__doprnt@val,w
  3796  02B0                     u4965:	
  3797  02B0  1C03               	btfss	3,0
  3798  02B1  2ABA               	goto	l4146
  3799                           
  3800                           ;doprnt.c: 1307: break;
  3801  02B2  3001               	movlw	1
  3802  02B3  00B1               	movwf	??__doprnt
  3803  02B4  0831               	movf	??__doprnt,w
  3804  02B5  07B9               	addwf	__doprnt@c,f
  3805  02B6  3005               	movlw	5
  3806  02B7  0639               	xorwf	__doprnt@c,w
  3807  02B8  1D03               	btfss	3,2
  3808  02B9  2A9B               	goto	l4140
  3809  02BA                     l4146:	
  3810                           
  3811                           ;doprnt.c: 1422: {
  3812                           ;doprnt.c: 1438: if(flag & 0x03)
  3813  02BA  0835               	movf	__doprnt@flag,w
  3814  02BB  3903               	andlw	3
  3815  02BC  1903               	btfsc	3,2
  3816  02BD  2AE5               	goto	l4156
  3817                           
  3818                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3819  02BE  0A3A               	incf	__doprnt@pb,w
  3820  02BF  0086               	movwf	6
  3821  02C0  0187               	clrf	7
  3822  02C1  0016               	moviw fsr1++
  3823  02C2  0401               	iorwf	1,w
  3824  02C3  1903               	btfsc	3,2
  3825  02C4  2AD2               	goto	l4152
  3826  02C5  302D               	movlw	45
  3827  02C6  00B1               	movwf	??__doprnt
  3828  02C7  0831               	movf	??__doprnt,w
  3829  02C8  00A2               	movwf	putch@txData
  3830  02C9  0A3A               	incf	__doprnt@pb,w
  3831  02CA  0086               	movwf	6
  3832  02CB  0187               	clrf	7
  3833  02CC  3F41               	moviw [1]fsr1
  3834  02CD  008A               	movwf	10
  3835  02CE  3F40               	moviw [0]fsr1
  3836  02CF  000A               	callw
  3837  02D0  3182               	pagesel	$
  3838  02D1  2AE5               	goto	l4156
  3839  02D2                     l4152:	
  3840  02D2  302D               	movlw	45
  3841  02D3  0020               	movlb	0	; select bank0
  3842  02D4  00B1               	movwf	??__doprnt
  3843  02D5  083A               	movf	__doprnt@pb,w
  3844  02D6  0086               	movwf	6
  3845  02D7  0187               	clrf	7
  3846  02D8  0801               	movf	1,w
  3847  02D9  0086               	movwf	6
  3848  02DA  3001               	movlw	1	; select bank2/3
  3849  02DB  0087               	movwf	7
  3850  02DC  0831               	movf	??__doprnt,w
  3851  02DD  0081               	movwf	1
  3852  02DE  3001               	movlw	1
  3853  02DF  00B1               	movwf	??__doprnt
  3854  02E0  083A               	movf	__doprnt@pb,w
  3855  02E1  0086               	movwf	6
  3856  02E2  0187               	clrf	7
  3857  02E3  0831               	movf	??__doprnt,w
  3858  02E4  0781               	addwf	1,f
  3859  02E5                     l4156:	
  3860                           
  3861                           ;doprnt.c: 1469: }
  3862                           ;doprnt.c: 1472: prec = c;
  3863  02E5  0020               	movlb	0	; select bank0
  3864  02E6  0839               	movf	__doprnt@c,w
  3865  02E7  00B1               	movwf	??__doprnt
  3866  02E8  0831               	movf	??__doprnt,w
  3867  02E9  00B6               	movwf	__doprnt@prec
  3868  02EA                     l4168:	
  3869                           ;doprnt.c: 1474: while(prec--) {
  3870                           
  3871  02EA  30FF               	movlw	255
  3872  02EB  0020               	movlb	0	; select bank0
  3873  02EC  00B1               	movwf	??__doprnt
  3874  02ED  0831               	movf	??__doprnt,w
  3875  02EE  07B6               	addwf	__doprnt@prec,f
  3876  02EF  0A36               	incf	__doprnt@prec,w
  3877  02F0  1903               	btfsc	3,2
  3878  02F1  2A27               	goto	l4170
  3879                           
  3880                           ;doprnt.c: 1478: {
  3881                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3882  02F2  300A               	movlw	10
  3883  02F3  00A8               	movwf	___lwmod@divisor
  3884  02F4  3000               	movlw	0
  3885  02F5  00A9               	movwf	___lwmod@divisor+1
  3886  02F6  0836               	movf	__doprnt@prec,w
  3887  02F7  00B1               	movwf	??__doprnt
  3888  02F8  01B2               	clrf	??__doprnt+1
  3889  02F9  35B1               	lslf	??__doprnt,f
  3890  02FA  0DB2               	rlf	??__doprnt+1,f
  3891  02FB  3061               	movlw	low (_dpowers| (0+32768))
  3892  02FC  0731               	addwf	??__doprnt,w
  3893  02FD  0084               	movwf	4
  3894  02FE  3090               	movlw	high (_dpowers| (0+32768))
  3895  02FF  3D32               	addwfc	??__doprnt+1,w
  3896  0300  0085               	movwf	5
  3897  0301  3F00               	moviw [0]fsr0
  3898  0302  00A0               	movwf	___lwdiv@divisor
  3899  0303  3F01               	moviw [1]fsr0
  3900  0304  00A1               	movwf	___lwdiv@divisor+1
  3901  0305  0838               	movf	__doprnt@val+1,w
  3902  0306  00A3               	movwf	___lwdiv@dividend+1
  3903  0307  0837               	movf	__doprnt@val,w
  3904  0308  00A2               	movwf	___lwdiv@dividend
  3905  0309  318E  2668  3182   	fcall	___lwdiv
  3906  030C  0020               	movlb	0	; select bank0
  3907  030D  0821               	movf	?___lwdiv+1,w
  3908  030E  00AB               	movwf	___lwmod@dividend+1
  3909  030F  0820               	movf	?___lwdiv,w
  3910  0310  00AA               	movwf	___lwmod@dividend
  3911  0311  318E  2607  3182   	fcall	___lwmod
  3912  0314  0020               	movlb	0	; select bank0
  3913  0315  0828               	movf	?___lwmod,w
  3914  0316  3E30               	addlw	48
  3915  0317  00B3               	movwf	??__doprnt+2
  3916  0318  0833               	movf	??__doprnt+2,w
  3917  0319  00B9               	movwf	__doprnt@c
  3918                           
  3919                           ;doprnt.c: 1523: }
  3920                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3921  031A  0A3A               	incf	__doprnt@pb,w
  3922  031B  0086               	movwf	6
  3923  031C  0187               	clrf	7
  3924  031D  0016               	moviw fsr1++
  3925  031E  0401               	iorwf	1,w
  3926  031F  1903               	btfsc	3,2
  3927  0320  2B2E               	goto	l4164
  3928  0321  0839               	movf	__doprnt@c,w
  3929  0322  00B1               	movwf	??__doprnt
  3930  0323  0831               	movf	??__doprnt,w
  3931  0324  00A2               	movwf	putch@txData
  3932  0325  0A3A               	incf	__doprnt@pb,w
  3933  0326  0086               	movwf	6
  3934  0327  0187               	clrf	7
  3935  0328  3F41               	moviw [1]fsr1
  3936  0329  008A               	movwf	10
  3937  032A  3F40               	moviw [0]fsr1
  3938  032B  000A               	callw
  3939  032C  3182               	pagesel	$
  3940  032D  2AEA               	goto	l4168
  3941  032E                     l4164:	
  3942  032E  0020               	movlb	0	; select bank0
  3943  032F  0839               	movf	__doprnt@c,w
  3944  0330  00B1               	movwf	??__doprnt
  3945  0331  083A               	movf	__doprnt@pb,w
  3946  0332  0086               	movwf	6
  3947  0333  0187               	clrf	7
  3948  0334  0801               	movf	1,w
  3949  0335  0086               	movwf	6
  3950  0336  3001               	movlw	1	; select bank2/3
  3951  0337  0087               	movwf	7
  3952  0338  0831               	movf	??__doprnt,w
  3953  0339  0081               	movwf	1
  3954  033A  3001               	movlw	1
  3955  033B  00B1               	movwf	??__doprnt
  3956  033C  083A               	movf	__doprnt@pb,w
  3957  033D  0086               	movwf	6
  3958  033E  0187               	clrf	7
  3959  033F  0831               	movf	??__doprnt,w
  3960  0340  0781               	addwf	1,f
  3961  0341  2AEA               	goto	l4168
  3962  0342                     l4172:	
  3963                           ;doprnt.c: 1525: }
  3964                           ;doprnt.c: 1533: }
  3965                           ;doprnt.c: 1535: alldone:
  3966                           
  3967                           
  3968                           ;doprnt.c: 1540: return 0;
  3969  0342  01AE               	clrf	?__doprnt
  3970  0343  01AF               	clrf	?__doprnt+1
  3971  0344  0008               	return
  3972  0345                     __end_of__doprnt:	
  3973                           
  3974                           	psect	text7
  3975  07FB                     __ptext7:	
  3976 ;; *************** function _putch *****************
  3977 ;; Defined at:
  3978 ;;		line 161 in file "mcc_generated_files/eusart.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  txData          1    2[BANK0 ] unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3992 ;;      Params:         0       1       0       0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0       0
  3995 ;;      Totals:         0       1       0       0       0       0       0       0
  3996 ;;Total ram usage:        1 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    5
  3999 ;; This function calls:
  4000 ;;		_EUSART_Write
  4001 ;; This function is called by:
  4002 ;;		_int_gsm
  4003 ;;		_printf
  4004 ;;		_sms_text
  4005 ;;		__doprnt
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _putch
  4011  07FB                     _putch:	
  4012                           
  4013                           ;eusart.c: 163: EUSART_Write(txData);
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4017  07FB  0020               	movlb	0	; select bank0
  4018  07FC  0822               	movf	putch@txData,w
  4019  07FD  318D  25E0         	fcall	_EUSART_Write
  4020  07FF  0008               	return
  4021  0800                     __end_of_putch:	
  4022                           
  4023                           	psect	text8
  4024  0DE0                     __ptext8:	
  4025 ;; *************** function _EUSART_Write *****************
  4026 ;; Defined at:
  4027 ;;		line 133 in file "mcc_generated_files/eusart.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  txData          1    wreg     unsigned char 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  txData          1    1[BANK0 ] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4041 ;;      Params:         0       0       0       0       0       0       0       0
  4042 ;;      Locals:         0       1       0       0       0       0       0       0
  4043 ;;      Temps:          0       1       0       0       0       0       0       0
  4044 ;;      Totals:         0       2       0       0       0       0       0       0
  4045 ;;Total ram usage:        2 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    4
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_putch
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _EUSART_Write
  4057  0DE0                     _EUSART_Write:	
  4058                           
  4059                           ;incstack = 0
  4060                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4061                           ;EUSART_Write@txData stored from wreg
  4062  0DE0  0020               	movlb	0	; select bank0
  4063  0DE1  00A1               	movwf	EUSART_Write@txData
  4064  0DE2                     l2114:	
  4065                           ;eusart.c: 136: {
  4066                           
  4067                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  4068                           
  4069  0DE2  0022               	movlb	2	; select bank2
  4070  0DE3  0868               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  4071  0DE4  1903               	btfsc	3,2
  4072  0DE5  2DE2               	goto	l2114
  4073                           
  4074                           ;eusart.c: 137: }
  4075                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  4076  0DE6  0021               	movlb	1	; select bank1
  4077  0DE7  1A11               	btfsc	17,4	;volatile
  4078  0DE8  2DEE               	goto	l129
  4079                           
  4080                           ;eusart.c: 140: {
  4081                           ;eusart.c: 141: TXREG = txData;
  4082  0DE9  0020               	movlb	0	; select bank0
  4083  0DEA  0821               	movf	EUSART_Write@txData,w
  4084  0DEB  0023               	movlb	3	; select bank3
  4085  0DEC  009A               	movwf	26	;volatile
  4086                           
  4087                           ;eusart.c: 142: }
  4088  0DED  2E04               	goto	l2128
  4089  0DEE                     l129:	
  4090                           
  4091                           ;eusart.c: 143: else
  4092                           ;eusart.c: 144: {
  4093                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  4094  0DEE  1211               	bcf	17,4	;volatile
  4095                           
  4096                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  4097  0DEF  0020               	movlb	0	; select bank0
  4098  0DF0  0821               	movf	EUSART_Write@txData,w
  4099  0DF1  00A0               	movwf	??_EUSART_Write
  4100  0DF2  087D               	movf	_eusartTxHead,w
  4101  0DF3  3EE3               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4102  0DF4  0086               	movwf	6
  4103  0DF5  3001               	movlw	1	; select bank3/4
  4104  0DF6  0087               	movwf	7
  4105  0DF7  0820               	movf	??_EUSART_Write,w
  4106  0DF8  0081               	movwf	1
  4107  0DF9  3001               	movlw	1
  4108  0DFA  00A0               	movwf	??_EUSART_Write
  4109  0DFB  0820               	movf	??_EUSART_Write,w
  4110  0DFC  07FD               	addwf	_eusartTxHead,f	;volatile
  4111                           
  4112                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4113  0DFD  3008               	movlw	8
  4114  0DFE  027D               	subwf	_eusartTxHead,w	;volatile
  4115  0DFF  1803               	btfsc	3,0
  4116                           
  4117                           ;eusart.c: 148: {
  4118                           ;eusart.c: 149: eusartTxHead = 0;
  4119  0E00  01FD               	clrf	_eusartTxHead	;volatile
  4120                           
  4121                           ;eusart.c: 150: }
  4122                           ;eusart.c: 151: eusartTxBufferRemaining--;
  4123  0E01  3001               	movlw	1
  4124  0E02  0022               	movlb	2	; select bank2
  4125  0E03  02E8               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  4126  0E04                     l2128:	
  4127                           
  4128                           ;eusart.c: 152: }
  4129                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  4130  0E04  0021               	movlb	1	; select bank1
  4131  0E05  1611               	bsf	17,4	;volatile
  4132  0E06  0008               	return
  4133  0E07                     __end_of_EUSART_Write:	
  4134                           
  4135                           	psect	text9
  4136  0E07                     __ptext9:	
  4137 ;; *************** function ___lwmod *****************
  4138 ;; Defined at:
  4139 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  divisor         2    8[BANK0 ] unsigned int 
  4142 ;;  dividend        2   10[BANK0 ] unsigned int 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  counter         1   13[BANK0 ] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2    8[BANK0 ] unsigned int 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4154 ;;      Params:         0       4       0       0       0       0       0       0
  4155 ;;      Locals:         0       1       0       0       0       0       0       0
  4156 ;;      Temps:          0       1       0       0       0       0       0       0
  4157 ;;      Totals:         0       6       0       0       0       0       0       0
  4158 ;;Total ram usage:        6 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    4
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		__doprnt
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function ___lwmod
  4170  0E07                     ___lwmod:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4174  0E07  0020               	movlb	0	; select bank0
  4175  0E08  0828               	movf	___lwmod@divisor,w
  4176  0E09  0429               	iorwf	___lwmod@divisor+1,w
  4177  0E0A  1903               	btfsc	3,2
  4178  0E0B  2E2F               	goto	l2176
  4179  0E0C  01AD               	clrf	___lwmod@counter
  4180  0E0D  0AAD               	incf	___lwmod@counter,f
  4181  0E0E                     l2166:	
  4182  0E0E  1BA9               	btfsc	___lwmod@divisor+1,7
  4183  0E0F  2E1A               	goto	l2168
  4184  0E10  3001               	movlw	1
  4185  0E11                     u1915:	
  4186  0E11  35A8               	lslf	___lwmod@divisor,f
  4187  0E12  0DA9               	rlf	___lwmod@divisor+1,f
  4188  0E13  0B89               	decfsz	9,f
  4189  0E14  2E11               	goto	u1915
  4190  0E15  3001               	movlw	1
  4191  0E16  00AC               	movwf	??___lwmod
  4192  0E17  082C               	movf	??___lwmod,w
  4193  0E18  07AD               	addwf	___lwmod@counter,f
  4194  0E19  2E0E               	goto	l2166
  4195  0E1A                     l2168:	
  4196  0E1A  0829               	movf	___lwmod@divisor+1,w
  4197  0E1B  022B               	subwf	___lwmod@dividend+1,w
  4198  0E1C  1D03               	skipz
  4199  0E1D  2E20               	goto	u1935
  4200  0E1E  0828               	movf	___lwmod@divisor,w
  4201  0E1F  022A               	subwf	___lwmod@dividend,w
  4202  0E20                     u1935:	
  4203  0E20  1C03               	skipc
  4204  0E21  2E26               	goto	l2172
  4205  0E22  0828               	movf	___lwmod@divisor,w
  4206  0E23  02AA               	subwf	___lwmod@dividend,f
  4207  0E24  0829               	movf	___lwmod@divisor+1,w
  4208  0E25  3BAB               	subwfb	___lwmod@dividend+1,f
  4209  0E26                     l2172:	
  4210  0E26  3001               	movlw	1
  4211  0E27                     u1945:	
  4212  0E27  36A9               	lsrf	___lwmod@divisor+1,f
  4213  0E28  0CA8               	rrf	___lwmod@divisor,f
  4214  0E29  0B89               	decfsz	9,f
  4215  0E2A  2E27               	goto	u1945
  4216  0E2B  3001               	movlw	1
  4217  0E2C  02AD               	subwf	___lwmod@counter,f
  4218  0E2D  1D03               	btfss	3,2
  4219  0E2E  2E1A               	goto	l2168
  4220  0E2F                     l2176:	
  4221  0E2F  082B               	movf	___lwmod@dividend+1,w
  4222  0E30  00A9               	movwf	?___lwmod+1
  4223  0E31  082A               	movf	___lwmod@dividend,w
  4224  0E32  00A8               	movwf	?___lwmod
  4225  0E33  0008               	return
  4226  0E34                     __end_of___lwmod:	
  4227                           
  4228                           	psect	text10
  4229  0E68                     __ptext10:	
  4230 ;; *************** function ___lwdiv *****************
  4231 ;; Defined at:
  4232 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  divisor         2    0[BANK0 ] unsigned int 
  4235 ;;  dividend        2    2[BANK0 ] unsigned int 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  quotient        2    5[BANK0 ] unsigned int 
  4238 ;;  counter         1    7[BANK0 ] unsigned char 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  2    0[BANK0 ] unsigned int 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4248 ;;      Params:         0       4       0       0       0       0       0       0
  4249 ;;      Locals:         0       3       0       0       0       0       0       0
  4250 ;;      Temps:          0       1       0       0       0       0       0       0
  4251 ;;      Totals:         0       8       0       0       0       0       0       0
  4252 ;;Total ram usage:        8 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    4
  4255 ;; This function calls:
  4256 ;;		Nothing
  4257 ;; This function is called by:
  4258 ;;		__doprnt
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function ___lwdiv
  4264  0E68                     ___lwdiv:	
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4268  0E68  0020               	movlb	0	; select bank0
  4269  0E69  01A5               	clrf	___lwdiv@quotient
  4270  0E6A  01A6               	clrf	___lwdiv@quotient+1
  4271  0E6B  0820               	movf	___lwdiv@divisor,w
  4272  0E6C  0421               	iorwf	___lwdiv@divisor+1,w
  4273  0E6D  1903               	btfsc	3,2
  4274  0E6E  2E98               	goto	l2154
  4275  0E6F  01A7               	clrf	___lwdiv@counter
  4276  0E70  0AA7               	incf	___lwdiv@counter,f
  4277  0E71                     l2142:	
  4278  0E71  1BA1               	btfsc	___lwdiv@divisor+1,7
  4279  0E72  2E7D               	goto	l2144
  4280  0E73  3001               	movlw	1
  4281  0E74                     u1845:	
  4282  0E74  35A0               	lslf	___lwdiv@divisor,f
  4283  0E75  0DA1               	rlf	___lwdiv@divisor+1,f
  4284  0E76  0B89               	decfsz	9,f
  4285  0E77  2E74               	goto	u1845
  4286  0E78  3001               	movlw	1
  4287  0E79  00A4               	movwf	??___lwdiv
  4288  0E7A  0824               	movf	??___lwdiv,w
  4289  0E7B  07A7               	addwf	___lwdiv@counter,f
  4290  0E7C  2E71               	goto	l2142
  4291  0E7D                     l2144:	
  4292  0E7D  3001               	movlw	1
  4293  0E7E                     u1865:	
  4294  0E7E  35A5               	lslf	___lwdiv@quotient,f
  4295  0E7F  0DA6               	rlf	___lwdiv@quotient+1,f
  4296  0E80  0B89               	decfsz	9,f
  4297  0E81  2E7E               	goto	u1865
  4298  0E82  0821               	movf	___lwdiv@divisor+1,w
  4299  0E83  0223               	subwf	___lwdiv@dividend+1,w
  4300  0E84  1D03               	skipz
  4301  0E85  2E88               	goto	u1875
  4302  0E86  0820               	movf	___lwdiv@divisor,w
  4303  0E87  0222               	subwf	___lwdiv@dividend,w
  4304  0E88                     u1875:	
  4305  0E88  1C03               	skipc
  4306  0E89  2E8F               	goto	l2150
  4307  0E8A  0820               	movf	___lwdiv@divisor,w
  4308  0E8B  02A2               	subwf	___lwdiv@dividend,f
  4309  0E8C  0821               	movf	___lwdiv@divisor+1,w
  4310  0E8D  3BA3               	subwfb	___lwdiv@dividend+1,f
  4311  0E8E  1425               	bsf	___lwdiv@quotient,0
  4312  0E8F                     l2150:	
  4313  0E8F  3001               	movlw	1
  4314  0E90                     u1885:	
  4315  0E90  36A1               	lsrf	___lwdiv@divisor+1,f
  4316  0E91  0CA0               	rrf	___lwdiv@divisor,f
  4317  0E92  0B89               	decfsz	9,f
  4318  0E93  2E90               	goto	u1885
  4319  0E94  3001               	movlw	1
  4320  0E95  02A7               	subwf	___lwdiv@counter,f
  4321  0E96  1D03               	btfss	3,2
  4322  0E97  2E7D               	goto	l2144
  4323  0E98                     l2154:	
  4324  0E98  0826               	movf	___lwdiv@quotient+1,w
  4325  0E99  00A1               	movwf	?___lwdiv+1
  4326  0E9A  0825               	movf	___lwdiv@quotient,w
  4327  0E9B  00A0               	movwf	?___lwdiv
  4328  0E9C  0008               	return
  4329  0E9D                     __end_of___lwdiv:	
  4330                           
  4331                           	psect	text11
  4332  0E34                     __ptext11:	
  4333 ;; *************** function _init_lcd *****************
  4334 ;; Defined at:
  4335 ;;		line 78 in file "main.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4349 ;;      Params:         0       0       0       0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0
  4351 ;;      Temps:          0       1       0       0       0       0       0       0
  4352 ;;      Totals:         0       1       0       0       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    5
  4356 ;; This function calls:
  4357 ;;		_send_nibble
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _init_lcd
  4365  0E34                     _init_lcd:	
  4366                           
  4367                           ;main.c: 80: LATDbits.LATD1 = 0;
  4368                           
  4369                           ;incstack = 0
  4370                           ; Regs used in _init_lcd: [wreg+status,2+status,0+pclath+cstack]
  4371  0E34  0022               	movlb	2	; select bank2
  4372  0E35  108F               	bcf	15,1	;volatile
  4373                           
  4374                           ;main.c: 81: LATDbits.LATD3 = 0;
  4375  0E36  118F               	bcf	15,3	;volatile
  4376                           
  4377                           ;main.c: 82: LATDbits.LATD0 = 1;
  4378  0E37  140F               	bsf	15,0	;volatile
  4379                           
  4380                           ;main.c: 85: _delay((unsigned long)((16)*(18432000/4000.0)));
  4381  0E38  3060               	movlw	96
  4382  0E39  0020               	movlb	0	; select bank0
  4383  0E3A  00A2               	movwf	??_init_lcd
  4384  0E3B  30BF               	movlw	191
  4385  0E3C                     u5407:	
  4386  0E3C  0B89               	decfsz	9,f
  4387  0E3D  2E3C               	goto	u5407
  4388  0E3E  0BA2               	decfsz	??_init_lcd,f
  4389  0E3F  2E3C               	goto	u5407
  4390                           
  4391                           ;main.c: 86: send_nibble(0b0011);
  4392  0E40  3003               	movlw	3
  4393  0E41  318D  25BA  318E   	fcall	_send_nibble
  4394                           
  4395                           ;main.c: 87: _delay((unsigned long)((5)*(18432000/4000.0)));
  4396  0E44  301E               	movlw	30
  4397  0E45  0020               	movlb	0	; select bank0
  4398  0E46  00A2               	movwf	??_init_lcd
  4399  0E47  30EB               	movlw	235
  4400  0E48                     u5417:	
  4401  0E48  0B89               	decfsz	9,f
  4402  0E49  2E48               	goto	u5417
  4403  0E4A  0BA2               	decfsz	??_init_lcd,f
  4404  0E4B  2E48               	goto	u5417
  4405                           
  4406                           ;main.c: 88: send_nibble(0b0011);
  4407  0E4C  3003               	movlw	3
  4408  0E4D  318D  25BA  318E   	fcall	_send_nibble
  4409                           
  4410                           ;main.c: 89: _delay((unsigned long)((1)*(18432000/4000.0)));
  4411  0E50  3006               	movlw	6
  4412  0E51  0020               	movlb	0	; select bank0
  4413  0E52  00A2               	movwf	??_init_lcd
  4414  0E53  30FB               	movlw	251
  4415  0E54                     u5427:	
  4416  0E54  0B89               	decfsz	9,f
  4417  0E55  2E54               	goto	u5427
  4418  0E56  0BA2               	decfsz	??_init_lcd,f
  4419  0E57  2E54               	goto	u5427
  4420                           
  4421                           ;main.c: 90: send_nibble(0b0011);
  4422  0E58  3003               	movlw	3
  4423  0E59  318D  25BA  318E   	fcall	_send_nibble
  4424                           
  4425                           ;main.c: 91: _delay((unsigned long)((5)*(18432000/4000.0)));
  4426  0E5C  301E               	movlw	30
  4427  0E5D  0020               	movlb	0	; select bank0
  4428  0E5E  00A2               	movwf	??_init_lcd
  4429  0E5F  30EB               	movlw	235
  4430  0E60                     u5437:	
  4431  0E60  0B89               	decfsz	9,f
  4432  0E61  2E60               	goto	u5437
  4433  0E62  0BA2               	decfsz	??_init_lcd,f
  4434  0E63  2E60               	goto	u5437
  4435                           
  4436                           ;main.c: 92: send_nibble(0b0010);
  4437  0E64  3002               	movlw	2
  4438  0E65  318D  25BA         	fcall	_send_nibble
  4439  0E67  0008               	return
  4440  0E68                     __end_of_init_lcd:	
  4441                           
  4442                           	psect	text12
  4443  007B                     __ptext12:	
  4444 ;; *************** function _comparare *****************
  4445 ;; Defined at:
  4446 ;;		line 332 in file "main.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  resistor_val    2   46[BANK0 ] int 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  j               2   60[BANK0 ] int 
  4451 ;;  j               2   58[BANK0 ] int 
  4452 ;;  i               2   75[BANK1 ] int 
  4453 ;;  table          75    0[BANK1 ] float [25]
  4454 ;;  res            42    0[BANK2 ] unsigned int [21]
  4455 ;;  step            3   53[BANK0 ] float 
  4456 ;;  dif             3   50[BANK0 ] float 
  4457 ;;  result          2   56[BANK0 ] int 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  2   46[BANK0 ] int 
  4460 ;; Registers used:
  4461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4467 ;;      Params:         0       2       0       0       0       0       0       0
  4468 ;;      Locals:         0      12      77      42       0       0       0       0
  4469 ;;      Temps:          0       2       0       0       0       0       0       0
  4470 ;;      Totals:         0      16      77      42       0       0       0       0
  4471 ;;Total ram usage:      135 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    6
  4474 ;; This function calls:
  4475 ;;		___awtoft
  4476 ;;		___bmul
  4477 ;;		___ftadd
  4478 ;;		___ftdiv
  4479 ;;		___ftge
  4480 ;;		___ftmul
  4481 ;;		___ftneg
  4482 ;;		___lwtoft
  4483 ;;		___wmul
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _comparare
  4491  007B                     _comparare:	
  4492                           
  4493                           ;main.c: 334: unsigned int res[]={3002,2689,2377,2186,1895,1707,1520,1374,1228,1114,1000
      +                          ,908,817,745,673,615,557,496,463,425,387};
  4494                           
  4495                           ;incstack = 0
  4496                           ; Regs used in _comparare: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4497  007B  30A0               	movlw	low comparare@F3705
  4498  007C  0086               	movwf	6
  4499  007D  3001               	movlw	high comparare@F3705
  4500  007E  0087               	movwf	7
  4501  007F  3020               	movlw	low comparare@res
  4502  0080  0084               	movwf	4
  4503  0081  3001               	movlw	high comparare@res
  4504  0082  0085               	movwf	5
  4505  0083  302A               	movlw	42
  4506  0084  0020               	movlb	0	; select bank0
  4507  0085  00D0               	movwf	??_comparare
  4508  0086                     u3130:	
  4509  0086  0016               	moviw fsr1++
  4510  0087  001A               	movwi fsr0++
  4511  0088  0BD0               	decfsz	??_comparare,f
  4512  0089  2886               	goto	u3130
  4513                           
  4514                           ;main.c: 335: int result=1000;
  4515  008A  30E8               	movlw	232
  4516  008B  00D8               	movwf	comparare@result
  4517  008C  3003               	movlw	3
  4518  008D  00D9               	movwf	comparare@result+1
  4519                           
  4520                           ;main.c: 336: float dif=0,step=0;
  4521  008E  3000               	movlw	0
  4522  008F  00D2               	movwf	comparare@dif
  4523  0090  3000               	movlw	0
  4524  0091  00D3               	movwf	comparare@dif+1
  4525  0092  3000               	movlw	0
  4526  0093  00D4               	movwf	comparare@dif+2
  4527  0094  3000               	movlw	0
  4528  0095  00D5               	movwf	comparare@step
  4529  0096  3000               	movlw	0
  4530  0097  00D6               	movwf	comparare@step+1
  4531  0098  3000               	movlw	0
  4532  0099  00D7               	movwf	comparare@step+2
  4533                           
  4534                           ;main.c: 337: float table[25]={};
  4535  009A  3020               	movlw	low comparare@F3710
  4536  009B  0086               	movwf	6
  4537  009C  3002               	movlw	high comparare@F3710
  4538  009D  0087               	movwf	7
  4539  009E  30A0               	movlw	low comparare@table
  4540  009F  0084               	movwf	4
  4541  00A0  3000               	movlw	high comparare@table
  4542  00A1  0085               	movwf	5
  4543  00A2  304B               	movlw	75
  4544  00A3  00D0               	movwf	??_comparare
  4545  00A4                     u3140:	
  4546  00A4  0016               	moviw fsr1++
  4547  00A5  001A               	movwi fsr0++
  4548  00A6  0BD0               	decfsz	??_comparare,f
  4549  00A7  28A4               	goto	u3140
  4550                           
  4551                           ;main.c: 338: for(int i=0;i<19;i++)
  4552  00A8  0021               	movlb	1	; select bank1
  4553  00A9  01EB               	clrf	comparare@i^(0+128)
  4554  00AA  01EC               	clrf	(comparare@i+1)^(0+128)
  4555  00AB  086C               	movf	(comparare@i+1)^(0+128),w
  4556  00AC  3A80               	xorlw	128
  4557  00AD  0020               	movlb	0	; select bank0
  4558  00AE  00D0               	movwf	??_comparare
  4559  00AF  3080               	movlw	128
  4560  00B0  0250               	subwf	??_comparare,w
  4561  00B1  1D03               	skipz
  4562  00B2  28B6               	goto	u3155
  4563  00B3  3013               	movlw	19
  4564  00B4  0021               	movlb	1	; select bank1
  4565  00B5  026B               	subwf	comparare@i^(0+128),w
  4566  00B6                     u3155:	
  4567  00B6  1803               	btfsc	3,0
  4568  00B7  2A1F               	goto	l2980
  4569  00B8                     l2944:	
  4570                           
  4571                           ;main.c: 339: {
  4572                           ;main.c: 340: if((resistor_value<=res[i])&(resistor_value>=res[i+1]))
  4573  00B8  0021               	movlb	1	; select bank1
  4574  00B9  356B               	lslf	comparare@i^(0+128),w
  4575  00BA  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4576  00BB  0086               	movwf	6
  4577  00BC  3001               	movlw	1	; select bank2/3
  4578  00BD  0087               	movwf	7
  4579  00BE  3F40               	moviw [0]fsr1
  4580  00BF  0020               	movlb	0	; select bank0
  4581  00C0  00D0               	movwf	??_comparare
  4582  00C1  3F41               	moviw [1]fsr1
  4583  00C2  00D1               	movwf	??_comparare+1
  4584  00C3  084F               	movf	comparare@resistor_value+1,w
  4585  00C4  0251               	subwf	??_comparare+1,w
  4586  00C5  1D03               	skipz
  4587  00C6  28C9               	goto	u3165
  4588  00C7  084E               	movf	comparare@resistor_value,w
  4589  00C8  0250               	subwf	??_comparare,w
  4590  00C9                     u3165:	
  4591  00C9  1C03               	skipc
  4592  00CA  2A0D               	goto	l2978
  4593  00CB  0021               	movlb	1	; select bank1
  4594  00CC  356B               	lslf	comparare@i^(0+128),w
  4595  00CD  3E02               	addlw	2
  4596  00CE  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4597  00CF  0086               	movwf	6
  4598  00D0  3001               	movlw	1	; select bank2/3
  4599  00D1  0087               	movwf	7
  4600  00D2  3F40               	moviw [0]fsr1
  4601  00D3  0020               	movlb	0	; select bank0
  4602  00D4  00D0               	movwf	??_comparare
  4603  00D5  3F41               	moviw [1]fsr1
  4604  00D6  00D1               	movwf	??_comparare+1
  4605  00D7  0851               	movf	??_comparare+1,w
  4606  00D8  024F               	subwf	comparare@resistor_value+1,w
  4607  00D9  1D03               	skipz
  4608  00DA  28DD               	goto	u3175
  4609  00DB  0850               	movf	??_comparare,w
  4610  00DC  024E               	subwf	comparare@resistor_value,w
  4611  00DD                     u3175:	
  4612  00DD  1C03               	skipc
  4613  00DE  2A0D               	goto	l2978
  4614                           
  4615                           ;main.c: 341: {
  4616                           ;main.c: 342: dif=res[i]-res[i+1];
  4617  00DF  0021               	movlb	1	; select bank1
  4618  00E0  356B               	lslf	comparare@i^(0+128),w
  4619  00E1  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4620  00E2  0086               	movwf	6
  4621  00E3  3001               	movlw	1	; select bank2/3
  4622  00E4  0087               	movwf	7
  4623  00E5  356B               	lslf	comparare@i^(0+128),w
  4624  00E6  3E02               	addlw	2
  4625  00E7  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4626  00E8  0084               	movwf	4
  4627  00E9  3001               	movlw	1	; select bank2/3
  4628  00EA  0085               	movwf	5
  4629  00EB  3F00               	moviw [0]fsr0
  4630  00EC  0020               	movlb	0	; select bank0
  4631  00ED  00D0               	movwf	??_comparare
  4632  00EE  3F01               	moviw [1]fsr0
  4633  00EF  00D1               	movwf	??_comparare+1
  4634  00F0  09D0               	comf	??_comparare,f
  4635  00F1  09D1               	comf	??_comparare+1,f
  4636  00F2  0AD0               	incf	??_comparare,f
  4637  00F3  1903               	skipnz
  4638  00F4  0AD1               	incf	??_comparare+1,f
  4639  00F5  3F40               	moviw [0]fsr1
  4640  00F6  0750               	addwf	??_comparare,w
  4641  00F7  00A8               	movwf	___lwtoft@c
  4642  00F8  3F41               	moviw [1]fsr1
  4643  00F9  3D51               	addwfc	??_comparare+1,w
  4644  00FA  00A9               	movwf	___lwtoft@c+1
  4645  00FB  318C  2452  3180   	fcall	___lwtoft
  4646  00FE  0020               	movlb	0	; select bank0
  4647  00FF  0828               	movf	?___lwtoft,w
  4648  0100  00D2               	movwf	comparare@dif
  4649  0101  0829               	movf	?___lwtoft+1,w
  4650  0102  00D3               	movwf	comparare@dif+1
  4651  0103  082A               	movf	?___lwtoft+2,w
  4652  0104  00D4               	movwf	comparare@dif+2
  4653                           
  4654                           ;main.c: 343: step=dif/25;
  4655  0105  3000               	movlw	0
  4656  0106  00BE               	movwf	___ftdiv@f2
  4657  0107  30C8               	movlw	200
  4658  0108  00BF               	movwf	___ftdiv@f2+1
  4659  0109  3041               	movlw	65
  4660  010A  00C0               	movwf	___ftdiv@f2+2
  4661  010B  0852               	movf	comparare@dif,w
  4662  010C  00C1               	movwf	___ftdiv@f1
  4663  010D  0853               	movf	comparare@dif+1,w
  4664  010E  00C2               	movwf	___ftdiv@f1+1
  4665  010F  0854               	movf	comparare@dif+2,w
  4666  0110  00C3               	movwf	___ftdiv@f1+2
  4667  0111  3186  2687  3180   	fcall	___ftdiv
  4668  0114  0020               	movlb	0	; select bank0
  4669  0115  083E               	movf	?___ftdiv,w
  4670  0116  00D5               	movwf	comparare@step
  4671  0117  083F               	movf	?___ftdiv+1,w
  4672  0118  00D6               	movwf	comparare@step+1
  4673  0119  0840               	movf	?___ftdiv+2,w
  4674  011A  00D7               	movwf	comparare@step+2
  4675                           
  4676                           ;main.c: 344: for(int j=0;j<25;j++)
  4677  011B  01DA               	clrf	comparare@j
  4678  011C  01DB               	clrf	comparare@j+1
  4679  011D  085B               	movf	comparare@j+1,w
  4680  011E  3A80               	xorlw	128
  4681  011F  00D0               	movwf	??_comparare
  4682  0120  3080               	movlw	128
  4683  0121  0250               	subwf	??_comparare,w
  4684  0122  1D03               	skipz
  4685  0123  2926               	goto	u3185
  4686  0124  3019               	movlw	25
  4687  0125  025A               	subwf	comparare@j,w
  4688  0126                     u3185:	
  4689  0126  1803               	btfsc	3,0
  4690  0127  298B               	goto	l2964
  4691  0128                     l2958:	
  4692                           
  4693                           ;main.c: 345: {
  4694                           ;main.c: 347: table[j]=res[i]-j*step;
  4695  0128  3003               	movlw	3
  4696  0129  0020               	movlb	0	; select bank0
  4697  012A  00D0               	movwf	??_comparare
  4698  012B  0850               	movf	??_comparare,w
  4699  012C  00A0               	movwf	___bmul@multiplicand
  4700  012D  085A               	movf	comparare@j,w
  4701  012E  318C  242C  3180   	fcall	___bmul
  4702  0131  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4703  0132  0086               	movwf	6
  4704  0133  0187               	clrf	7
  4705  0134  0020               	movlb	0	; select bank0
  4706  0135  085B               	movf	comparare@j+1,w
  4707  0136  00A9               	movwf	___awtoft@c+1
  4708  0137  085A               	movf	comparare@j,w
  4709  0138  00A8               	movwf	___awtoft@c
  4710  0139  318D  2575  3180   	fcall	___awtoft
  4711  013C  0020               	movlb	0	; select bank0
  4712  013D  0828               	movf	?___awtoft,w
  4713  013E  00B1               	movwf	___ftmul@f2
  4714  013F  0829               	movf	?___awtoft+1,w
  4715  0140  00B2               	movwf	___ftmul@f2+1
  4716  0141  082A               	movf	?___awtoft+2,w
  4717  0142  00B3               	movwf	___ftmul@f2+2
  4718  0143  0855               	movf	comparare@step,w
  4719  0144  00AE               	movwf	___ftmul@f1
  4720  0145  0856               	movf	comparare@step+1,w
  4721  0146  00AF               	movwf	___ftmul@f1+1
  4722  0147  0857               	movf	comparare@step+2,w
  4723  0148  00B0               	movwf	___ftmul@f1+2
  4724  0149  3185  25D3  3180   	fcall	___ftmul
  4725  014C  0020               	movlb	0	; select bank0
  4726  014D  082E               	movf	?___ftmul,w
  4727  014E  00BE               	movwf	___ftneg@f1
  4728  014F  082F               	movf	?___ftmul+1,w
  4729  0150  00BF               	movwf	___ftneg@f1+1
  4730  0151  0830               	movf	?___ftmul+2,w
  4731  0152  00C0               	movwf	___ftneg@f1+2
  4732  0153  318C  2404  3180   	fcall	___ftneg
  4733  0156  0020               	movlb	0	; select bank0
  4734  0157  083E               	movf	?___ftneg,w
  4735  0158  00C1               	movwf	___ftadd@f1
  4736  0159  083F               	movf	?___ftneg+1,w
  4737  015A  00C2               	movwf	___ftadd@f1+1
  4738  015B  0840               	movf	?___ftneg+2,w
  4739  015C  00C3               	movwf	___ftadd@f1+2
  4740  015D  0021               	movlb	1	; select bank1
  4741  015E  356B               	lslf	comparare@i^(0+128),w
  4742  015F  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4743  0160  0084               	movwf	4
  4744  0161  3001               	movlw	1	; select bank2/3
  4745  0162  0085               	movwf	5
  4746  0163  3F00               	moviw [0]fsr0
  4747  0164  0020               	movlb	0	; select bank0
  4748  0165  00A8               	movwf	___lwtoft@c
  4749  0166  3F01               	moviw [1]fsr0
  4750  0167  00A9               	movwf	___lwtoft@c+1
  4751  0168  318C  2452  3180   	fcall	___lwtoft
  4752  016B  0020               	movlb	0	; select bank0
  4753  016C  0828               	movf	?___lwtoft,w
  4754  016D  00C4               	movwf	___ftadd@f2
  4755  016E  0829               	movf	?___lwtoft+1,w
  4756  016F  00C5               	movwf	___ftadd@f2+1
  4757  0170  082A               	movf	?___lwtoft+2,w
  4758  0171  00C6               	movwf	___ftadd@f2+2
  4759  0172  3183  2345  3180   	fcall	___ftadd
  4760  0175  0020               	movlb	0	; select bank0
  4761  0176  0841               	movf	?___ftadd,w
  4762  0177  3FC0               	movwi [0]fsr1
  4763  0178  0842               	movf	?___ftadd+1,w
  4764  0179  3FC1               	movwi [1]fsr1
  4765  017A  0843               	movf	?___ftadd+2,w
  4766  017B  3FC2               	movwi [2]fsr1
  4767  017C  3001               	movlw	1
  4768  017D  07DA               	addwf	comparare@j,f
  4769  017E  3000               	movlw	0
  4770  017F  3DDB               	addwfc	comparare@j+1,f
  4771  0180  085B               	movf	comparare@j+1,w
  4772  0181  3A80               	xorlw	128
  4773  0182  00D0               	movwf	??_comparare
  4774  0183  3080               	movlw	128
  4775  0184  0250               	subwf	??_comparare,w
  4776  0185  1D03               	skipz
  4777  0186  2989               	goto	u3195
  4778  0187  3019               	movlw	25
  4779  0188  025A               	subwf	comparare@j,w
  4780  0189                     u3195:	
  4781  0189  1C03               	skipc
  4782  018A  2928               	goto	l2958
  4783  018B                     l2964:	
  4784                           
  4785                           ;main.c: 349: }
  4786                           ;main.c: 350: for(int j=0;j<25;j++)
  4787  018B  0020               	movlb	0	; select bank0
  4788  018C  01DC               	clrf	comparare@j_738
  4789  018D  01DD               	clrf	comparare@j_738+1
  4790  018E  085D               	movf	comparare@j_738+1,w
  4791  018F  3A80               	xorlw	128
  4792  0190  00D0               	movwf	??_comparare
  4793  0191  3080               	movlw	128
  4794  0192  0250               	subwf	??_comparare,w
  4795  0193  1D03               	skipz
  4796  0194  2997               	goto	u3205
  4797  0195  3019               	movlw	25
  4798  0196  025C               	subwf	comparare@j_738,w
  4799  0197                     u3205:	
  4800  0197  1803               	btfsc	3,0
  4801  0198  2A0D               	goto	l2978
  4802  0199                     l2970:	
  4803                           
  4804                           ;main.c: 351: {
  4805                           ;main.c: 352: if((resistor_value<=table[j])&(resistor_value>=table[j+1]))
  4806  0199  3003               	movlw	3
  4807  019A  0020               	movlb	0	; select bank0
  4808  019B  00D0               	movwf	??_comparare
  4809  019C  0850               	movf	??_comparare,w
  4810  019D  00A0               	movwf	___bmul@multiplicand
  4811  019E  085C               	movf	comparare@j_738,w
  4812  019F  318C  242C  3180   	fcall	___bmul
  4813  01A2  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4814  01A3  0086               	movwf	6
  4815  01A4  0187               	clrf	7
  4816  01A5  3F40               	moviw [0]fsr1
  4817  01A6  0020               	movlb	0	; select bank0
  4818  01A7  00AE               	movwf	___ftge@ff1
  4819  01A8  3F41               	moviw [1]fsr1
  4820  01A9  00AF               	movwf	___ftge@ff1+1
  4821  01AA  3F42               	moviw [2]fsr1
  4822  01AB  00B0               	movwf	___ftge@ff1+2
  4823  01AC  084F               	movf	comparare@resistor_value+1,w
  4824  01AD  00A9               	movwf	___awtoft@c+1
  4825  01AE  084E               	movf	comparare@resistor_value,w
  4826  01AF  00A8               	movwf	___awtoft@c
  4827  01B0  318D  2575  3180   	fcall	___awtoft
  4828  01B3  0020               	movlb	0	; select bank0
  4829  01B4  0828               	movf	?___awtoft,w
  4830  01B5  00B1               	movwf	___ftge@ff2
  4831  01B6  0829               	movf	?___awtoft+1,w
  4832  01B7  00B2               	movwf	___ftge@ff2+1
  4833  01B8  082A               	movf	?___awtoft+2,w
  4834  01B9  00B3               	movwf	___ftge@ff2+2
  4835  01BA  318F  2710  3180   	fcall	___ftge
  4836  01BD  1C03               	btfss	3,0
  4837  01BE  29FD               	goto	l2976
  4838  01BF  0020               	movlb	0	; select bank0
  4839  01C0  084F               	movf	comparare@resistor_value+1,w
  4840  01C1  00A9               	movwf	___awtoft@c+1
  4841  01C2  084E               	movf	comparare@resistor_value,w
  4842  01C3  00A8               	movwf	___awtoft@c
  4843  01C4  318D  2575  3180   	fcall	___awtoft
  4844  01C7  0020               	movlb	0	; select bank0
  4845  01C8  0828               	movf	?___awtoft,w
  4846  01C9  00AE               	movwf	___ftge@ff1
  4847  01CA  0829               	movf	?___awtoft+1,w
  4848  01CB  00AF               	movwf	___ftge@ff1+1
  4849  01CC  082A               	movf	?___awtoft+2,w
  4850  01CD  00B0               	movwf	___ftge@ff1+2
  4851  01CE  3003               	movlw	3
  4852  01CF  00D0               	movwf	??_comparare
  4853  01D0  0850               	movf	??_comparare,w
  4854  01D1  00A0               	movwf	___bmul@multiplicand
  4855  01D2  085C               	movf	comparare@j_738,w
  4856  01D3  3E01               	addlw	1
  4857  01D4  318C  242C  3180   	fcall	___bmul
  4858  01D7  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4859  01D8  0086               	movwf	6
  4860  01D9  0187               	clrf	7
  4861  01DA  3F40               	moviw [0]fsr1
  4862  01DB  0020               	movlb	0	; select bank0
  4863  01DC  00B1               	movwf	___ftge@ff2
  4864  01DD  3F41               	moviw [1]fsr1
  4865  01DE  00B2               	movwf	___ftge@ff2+1
  4866  01DF  3F42               	moviw [2]fsr1
  4867  01E0  00B3               	movwf	___ftge@ff2+2
  4868  01E1  318F  2710  3180   	fcall	___ftge
  4869  01E4  1C03               	btfss	3,0
  4870  01E5  29FD               	goto	l2976
  4871                           
  4872                           ;main.c: 353: {
  4873                           ;main.c: 354: result=(i*25+1*j);
  4874  01E6  0021               	movlb	1	; select bank1
  4875  01E7  086C               	movf	(comparare@i+1)^(0+128),w
  4876  01E8  0020               	movlb	0	; select bank0
  4877  01E9  00A1               	movwf	___wmul@multiplier+1
  4878  01EA  0021               	movlb	1	; select bank1
  4879  01EB  086B               	movf	comparare@i^(0+128),w
  4880  01EC  0020               	movlb	0	; select bank0
  4881  01ED  00A0               	movwf	___wmul@multiplier
  4882  01EE  3019               	movlw	25
  4883  01EF  00A2               	movwf	___wmul@multiplicand
  4884  01F0  3000               	movlw	0
  4885  01F1  00A3               	movwf	___wmul@multiplicand+1
  4886  01F2  318C  24E2  3180   	fcall	___wmul
  4887  01F5  0020               	movlb	0	; select bank0
  4888  01F6  085C               	movf	comparare@j_738,w
  4889  01F7  0720               	addwf	?___wmul,w
  4890  01F8  00D8               	movwf	comparare@result
  4891  01F9  085D               	movf	comparare@j_738+1,w
  4892  01FA  3D21               	addwfc	?___wmul+1,w
  4893  01FB  00D9               	movwf	comparare@result+1
  4894                           
  4895                           ;main.c: 355: break;
  4896  01FC  2A0D               	goto	l2978
  4897  01FD                     l2976:	
  4898  01FD  3001               	movlw	1
  4899  01FE  0020               	movlb	0	; select bank0
  4900  01FF  07DC               	addwf	comparare@j_738,f
  4901  0200  3000               	movlw	0
  4902  0201  3DDD               	addwfc	comparare@j_738+1,f
  4903  0202  085D               	movf	comparare@j_738+1,w
  4904  0203  3A80               	xorlw	128
  4905  0204  00D0               	movwf	??_comparare
  4906  0205  3080               	movlw	128
  4907  0206  0250               	subwf	??_comparare,w
  4908  0207  1D03               	skipz
  4909  0208  2A0B               	goto	u3235
  4910  0209  3019               	movlw	25
  4911  020A  025C               	subwf	comparare@j_738,w
  4912  020B                     u3235:	
  4913  020B  1C03               	skipc
  4914  020C  2999               	goto	l2970
  4915  020D                     l2978:	
  4916  020D  3001               	movlw	1
  4917  020E  0021               	movlb	1	; select bank1
  4918  020F  07EB               	addwf	comparare@i^(0+128),f
  4919  0210  3000               	movlw	0
  4920  0211  3DEC               	addwfc	(comparare@i+1)^(0+128),f
  4921  0212  086C               	movf	(comparare@i+1)^(0+128),w
  4922  0213  3A80               	xorlw	128
  4923  0214  0020               	movlb	0	; select bank0
  4924  0215  00D0               	movwf	??_comparare
  4925  0216  3080               	movlw	128
  4926  0217  0250               	subwf	??_comparare,w
  4927  0218  1D03               	skipz
  4928  0219  2A1D               	goto	u3245
  4929  021A  3013               	movlw	19
  4930  021B  0021               	movlb	1	; select bank1
  4931  021C  026B               	subwf	comparare@i^(0+128),w
  4932  021D                     u3245:	
  4933  021D  1C03               	skipc
  4934  021E  28B8               	goto	l2944
  4935  021F                     l2980:	
  4936                           
  4937                           ;main.c: 356: }
  4938                           ;main.c: 357: }
  4939                           ;main.c: 358: }
  4940                           ;main.c: 359: }
  4941                           ;main.c: 360: return result;
  4942  021F  0020               	movlb	0	; select bank0
  4943  0220  0859               	movf	comparare@result+1,w
  4944  0221  00CF               	movwf	?_comparare+1
  4945  0222  0858               	movf	comparare@result,w
  4946  0223  00CE               	movwf	?_comparare
  4947  0224  0008               	return
  4948  0225                     __end_of_comparare:	
  4949                           
  4950                           	psect	text13
  4951  0CE2                     __ptext13:	
  4952 ;; *************** function ___wmul *****************
  4953 ;; Defined at:
  4954 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4957 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;  product         2    4[BANK0 ] unsigned int 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  2    0[BANK0 ] unsigned int 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4969 ;;      Params:         0       4       0       0       0       0       0       0
  4970 ;;      Locals:         0       2       0       0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0
  4972 ;;      Totals:         0       6       0       0       0       0       0       0
  4973 ;;Total ram usage:        6 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    4
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_comparare
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function ___wmul
  4985  0CE2                     ___wmul:	
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4989  0CE2  0020               	movlb	0	; select bank0
  4990  0CE3  01A4               	clrf	___wmul@product
  4991  0CE4  01A5               	clrf	___wmul@product+1
  4992  0CE5                     l2414:	
  4993  0CE5  1C20               	btfss	___wmul@multiplier,0
  4994  0CE6  2CEB               	goto	l588
  4995  0CE7  0822               	movf	___wmul@multiplicand,w
  4996  0CE8  07A4               	addwf	___wmul@product,f
  4997  0CE9  0823               	movf	___wmul@multiplicand+1,w
  4998  0CEA  3DA5               	addwfc	___wmul@product+1,f
  4999  0CEB                     l588:	
  5000  0CEB  3001               	movlw	1
  5001  0CEC                     u2275:	
  5002  0CEC  35A2               	lslf	___wmul@multiplicand,f
  5003  0CED  0DA3               	rlf	___wmul@multiplicand+1,f
  5004  0CEE  0B89               	decfsz	9,f
  5005  0CEF  2CEC               	goto	u2275
  5006  0CF0  3001               	movlw	1
  5007  0CF1                     u2285:	
  5008  0CF1  36A1               	lsrf	___wmul@multiplier+1,f
  5009  0CF2  0CA0               	rrf	___wmul@multiplier,f
  5010  0CF3  0B89               	decfsz	9,f
  5011  0CF4  2CF1               	goto	u2285
  5012  0CF5  0820               	movf	___wmul@multiplier,w
  5013  0CF6  0421               	iorwf	___wmul@multiplier+1,w
  5014  0CF7  1D03               	btfss	3,2
  5015  0CF8  2CE5               	goto	l2414
  5016  0CF9  0825               	movf	___wmul@product+1,w
  5017  0CFA  00A1               	movwf	?___wmul+1
  5018  0CFB  0824               	movf	___wmul@product,w
  5019  0CFC  00A0               	movwf	?___wmul
  5020  0CFD  0008               	return
  5021  0CFE                     __end_of___wmul:	
  5022                           
  5023                           	psect	text14
  5024  0C52                     __ptext14:	
  5025 ;; *************** function ___lwtoft *****************
  5026 ;; Defined at:
  5027 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  c               2    8[BANK0 ] unsigned int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  3    8[BANK0 ] float 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0, pclath, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5041 ;;      Params:         0       3       0       0       0       0       0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0
  5043 ;;      Temps:          0       1       0       0       0       0       0       0
  5044 ;;      Totals:         0       4       0       0       0       0       0       0
  5045 ;;Total ram usage:        4 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    5
  5048 ;; This function calls:
  5049 ;;		___ftpack
  5050 ;; This function is called by:
  5051 ;;		_comparare
  5052 ;;		_main
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function ___lwtoft
  5058  0C52                     ___lwtoft:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5062  0C52  0020               	movlb	0	; select bank0
  5063  0C53  0828               	movf	___lwtoft@c,w
  5064  0C54  00A0               	movwf	___ftpack@arg
  5065  0C55  0829               	movf	___lwtoft@c+1,w
  5066  0C56  00A1               	movwf	___ftpack@arg+1
  5067  0C57  01A2               	clrf	___ftpack@arg+2
  5068  0C58  308E               	movlw	142
  5069  0C59  00AB               	movwf	??___lwtoft
  5070  0C5A  082B               	movf	??___lwtoft,w
  5071  0C5B  00A3               	movwf	___ftpack@exp
  5072  0C5C  01A4               	clrf	___ftpack@sign
  5073  0C5D  318F  279B         	fcall	___ftpack
  5074  0C5F  0020               	movlb	0	; select bank0
  5075  0C60  0820               	movf	?___ftpack,w
  5076  0C61  00A8               	movwf	?___lwtoft
  5077  0C62  0821               	movf	?___ftpack+1,w
  5078  0C63  00A9               	movwf	?___lwtoft+1
  5079  0C64  0822               	movf	?___ftpack+2,w
  5080  0C65  00AA               	movwf	?___lwtoft+2
  5081  0C66  0008               	return
  5082  0C67                     __end_of___lwtoft:	
  5083                           
  5084                           	psect	text15
  5085  0C04                     __ptext15:	
  5086 ;; *************** function ___ftneg *****************
  5087 ;; Defined at:
  5088 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  f1              3   30[BANK0 ] float 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  3   30[BANK0 ] float 
  5095 ;; Registers used:
  5096 ;;		wreg
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5102 ;;      Params:         0       3       0       0       0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0       0       0       0
  5104 ;;      Temps:          0       0       0       0       0       0       0       0
  5105 ;;      Totals:         0       3       0       0       0       0       0       0
  5106 ;;Total ram usage:        3 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    4
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_comparare
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           
  5117                           ;psect for function ___ftneg
  5118  0C04                     ___ftneg:	
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in ___ftneg: [wreg]
  5122  0C04  0020               	movlb	0	; select bank0
  5123  0C05  0840               	movf	___ftneg@f1+2,w
  5124  0C06  043F               	iorwf	___ftneg@f1+1,w
  5125  0C07  043E               	iorwf	___ftneg@f1,w
  5126  0C08  1903               	skipnz
  5127  0C09  0008               	return
  5128  0C0A  3080               	movlw	128
  5129  0C0B  06C0               	xorwf	___ftneg@f1+2,f
  5130  0C0C  0008               	return
  5131  0C0D                     __end_of___ftneg:	
  5132                           
  5133                           	psect	text16
  5134  05D3                     __ptext16:	
  5135 ;; *************** function ___ftmul *****************
  5136 ;; Defined at:
  5137 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  f1              3   14[BANK0 ] float 
  5140 ;;  f2              3   17[BANK0 ] float 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  5143 ;;  sign            1   29[BANK0 ] unsigned char 
  5144 ;;  cntr            1   28[BANK0 ] unsigned char 
  5145 ;;  exp             1   24[BANK0 ] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  3   14[BANK0 ] float 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, pclath, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5155 ;;      Params:         0       6       0       0       0       0       0       0
  5156 ;;      Locals:         0       6       0       0       0       0       0       0
  5157 ;;      Temps:          0       4       0       0       0       0       0       0
  5158 ;;      Totals:         0      16       0       0       0       0       0       0
  5159 ;;Total ram usage:       16 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    5
  5162 ;; This function calls:
  5163 ;;		___ftpack
  5164 ;; This function is called by:
  5165 ;;		_comparare
  5166 ;;		_main
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function ___ftmul
  5172  05D3                     ___ftmul:	
  5173                           
  5174                           ;incstack = 0
  5175                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5176  05D3  0020               	movlb	0	; select bank0
  5177  05D4  082E               	movf	___ftmul@f1,w
  5178  05D5  00B4               	movwf	??___ftmul
  5179  05D6  082F               	movf	___ftmul@f1+1,w
  5180  05D7  00B5               	movwf	??___ftmul+1
  5181  05D8  0830               	movf	___ftmul@f1+2,w
  5182  05D9  00B6               	movwf	??___ftmul+2
  5183  05DA  1003               	clrc
  5184  05DB  0D35               	rlf	??___ftmul+1,w
  5185  05DC  0D36               	rlf	??___ftmul+2,w
  5186  05DD  00B7               	movwf	??___ftmul+3
  5187  05DE  0837               	movf	??___ftmul+3,w
  5188  05DF  00B8               	movwf	___ftmul@exp
  5189  05E0  0838               	movf	___ftmul@exp,w
  5190  05E1  1D03               	btfss	3,2
  5191  05E2  2DEA               	goto	l2590
  5192  05E3  3000               	movlw	0
  5193  05E4  00AE               	movwf	?___ftmul
  5194  05E5  3000               	movlw	0
  5195  05E6  00AF               	movwf	?___ftmul+1
  5196  05E7  3000               	movlw	0
  5197  05E8  00B0               	movwf	?___ftmul+2
  5198  05E9  0008               	return
  5199  05EA                     l2590:	
  5200  05EA  0831               	movf	___ftmul@f2,w
  5201  05EB  00B4               	movwf	??___ftmul
  5202  05EC  0832               	movf	___ftmul@f2+1,w
  5203  05ED  00B5               	movwf	??___ftmul+1
  5204  05EE  0833               	movf	___ftmul@f2+2,w
  5205  05EF  00B6               	movwf	??___ftmul+2
  5206  05F0  1003               	clrc
  5207  05F1  0D35               	rlf	??___ftmul+1,w
  5208  05F2  0D36               	rlf	??___ftmul+2,w
  5209  05F3  00B7               	movwf	??___ftmul+3
  5210  05F4  0837               	movf	??___ftmul+3,w
  5211  05F5  00BD               	movwf	___ftmul@sign
  5212  05F6  083D               	movf	___ftmul@sign,w
  5213  05F7  1D03               	btfss	3,2
  5214  05F8  2E00               	goto	l2596
  5215  05F9  3000               	movlw	0
  5216  05FA  00AE               	movwf	?___ftmul
  5217  05FB  3000               	movlw	0
  5218  05FC  00AF               	movwf	?___ftmul+1
  5219  05FD  3000               	movlw	0
  5220  05FE  00B0               	movwf	?___ftmul+2
  5221  05FF  0008               	return
  5222  0600                     l2596:	
  5223  0600  083D               	movf	___ftmul@sign,w
  5224  0601  3E7B               	addlw	123
  5225  0602  00B4               	movwf	??___ftmul
  5226  0603  0834               	movf	??___ftmul,w
  5227  0604  07B8               	addwf	___ftmul@exp,f
  5228  0605  082E               	movf	___ftmul@f1,w
  5229  0606  00B4               	movwf	??___ftmul
  5230  0607  082F               	movf	___ftmul@f1+1,w
  5231  0608  00B5               	movwf	??___ftmul+1
  5232  0609  0830               	movf	___ftmul@f1+2,w
  5233  060A  00B6               	movwf	??___ftmul+2
  5234  060B  3010               	movlw	16
  5235  060C                     u2695:	
  5236  060C  36B6               	lsrf	??___ftmul+2,f
  5237  060D  0CB5               	rrf	??___ftmul+1,f
  5238  060E  0CB4               	rrf	??___ftmul,f
  5239  060F  0B89               	decfsz	9,f
  5240  0610  2E0C               	goto	u2695
  5241  0611  0834               	movf	??___ftmul,w
  5242  0612  00B7               	movwf	??___ftmul+3
  5243  0613  0837               	movf	??___ftmul+3,w
  5244  0614  00BD               	movwf	___ftmul@sign
  5245  0615  0831               	movf	___ftmul@f2,w
  5246  0616  00B4               	movwf	??___ftmul
  5247  0617  0832               	movf	___ftmul@f2+1,w
  5248  0618  00B5               	movwf	??___ftmul+1
  5249  0619  0833               	movf	___ftmul@f2+2,w
  5250  061A  00B6               	movwf	??___ftmul+2
  5251  061B  3010               	movlw	16
  5252  061C                     u2705:	
  5253  061C  36B6               	lsrf	??___ftmul+2,f
  5254  061D  0CB5               	rrf	??___ftmul+1,f
  5255  061E  0CB4               	rrf	??___ftmul,f
  5256  061F  0B89               	decfsz	9,f
  5257  0620  2E1C               	goto	u2705
  5258  0621  0834               	movf	??___ftmul,w
  5259  0622  00B7               	movwf	??___ftmul+3
  5260  0623  0837               	movf	??___ftmul+3,w
  5261  0624  06BD               	xorwf	___ftmul@sign,f
  5262  0625  3080               	movlw	128
  5263  0626  00B4               	movwf	??___ftmul
  5264  0627  0834               	movf	??___ftmul,w
  5265  0628  05BD               	andwf	___ftmul@sign,f
  5266  0629  17AF               	bsf	___ftmul@f1+1,7
  5267  062A  17B2               	bsf	___ftmul@f2+1,7
  5268  062B  30FF               	movlw	255
  5269  062C  05B1               	andwf	___ftmul@f2,f
  5270  062D  30FF               	movlw	255
  5271  062E  05B2               	andwf	___ftmul@f2+1,f
  5272  062F  3000               	movlw	0
  5273  0630  05B3               	andwf	___ftmul@f2+2,f
  5274  0631  3000               	movlw	0
  5275  0632  00B9               	movwf	___ftmul@f3_as_product
  5276  0633  3000               	movlw	0
  5277  0634  00BA               	movwf	___ftmul@f3_as_product+1
  5278  0635  3000               	movlw	0
  5279  0636  00BB               	movwf	___ftmul@f3_as_product+2
  5280  0637  3007               	movlw	7
  5281  0638  00B4               	movwf	??___ftmul
  5282  0639  0834               	movf	??___ftmul,w
  5283  063A  00BC               	movwf	___ftmul@cntr
  5284  063B                     l2608:	
  5285  063B  1C2E               	btfss	___ftmul@f1,0
  5286  063C  2E43               	goto	l2612
  5287  063D  0831               	movf	___ftmul@f2,w
  5288  063E  07B9               	addwf	___ftmul@f3_as_product,f
  5289  063F  0832               	movf	___ftmul@f2+1,w
  5290  0640  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  5291  0641  0833               	movf	___ftmul@f2+2,w
  5292  0642  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  5293  0643                     l2612:	
  5294  0643  3001               	movlw	1
  5295  0644                     u2725:	
  5296  0644  36B0               	lsrf	___ftmul@f1+2,f
  5297  0645  0CAF               	rrf	___ftmul@f1+1,f
  5298  0646  0CAE               	rrf	___ftmul@f1,f
  5299  0647  0B89               	decfsz	9,f
  5300  0648  2E44               	goto	u2725
  5301  0649  3001               	movlw	1
  5302  064A                     u2735:	
  5303  064A  35B1               	lslf	___ftmul@f2,f
  5304  064B  0DB2               	rlf	___ftmul@f2+1,f
  5305  064C  0DB3               	rlf	___ftmul@f2+2,f
  5306  064D  0B89               	decfsz	9,f
  5307  064E  2E4A               	goto	u2735
  5308  064F  3001               	movlw	1
  5309  0650  02BC               	subwf	___ftmul@cntr,f
  5310  0651  1D03               	btfss	3,2
  5311  0652  2E3B               	goto	l2608
  5312  0653  3009               	movlw	9
  5313  0654  00B4               	movwf	??___ftmul
  5314  0655  0834               	movf	??___ftmul,w
  5315  0656  00BC               	movwf	___ftmul@cntr
  5316  0657                     l2620:	
  5317  0657  1C2E               	btfss	___ftmul@f1,0
  5318  0658  2E5F               	goto	l2624
  5319  0659  0831               	movf	___ftmul@f2,w
  5320  065A  07B9               	addwf	___ftmul@f3_as_product,f
  5321  065B  0832               	movf	___ftmul@f2+1,w
  5322  065C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  5323  065D  0833               	movf	___ftmul@f2+2,w
  5324  065E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  5325  065F                     l2624:	
  5326  065F  3001               	movlw	1
  5327  0660                     u2765:	
  5328  0660  36B0               	lsrf	___ftmul@f1+2,f
  5329  0661  0CAF               	rrf	___ftmul@f1+1,f
  5330  0662  0CAE               	rrf	___ftmul@f1,f
  5331  0663  0B89               	decfsz	9,f
  5332  0664  2E60               	goto	u2765
  5333  0665  3001               	movlw	1
  5334  0666                     u2775:	
  5335  0666  36BB               	lsrf	___ftmul@f3_as_product+2,f
  5336  0667  0CBA               	rrf	___ftmul@f3_as_product+1,f
  5337  0668  0CB9               	rrf	___ftmul@f3_as_product,f
  5338  0669  0B89               	decfsz	9,f
  5339  066A  2E66               	goto	u2775
  5340  066B  3001               	movlw	1
  5341  066C  02BC               	subwf	___ftmul@cntr,f
  5342  066D  1D03               	btfss	3,2
  5343  066E  2E57               	goto	l2620
  5344  066F  0839               	movf	___ftmul@f3_as_product,w
  5345  0670  00A0               	movwf	___ftpack@arg
  5346  0671  083A               	movf	___ftmul@f3_as_product+1,w
  5347  0672  00A1               	movwf	___ftpack@arg+1
  5348  0673  083B               	movf	___ftmul@f3_as_product+2,w
  5349  0674  00A2               	movwf	___ftpack@arg+2
  5350  0675  0838               	movf	___ftmul@exp,w
  5351  0676  00B4               	movwf	??___ftmul
  5352  0677  0834               	movf	??___ftmul,w
  5353  0678  00A3               	movwf	___ftpack@exp
  5354  0679  083D               	movf	___ftmul@sign,w
  5355  067A  00B5               	movwf	??___ftmul+1
  5356  067B  0835               	movf	??___ftmul+1,w
  5357  067C  00A4               	movwf	___ftpack@sign
  5358  067D  318F  279B         	fcall	___ftpack
  5359  067F  0020               	movlb	0	; select bank0
  5360  0680  0820               	movf	?___ftpack,w
  5361  0681  00AE               	movwf	?___ftmul
  5362  0682  0821               	movf	?___ftpack+1,w
  5363  0683  00AF               	movwf	?___ftmul+1
  5364  0684  0822               	movf	?___ftpack+2,w
  5365  0685  00B0               	movwf	?___ftmul+2
  5366  0686  0008               	return
  5367  0687                     __end_of___ftmul:	
  5368                           
  5369                           	psect	text17
  5370  0F10                     __ptext17:	
  5371 ;; *************** function ___ftge *****************
  5372 ;; Defined at:
  5373 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  ff1             3   14[BANK0 ] float 
  5376 ;;  ff2             3   17[BANK0 ] float 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;		None
  5379 ;; Return value:  Size  Location     Type
  5380 ;;		None               void
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5388 ;;      Params:         0       6       0       0       0       0       0       0
  5389 ;;      Locals:         0       0       0       0       0       0       0       0
  5390 ;;      Temps:          0       3       0       0       0       0       0       0
  5391 ;;      Totals:         0       9       0       0       0       0       0       0
  5392 ;;Total ram usage:        9 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    4
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_comparare
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function ___ftge
  5404  0F10                     ___ftge:	
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5408  0F10  0020               	movlb	0	; select bank0
  5409  0F11  1FB0               	btfss	___ftge@ff1+2,7
  5410  0F12  2F27               	goto	l2568
  5411  0F13  092E               	comf	___ftge@ff1,w
  5412  0F14  00B4               	movwf	??___ftge
  5413  0F15  092F               	comf	___ftge@ff1+1,w
  5414  0F16  00B5               	movwf	??___ftge+1
  5415  0F17  0930               	comf	___ftge@ff1+2,w
  5416  0F18  00B6               	movwf	??___ftge+2
  5417  0F19  0AB4               	incf	??___ftge,f
  5418  0F1A  1903               	skipnz
  5419  0F1B  0AB5               	incf	??___ftge+1,f
  5420  0F1C  1903               	skipnz
  5421  0F1D  0AB6               	incf	??___ftge+2,f
  5422  0F1E  3000               	movlw	0
  5423  0F1F  0734               	addwf	??___ftge,w
  5424  0F20  00AE               	movwf	___ftge@ff1
  5425  0F21  3000               	movlw	0
  5426  0F22  3D35               	addwfc	??___ftge+1,w
  5427  0F23  00AF               	movwf	___ftge@ff1+1
  5428  0F24  3080               	movlw	128
  5429  0F25  3D36               	addwfc	??___ftge+2,w
  5430  0F26  00B0               	movwf	___ftge@ff1+2
  5431  0F27                     l2568:	
  5432  0F27  1FB3               	btfss	___ftge@ff2+2,7
  5433  0F28  2F3D               	goto	l2572
  5434  0F29  0931               	comf	___ftge@ff2,w
  5435  0F2A  00B4               	movwf	??___ftge
  5436  0F2B  0932               	comf	___ftge@ff2+1,w
  5437  0F2C  00B5               	movwf	??___ftge+1
  5438  0F2D  0933               	comf	___ftge@ff2+2,w
  5439  0F2E  00B6               	movwf	??___ftge+2
  5440  0F2F  0AB4               	incf	??___ftge,f
  5441  0F30  1903               	skipnz
  5442  0F31  0AB5               	incf	??___ftge+1,f
  5443  0F32  1903               	skipnz
  5444  0F33  0AB6               	incf	??___ftge+2,f
  5445  0F34  3000               	movlw	0
  5446  0F35  0734               	addwf	??___ftge,w
  5447  0F36  00B1               	movwf	___ftge@ff2
  5448  0F37  3000               	movlw	0
  5449  0F38  3D35               	addwfc	??___ftge+1,w
  5450  0F39  00B2               	movwf	___ftge@ff2+1
  5451  0F3A  3080               	movlw	128
  5452  0F3B  3D36               	addwfc	??___ftge+2,w
  5453  0F3C  00B3               	movwf	___ftge@ff2+2
  5454  0F3D                     l2572:	
  5455  0F3D  3080               	movlw	128
  5456  0F3E  06B0               	xorwf	___ftge@ff1+2,f
  5457  0F3F  3080               	movlw	128
  5458  0F40  06B3               	xorwf	___ftge@ff2+2,f
  5459  0F41  0833               	movf	___ftge@ff2+2,w
  5460  0F42  0230               	subwf	___ftge@ff1+2,w
  5461  0F43  1D03               	skipz
  5462  0F44  0008               	return
  5463  0F45  0832               	movf	___ftge@ff2+1,w
  5464  0F46  022F               	subwf	___ftge@ff1+1,w
  5465  0F47  1D03               	skipz
  5466  0F48  0008               	return
  5467  0F49  0831               	movf	___ftge@ff2,w
  5468  0F4A  022E               	subwf	___ftge@ff1,w
  5469  0F4B  0008               	return
  5470  0F4C                     __end_of___ftge:	
  5471                           
  5472                           	psect	text18
  5473  0687                     __ptext18:	
  5474 ;; *************** function ___ftdiv *****************
  5475 ;; Defined at:
  5476 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  f2              3   30[BANK0 ] float 
  5479 ;;  f1              3   33[BANK0 ] float 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  f3              3   41[BANK0 ] float 
  5482 ;;  sign            1   45[BANK0 ] unsigned char 
  5483 ;;  exp             1   44[BANK0 ] unsigned char 
  5484 ;;  cntr            1   40[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  3   30[BANK0 ] float 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5494 ;;      Params:         0       6       0       0       0       0       0       0
  5495 ;;      Locals:         0       6       0       0       0       0       0       0
  5496 ;;      Temps:          0       4       0       0       0       0       0       0
  5497 ;;      Totals:         0      16       0       0       0       0       0       0
  5498 ;;Total ram usage:       16 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    5
  5501 ;; This function calls:
  5502 ;;		___ftpack
  5503 ;; This function is called by:
  5504 ;;		_comparare
  5505 ;;		_main
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function ___ftdiv
  5511  0687                     ___ftdiv:	
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5515  0687  0020               	movlb	0	; select bank0
  5516  0688  0841               	movf	___ftdiv@f1,w
  5517  0689  00C4               	movwf	??___ftdiv
  5518  068A  0842               	movf	___ftdiv@f1+1,w
  5519  068B  00C5               	movwf	??___ftdiv+1
  5520  068C  0843               	movf	___ftdiv@f1+2,w
  5521  068D  00C6               	movwf	??___ftdiv+2
  5522  068E  1003               	clrc
  5523  068F  0D45               	rlf	??___ftdiv+1,w
  5524  0690  0D46               	rlf	??___ftdiv+2,w
  5525  0691  00C7               	movwf	??___ftdiv+3
  5526  0692  0847               	movf	??___ftdiv+3,w
  5527  0693  00CC               	movwf	___ftdiv@exp
  5528  0694  084C               	movf	___ftdiv@exp,w
  5529  0695  1D03               	btfss	3,2
  5530  0696  2E9E               	goto	l2528
  5531  0697  3000               	movlw	0
  5532  0698  00BE               	movwf	?___ftdiv
  5533  0699  3000               	movlw	0
  5534  069A  00BF               	movwf	?___ftdiv+1
  5535  069B  3000               	movlw	0
  5536  069C  00C0               	movwf	?___ftdiv+2
  5537  069D  0008               	return
  5538  069E                     l2528:	
  5539  069E  083E               	movf	___ftdiv@f2,w
  5540  069F  00C4               	movwf	??___ftdiv
  5541  06A0  083F               	movf	___ftdiv@f2+1,w
  5542  06A1  00C5               	movwf	??___ftdiv+1
  5543  06A2  0840               	movf	___ftdiv@f2+2,w
  5544  06A3  00C6               	movwf	??___ftdiv+2
  5545  06A4  1003               	clrc
  5546  06A5  0D45               	rlf	??___ftdiv+1,w
  5547  06A6  0D46               	rlf	??___ftdiv+2,w
  5548  06A7  00C7               	movwf	??___ftdiv+3
  5549  06A8  0847               	movf	??___ftdiv+3,w
  5550  06A9  00CD               	movwf	___ftdiv@sign
  5551  06AA  084D               	movf	___ftdiv@sign,w
  5552  06AB  1D03               	btfss	3,2
  5553  06AC  2EB4               	goto	l2534
  5554  06AD  3000               	movlw	0
  5555  06AE  00BE               	movwf	?___ftdiv
  5556  06AF  3000               	movlw	0
  5557  06B0  00BF               	movwf	?___ftdiv+1
  5558  06B1  3000               	movlw	0
  5559  06B2  00C0               	movwf	?___ftdiv+2
  5560  06B3  0008               	return
  5561  06B4                     l2534:	
  5562  06B4  3000               	movlw	0
  5563  06B5  00C9               	movwf	___ftdiv@f3
  5564  06B6  3000               	movlw	0
  5565  06B7  00CA               	movwf	___ftdiv@f3+1
  5566  06B8  3000               	movlw	0
  5567  06B9  00CB               	movwf	___ftdiv@f3+2
  5568  06BA  3089               	movlw	137
  5569  06BB  074D               	addwf	___ftdiv@sign,w
  5570  06BC  00C4               	movwf	??___ftdiv
  5571  06BD  0844               	movf	??___ftdiv,w
  5572  06BE  02CC               	subwf	___ftdiv@exp,f
  5573  06BF  0841               	movf	___ftdiv@f1,w
  5574  06C0  00C4               	movwf	??___ftdiv
  5575  06C1  0842               	movf	___ftdiv@f1+1,w
  5576  06C2  00C5               	movwf	??___ftdiv+1
  5577  06C3  0843               	movf	___ftdiv@f1+2,w
  5578  06C4  00C6               	movwf	??___ftdiv+2
  5579  06C5  3010               	movlw	16
  5580  06C6                     u2585:	
  5581  06C6  36C6               	lsrf	??___ftdiv+2,f
  5582  06C7  0CC5               	rrf	??___ftdiv+1,f
  5583  06C8  0CC4               	rrf	??___ftdiv,f
  5584  06C9  0B89               	decfsz	9,f
  5585  06CA  2EC6               	goto	u2585
  5586  06CB  0844               	movf	??___ftdiv,w
  5587  06CC  00C7               	movwf	??___ftdiv+3
  5588  06CD  0847               	movf	??___ftdiv+3,w
  5589  06CE  00CD               	movwf	___ftdiv@sign
  5590  06CF  083E               	movf	___ftdiv@f2,w
  5591  06D0  00C4               	movwf	??___ftdiv
  5592  06D1  083F               	movf	___ftdiv@f2+1,w
  5593  06D2  00C5               	movwf	??___ftdiv+1
  5594  06D3  0840               	movf	___ftdiv@f2+2,w
  5595  06D4  00C6               	movwf	??___ftdiv+2
  5596  06D5  3010               	movlw	16
  5597  06D6                     u2595:	
  5598  06D6  36C6               	lsrf	??___ftdiv+2,f
  5599  06D7  0CC5               	rrf	??___ftdiv+1,f
  5600  06D8  0CC4               	rrf	??___ftdiv,f
  5601  06D9  0B89               	decfsz	9,f
  5602  06DA  2ED6               	goto	u2595
  5603  06DB  0844               	movf	??___ftdiv,w
  5604  06DC  00C7               	movwf	??___ftdiv+3
  5605  06DD  0847               	movf	??___ftdiv+3,w
  5606  06DE  06CD               	xorwf	___ftdiv@sign,f
  5607  06DF  3080               	movlw	128
  5608  06E0  00C4               	movwf	??___ftdiv
  5609  06E1  0844               	movf	??___ftdiv,w
  5610  06E2  05CD               	andwf	___ftdiv@sign,f
  5611  06E3  17C2               	bsf	___ftdiv@f1+1,7
  5612  06E4  30FF               	movlw	255
  5613  06E5  05C1               	andwf	___ftdiv@f1,f
  5614  06E6  30FF               	movlw	255
  5615  06E7  05C2               	andwf	___ftdiv@f1+1,f
  5616  06E8  3000               	movlw	0
  5617  06E9  05C3               	andwf	___ftdiv@f1+2,f
  5618  06EA  17BF               	bsf	___ftdiv@f2+1,7
  5619  06EB  30FF               	movlw	255
  5620  06EC  05BE               	andwf	___ftdiv@f2,f
  5621  06ED  30FF               	movlw	255
  5622  06EE  05BF               	andwf	___ftdiv@f2+1,f
  5623  06EF  3000               	movlw	0
  5624  06F0  05C0               	andwf	___ftdiv@f2+2,f
  5625  06F1  3018               	movlw	24
  5626  06F2  00C4               	movwf	??___ftdiv
  5627  06F3  0844               	movf	??___ftdiv,w
  5628  06F4  00C8               	movwf	___ftdiv@cntr
  5629  06F5                     l2548:	
  5630  06F5  3001               	movlw	1
  5631  06F6                     u2605:	
  5632  06F6  35C9               	lslf	___ftdiv@f3,f
  5633  06F7  0DCA               	rlf	___ftdiv@f3+1,f
  5634  06F8  0DCB               	rlf	___ftdiv@f3+2,f
  5635  06F9  0B89               	decfsz	9,f
  5636  06FA  2EF6               	goto	u2605
  5637  06FB  0840               	movf	___ftdiv@f2+2,w
  5638  06FC  0243               	subwf	___ftdiv@f1+2,w
  5639  06FD  1D03               	skipz
  5640  06FE  2F05               	goto	u2615
  5641  06FF  083F               	movf	___ftdiv@f2+1,w
  5642  0700  0242               	subwf	___ftdiv@f1+1,w
  5643  0701  1D03               	skipz
  5644  0702  2F05               	goto	u2615
  5645  0703  083E               	movf	___ftdiv@f2,w
  5646  0704  0241               	subwf	___ftdiv@f1,w
  5647  0705                     u2615:	
  5648  0705  1C03               	skipc
  5649  0706  2F0E               	goto	l2556
  5650  0707  083E               	movf	___ftdiv@f2,w
  5651  0708  02C1               	subwf	___ftdiv@f1,f
  5652  0709  083F               	movf	___ftdiv@f2+1,w
  5653  070A  3BC2               	subwfb	___ftdiv@f1+1,f
  5654  070B  0840               	movf	___ftdiv@f2+2,w
  5655  070C  3BC3               	subwfb	___ftdiv@f1+2,f
  5656  070D  1449               	bsf	___ftdiv@f3,0
  5657  070E                     l2556:	
  5658  070E  3001               	movlw	1
  5659  070F                     u2625:	
  5660  070F  35C1               	lslf	___ftdiv@f1,f
  5661  0710  0DC2               	rlf	___ftdiv@f1+1,f
  5662  0711  0DC3               	rlf	___ftdiv@f1+2,f
  5663  0712  0B89               	decfsz	9,f
  5664  0713  2F0F               	goto	u2625
  5665  0714  3001               	movlw	1
  5666  0715  02C8               	subwf	___ftdiv@cntr,f
  5667  0716  1D03               	btfss	3,2
  5668  0717  2EF5               	goto	l2548
  5669  0718  0849               	movf	___ftdiv@f3,w
  5670  0719  00A0               	movwf	___ftpack@arg
  5671  071A  084A               	movf	___ftdiv@f3+1,w
  5672  071B  00A1               	movwf	___ftpack@arg+1
  5673  071C  084B               	movf	___ftdiv@f3+2,w
  5674  071D  00A2               	movwf	___ftpack@arg+2
  5675  071E  084C               	movf	___ftdiv@exp,w
  5676  071F  00C4               	movwf	??___ftdiv
  5677  0720  0844               	movf	??___ftdiv,w
  5678  0721  00A3               	movwf	___ftpack@exp
  5679  0722  084D               	movf	___ftdiv@sign,w
  5680  0723  00C5               	movwf	??___ftdiv+1
  5681  0724  0845               	movf	??___ftdiv+1,w
  5682  0725  00A4               	movwf	___ftpack@sign
  5683  0726  318F  279B         	fcall	___ftpack
  5684  0728  0020               	movlb	0	; select bank0
  5685  0729  0820               	movf	?___ftpack,w
  5686  072A  00BE               	movwf	?___ftdiv
  5687  072B  0821               	movf	?___ftpack+1,w
  5688  072C  00BF               	movwf	?___ftdiv+1
  5689  072D  0822               	movf	?___ftpack+2,w
  5690  072E  00C0               	movwf	?___ftdiv+2
  5691  072F  0008               	return
  5692  0730                     __end_of___ftdiv:	
  5693                           
  5694                           	psect	text19
  5695  0345                     __ptext19:	
  5696 ;; *************** function ___ftadd *****************
  5697 ;; Defined at:
  5698 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  f1              3   33[BANK0 ] float 
  5701 ;;  f2              3   36[BANK0 ] float 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  exp1            1   45[BANK0 ] unsigned char 
  5704 ;;  exp2            1   44[BANK0 ] unsigned char 
  5705 ;;  sign            1   43[BANK0 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  3   33[BANK0 ] float 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2, status,0, pclath, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5715 ;;      Params:         0       6       0       0       0       0       0       0
  5716 ;;      Locals:         0       3       0       0       0       0       0       0
  5717 ;;      Temps:          0       4       0       0       0       0       0       0
  5718 ;;      Totals:         0      13       0       0       0       0       0       0
  5719 ;;Total ram usage:       13 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    5
  5722 ;; This function calls:
  5723 ;;		___ftpack
  5724 ;; This function is called by:
  5725 ;;		_comparare
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           
  5730                           ;psect for function ___ftadd
  5731  0345                     ___ftadd:	
  5732                           
  5733                           ;incstack = 0
  5734                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5735  0345  0020               	movlb	0	; select bank0
  5736  0346  0841               	movf	___ftadd@f1,w
  5737  0347  00C7               	movwf	??___ftadd
  5738  0348  0842               	movf	___ftadd@f1+1,w
  5739  0349  00C8               	movwf	??___ftadd+1
  5740  034A  0843               	movf	___ftadd@f1+2,w
  5741  034B  00C9               	movwf	??___ftadd+2
  5742  034C  1003               	clrc
  5743  034D  0D48               	rlf	??___ftadd+1,w
  5744  034E  0D49               	rlf	??___ftadd+2,w
  5745  034F  00CA               	movwf	??___ftadd+3
  5746  0350  084A               	movf	??___ftadd+3,w
  5747  0351  00CD               	movwf	___ftadd@exp1
  5748  0352  0844               	movf	___ftadd@f2,w
  5749  0353  00C7               	movwf	??___ftadd
  5750  0354  0845               	movf	___ftadd@f2+1,w
  5751  0355  00C8               	movwf	??___ftadd+1
  5752  0356  0846               	movf	___ftadd@f2+2,w
  5753  0357  00C9               	movwf	??___ftadd+2
  5754  0358  1003               	clrc
  5755  0359  0D48               	rlf	??___ftadd+1,w
  5756  035A  0D49               	rlf	??___ftadd+2,w
  5757  035B  00CA               	movwf	??___ftadd+3
  5758  035C  084A               	movf	??___ftadd+3,w
  5759  035D  00CC               	movwf	___ftadd@exp2
  5760  035E  084D               	movf	___ftadd@exp1,w
  5761  035F  1903               	btfsc	3,2
  5762  0360  2B6D               	goto	l2458
  5763  0361  084C               	movf	___ftadd@exp2,w
  5764  0362  024D               	subwf	___ftadd@exp1,w
  5765  0363  1803               	skipnc
  5766  0364  2B74               	goto	l2462
  5767  0365  034D               	decf	___ftadd@exp1,w
  5768  0366  3AFF               	xorlw	255
  5769  0367  074C               	addwf	___ftadd@exp2,w
  5770  0368  00C7               	movwf	??___ftadd
  5771  0369  3019               	movlw	25
  5772  036A  0247               	subwf	??___ftadd,w
  5773  036B  1C03               	skipc
  5774  036C  2B74               	goto	l2462
  5775  036D                     l2458:	
  5776  036D  0844               	movf	___ftadd@f2,w
  5777  036E  00C1               	movwf	?___ftadd
  5778  036F  0845               	movf	___ftadd@f2+1,w
  5779  0370  00C2               	movwf	?___ftadd+1
  5780  0371  0846               	movf	___ftadd@f2+2,w
  5781  0372  00C3               	movwf	?___ftadd+2
  5782  0373  0008               	return
  5783  0374                     l2462:	
  5784  0374  084C               	movf	___ftadd@exp2,w
  5785  0375  1903               	btfsc	3,2
  5786  0376  0008               	return
  5787  0377  084D               	movf	___ftadd@exp1,w
  5788  0378  024C               	subwf	___ftadd@exp2,w
  5789  0379  1803               	skipnc
  5790  037A  2B83               	goto	l2468
  5791  037B  034C               	decf	___ftadd@exp2,w
  5792  037C  3AFF               	xorlw	255
  5793  037D  074D               	addwf	___ftadd@exp1,w
  5794  037E  00C7               	movwf	??___ftadd
  5795  037F  3019               	movlw	25
  5796  0380  0247               	subwf	??___ftadd,w
  5797  0381  1803               	btfsc	3,0
  5798  0382  0008               	return
  5799  0383                     l2468:	
  5800  0383  3006               	movlw	6
  5801  0384  00C7               	movwf	??___ftadd
  5802  0385  0847               	movf	??___ftadd,w
  5803  0386  00CB               	movwf	___ftadd@sign
  5804  0387  1BC3               	btfsc	___ftadd@f1+2,7
  5805  0388  17CB               	bsf	___ftadd@sign,7
  5806  0389  1BC6               	btfsc	___ftadd@f2+2,7
  5807  038A  174B               	bsf	___ftadd@sign,6
  5808  038B  17C2               	bsf	___ftadd@f1+1,7
  5809  038C  30FF               	movlw	255
  5810  038D  05C1               	andwf	___ftadd@f1,f
  5811  038E  30FF               	movlw	255
  5812  038F  05C2               	andwf	___ftadd@f1+1,f
  5813  0390  3000               	movlw	0
  5814  0391  05C3               	andwf	___ftadd@f1+2,f
  5815  0392  17C5               	bsf	___ftadd@f2+1,7
  5816  0393  30FF               	movlw	255
  5817  0394  05C4               	andwf	___ftadd@f2,f
  5818  0395  30FF               	movlw	255
  5819  0396  05C5               	andwf	___ftadd@f2+1,f
  5820  0397  3000               	movlw	0
  5821  0398  05C6               	andwf	___ftadd@f2+2,f
  5822  0399  084C               	movf	___ftadd@exp2,w
  5823  039A  024D               	subwf	___ftadd@exp1,w
  5824  039B  1803               	skipnc
  5825  039C  2BBF               	goto	l2490
  5826  039D                     l2480:	
  5827  039D  3001               	movlw	1
  5828  039E                     u2425:	
  5829  039E  35C4               	lslf	___ftadd@f2,f
  5830  039F  0DC5               	rlf	___ftadd@f2+1,f
  5831  03A0  0DC6               	rlf	___ftadd@f2+2,f
  5832  03A1  0B89               	decfsz	9,f
  5833  03A2  2B9E               	goto	u2425
  5834  03A3  3001               	movlw	1
  5835  03A4  02CC               	subwf	___ftadd@exp2,f
  5836  03A5  084C               	movf	___ftadd@exp2,w
  5837  03A6  064D               	xorwf	___ftadd@exp1,w
  5838  03A7  1903               	skipnz
  5839  03A8  2BBA               	goto	l2488
  5840  03A9  3001               	movlw	1
  5841  03AA  02CB               	subwf	___ftadd@sign,f
  5842  03AB  084B               	movf	___ftadd@sign,w
  5843  03AC  3907               	andlw	7
  5844  03AD  1903               	btfsc	3,2
  5845  03AE  2BBA               	goto	l2488
  5846  03AF  2B9D               	goto	l2480
  5847  03B0                     l2486:	
  5848  03B0  3001               	movlw	1
  5849  03B1                     u2455:	
  5850  03B1  36C3               	lsrf	___ftadd@f1+2,f
  5851  03B2  0CC2               	rrf	___ftadd@f1+1,f
  5852  03B3  0CC1               	rrf	___ftadd@f1,f
  5853  03B4  0B89               	decfsz	9,f
  5854  03B5  2BB1               	goto	u2455
  5855  03B6  3001               	movlw	1
  5856  03B7  00C7               	movwf	??___ftadd
  5857  03B8  0847               	movf	??___ftadd,w
  5858  03B9  07CD               	addwf	___ftadd@exp1,f
  5859  03BA                     l2488:	
  5860  03BA  084D               	movf	___ftadd@exp1,w
  5861  03BB  064C               	xorwf	___ftadd@exp2,w
  5862  03BC  1903               	btfsc	3,2
  5863  03BD  2BE4               	goto	l780
  5864  03BE  2BB0               	goto	l2486
  5865  03BF                     l2490:	
  5866  03BF  084D               	movf	___ftadd@exp1,w
  5867  03C0  024C               	subwf	___ftadd@exp2,w
  5868  03C1  1803               	skipnc
  5869  03C2  2BE4               	goto	l780
  5870  03C3                     l2492:	
  5871  03C3  3001               	movlw	1
  5872  03C4                     u2485:	
  5873  03C4  35C1               	lslf	___ftadd@f1,f
  5874  03C5  0DC2               	rlf	___ftadd@f1+1,f
  5875  03C6  0DC3               	rlf	___ftadd@f1+2,f
  5876  03C7  0B89               	decfsz	9,f
  5877  03C8  2BC4               	goto	u2485
  5878  03C9  3001               	movlw	1
  5879  03CA  02CD               	subwf	___ftadd@exp1,f
  5880  03CB  084C               	movf	___ftadd@exp2,w
  5881  03CC  064D               	xorwf	___ftadd@exp1,w
  5882  03CD  1903               	skipnz
  5883  03CE  2BE0               	goto	l2500
  5884  03CF  3001               	movlw	1
  5885  03D0  02CB               	subwf	___ftadd@sign,f
  5886  03D1  084B               	movf	___ftadd@sign,w
  5887  03D2  3907               	andlw	7
  5888  03D3  1903               	btfsc	3,2
  5889  03D4  2BE0               	goto	l2500
  5890  03D5  2BC3               	goto	l2492
  5891  03D6                     l2498:	
  5892  03D6  3001               	movlw	1
  5893  03D7                     u2515:	
  5894  03D7  36C6               	lsrf	___ftadd@f2+2,f
  5895  03D8  0CC5               	rrf	___ftadd@f2+1,f
  5896  03D9  0CC4               	rrf	___ftadd@f2,f
  5897  03DA  0B89               	decfsz	9,f
  5898  03DB  2BD7               	goto	u2515
  5899  03DC  3001               	movlw	1
  5900  03DD  00C7               	movwf	??___ftadd
  5901  03DE  0847               	movf	??___ftadd,w
  5902  03DF  07CC               	addwf	___ftadd@exp2,f
  5903  03E0                     l2500:	
  5904  03E0  084D               	movf	___ftadd@exp1,w
  5905  03E1  064C               	xorwf	___ftadd@exp2,w
  5906  03E2  1D03               	skipz
  5907  03E3  2BD6               	goto	l2498
  5908  03E4                     l780:	
  5909  03E4  1FCB               	btfss	___ftadd@sign,7
  5910  03E5  2BF6               	goto	l2504
  5911  03E6  30FF               	movlw	255
  5912  03E7  06C1               	xorwf	___ftadd@f1,f
  5913  03E8  30FF               	movlw	255
  5914  03E9  06C2               	xorwf	___ftadd@f1+1,f
  5915  03EA  30FF               	movlw	255
  5916  03EB  06C3               	xorwf	___ftadd@f1+2,f
  5917  03EC  3001               	movlw	1
  5918  03ED  07C1               	addwf	___ftadd@f1,f
  5919  03EE  3000               	movlw	0
  5920  03EF  1803               	skipnc
  5921  03F0  3001               	movlw	1
  5922  03F1  07C2               	addwf	___ftadd@f1+1,f
  5923  03F2  3000               	movlw	0
  5924  03F3  1803               	skipnc
  5925  03F4  3001               	movlw	1
  5926  03F5  07C3               	addwf	___ftadd@f1+2,f
  5927  03F6                     l2504:	
  5928  03F6  1F4B               	btfss	___ftadd@sign,6
  5929  03F7  2C08               	goto	l2508
  5930  03F8  30FF               	movlw	255
  5931  03F9  06C4               	xorwf	___ftadd@f2,f
  5932  03FA  30FF               	movlw	255
  5933  03FB  06C5               	xorwf	___ftadd@f2+1,f
  5934  03FC  30FF               	movlw	255
  5935  03FD  06C6               	xorwf	___ftadd@f2+2,f
  5936  03FE  3001               	movlw	1
  5937  03FF  07C4               	addwf	___ftadd@f2,f
  5938  0400  3000               	movlw	0
  5939  0401  1803               	skipnc
  5940  0402  3001               	movlw	1
  5941  0403  07C5               	addwf	___ftadd@f2+1,f
  5942  0404  3000               	movlw	0
  5943  0405  1803               	skipnc
  5944  0406  3001               	movlw	1
  5945  0407  07C6               	addwf	___ftadd@f2+2,f
  5946  0408                     l2508:	
  5947  0408  01CB               	clrf	___ftadd@sign
  5948  0409  0841               	movf	___ftadd@f1,w
  5949  040A  07C4               	addwf	___ftadd@f2,f
  5950  040B  0842               	movf	___ftadd@f1+1,w
  5951  040C  3DC5               	addwfc	___ftadd@f2+1,f
  5952  040D  0843               	movf	___ftadd@f1+2,w
  5953  040E  3DC6               	addwfc	___ftadd@f2+2,f
  5954  040F  1FC6               	btfss	___ftadd@f2+2,7
  5955  0410  2C23               	goto	l2518
  5956  0411  30FF               	movlw	255
  5957  0412  06C4               	xorwf	___ftadd@f2,f
  5958  0413  30FF               	movlw	255
  5959  0414  06C5               	xorwf	___ftadd@f2+1,f
  5960  0415  30FF               	movlw	255
  5961  0416  06C6               	xorwf	___ftadd@f2+2,f
  5962  0417  3001               	movlw	1
  5963  0418  07C4               	addwf	___ftadd@f2,f
  5964  0419  3000               	movlw	0
  5965  041A  1803               	skipnc
  5966  041B  3001               	movlw	1
  5967  041C  07C5               	addwf	___ftadd@f2+1,f
  5968  041D  3000               	movlw	0
  5969  041E  1803               	skipnc
  5970  041F  3001               	movlw	1
  5971  0420  07C6               	addwf	___ftadd@f2+2,f
  5972  0421  01CB               	clrf	___ftadd@sign
  5973  0422  0ACB               	incf	___ftadd@sign,f
  5974  0423                     l2518:	
  5975  0423  0844               	movf	___ftadd@f2,w
  5976  0424  00A0               	movwf	___ftpack@arg
  5977  0425  0845               	movf	___ftadd@f2+1,w
  5978  0426  00A1               	movwf	___ftpack@arg+1
  5979  0427  0846               	movf	___ftadd@f2+2,w
  5980  0428  00A2               	movwf	___ftpack@arg+2
  5981  0429  084D               	movf	___ftadd@exp1,w
  5982  042A  00C7               	movwf	??___ftadd
  5983  042B  0847               	movf	??___ftadd,w
  5984  042C  00A3               	movwf	___ftpack@exp
  5985  042D  084B               	movf	___ftadd@sign,w
  5986  042E  00C8               	movwf	??___ftadd+1
  5987  042F  0848               	movf	??___ftadd+1,w
  5988  0430  00A4               	movwf	___ftpack@sign
  5989  0431  318F  279B         	fcall	___ftpack
  5990  0433  0020               	movlb	0	; select bank0
  5991  0434  0820               	movf	?___ftpack,w
  5992  0435  00C1               	movwf	?___ftadd
  5993  0436  0821               	movf	?___ftpack+1,w
  5994  0437  00C2               	movwf	?___ftadd+1
  5995  0438  0822               	movf	?___ftpack+2,w
  5996  0439  00C3               	movwf	?___ftadd+2
  5997  043A  0008               	return
  5998  043B                     __end_of___ftadd:	
  5999                           
  6000                           	psect	text20
  6001  0C2C                     __ptext20:	
  6002 ;; *************** function ___bmul *****************
  6003 ;; Defined at:
  6004 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  multiplier      1    wreg     unsigned char 
  6007 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  multiplier      1    3[BANK0 ] unsigned char 
  6010 ;;  product         1    2[BANK0 ] unsigned char 
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  1    wreg      unsigned char 
  6013 ;; Registers used:
  6014 ;;		wreg, status,2, status,0
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6020 ;;      Params:         0       1       0       0       0       0       0       0
  6021 ;;      Locals:         0       2       0       0       0       0       0       0
  6022 ;;      Temps:          0       1       0       0       0       0       0       0
  6023 ;;      Totals:         0       4       0       0       0       0       0       0
  6024 ;;Total ram usage:        4 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    4
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_comparare
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function ___bmul
  6036  0C2C                     ___bmul:	
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6040                           ;___bmul@multiplier stored from wreg
  6041  0C2C  0020               	movlb	0	; select bank0
  6042  0C2D  00A3               	movwf	___bmul@multiplier
  6043  0C2E  01A2               	clrf	___bmul@product
  6044  0C2F                     l2428:	
  6045  0C2F  1C23               	btfss	___bmul@multiplier,0
  6046  0C30  2C35               	goto	l2432
  6047  0C31  0820               	movf	___bmul@multiplicand,w
  6048  0C32  00A1               	movwf	??___bmul
  6049  0C33  0821               	movf	??___bmul,w
  6050  0C34  07A2               	addwf	___bmul@product,f
  6051  0C35                     l2432:	
  6052  0C35  1003               	clrc
  6053  0C36  0DA0               	rlf	___bmul@multiplicand,f
  6054  0C37  1003               	clrc
  6055  0C38  0CA3               	rrf	___bmul@multiplier,f
  6056  0C39  0823               	movf	___bmul@multiplier,w
  6057  0C3A  1D03               	btfss	3,2
  6058  0C3B  2C2F               	goto	l2428
  6059  0C3C  0822               	movf	___bmul@product,w
  6060  0C3D  0008               	return
  6061  0C3E                     __end_of___bmul:	
  6062                           
  6063                           	psect	text21
  6064  0D75                     __ptext21:	
  6065 ;; *************** function ___awtoft *****************
  6066 ;; Defined at:
  6067 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  c               2    8[BANK0 ] int 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  sign            1   13[BANK0 ] unsigned char 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  3    8[BANK0 ] float 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0, pclath, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6081 ;;      Params:         0       3       0       0       0       0       0       0
  6082 ;;      Locals:         0       1       0       0       0       0       0       0
  6083 ;;      Temps:          0       2       0       0       0       0       0       0
  6084 ;;      Totals:         0       6       0       0       0       0       0       0
  6085 ;;Total ram usage:        6 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    5
  6088 ;; This function calls:
  6089 ;;		___ftpack
  6090 ;; This function is called by:
  6091 ;;		_comparare
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function ___awtoft
  6097  0D75                     ___awtoft:	
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6101  0D75  0020               	movlb	0	; select bank0
  6102  0D76  01AD               	clrf	___awtoft@sign
  6103  0D77  1FA9               	btfss	___awtoft@c+1,7
  6104  0D78  2D80               	goto	l2448
  6105  0D79  09A8               	comf	___awtoft@c,f
  6106  0D7A  09A9               	comf	___awtoft@c+1,f
  6107  0D7B  0AA8               	incf	___awtoft@c,f
  6108  0D7C  1903               	skipnz
  6109  0D7D  0AA9               	incf	___awtoft@c+1,f
  6110  0D7E  01AD               	clrf	___awtoft@sign
  6111  0D7F  0AAD               	incf	___awtoft@sign,f
  6112  0D80                     l2448:	
  6113  0D80  0828               	movf	___awtoft@c,w
  6114  0D81  00A0               	movwf	___ftpack@arg
  6115  0D82  0829               	movf	___awtoft@c+1,w
  6116  0D83  00A1               	movwf	___ftpack@arg+1
  6117  0D84  01A2               	clrf	___ftpack@arg+2
  6118  0D85  308E               	movlw	142
  6119  0D86  00AB               	movwf	??___awtoft
  6120  0D87  082B               	movf	??___awtoft,w
  6121  0D88  00A3               	movwf	___ftpack@exp
  6122  0D89  082D               	movf	___awtoft@sign,w
  6123  0D8A  00AC               	movwf	??___awtoft+1
  6124  0D8B  082C               	movf	??___awtoft+1,w
  6125  0D8C  00A4               	movwf	___ftpack@sign
  6126  0D8D  318F  279B         	fcall	___ftpack
  6127  0D8F  0020               	movlb	0	; select bank0
  6128  0D90  0820               	movf	?___ftpack,w
  6129  0D91  00A8               	movwf	?___awtoft
  6130  0D92  0821               	movf	?___ftpack+1,w
  6131  0D93  00A9               	movwf	?___awtoft+1
  6132  0D94  0822               	movf	?___ftpack+2,w
  6133  0D95  00AA               	movwf	?___awtoft+2
  6134  0D96  0008               	return
  6135  0D97                     __end_of___awtoft:	
  6136                           
  6137                           	psect	text22
  6138  0F9B                     __ptext22:	
  6139 ;; *************** function ___ftpack *****************
  6140 ;; Defined at:
  6141 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  arg             3    0[BANK0 ] unsigned um
  6144 ;;  exp             1    3[BANK0 ] unsigned char 
  6145 ;;  sign            1    4[BANK0 ] unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  3    0[BANK0 ] float 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6157 ;;      Params:         0       5       0       0       0       0       0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0       0
  6159 ;;      Temps:          0       3       0       0       0       0       0       0
  6160 ;;      Totals:         0       8       0       0       0       0       0       0
  6161 ;;Total ram usage:        8 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    4
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		___awtoft
  6168 ;;		___ftadd
  6169 ;;		___ftdiv
  6170 ;;		___ftmul
  6171 ;;		___lwtoft
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function ___ftpack
  6177  0F9B                     ___ftpack:	
  6178                           
  6179                           ;incstack = 0
  6180                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6181  0F9B  0020               	movlb	0	; select bank0
  6182  0F9C  0823               	movf	___ftpack@exp,w
  6183  0F9D  1903               	btfsc	3,2
  6184  0F9E  2FA4               	goto	l2268
  6185  0F9F  0822               	movf	___ftpack@arg+2,w
  6186  0FA0  0421               	iorwf	___ftpack@arg+1,w
  6187  0FA1  0420               	iorwf	___ftpack@arg,w
  6188  0FA2  1D03               	skipz
  6189  0FA3  2FB5               	goto	l2274
  6190  0FA4                     l2268:	
  6191  0FA4  3000               	movlw	0
  6192  0FA5  00A0               	movwf	?___ftpack
  6193  0FA6  3000               	movlw	0
  6194  0FA7  00A1               	movwf	?___ftpack+1
  6195  0FA8  3000               	movlw	0
  6196  0FA9  00A2               	movwf	?___ftpack+2
  6197  0FAA  0008               	return
  6198  0FAB                     l2272:	
  6199  0FAB  3001               	movlw	1
  6200  0FAC  00A5               	movwf	??___ftpack
  6201  0FAD  0825               	movf	??___ftpack,w
  6202  0FAE  07A3               	addwf	___ftpack@exp,f
  6203  0FAF  3001               	movlw	1
  6204  0FB0                     u2095:	
  6205  0FB0  36A2               	lsrf	___ftpack@arg+2,f
  6206  0FB1  0CA1               	rrf	___ftpack@arg+1,f
  6207  0FB2  0CA0               	rrf	___ftpack@arg,f
  6208  0FB3  0B89               	decfsz	9,f
  6209  0FB4  2FB0               	goto	u2095
  6210  0FB5                     l2274:	
  6211  0FB5  30FE               	movlw	254
  6212  0FB6  0522               	andwf	___ftpack@arg+2,w
  6213  0FB7  1903               	btfsc	3,2
  6214  0FB8  2FCE               	goto	l749
  6215  0FB9  2FAB               	goto	l2272
  6216  0FBA                     l2276:	
  6217  0FBA  3001               	movlw	1
  6218  0FBB  00A5               	movwf	??___ftpack
  6219  0FBC  0825               	movf	??___ftpack,w
  6220  0FBD  07A3               	addwf	___ftpack@exp,f
  6221  0FBE  3001               	movlw	1
  6222  0FBF  07A0               	addwf	___ftpack@arg,f
  6223  0FC0  3000               	movlw	0
  6224  0FC1  1803               	skipnc
  6225  0FC2  3001               	movlw	1
  6226  0FC3  07A1               	addwf	___ftpack@arg+1,f
  6227  0FC4  3000               	movlw	0
  6228  0FC5  1803               	skipnc
  6229  0FC6  3001               	movlw	1
  6230  0FC7  07A2               	addwf	___ftpack@arg+2,f
  6231  0FC8  3001               	movlw	1
  6232  0FC9                     u2115:	
  6233  0FC9  36A2               	lsrf	___ftpack@arg+2,f
  6234  0FCA  0CA1               	rrf	___ftpack@arg+1,f
  6235  0FCB  0CA0               	rrf	___ftpack@arg,f
  6236  0FCC  0B89               	decfsz	9,f
  6237  0FCD  2FC9               	goto	u2115
  6238  0FCE                     l749:	
  6239  0FCE  30FF               	movlw	255
  6240  0FCF  0522               	andwf	___ftpack@arg+2,w
  6241  0FD0  1903               	btfsc	3,2
  6242  0FD1  2FDB               	goto	l2284
  6243  0FD2  2FBA               	goto	l2276
  6244  0FD3                     l2282:	
  6245  0FD3  3001               	movlw	1
  6246  0FD4  02A3               	subwf	___ftpack@exp,f
  6247  0FD5  3001               	movlw	1
  6248  0FD6                     u2135:	
  6249  0FD6  35A0               	lslf	___ftpack@arg,f
  6250  0FD7  0DA1               	rlf	___ftpack@arg+1,f
  6251  0FD8  0DA2               	rlf	___ftpack@arg+2,f
  6252  0FD9  0B89               	decfsz	9,f
  6253  0FDA  2FD6               	goto	u2135
  6254  0FDB                     l2284:	
  6255  0FDB  1BA1               	btfsc	___ftpack@arg+1,7
  6256  0FDC  2FE1               	goto	l756
  6257  0FDD  3002               	movlw	2
  6258  0FDE  0223               	subwf	___ftpack@exp,w
  6259  0FDF  1803               	skipnc
  6260  0FE0  2FD3               	goto	l2282
  6261  0FE1                     l756:	
  6262  0FE1  1823               	btfsc	___ftpack@exp,0
  6263  0FE2  2FE9               	goto	l757
  6264  0FE3  30FF               	movlw	255
  6265  0FE4  05A0               	andwf	___ftpack@arg,f
  6266  0FE5  307F               	movlw	127
  6267  0FE6  05A1               	andwf	___ftpack@arg+1,f
  6268  0FE7  30FF               	movlw	255
  6269  0FE8  05A2               	andwf	___ftpack@arg+2,f
  6270  0FE9                     l757:	
  6271  0FE9  1003               	clrc
  6272  0FEA  0CA3               	rrf	___ftpack@exp,f
  6273  0FEB  0823               	movf	___ftpack@exp,w
  6274  0FEC  00A5               	movwf	??___ftpack
  6275  0FED  01A6               	clrf	??___ftpack+1
  6276  0FEE  01A7               	clrf	??___ftpack+2
  6277  0FEF  3010               	movlw	16
  6278  0FF0                     u2175:	
  6279  0FF0  35A5               	lslf	??___ftpack,f
  6280  0FF1  0DA6               	rlf	??___ftpack+1,f
  6281  0FF2  0DA7               	rlf	??___ftpack+2,f
  6282  0FF3  0B89               	decfsz	9,f
  6283  0FF4  2FF0               	goto	u2175
  6284  0FF5  0825               	movf	??___ftpack,w
  6285  0FF6  04A0               	iorwf	___ftpack@arg,f
  6286  0FF7  0826               	movf	??___ftpack+1,w
  6287  0FF8  04A1               	iorwf	___ftpack@arg+1,f
  6288  0FF9  0827               	movf	??___ftpack+2,w
  6289  0FFA  04A2               	iorwf	___ftpack@arg+2,f
  6290  0FFB  0824               	movf	___ftpack@sign,w
  6291  0FFC  1903               	btfsc	3,2
  6292  0FFD  0008               	return
  6293  0FFE  17A2               	bsf	___ftpack@arg+2,7
  6294  0FFF  0008               	return
  6295  1000                     __end_of___ftpack:	
  6296                           
  6297                           	psect	text23
  6298  0C3E                     __ptext23:	
  6299 ;; *************** function _comand_lcd *****************
  6300 ;; Defined at:
  6301 ;;		line 96 in file "main.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;		None
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      void 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6315 ;;      Params:         0       0       0       0       0       0       0       0
  6316 ;;      Locals:         0       0       0       0       0       0       0       0
  6317 ;;      Temps:          0       0       0       0       0       0       0       0
  6318 ;;      Totals:         0       0       0       0       0       0       0       0
  6319 ;;Total ram usage:        0 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    6
  6322 ;; This function calls:
  6323 ;;		_send_command_byte
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _comand_lcd
  6331  0C3E                     _comand_lcd:	
  6332                           
  6333                           ;main.c: 98: send_command_byte(0b00101000);
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _comand_lcd: [wreg+status,2+status,0+pclath+cstack]
  6337  0C3E  3028               	movlw	40
  6338  0C3F  318D  2539  318C   	fcall	_send_command_byte
  6339                           
  6340                           ;main.c: 99: send_command_byte(0b00001000);
  6341  0C42  3008               	movlw	8
  6342  0C43  318D  2539  318C   	fcall	_send_command_byte
  6343                           
  6344                           ;main.c: 100: send_command_byte(0b00000001);
  6345  0C46  3001               	movlw	1
  6346  0C47  318D  2539  318C   	fcall	_send_command_byte
  6347                           
  6348                           ;main.c: 101: send_command_byte(0b00000110);
  6349  0C4A  3006               	movlw	6
  6350  0C4B  318D  2539  318C   	fcall	_send_command_byte
  6351                           
  6352                           ;main.c: 103: send_command_byte(0x0C);
  6353  0C4E  300C               	movlw	12
  6354  0C4F  318D  2539         	fcall	_send_command_byte
  6355  0C51  0008               	return
  6356  0C52                     __end_of_comand_lcd:	
  6357                           
  6358                           	psect	text24
  6359  0D39                     __ptext24:	
  6360 ;; *************** function _send_command_byte *****************
  6361 ;; Defined at:
  6362 ;;		line 126 in file "main.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  byte            1    wreg     unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  byte            1    3[BANK0 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, pclath, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6376 ;;      Params:         0       0       0       0       0       0       0       0
  6377 ;;      Locals:         0       1       0       0       0       0       0       0
  6378 ;;      Temps:          0       1       0       0       0       0       0       0
  6379 ;;      Totals:         0       2       0       0       0       0       0       0
  6380 ;;Total ram usage:        2 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    5
  6383 ;; This function calls:
  6384 ;;		_send_nibble
  6385 ;; This function is called by:
  6386 ;;		_comand_lcd
  6387 ;;		_main
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _send_command_byte
  6393  0D39                     _send_command_byte:	
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _send_command_byte: [wreg+status,2+status,0+pclath+cstack]
  6397                           ;send_command_byte@byte stored from wreg
  6398  0D39  0020               	movlb	0	; select bank0
  6399  0D3A  00A3               	movwf	send_command_byte@byte
  6400                           
  6401                           ;main.c: 128: LATDbits.LATD3 = 0;
  6402  0D3B  0022               	movlb	2	; select bank2
  6403  0D3C  118F               	bcf	15,3	;volatile
  6404                           
  6405                           ;main.c: 129: send_nibble(byte >> 4);
  6406  0D3D  0020               	movlb	0	; select bank0
  6407  0D3E  0823               	movf	send_command_byte@byte,w
  6408  0D3F  00A2               	movwf	??_send_command_byte
  6409  0D40  3004               	movlw	4
  6410  0D41                     u2255:	
  6411  0D41  36A2               	lsrf	??_send_command_byte,f
  6412  0D42  0B89               	decfsz	9,f
  6413  0D43  2D41               	goto	u2255
  6414  0D44  0822               	movf	??_send_command_byte,w
  6415  0D45  318D  25BA  318D   	fcall	_send_nibble
  6416                           
  6417                           ;main.c: 130: send_nibble(byte & 0x0F);
  6418  0D48  0020               	movlb	0	; select bank0
  6419  0D49  0823               	movf	send_command_byte@byte,w
  6420  0D4A  390F               	andlw	15
  6421  0D4B  318D  25BA  318D   	fcall	_send_nibble
  6422                           
  6423                           ;main.c: 131: _delay((unsigned long)((1)*(18432000/4000.0)));
  6424  0D4E  3006               	movlw	6
  6425  0D4F  0020               	movlb	0	; select bank0
  6426  0D50  00A2               	movwf	??_send_command_byte
  6427  0D51  30FB               	movlw	251
  6428  0D52                     u5447:	
  6429  0D52  0B89               	decfsz	9,f
  6430  0D53  2D52               	goto	u5447
  6431  0D54  0BA2               	decfsz	??_send_command_byte,f
  6432  0D55  2D52               	goto	u5447
  6433  0D56  0008               	return
  6434  0D57                     __end_of_send_command_byte:	
  6435                           
  6436                           	psect	text25
  6437  0DBA                     __ptext25:	
  6438 ;; *************** function _send_nibble *****************
  6439 ;; Defined at:
  6440 ;;		line 106 in file "main.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  nibble          1    wreg     unsigned char 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  nibble          1    1[BANK0 ] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6454 ;;      Params:         0       0       0       0       0       0       0       0
  6455 ;;      Locals:         0       1       0       0       0       0       0       0
  6456 ;;      Temps:          0       1       0       0       0       0       0       0
  6457 ;;      Totals:         0       2       0       0       0       0       0       0
  6458 ;;Total ram usage:        2 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    4
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_init_lcd
  6465 ;;		_send_command_byte
  6466 ;;		_send_data_byte
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           
  6471                           ;psect for function _send_nibble
  6472  0DBA                     _send_nibble:	
  6473                           
  6474                           ;incstack = 0
  6475                           ; Regs used in _send_nibble: [wreg+status,2+status,0]
  6476                           ;send_nibble@nibble stored from wreg
  6477  0DBA  0020               	movlb	0	; select bank0
  6478  0DBB  00A1               	movwf	send_nibble@nibble
  6479                           
  6480                           ;main.c: 112: LATB = (LATB & 0xF0)+nibble;
  6481  0DBC  0022               	movlb	2	; select bank2
  6482  0DBD  080D               	movf	13,w	;volatile
  6483  0DBE  39F0               	andlw	240
  6484  0DBF  0020               	movlb	0	; select bank0
  6485  0DC0  0721               	addwf	send_nibble@nibble,w
  6486  0DC1  0022               	movlb	2	; select bank2
  6487  0DC2  008D               	movwf	13	;volatile
  6488                           
  6489                           ;main.c: 115: _delay((unsigned long)((1)*(18432000/4000.0)));
  6490  0DC3  3006               	movlw	6
  6491  0DC4  0020               	movlb	0	; select bank0
  6492  0DC5  00A0               	movwf	??_send_nibble
  6493  0DC6  30FB               	movlw	251
  6494  0DC7                     u5457:	
  6495  0DC7  0B89               	decfsz	9,f
  6496  0DC8  2DC7               	goto	u5457
  6497  0DC9  0BA0               	decfsz	??_send_nibble,f
  6498  0DCA  2DC7               	goto	u5457
  6499                           
  6500                           ;main.c: 117: LATDbits.LATD0 = 0;
  6501  0DCB  0022               	movlb	2	; select bank2
  6502  0DCC  100F               	bcf	15,0	;volatile
  6503                           
  6504                           ;main.c: 118: _delay((unsigned long)((1)*(18432000/4000.0)));
  6505  0DCD  3006               	movlw	6
  6506  0DCE  0020               	movlb	0	; select bank0
  6507  0DCF  00A0               	movwf	??_send_nibble
  6508  0DD0  30FB               	movlw	251
  6509  0DD1                     u5467:	
  6510  0DD1  0B89               	decfsz	9,f
  6511  0DD2  2DD1               	goto	u5467
  6512  0DD3  0BA0               	decfsz	??_send_nibble,f
  6513  0DD4  2DD1               	goto	u5467
  6514                           
  6515                           ;main.c: 119: LATDbits.LATD0 = 1;
  6516  0DD5  0022               	movlb	2	; select bank2
  6517  0DD6  140F               	bsf	15,0	;volatile
  6518                           
  6519                           ;main.c: 121: _delay((unsigned long)((2)*(18432000/4000.0)));
  6520  0DD7  300C               	movlw	12
  6521  0DD8  0020               	movlb	0	; select bank0
  6522  0DD9  00A0               	movwf	??_send_nibble
  6523  0DDA  30F7               	movlw	247
  6524  0DDB                     u5477:	
  6525  0DDB  0B89               	decfsz	9,f
  6526  0DDC  2DDB               	goto	u5477
  6527  0DDD  0BA0               	decfsz	??_send_nibble,f
  6528  0DDE  2DDB               	goto	u5477
  6529  0DDF  0008               	return
  6530  0DE0                     __end_of_send_nibble:	
  6531                           
  6532                           	psect	text26
  6533  0730                     __ptext26:	
  6534 ;; *************** function ___fttol *****************
  6535 ;; Defined at:
  6536 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  f1              3    0[BANK0 ] float 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  lval            4    9[BANK0 ] unsigned long 
  6541 ;;  exp1            1   13[BANK0 ] unsigned char 
  6542 ;;  sign1           1    8[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  4    0[BANK0 ] long 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6552 ;;      Params:         0       4       0       0       0       0       0       0
  6553 ;;      Locals:         0       6       0       0       0       0       0       0
  6554 ;;      Temps:          0       4       0       0       0       0       0       0
  6555 ;;      Totals:         0      14       0       0       0       0       0       0
  6556 ;;Total ram usage:       14 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    4
  6559 ;; This function calls:
  6560 ;;		Nothing
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function ___fttol
  6568  0730                     ___fttol:	
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6572  0730  0020               	movlb	0	; select bank0
  6573  0731  0820               	movf	___fttol@f1,w
  6574  0732  00A4               	movwf	??___fttol
  6575  0733  0821               	movf	___fttol@f1+1,w
  6576  0734  00A5               	movwf	??___fttol+1
  6577  0735  0822               	movf	___fttol@f1+2,w
  6578  0736  00A6               	movwf	??___fttol+2
  6579  0737  1003               	clrc
  6580  0738  0D25               	rlf	??___fttol+1,w
  6581  0739  0D26               	rlf	??___fttol+2,w
  6582  073A  00A7               	movwf	??___fttol+3
  6583  073B  0827               	movf	??___fttol+3,w
  6584  073C  00AD               	movwf	___fttol@exp1
  6585  073D  082D               	movf	___fttol@exp1,w
  6586  073E  1D03               	btfss	3,2
  6587  073F  2F49               	goto	l3002
  6588  0740  3000               	movlw	0
  6589  0741  00A3               	movwf	?___fttol+3
  6590  0742  3000               	movlw	0
  6591  0743  00A2               	movwf	?___fttol+2
  6592  0744  3000               	movlw	0
  6593  0745  00A1               	movwf	?___fttol+1
  6594  0746  3000               	movlw	0
  6595  0747  00A0               	movwf	?___fttol
  6596  0748  0008               	return
  6597  0749                     l3002:	
  6598  0749  0820               	movf	___fttol@f1,w
  6599  074A  00A4               	movwf	??___fttol
  6600  074B  0821               	movf	___fttol@f1+1,w
  6601  074C  00A5               	movwf	??___fttol+1
  6602  074D  0822               	movf	___fttol@f1+2,w
  6603  074E  00A6               	movwf	??___fttol+2
  6604  074F  3017               	movlw	23
  6605  0750                     u3265:	
  6606  0750  36A6               	lsrf	??___fttol+2,f
  6607  0751  0CA5               	rrf	??___fttol+1,f
  6608  0752  0CA4               	rrf	??___fttol,f
  6609  0753  0B89               	decfsz	9,f
  6610  0754  2F50               	goto	u3265
  6611  0755  0824               	movf	??___fttol,w
  6612  0756  00A7               	movwf	??___fttol+3
  6613  0757  0827               	movf	??___fttol+3,w
  6614  0758  00A8               	movwf	___fttol@sign1
  6615  0759  17A1               	bsf	___fttol@f1+1,7
  6616  075A  30FF               	movlw	255
  6617  075B  05A0               	andwf	___fttol@f1,f
  6618  075C  30FF               	movlw	255
  6619  075D  05A1               	andwf	___fttol@f1+1,f
  6620  075E  3000               	movlw	0
  6621  075F  05A2               	andwf	___fttol@f1+2,f
  6622  0760  0820               	movf	___fttol@f1,w
  6623  0761  00A9               	movwf	___fttol@lval
  6624  0762  0821               	movf	___fttol@f1+1,w
  6625  0763  00AA               	movwf	___fttol@lval+1
  6626  0764  0822               	movf	___fttol@f1+2,w
  6627  0765  00AB               	movwf	___fttol@lval+2
  6628  0766  01AC               	clrf	___fttol@lval+3
  6629  0767  308E               	movlw	142
  6630  0768  02AD               	subwf	___fttol@exp1,f
  6631  0769  1FAD               	btfss	___fttol@exp1,7
  6632  076A  2F87               	goto	l3022
  6633  076B  082D               	movf	___fttol@exp1,w
  6634  076C  3A80               	xorlw	128
  6635  076D  3E8F               	addlw	143
  6636  076E  1803               	skipnc
  6637  076F  2F79               	goto	l3020
  6638  0770  3000               	movlw	0
  6639  0771  00A3               	movwf	?___fttol+3
  6640  0772  3000               	movlw	0
  6641  0773  00A2               	movwf	?___fttol+2
  6642  0774  3000               	movlw	0
  6643  0775  00A1               	movwf	?___fttol+1
  6644  0776  3000               	movlw	0
  6645  0777  00A0               	movwf	?___fttol
  6646  0778  0008               	return
  6647  0779                     l3020:	
  6648  0779  3001               	movlw	1
  6649  077A                     u3295:	
  6650  077A  36AC               	lsrf	___fttol@lval+3,f
  6651  077B  0CAB               	rrf	___fttol@lval+2,f
  6652  077C  0CAA               	rrf	___fttol@lval+1,f
  6653  077D  0CA9               	rrf	___fttol@lval,f
  6654  077E  0B89               	decfsz	9,f
  6655  077F  2F7A               	goto	u3295
  6656  0780  3001               	movlw	1
  6657  0781  00A4               	movwf	??___fttol
  6658  0782  0824               	movf	??___fttol,w
  6659  0783  07AD               	addwf	___fttol@exp1,f
  6660  0784  1903               	btfsc	3,2
  6661  0785  2FA0               	goto	l3030
  6662  0786  2F79               	goto	l3020
  6663  0787                     l3022:	
  6664  0787  3018               	movlw	24
  6665  0788  022D               	subwf	___fttol@exp1,w
  6666  0789  1C03               	skipc
  6667  078A  2F9D               	goto	l840
  6668  078B  3000               	movlw	0
  6669  078C  00A3               	movwf	?___fttol+3
  6670  078D  3000               	movlw	0
  6671  078E  00A2               	movwf	?___fttol+2
  6672  078F  3000               	movlw	0
  6673  0790  00A1               	movwf	?___fttol+1
  6674  0791  3000               	movlw	0
  6675  0792  00A0               	movwf	?___fttol
  6676  0793  0008               	return
  6677  0794                     l3028:	
  6678  0794  3001               	movlw	1
  6679  0795                     u3325:	
  6680  0795  35A9               	lslf	___fttol@lval,f
  6681  0796  0DAA               	rlf	___fttol@lval+1,f
  6682  0797  0DAB               	rlf	___fttol@lval+2,f
  6683  0798  0DAC               	rlf	___fttol@lval+3,f
  6684  0799  0B89               	decfsz	9,f
  6685  079A  2F95               	goto	u3325
  6686  079B  3001               	movlw	1
  6687  079C  02AD               	subwf	___fttol@exp1,f
  6688  079D                     l840:	
  6689  079D  082D               	movf	___fttol@exp1,w
  6690  079E  1D03               	btfss	3,2
  6691  079F  2F94               	goto	l3028
  6692  07A0                     l3030:	
  6693  07A0  0828               	movf	___fttol@sign1,w
  6694  07A1  1903               	btfsc	3,2
  6695  07A2  2FAE               	goto	l3034
  6696  07A3  09A9               	comf	___fttol@lval,f
  6697  07A4  09AA               	comf	___fttol@lval+1,f
  6698  07A5  09AB               	comf	___fttol@lval+2,f
  6699  07A6  09AC               	comf	___fttol@lval+3,f
  6700  07A7  0AA9               	incf	___fttol@lval,f
  6701  07A8  1903               	skipnz
  6702  07A9  0AAA               	incf	___fttol@lval+1,f
  6703  07AA  1903               	skipnz
  6704  07AB  0AAB               	incf	___fttol@lval+2,f
  6705  07AC  1903               	skipnz
  6706  07AD  0AAC               	incf	___fttol@lval+3,f
  6707  07AE                     l3034:	
  6708  07AE  082C               	movf	___fttol@lval+3,w
  6709  07AF  00A3               	movwf	?___fttol+3
  6710  07B0  082B               	movf	___fttol@lval+2,w
  6711  07B1  00A2               	movwf	?___fttol+2
  6712  07B2  082A               	movf	___fttol@lval+1,w
  6713  07B3  00A1               	movwf	?___fttol+1
  6714  07B4  0829               	movf	___fttol@lval,w
  6715  07B5  00A0               	movwf	?___fttol
  6716  07B6  0008               	return
  6717  07B7                     __end_of___fttol:	
  6718                           
  6719                           	psect	text27
  6720  0C1A                     __ptext27:	
  6721 ;; *************** function _SYSTEM_Initialize *****************
  6722 ;; Defined at:
  6723 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, status,2, status,0, pclath, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6737 ;;      Params:         0       0       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    6
  6744 ;; This function calls:
  6745 ;;		_ADC_Initialize
  6746 ;;		_EUSART_Initialize
  6747 ;;		_OSCILLATOR_Initialize
  6748 ;;		_PIN_MANAGER_Initialize
  6749 ;;		_TMR1_Initialize
  6750 ;;		_WDT_Initialize
  6751 ;; This function is called by:
  6752 ;;		_main
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           
  6757                           ;psect for function _SYSTEM_Initialize
  6758  0C1A                     _SYSTEM_Initialize:	
  6759                           
  6760                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6761                           
  6762                           ;incstack = 0
  6763                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6764  0C1A  318D  2597  318C   	fcall	_PIN_MANAGER_Initialize
  6765                           
  6766                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6767  0C1D  318B  23E1  318C   	fcall	_OSCILLATOR_Initialize
  6768                           
  6769                           ;mcc.c: 75: WDT_Initialize();
  6770  0C20  318B  23DD  318C   	fcall	_WDT_Initialize
  6771                           
  6772                           ;mcc.c: 76: TMR1_Initialize();
  6773  0C23  318C  2492  318C   	fcall	_TMR1_Initialize
  6774                           
  6775                           ;mcc.c: 77: ADC_Initialize();
  6776  0C26  318B  23F2  318C   	fcall	_ADC_Initialize
  6777                           
  6778                           ;mcc.c: 78: EUSART_Initialize();
  6779  0C29  318C  24FE         	fcall	_EUSART_Initialize
  6780  0C2B  0008               	return
  6781  0C2C                     __end_of_SYSTEM_Initialize:	
  6782                           
  6783                           	psect	text28
  6784  0BDD                     __ptext28:	
  6785 ;; *************** function _WDT_Initialize *****************
  6786 ;; Defined at:
  6787 ;;		line 89 in file "mcc_generated_files/mcc.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;		None
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;		None
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      void 
  6794 ;; Registers used:
  6795 ;;		wreg
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6801 ;;      Params:         0       0       0       0       0       0       0       0
  6802 ;;      Locals:         0       0       0       0       0       0       0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0       0
  6804 ;;      Totals:         0       0       0       0       0       0       0       0
  6805 ;;Total ram usage:        0 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    4
  6808 ;; This function calls:
  6809 ;;		Nothing
  6810 ;; This function is called by:
  6811 ;;		_SYSTEM_Initialize
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _WDT_Initialize
  6817  0BDD                     _WDT_Initialize:	
  6818                           
  6819                           ;mcc.c: 92: WDTCON = 0x16;
  6820                           
  6821                           ;incstack = 0
  6822                           ; Regs used in _WDT_Initialize: [wreg]
  6823  0BDD  3016               	movlw	22
  6824  0BDE  0021               	movlb	1	; select bank1
  6825  0BDF  0097               	movwf	23	;volatile
  6826  0BE0  0008               	return
  6827  0BE1                     __end_of_WDT_Initialize:	
  6828                           
  6829                           	psect	text29
  6830  0C92                     __ptext29:	
  6831 ;; *************** function _TMR1_Initialize *****************
  6832 ;; Defined at:
  6833 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;		None
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;		None
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg, status,2, status,0, pclath, cstack
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6847 ;;      Params:         0       0       0       0       0       0       0       0
  6848 ;;      Locals:         0       0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0
  6850 ;;      Totals:         0       0       0       0       0       0       0       0
  6851 ;;Total ram usage:        0 bytes
  6852 ;; Hardware stack levels used:    1
  6853 ;; Hardware stack levels required when called:    5
  6854 ;; This function calls:
  6855 ;;		_TMR1_SetInterruptHandler
  6856 ;;		_TMR1_StartTimer
  6857 ;; This function is called by:
  6858 ;;		_SYSTEM_Initialize
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _TMR1_Initialize
  6864  0C92                     _TMR1_Initialize:	
  6865                           
  6866                           ;tmr1.c: 69: T1CON = 0x00;
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6870  0C92  0020               	movlb	0	; select bank0
  6871  0C93  0198               	clrf	24	;volatile
  6872                           
  6873                           ;tmr1.c: 72: T1GCON = 0x00;
  6874  0C94  0199               	clrf	25	;volatile
  6875                           
  6876                           ;tmr1.c: 75: TMR1H = 0xEE;
  6877  0C95  30EE               	movlw	238
  6878  0C96  0097               	movwf	23	;volatile
  6879                           
  6880                           ;tmr1.c: 78: TMR1L = 0x00;
  6881  0C97  0196               	clrf	22	;volatile
  6882                           
  6883                           ;tmr1.c: 81: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6884  0C98  0817               	movf	23,w	;volatile
  6885  0C99  00EE               	movwf	_timer1ReloadVal+1	;volatile
  6886  0C9A  0816               	movf	22,w	;volatile
  6887  0C9B  00ED               	movwf	_timer1ReloadVal	;volatile
  6888                           
  6889                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
  6890  0C9C  1011               	bcf	17,0	;volatile
  6891                           
  6892                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
  6893  0C9D  0021               	movlb	1	; select bank1
  6894  0C9E  1411               	bsf	17,0	;volatile
  6895                           
  6896                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6897  0C9F  30D3               	movlw	low _TMR1_DefaultInterruptHandler
  6898  0CA0  0020               	movlb	0	; select bank0
  6899  0CA1  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6900  0CA2  300B               	movlw	high _TMR1_DefaultInterruptHandler
  6901  0CA3  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6902  0CA4  318B  23FB  318C   	fcall	_TMR1_SetInterruptHandler
  6903                           
  6904                           ;tmr1.c: 93: TMR1_StartTimer();
  6905  0CA7  318B  23DA         	fcall	_TMR1_StartTimer
  6906  0CA9  0008               	return
  6907  0CAA                     __end_of_TMR1_Initialize:	
  6908                           
  6909                           	psect	text30
  6910  0BDA                     __ptext30:	
  6911 ;; *************** function _TMR1_StartTimer *****************
  6912 ;; Defined at:
  6913 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		None
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6927 ;;      Params:         0       0       0       0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    4
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_TMR1_Initialize
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function _TMR1_StartTimer
  6943  0BDA                     _TMR1_StartTimer:	
  6944                           
  6945                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _TMR1_StartTimer: []
  6949  0BDA  0020               	movlb	0	; select bank0
  6950  0BDB  1418               	bsf	24,0	;volatile
  6951  0BDC  0008               	return
  6952  0BDD                     __end_of_TMR1_StartTimer:	
  6953                           
  6954                           	psect	text31
  6955  0BFB                     __ptext31:	
  6956 ;; *************** function _TMR1_SetInterruptHandler *****************
  6957 ;; Defined at:
  6958 ;;		line 217 in file "mcc_generated_files/tmr1.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6961 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6973 ;;      Params:         0       2       0       0       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0
  6976 ;;      Totals:         0       2       0       0       0       0       0       0
  6977 ;;Total ram usage:        2 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    4
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_TMR1_Initialize
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           
  6988                           ;psect for function _TMR1_SetInterruptHandler
  6989  0BFB                     _TMR1_SetInterruptHandler:	
  6990                           
  6991                           ;tmr1.c: 218: TMR1_InterruptHandler = InterruptHandler;
  6992                           
  6993                           ;incstack = 0
  6994                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6995  0BFB  0020               	movlb	0	; select bank0
  6996  0BFC  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6997  0BFD  0022               	movlb	2	; select bank2
  6998  0BFE  00E7               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  6999  0BFF  0020               	movlb	0	; select bank0
  7000  0C00  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  7001  0C01  0022               	movlb	2	; select bank2
  7002  0C02  00E6               	movwf	_TMR1_InterruptHandler^(0+256)
  7003  0C03  0008               	return
  7004  0C04                     __end_of_TMR1_SetInterruptHandler:	
  7005                           
  7006                           	psect	text32
  7007  0D97                     __ptext32:	
  7008 ;; *************** function _PIN_MANAGER_Initialize *****************
  7009 ;; Defined at:
  7010 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;		None
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  1    wreg      void 
  7017 ;; Registers used:
  7018 ;;		wreg, status,2
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7024 ;;      Params:         0       0       0       0       0       0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0       0
  7026 ;;      Temps:          0       0       0       0       0       0       0       0
  7027 ;;      Totals:         0       0       0       0       0       0       0       0
  7028 ;;Total ram usage:        0 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    4
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		_SYSTEM_Initialize
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           
  7039                           ;psect for function _PIN_MANAGER_Initialize
  7040  0D97                     _PIN_MANAGER_Initialize:	
  7041                           
  7042                           ;pin_manager.c: 57: LATE = 0x00;
  7043                           
  7044                           ;incstack = 0
  7045                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7046  0D97  0022               	movlb	2	; select bank2
  7047  0D98  0190               	clrf	16	;volatile
  7048                           
  7049                           ;pin_manager.c: 58: LATD = 0x00;
  7050  0D99  018F               	clrf	15	;volatile
  7051                           
  7052                           ;pin_manager.c: 59: LATA = 0x00;
  7053  0D9A  018C               	clrf	12	;volatile
  7054                           
  7055                           ;pin_manager.c: 60: LATB = 0x00;
  7056  0D9B  018D               	clrf	13	;volatile
  7057                           
  7058                           ;pin_manager.c: 61: LATC = 0x00;
  7059  0D9C  018E               	clrf	14	;volatile
  7060                           
  7061                           ;pin_manager.c: 66: TRISE = 0x0F;
  7062  0D9D  300F               	movlw	15
  7063  0D9E  0021               	movlb	1	; select bank1
  7064  0D9F  0090               	movwf	16	;volatile
  7065                           
  7066                           ;pin_manager.c: 67: TRISA = 0xFF;
  7067  0DA0  30FF               	movlw	255
  7068  0DA1  008C               	movwf	12	;volatile
  7069                           
  7070                           ;pin_manager.c: 68: TRISB = 0x00;
  7071  0DA2  018D               	clrf	13	;volatile
  7072                           
  7073                           ;pin_manager.c: 69: TRISC = 0xBF;
  7074  0DA3  30BF               	movlw	191
  7075  0DA4  008E               	movwf	14	;volatile
  7076                           
  7077                           ;pin_manager.c: 70: TRISD = 0xFF;
  7078  0DA5  30FF               	movlw	255
  7079  0DA6  008F               	movwf	15	;volatile
  7080                           
  7081                           ;pin_manager.c: 75: ANSELB = 0x0F;
  7082  0DA7  300F               	movlw	15
  7083  0DA8  0023               	movlb	3	; select bank3
  7084  0DA9  008D               	movwf	13	;volatile
  7085                           
  7086                           ;pin_manager.c: 76: ANSELD = 0xFF;
  7087  0DAA  30FF               	movlw	255
  7088  0DAB  008F               	movwf	15	;volatile
  7089                           
  7090                           ;pin_manager.c: 77: ANSELE = 0x07;
  7091  0DAC  3007               	movlw	7
  7092  0DAD  0090               	movwf	16	;volatile
  7093                           
  7094                           ;pin_manager.c: 78: ANSELA = 0x3F;
  7095  0DAE  303F               	movlw	63
  7096  0DAF  008C               	movwf	12	;volatile
  7097                           
  7098                           ;pin_manager.c: 83: WPUE = 0x08;
  7099  0DB0  3008               	movlw	8
  7100  0DB1  0024               	movlb	4	; select bank4
  7101  0DB2  0090               	movwf	16	;volatile
  7102                           
  7103                           ;pin_manager.c: 84: WPUB = 0xFF;
  7104  0DB3  30FF               	movlw	255
  7105  0DB4  008D               	movwf	13	;volatile
  7106                           
  7107                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
  7108  0DB5  0021               	movlb	1	; select bank1
  7109  0DB6  1395               	bcf	21,7	;volatile
  7110                           
  7111                           ;pin_manager.c: 91: APFCON = 0x00;
  7112  0DB7  0022               	movlb	2	; select bank2
  7113  0DB8  019D               	clrf	29	;volatile
  7114  0DB9  0008               	return
  7115  0DBA                     __end_of_PIN_MANAGER_Initialize:	
  7116                           
  7117                           	psect	text33
  7118  0BE1                     __ptext33:	
  7119 ;; *************** function _OSCILLATOR_Initialize *****************
  7120 ;; Defined at:
  7121 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7135 ;;      Params:         0       0       0       0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0
  7138 ;;      Totals:         0       0       0       0       0       0       0       0
  7139 ;;Total ram usage:        0 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    4
  7142 ;; This function calls:
  7143 ;;		Nothing
  7144 ;; This function is called by:
  7145 ;;		_SYSTEM_Initialize
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _OSCILLATOR_Initialize
  7151  0BE1                     _OSCILLATOR_Initialize:	
  7152                           
  7153                           ;mcc.c: 84: OSCCON = 0x38;
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7157  0BE1  3038               	movlw	56
  7158  0BE2  0021               	movlb	1	; select bank1
  7159  0BE3  0099               	movwf	25	;volatile
  7160                           
  7161                           ;mcc.c: 86: OSCTUNE = 0x00;
  7162  0BE4  0198               	clrf	24	;volatile
  7163  0BE5  0008               	return
  7164  0BE6                     __end_of_OSCILLATOR_Initialize:	
  7165                           
  7166                           	psect	text34
  7167  0CFE                     __ptext34:	
  7168 ;; *************** function _EUSART_Initialize *****************
  7169 ;; Defined at:
  7170 ;;		line 76 in file "mcc_generated_files/eusart.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;		None
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      void 
  7177 ;; Registers used:
  7178 ;;		wreg, status,2
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7184 ;;      Params:         0       0       0       0       0       0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0       0
  7186 ;;      Temps:          0       1       0       0       0       0       0       0
  7187 ;;      Totals:         0       1       0       0       0       0       0       0
  7188 ;;Total ram usage:        1 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; Hardware stack levels required when called:    4
  7191 ;; This function calls:
  7192 ;;		Nothing
  7193 ;; This function is called by:
  7194 ;;		_SYSTEM_Initialize
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _EUSART_Initialize
  7200  0CFE                     _EUSART_Initialize:	
  7201                           
  7202                           ;eusart.c: 79: PIE1bits.RCIE = 0;
  7203                           
  7204                           ;incstack = 0
  7205                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7206  0CFE  0021               	movlb	1	; select bank1
  7207  0CFF  1291               	bcf	17,5	;volatile
  7208                           
  7209                           ;eusart.c: 80: PIE1bits.TXIE = 0;
  7210  0D00  1211               	bcf	17,4	;volatile
  7211                           
  7212                           ;eusart.c: 85: BAUDCON = 0x08;
  7213  0D01  3008               	movlw	8
  7214  0D02  0023               	movlb	3	; select bank3
  7215  0D03  009F               	movwf	31	;volatile
  7216                           
  7217                           ;eusart.c: 88: RCSTA = 0x90;
  7218  0D04  3090               	movlw	144
  7219  0D05  009D               	movwf	29	;volatile
  7220                           
  7221                           ;eusart.c: 91: TXSTA = 0x24;
  7222  0D06  3024               	movlw	36
  7223  0D07  009E               	movwf	30	;volatile
  7224                           
  7225                           ;eusart.c: 94: SPBRGL = 0xDF;
  7226  0D08  30DF               	movlw	223
  7227  0D09  009B               	movwf	27	;volatile
  7228                           
  7229                           ;eusart.c: 97: SPBRGH = 0x01;
  7230  0D0A  3001               	movlw	1
  7231  0D0B  009C               	movwf	28	;volatile
  7232                           
  7233                           ;eusart.c: 101: eusartTxHead = 0;
  7234  0D0C  01FD               	clrf	_eusartTxHead	;volatile
  7235                           
  7236                           ;eusart.c: 102: eusartTxTail = 0;
  7237  0D0D  01FC               	clrf	_eusartTxTail	;volatile
  7238                           
  7239                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7240  0D0E  3008               	movlw	8
  7241  0D0F  0020               	movlb	0	; select bank0
  7242  0D10  00A0               	movwf	??_EUSART_Initialize
  7243  0D11  0820               	movf	??_EUSART_Initialize,w
  7244  0D12  0022               	movlb	2	; select bank2
  7245  0D13  00E8               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  7246                           
  7247                           ;eusart.c: 105: eusartRxHead = 0;
  7248  0D14  01FB               	clrf	_eusartRxHead	;volatile
  7249                           
  7250                           ;eusart.c: 106: eusartRxTail = 0;
  7251  0D15  0020               	movlb	0	; select bank0
  7252  0D16  01EC               	clrf	_eusartRxTail	;volatile
  7253                           
  7254                           ;eusart.c: 107: eusartRxCount = 0;
  7255  0D17  0021               	movlb	1	; select bank1
  7256  0D18  01EF               	clrf	_eusartRxCount^(0+128)	;volatile
  7257                           
  7258                           ;eusart.c: 110: PIE1bits.RCIE = 1;
  7259  0D19  1691               	bsf	17,5	;volatile
  7260  0D1A  0008               	return
  7261  0D1B                     __end_of_EUSART_Initialize:	
  7262                           
  7263                           	psect	text35
  7264  0BF2                     __ptext35:	
  7265 ;; *************** function _ADC_Initialize *****************
  7266 ;; Defined at:
  7267 ;;		line 64 in file "mcc_generated_files/adc.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7281 ;;      Params:         0       0       0       0       0       0       0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0
  7283 ;;      Temps:          0       0       0       0       0       0       0       0
  7284 ;;      Totals:         0       0       0       0       0       0       0       0
  7285 ;;Total ram usage:        0 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    4
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_SYSTEM_Initialize
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _ADC_Initialize
  7297  0BF2                     _ADC_Initialize:	
  7298                           
  7299                           ;adc.c: 69: ADCON0 = 0x01;
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7303  0BF2  3001               	movlw	1
  7304  0BF3  0021               	movlb	1	; select bank1
  7305  0BF4  009D               	movwf	29	;volatile
  7306                           
  7307                           ;adc.c: 72: ADCON1 = 0x60;
  7308  0BF5  3060               	movlw	96
  7309  0BF6  009E               	movwf	30	;volatile
  7310                           
  7311                           ;adc.c: 75: ADRESL = 0x00;
  7312  0BF7  019B               	clrf	27	;volatile
  7313                           
  7314                           ;adc.c: 78: ADRESH = 0x00;
  7315  0BF8  019C               	clrf	28	;volatile
  7316                           
  7317                           ;adc.c: 81: PIE1bits.ADIE = 1;
  7318  0BF9  1711               	bsf	17,6	;volatile
  7319  0BFA  0008               	return
  7320  0BFB                     __end_of_ADC_Initialize:	
  7321                           
  7322                           	psect	text36
  7323  0BD7                     __ptext36:	
  7324 ;; *************** function _ADC_StartConversion *****************
  7325 ;; Defined at:
  7326 ;;		line 92 in file "mcc_generated_files/adc.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		None
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7340 ;;      Params:         0       0       0       0       0       0       0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    4
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_main
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           
  7355                           ;psect for function _ADC_StartConversion
  7356  0BD7                     _ADC_StartConversion:	
  7357                           
  7358                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _ADC_StartConversion: []
  7362  0BD7  0021               	movlb	1	; select bank1
  7363  0BD8  149D               	bsf	29,1	;volatile
  7364  0BD9  0008               	return
  7365  0BDA                     __end_of_ADC_StartConversion:	
  7366                           
  7367                           	psect	intentry
  7368  0004                     __pintentry:	
  7369 ;; *************** function _INTERRUPT_InterruptManager *****************
  7370 ;; Defined at:
  7371 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      void 
  7378 ;; Registers used:
  7379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7385 ;;      Params:         0       0       0       0       0       0       0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0       0
  7387 ;;      Temps:          1       0       0       0       0       0       0       0
  7388 ;;      Totals:         1       0       0       0       0       0       0       0
  7389 ;;Total ram usage:        1 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    3
  7392 ;; This function calls:
  7393 ;;		_ADC_ISR
  7394 ;;		_EUSART_Receive_ISR
  7395 ;;		_EUSART_Transmit_ISR
  7396 ;;		_TMR1_ISR
  7397 ;; This function is called by:
  7398 ;;		Interrupt level 1
  7399 ;; This function uses a non-reentrant model
  7400 ;;
  7401                           
  7402  0004                     _INTERRUPT_InterruptManager:	
  7403                           
  7404                           ;incstack = 0
  7405  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7406                           
  7407                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7408  0005  3180               	pagesel	$
  7409  0006  0020               	movlb	0	; select bank0
  7410  0007  087F               	movf	127,w
  7411  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  7412                           
  7413                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  7414  0009  1F0B               	btfss	11,6	;volatile
  7415  000A  2815               	goto	i1l173
  7416  000B  0021               	movlb	1	; select bank1
  7417  000C  1F11               	btfss	17,6	;volatile
  7418  000D  2815               	goto	i1l173
  7419  000E  0020               	movlb	0	; select bank0
  7420  000F  1F11               	btfss	17,6	;volatile
  7421  0010  2815               	goto	i1l173
  7422                           
  7423                           ;interrupt_manager.c: 55: {
  7424                           ;interrupt_manager.c: 56: ADC_ISR();
  7425  0011  318C  240D  3180   	fcall	_ADC_ISR
  7426                           
  7427                           ;interrupt_manager.c: 57: }
  7428  0014  2837               	goto	i1l181
  7429  0015                     i1l173:	
  7430                           
  7431                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  7432  0015  1F0B               	btfss	11,6	;volatile
  7433  0016  2821               	goto	i1l175
  7434  0017  0021               	movlb	1	; select bank1
  7435  0018  1E11               	btfss	17,4	;volatile
  7436  0019  2821               	goto	i1l175
  7437  001A  0020               	movlb	0	; select bank0
  7438  001B  1E11               	btfss	17,4	;volatile
  7439  001C  2821               	goto	i1l175
  7440                           
  7441                           ;interrupt_manager.c: 59: {
  7442                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  7443  001D  318D  251B  3180   	fcall	_EUSART_Transmit_ISR
  7444                           
  7445                           ;interrupt_manager.c: 61: }
  7446  0020  2837               	goto	i1l181
  7447  0021                     i1l175:	
  7448                           
  7449                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7450  0021  1F0B               	btfss	11,6	;volatile
  7451  0022  282D               	goto	i1l177
  7452  0023  0021               	movlb	1	; select bank1
  7453  0024  1E91               	btfss	17,5	;volatile
  7454  0025  282D               	goto	i1l177
  7455  0026  0020               	movlb	0	; select bank0
  7456  0027  1E91               	btfss	17,5	;volatile
  7457  0028  282D               	goto	i1l177
  7458                           
  7459                           ;interrupt_manager.c: 63: {
  7460                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  7461  0029  318E  269D  3180   	fcall	_EUSART_Receive_ISR
  7462                           
  7463                           ;interrupt_manager.c: 65: }
  7464  002C  2837               	goto	i1l181
  7465  002D                     i1l177:	
  7466                           
  7467                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  7468  002D  1F0B               	btfss	11,6	;volatile
  7469  002E  2837               	goto	i1l181
  7470  002F  0021               	movlb	1	; select bank1
  7471  0030  1C11               	btfss	17,0	;volatile
  7472  0031  2837               	goto	i1l181
  7473  0032  0020               	movlb	0	; select bank0
  7474  0033  1C11               	btfss	17,0	;volatile
  7475  0034  2837               	goto	i1l181
  7476                           
  7477                           ;interrupt_manager.c: 67: {
  7478                           ;interrupt_manager.c: 68: TMR1_ISR();
  7479  0035  318C  24C6         	fcall	_TMR1_ISR
  7480  0037                     i1l181:	
  7481                           ;interrupt_manager.c: 70: else
  7482                           ;interrupt_manager.c: 71: {
  7483                           
  7484                           ;interrupt_manager.c: 69: }
  7485                           
  7486  0037  0879               	movf	??_INTERRUPT_InterruptManager,w
  7487  0038  0020               	movlb	0	; select bank0
  7488  0039  00FF               	movwf	127
  7489  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7490  003B  0009               	retfie
  7491  003C                     __end_of_INTERRUPT_InterruptManager:	
  7492                           
  7493                           	psect	text38
  7494  0CC6                     __ptext38:	
  7495 ;; *************** function _TMR1_ISR *****************
  7496 ;; Defined at:
  7497 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;		None
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;		None
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  1    wreg      void 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0, pclath, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7511 ;;      Params:         0       0       0       0       0       0       0       0
  7512 ;;      Locals:         0       0       0       0       0       0       0       0
  7513 ;;      Temps:          0       0       0       0       0       0       0       0
  7514 ;;      Totals:         0       0       0       0       0       0       0       0
  7515 ;;Total ram usage:        0 bytes
  7516 ;; Hardware stack levels used:    1
  7517 ;; Hardware stack levels required when called:    2
  7518 ;; This function calls:
  7519 ;;		_TMR1_CallBack
  7520 ;; This function is called by:
  7521 ;;		_INTERRUPT_InterruptManager
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           
  7526                           ;psect for function _TMR1_ISR
  7527  0CC6                     _TMR1_ISR:	
  7528                           
  7529                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
  7530                           ;tmr1.c: 166: PIR1bits.TMR1IF = 0;
  7531                           
  7532                           ;incstack = 0
  7533                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  7534  0CC6  0020               	movlb	0	; select bank0
  7535  0CC7  1011               	bcf	17,0	;volatile
  7536                           
  7537                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  7538  0CC8  086E               	movf	_timer1ReloadVal+1,w	;volatile
  7539  0CC9  0097               	movwf	23	;volatile
  7540                           
  7541                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
  7542  0CCA  086D               	movf	_timer1ReloadVal,w	;volatile
  7543  0CCB  0096               	movwf	22	;volatile
  7544                           
  7545                           ;tmr1.c: 170: flag_1_ms=1;
  7546  0CCC  3001               	movlw	1
  7547  0CCD  0022               	movlb	2	; select bank2
  7548  0CCE  00DE               	movwf	_flag_1_ms^(0+256)
  7549  0CCF  3000               	movlw	0
  7550  0CD0  00DF               	movwf	(_flag_1_ms^(0+256)+1)
  7551                           
  7552                           ;tmr1.c: 172: if (++CountCallBack >= 10)
  7553  0CD1  3001               	movlw	1
  7554  0CD2  07CC               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
  7555  0CD3  3000               	movlw	0
  7556  0CD4  3DCD               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
  7557  0CD5  3000               	movlw	0
  7558  0CD6  024D               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
  7559  0CD7  300A               	movlw	10
  7560  0CD8  1903               	skipnz
  7561  0CD9  024C               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
  7562  0CDA  1C03               	skipc
  7563  0CDB  0008               	return
  7564                           
  7565                           ;tmr1.c: 173: {
  7566                           ;tmr1.c: 175: TMR1_CallBack();
  7567  0CDC  318F  274C         	fcall	_TMR1_CallBack
  7568                           
  7569                           ;tmr1.c: 178: CountCallBack = 0;
  7570  0CDE  0022               	movlb	2	; select bank2
  7571  0CDF  01CC               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
  7572  0CE0  01CD               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
  7573  0CE1  0008               	return
  7574  0CE2                     __end_of_TMR1_ISR:	
  7575                           
  7576                           	psect	text39
  7577  0F4C                     __ptext39:	
  7578 ;; *************** function _TMR1_CallBack *****************
  7579 ;; Defined at:
  7580 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;		None
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;		None
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      void 
  7587 ;; Registers used:
  7588 ;;		wreg, status,2, status,0, pclath, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7594 ;;      Params:         0       0       0       0       0       0       0       0
  7595 ;;      Locals:         0       0       0       0       0       0       0       0
  7596 ;;      Temps:          0       0       0       0       0       0       0       0
  7597 ;;      Totals:         0       0       0       0       0       0       0       0
  7598 ;;Total ram usage:        0 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    1
  7601 ;; This function calls:
  7602 ;;		Absolute function
  7603 ;;		_TMR1_DefaultInterruptHandler
  7604 ;; This function is called by:
  7605 ;;		_TMR1_ISR
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _TMR1_CallBack
  7611  0F4C                     _TMR1_CallBack:	
  7612                           
  7613                           ;tmr1.c: 184: flag_10_ms=1;
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  7617  0F4C  3001               	movlw	1
  7618  0F4D  0022               	movlb	2	; select bank2
  7619  0F4E  00DC               	movwf	_flag_10_ms^(0+256)
  7620  0F4F  3000               	movlw	0
  7621  0F50  00DD               	movwf	(_flag_10_ms^(0+256)+1)
  7622                           
  7623                           ;tmr1.c: 185: count_100_ms++;
  7624  0F51  3001               	movlw	1
  7625  0F52  07D4               	addwf	_count_100_ms^(0+256),f
  7626  0F53  3000               	movlw	0
  7627  0F54  3DD5               	addwfc	(_count_100_ms+1)^(0+256),f
  7628                           
  7629                           ;tmr1.c: 186: count_500_ms++;
  7630  0F55  3001               	movlw	1
  7631  0F56  07D2               	addwf	_count_500_ms^(0+256),f
  7632  0F57  3000               	movlw	0
  7633  0F58  3DD3               	addwfc	(_count_500_ms+1)^(0+256),f
  7634                           
  7635                           ;tmr1.c: 187: count_1000_ms++;
  7636  0F59  3001               	movlw	1
  7637  0F5A  07D0               	addwf	_count_1000_ms^(0+256),f
  7638  0F5B  3000               	movlw	0
  7639  0F5C  3DD1               	addwfc	(_count_1000_ms+1)^(0+256),f
  7640                           
  7641                           ;tmr1.c: 188: count_4000_ms++;
  7642  0F5D  3001               	movlw	1
  7643  0F5E  07CE               	addwf	_count_4000_ms^(0+256),f
  7644  0F5F  3000               	movlw	0
  7645  0F60  3DCF               	addwfc	(_count_4000_ms+1)^(0+256),f
  7646                           
  7647                           ;tmr1.c: 190: if (count_100_ms==10)
  7648  0F61  300A               	movlw	10
  7649  0F62  0654               	xorwf	_count_100_ms^(0+256),w
  7650  0F63  0455               	iorwf	(_count_100_ms+1)^(0+256),w
  7651  0F64  1D03               	btfss	3,2
  7652  0F65  2F6C               	goto	i1l4184
  7653                           
  7654                           ;tmr1.c: 191: {
  7655                           ;tmr1.c: 192: flag_100_ms=1;
  7656  0F66  3001               	movlw	1
  7657  0F67  00DA               	movwf	_flag_100_ms^(0+256)
  7658  0F68  3000               	movlw	0
  7659  0F69  00DB               	movwf	(_flag_100_ms^(0+256)+1)
  7660                           
  7661                           ;tmr1.c: 193: count_100_ms=0;
  7662  0F6A  01D4               	clrf	_count_100_ms^(0+256)
  7663  0F6B  01D5               	clrf	(_count_100_ms+1)^(0+256)
  7664  0F6C                     i1l4184:	
  7665                           
  7666                           ;tmr1.c: 194: }
  7667                           ;tmr1.c: 195: if(count_500_ms==50)
  7668  0F6C  3032               	movlw	50
  7669  0F6D  0652               	xorwf	_count_500_ms^(0+256),w
  7670  0F6E  0453               	iorwf	(_count_500_ms+1)^(0+256),w
  7671  0F6F  1D03               	btfss	3,2
  7672  0F70  2F77               	goto	i1l4190
  7673                           
  7674                           ;tmr1.c: 196: {
  7675                           ;tmr1.c: 197: flag_500_ms=1;
  7676  0F71  3001               	movlw	1
  7677  0F72  00D8               	movwf	_flag_500_ms^(0+256)
  7678  0F73  3000               	movlw	0
  7679  0F74  00D9               	movwf	(_flag_500_ms^(0+256)+1)
  7680                           
  7681                           ;tmr1.c: 198: count_500_ms=0;
  7682  0F75  01D2               	clrf	_count_500_ms^(0+256)
  7683  0F76  01D3               	clrf	(_count_500_ms+1)^(0+256)
  7684  0F77                     i1l4190:	
  7685                           
  7686                           ;tmr1.c: 199: }
  7687                           ;tmr1.c: 200: if (count_1000_ms==100)
  7688  0F77  3064               	movlw	100
  7689  0F78  0650               	xorwf	_count_1000_ms^(0+256),w
  7690  0F79  0451               	iorwf	(_count_1000_ms+1)^(0+256),w
  7691  0F7A  1D03               	btfss	3,2
  7692  0F7B  2F82               	goto	i1l4196
  7693                           
  7694                           ;tmr1.c: 201: {
  7695                           ;tmr1.c: 202: flag_1000_ms=1;
  7696  0F7C  3001               	movlw	1
  7697  0F7D  00D6               	movwf	_flag_1000_ms^(0+256)
  7698  0F7E  3000               	movlw	0
  7699  0F7F  00D7               	movwf	(_flag_1000_ms^(0+256)+1)
  7700                           
  7701                           ;tmr1.c: 203: count_1000_ms=0;
  7702  0F80  01D0               	clrf	_count_1000_ms^(0+256)
  7703  0F81  01D1               	clrf	(_count_1000_ms+1)^(0+256)
  7704  0F82                     i1l4196:	
  7705                           
  7706                           ;tmr1.c: 204: }
  7707                           ;tmr1.c: 205: if (count_4000_ms==400)
  7708  0F82  3090               	movlw	144
  7709  0F83  064E               	xorwf	_count_4000_ms^(0+256),w
  7710  0F84  1D03               	skipz
  7711  0F85  2F91               	goto	i1l4202
  7712  0F86  034F               	decf	(_count_4000_ms+1)^(0+256),w
  7713  0F87  1D03               	btfss	3,2
  7714  0F88  2F91               	goto	i1l4202
  7715                           
  7716                           ;tmr1.c: 206: {
  7717                           ;tmr1.c: 207: flag_4000_ms=1;
  7718  0F89  3001               	movlw	1
  7719  0F8A  0021               	movlb	1	; select bank1
  7720  0F8B  00ED               	movwf	_flag_4000_ms^(0+128)
  7721  0F8C  3000               	movlw	0
  7722  0F8D  00EE               	movwf	(_flag_4000_ms^(0+128)+1)
  7723                           
  7724                           ;tmr1.c: 208: count_4000_ms=0;
  7725  0F8E  0022               	movlb	2	; select bank2
  7726  0F8F  01CE               	clrf	_count_4000_ms^(0+256)
  7727  0F90  01CF               	clrf	(_count_4000_ms+1)^(0+256)
  7728  0F91                     i1l4202:	
  7729                           
  7730                           ;tmr1.c: 209: }
  7731                           ;tmr1.c: 210: if(TMR1_InterruptHandler)
  7732  0F91  0866               	movf	_TMR1_InterruptHandler^(0+256),w
  7733  0F92  0467               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
  7734  0F93  1903               	btfsc	3,2
  7735  0F94  0008               	return
  7736                           
  7737                           ;tmr1.c: 211: {
  7738                           ;tmr1.c: 213: TMR1_InterruptHandler();
  7739  0F95  0867               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
  7740  0F96  008A               	movwf	10
  7741  0F97  0866               	movf	_TMR1_InterruptHandler^(0+256),w
  7742  0F98  000A               	callw
  7743  0F99  318F               	pagesel	$
  7744  0F9A  0008               	return
  7745  0F9B                     __end_of_TMR1_CallBack:	
  7746                           
  7747                           	psect	text40
  7748  0BD3                     __ptext40:	
  7749 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  7750 ;; Defined at:
  7751 ;;		line 221 in file "mcc_generated_files/tmr1.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		None
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7765 ;;      Params:         0       0       0       0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0
  7768 ;;      Totals:         0       0       0       0       0       0       0       0
  7769 ;;Total ram usage:        0 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		_TMR1_Initialize
  7775 ;;		_TMR1_CallBack
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _TMR1_DefaultInterruptHandler
  7781  0BD3                     _TMR1_DefaultInterruptHandler:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  7785  0BD3  0008               	return
  7786  0BD4                     __end_of_TMR1_DefaultInterruptHandler:	
  7787                           
  7788                           	psect	text41
  7789  0D1B                     __ptext41:	
  7790 ;; *************** function _EUSART_Transmit_ISR *****************
  7791 ;; Defined at:
  7792 ;;		line 166 in file "mcc_generated_files/eusart.c"
  7793 ;; Parameters:    Size  Location     Type
  7794 ;;		None
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;		None
  7797 ;; Return value:  Size  Location     Type
  7798 ;;                  1    wreg      void 
  7799 ;; Registers used:
  7800 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7806 ;;      Params:         0       0       0       0       0       0       0       0
  7807 ;;      Locals:         0       0       0       0       0       0       0       0
  7808 ;;      Temps:          1       0       0       0       0       0       0       0
  7809 ;;      Totals:         1       0       0       0       0       0       0       0
  7810 ;;Total ram usage:        1 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; This function calls:
  7813 ;;		Nothing
  7814 ;; This function is called by:
  7815 ;;		_INTERRUPT_InterruptManager
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           
  7820                           ;psect for function _EUSART_Transmit_ISR
  7821  0D1B                     _EUSART_Transmit_ISR:	
  7822                           
  7823                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  7824                           
  7825                           ;incstack = 0
  7826                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7827  0D1B  3008               	movlw	8
  7828  0D1C  0022               	movlb	2	; select bank2
  7829  0D1D  0268               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
  7830  0D1E  1803               	skipnc
  7831  0D1F  2D36               	goto	i1l141
  7832                           
  7833                           ;eusart.c: 171: {
  7834                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  7835  0D20  087C               	movf	_eusartTxTail,w
  7836  0D21  3EE3               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7837  0D22  0086               	movwf	6
  7838  0D23  3001               	movlw	1	; select bank3/4
  7839  0D24  0087               	movwf	7
  7840  0D25  0801               	movf	1,w
  7841  0D26  0023               	movlb	3	; select bank3
  7842  0D27  009A               	movwf	26	;volatile
  7843  0D28  3001               	movlw	1
  7844  0D29  00F0               	movwf	??_EUSART_Transmit_ISR
  7845  0D2A  0870               	movf	??_EUSART_Transmit_ISR,w
  7846  0D2B  07FC               	addwf	_eusartTxTail,f	;volatile
  7847                           
  7848                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7849  0D2C  3008               	movlw	8
  7850  0D2D  027C               	subwf	_eusartTxTail,w	;volatile
  7851  0D2E  1803               	btfsc	3,0
  7852                           
  7853                           ;eusart.c: 174: {
  7854                           ;eusart.c: 175: eusartTxTail = 0;
  7855  0D2F  01FC               	clrf	_eusartTxTail	;volatile
  7856                           
  7857                           ;eusart.c: 176: }
  7858                           ;eusart.c: 177: eusartTxBufferRemaining++;
  7859  0D30  3001               	movlw	1
  7860  0D31  00F0               	movwf	??_EUSART_Transmit_ISR
  7861  0D32  0870               	movf	??_EUSART_Transmit_ISR,w
  7862  0D33  0022               	movlb	2	; select bank2
  7863  0D34  07E8               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  7864                           
  7865                           ;eusart.c: 178: }
  7866  0D35  0008               	return
  7867  0D36                     i1l141:	
  7868                           
  7869                           ;eusart.c: 179: else
  7870                           ;eusart.c: 180: {
  7871                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  7872  0D36  0021               	movlb	1	; select bank1
  7873  0D37  1211               	bcf	17,4	;volatile
  7874  0D38  0008               	return
  7875  0D39                     __end_of_EUSART_Transmit_ISR:	
  7876                           
  7877                           	psect	text42
  7878  0E9D                     __ptext42:	
  7879 ;; *************** function _EUSART_Receive_ISR *****************
  7880 ;; Defined at:
  7881 ;;		line 185 in file "mcc_generated_files/eusart.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;		None
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;		None
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      void 
  7888 ;; Registers used:
  7889 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7895 ;;      Params:         0       0       0       0       0       0       0       0
  7896 ;;      Locals:         0       0       0       0       0       0       0       0
  7897 ;;      Temps:          1       0       0       0       0       0       0       0
  7898 ;;      Totals:         1       0       0       0       0       0       0       0
  7899 ;;Total ram usage:        1 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; This function calls:
  7902 ;;		Nothing
  7903 ;; This function is called by:
  7904 ;;		_INTERRUPT_InterruptManager
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _EUSART_Receive_ISR
  7910  0E9D                     _EUSART_Receive_ISR:	
  7911                           
  7912                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7916  0E9D  0023               	movlb	3	; select bank3
  7917  0E9E  1C9D               	btfss	29,1	;volatile
  7918  0E9F  2EA2               	goto	i1l2688
  7919                           
  7920                           ;eusart.c: 189: {
  7921                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  7922  0EA0  121D               	bcf	29,4	;volatile
  7923                           
  7924                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  7925  0EA1  161D               	bsf	29,4	;volatile
  7926  0EA2                     i1l2688:	
  7927                           
  7928                           ;eusart.c: 194: }
  7929                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  7930  0EA2  0819               	movf	25,w	;volatile
  7931  0EA3  00F0               	movwf	??_EUSART_Receive_ISR
  7932  0EA4  087B               	movf	_eusartRxHead,w
  7933  0EA5  3EDB               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7934  0EA6  0086               	movwf	6
  7935  0EA7  3001               	movlw	1	; select bank3/4
  7936  0EA8  0087               	movwf	7
  7937  0EA9  0870               	movf	??_EUSART_Receive_ISR,w
  7938  0EAA  0081               	movwf	1
  7939  0EAB  3001               	movlw	1
  7940  0EAC  00F0               	movwf	??_EUSART_Receive_ISR
  7941  0EAD  0870               	movf	??_EUSART_Receive_ISR,w
  7942  0EAE  07FB               	addwf	_eusartRxHead,f	;volatile
  7943                           
  7944                           ;eusart.c: 198: rcreg=RCREG;
  7945  0EAF  0819               	movf	25,w	;volatile
  7946  0EB0  00F0               	movwf	??_EUSART_Receive_ISR
  7947  0EB1  0870               	movf	??_EUSART_Receive_ISR,w
  7948  0EB2  0020               	movlb	0	; select bank0
  7949  0EB3  00EB               	movwf	_rcreg	;volatile
  7950                           
  7951                           ;eusart.c: 200: if(rcreg=='X')
  7952  0EB4  3058               	movlw	88
  7953  0EB5  066B               	xorwf	_rcreg,w	;volatile
  7954  0EB6  1D03               	btfss	3,2
  7955  0EB7  2EC0               	goto	i1l2700
  7956                           
  7957                           ;eusart.c: 201: {
  7958                           ;eusart.c: 202: LATB=0xAA;
  7959  0EB8  30AA               	movlw	170
  7960  0EB9  0022               	movlb	2	; select bank2
  7961  0EBA  008D               	movwf	13	;volatile
  7962                           
  7963                           ;eusart.c: 203: flag_G=1;
  7964  0EBB  3001               	movlw	1
  7965  0EBC  00E0               	movwf	_flag_G^(0+256)
  7966  0EBD  3000               	movlw	0
  7967  0EBE  00E1               	movwf	(_flag_G^(0+256)+1)
  7968  0EBF  2EC9               	goto	i1l2704
  7969  0EC0                     i1l2700:	
  7970                           ;eusart.c: 205: }
  7971                           
  7972                           ;eusart.c: 204: rcreg=0;
  7973                           
  7974                           
  7975                           ;eusart.c: 206: else if(rcreg=='Y')
  7976  0EC0  3059               	movlw	89
  7977  0EC1  066B               	xorwf	_rcreg,w	;volatile
  7978  0EC2  1D03               	btfss	3,2
  7979  0EC3  2ECB               	goto	i1l2706
  7980                           
  7981                           ;eusart.c: 207: {
  7982                           ;eusart.c: 208: flag_N=1;
  7983  0EC4  3001               	movlw	1
  7984  0EC5  0022               	movlb	2	; select bank2
  7985  0EC6  00E2               	movwf	_flag_N^(0+256)
  7986  0EC7  3000               	movlw	0
  7987  0EC8  00E3               	movwf	(_flag_N^(0+256)+1)
  7988  0EC9                     i1l2704:	
  7989                           
  7990                           ;eusart.c: 209: rcreg=0;
  7991  0EC9  0020               	movlb	0	; select bank0
  7992  0ECA  01EB               	clrf	_rcreg	;volatile
  7993  0ECB                     i1l2706:	
  7994                           
  7995                           ;eusart.c: 210: }
  7996                           ;eusart.c: 215: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7997  0ECB  3008               	movlw	8
  7998  0ECC  027B               	subwf	_eusartRxHead,w	;volatile
  7999  0ECD  1803               	btfsc	3,0
  8000                           
  8001                           ;eusart.c: 216: {
  8002                           ;eusart.c: 217: eusartRxHead = 0;
  8003  0ECE  01FB               	clrf	_eusartRxHead	;volatile
  8004                           
  8005                           ;eusart.c: 218: }
  8006                           ;eusart.c: 219: eusartRxCount++;
  8007  0ECF  3001               	movlw	1
  8008  0ED0  00F0               	movwf	??_EUSART_Receive_ISR
  8009  0ED1  0870               	movf	??_EUSART_Receive_ISR,w
  8010  0ED2  0021               	movlb	1	; select bank1
  8011  0ED3  07EF               	addwf	_eusartRxCount^(0+128),f	;volatile
  8012  0ED4  0008               	return
  8013  0ED5                     __end_of_EUSART_Receive_ISR:	
  8014                           
  8015                           	psect	text43
  8016  0C0D                     __ptext43:	
  8017 ;; *************** function _ADC_ISR *****************
  8018 ;; Defined at:
  8019 ;;		line 136 in file "mcc_generated_files/adc.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0, pclath, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8033 ;;      Params:         0       0       0       0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    1
  8040 ;; This function calls:
  8041 ;;		_ADC_GetConversionResult
  8042 ;;		i1_ADC_StartConversion
  8043 ;; This function is called by:
  8044 ;;		_INTERRUPT_InterruptManager
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           
  8049                           ;psect for function _ADC_ISR
  8050  0C0D                     _ADC_ISR:	
  8051                           
  8052                           ;adc.c: 139: PIR1bits.ADIF = 0;
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
  8056  0C0D  0020               	movlb	0	; select bank0
  8057  0C0E  1311               	bcf	17,6	;volatile
  8058                           
  8059                           ;adc.c: 140: rez_conversie=ADC_GetConversionResult();
  8060  0C0F  318C  24AA  318C   	fcall	_ADC_GetConversionResult
  8061  0C12  0871               	movf	?_ADC_GetConversionResult+1,w
  8062  0C13  0022               	movlb	2	; select bank2
  8063  0C14  00E5               	movwf	(_rez_conversie+1)^(0+256)
  8064  0C15  0870               	movf	?_ADC_GetConversionResult,w
  8065  0C16  00E4               	movwf	_rez_conversie^(0+256)
  8066                           
  8067                           ;adc.c: 141: ADC_StartConversion();
  8068  0C17  318B  23D4         	fcall	i1_ADC_StartConversion
  8069  0C19  0008               	return
  8070  0C1A                     __end_of_ADC_ISR:	
  8071                           
  8072                           	psect	text44
  8073  0BD4                     __ptext44:	
  8074 ;; *************** function i1_ADC_StartConversion *****************
  8075 ;; Defined at:
  8076 ;;		line 92 in file "mcc_generated_files/adc.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;		None
  8081 ;; Return value:  Size  Location     Type
  8082 ;;                  1    wreg      void 
  8083 ;; Registers used:
  8084 ;;		None
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8090 ;;      Params:         0       0       0       0       0       0       0       0
  8091 ;;      Locals:         0       0       0       0       0       0       0       0
  8092 ;;      Temps:          0       0       0       0       0       0       0       0
  8093 ;;      Totals:         0       0       0       0       0       0       0       0
  8094 ;;Total ram usage:        0 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_ADC_ISR
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           
  8104                           ;psect for function i1_ADC_StartConversion
  8105  0BD4                     i1_ADC_StartConversion:	
  8106                           
  8107                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in i1_ADC_StartConversion: []
  8111  0BD4  0021               	movlb	1	; select bank1
  8112  0BD5  149D               	bsf	29,1	;volatile
  8113  0BD6  0008               	return
  8114  0BD7                     __end_ofi1_ADC_StartConversion:	
  8115                           
  8116                           	psect	text45
  8117  0CAA                     __ptext45:	
  8118 ;; *************** function _ADC_GetConversionResult *****************
  8119 ;; Defined at:
  8120 ;;		line 105 in file "mcc_generated_files/adc.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  2    0[COMMON] unsigned int 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8134 ;;      Params:         2       0       0       0       0       0       0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0
  8136 ;;      Temps:          7       0       0       0       0       0       0       0
  8137 ;;      Totals:         9       0       0       0       0       0       0       0
  8138 ;;Total ram usage:        9 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_ADC_ISR
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _ADC_GetConversionResult
  8149  0CAA                     _ADC_GetConversionResult:	
  8150                           
  8151                           ;adc.c: 109: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
  8152                           
  8153                           ;incstack = 0
  8154                           ; Regs used in _ADC_GetConversionResult: [wreg+status,2+status,0]
  8155  0CAA  0021               	movlb	1	; select bank1
  8156  0CAB  081B               	movf	27,w	;volatile
  8157  0CAC  00F2               	movwf	??_ADC_GetConversionResult
  8158  0CAD  3006               	movlw	6
  8159  0CAE                     u224_25:	
  8160  0CAE  36F2               	lsrf	??_ADC_GetConversionResult,f
  8161  0CAF  0B89               	decfsz	9,f
  8162  0CB0  2CAE               	goto	u224_25
  8163  0CB1  0872               	movf	??_ADC_GetConversionResult,w
  8164  0CB2  00F3               	movwf	??_ADC_GetConversionResult+1
  8165  0CB3  01F4               	clrf	??_ADC_GetConversionResult+2
  8166  0CB4  081C               	movf	28,w	;volatile
  8167  0CB5  00F5               	movwf	??_ADC_GetConversionResult+3
  8168  0CB6  01F6               	clrf	??_ADC_GetConversionResult+4
  8169  0CB7  35F5               	lslf	??_ADC_GetConversionResult+3,f
  8170  0CB8  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  8171  0CB9  35F5               	lslf	??_ADC_GetConversionResult+3,f
  8172  0CBA  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  8173  0CBB  0873               	movf	??_ADC_GetConversionResult+1,w
  8174  0CBC  0775               	addwf	??_ADC_GetConversionResult+3,w
  8175  0CBD  00F7               	movwf	??_ADC_GetConversionResult+5
  8176  0CBE  0874               	movf	??_ADC_GetConversionResult+2,w
  8177  0CBF  3D76               	addwfc	??_ADC_GetConversionResult+4,w
  8178  0CC0  00F8               	movwf	??_ADC_GetConversionResult+6
  8179  0CC1  0877               	movf	??_ADC_GetConversionResult+5,w
  8180  0CC2  00F0               	movwf	?_ADC_GetConversionResult
  8181  0CC3  0878               	movf	??_ADC_GetConversionResult+6,w
  8182  0CC4  00F1               	movwf	?_ADC_GetConversionResult+1
  8183  0CC5  0008               	return
  8184  0CC6                     __end_of_ADC_GetConversionResult:	
  8185  007E                     btemp	set	126	;btemp
  8186  007E                     int$flags	set	126
  8187  007E                     wtemp0	set	126


Data Sizes:
    Strings     110
    Constant    10
    Data        61
    BSS         130
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     73      79
    BANK1            80     77      80
    BANK2            80     42      75
    BANK3            80      0      75
    BANK4            80      0      75
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 8
		 -> line1(BANK3[8]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), line1(BANK3[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_8(CODE[14]), STR_7(CODE[18]), STR_6(CODE[10]), STR_5(CODE[15]), 
		 -> STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[21]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), line1(BANK3[8]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[17]), STR_8(CODE[14]), STR_7(CODE[18]), STR_6(CODE[10]), 
		 -> STR_5(CODE[15]), STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[21]), 
		 -> STR_1(CODE[14]), 

    S766__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S766__prbuf$ptr	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), line1(BANK3[8]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 8
		 -> NULL(NULL[0]), line1(BANK3[8]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_comparare
    _sprintf->__doprnt
    _send_data_byte->_send_nibble
    _int_gsm->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _init_lcd->_send_nibble
    _comparare->___ftadd
    _comparare->___ftdiv
    ___lwtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftge->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _comand_lcd->_send_command_byte
    _send_command_byte->_send_nibble
    _TMR1_Initialize->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   35553
                                             62 BANK0     11    11      0
                _ADC_StartConversion
                  _SYSTEM_Initialize
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                         _comand_lcd
                          _comparare
                           _init_lcd
                            _int_gsm
                  _send_command_byte
                     _send_data_byte
                            _sprintf
                           _turn_egs
 ---------------------------------------------------------------------------------
 (1) _turn_egs                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             10     6      4    5151
                                             27 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _send_data_byte                                       2     2      0      66
                                              2 BANK0      2     2      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _int_gsm                                              1     1      0    6456
                                             34 BANK0      1     1      0
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _printf                                               7     5      2    5784
                                             27 BANK0      7     5      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             21    18      3    4165
                                             14 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     0      1     672
                                              2 BANK0      1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0      22
                                              2 BANK0      1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _comparare                                          135   133      2   15140
                                             46 BANK0     16    14      2
                                              0 BANK1     77    77      0
                                              0 BANK2     42    42      0
                           ___awtoft
                             ___bmul
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol (ARG)
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2323
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2691
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             14 BANK0      9     3      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3179
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2392
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _comand_lcd                                           0     0      0      66
                  _send_command_byte
 ---------------------------------------------------------------------------------
 (1) _send_command_byte                                    2     2      0      66
                                              2 BANK0      2     2      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     316
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              9 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
            _ADC_GetConversionResult
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) i1_ADC_StartConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              9     7      2       0
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _comand_lcd
     _send_command_byte
       _send_nibble
   _comparare
     ___awtoft
       ___ftpack
     ___bmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
   _init_lcd
     _send_nibble
   _int_gsm
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
     _putch
       _EUSART_Write
   _send_command_byte
     _send_nibble
   _send_data_byte
     _send_nibble
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       _putch *
         _EUSART_Write
   _turn_egs

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     i1_ADC_StartConversion
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     18E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     49      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4D      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     2A      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4B      12       93.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4B      14       93.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     18E      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Oct 24 00:04:30 2017

               __end_of_send_command_byte 0D57                            ___bmul@product 0022  
                             __CFG_CP$OFF 0000                       ___wmul@multiplicand 0022  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                             __CFG_LVP$ON 0000                              ___ftadd@sign 004B  
                 __size_of_send_data_byte 0015                                       l129 0DEE  
                                     l401 05B2                                       l390 056C  
                                     l840 079D                                       l756 0FE1  
                                     l780 03E4                                       l588 0CEB  
                                     l757 0FE9                                       l749 0FCE  
                            __CFG_CPD$OFF 0000                           _timer1ReloadVal 006D  
                         __end_of_ADC_ISR 0C1A                              __CFG_BORV$LO 0000  
                                     wreg 0009                              __CFG_IESO$ON 0000  
                            __CFG_FOSC$HS 0000                             _count_1000_ms 0150  
                            ___ftdiv@cntr 0048                              ___ftdiv@sign 004D  
                                    l3002 0749                                      l2114 0DE2  
                           _count_4000_ms 014E                                      l3020 0779  
                                    l3030 07A0                                      l3022 0787  
                                    l2150 0E8F                                      l2142 0E71  
                                    l2144 0E7D                                      l2128 0E04  
                                    l3034 07AE                                      l2154 0E98  
                                    l3028 0794                                      l2500 03E0  
                                    l2172 0E26                                      l2414 0CE5  
                                    l2166 0E0E                                      l2272 0FAB  
                                    l2432 0C35                                      l2504 03F6  
                                    l2168 0E1A                                      l2176 0E2F  
                                    l4120 0266                                      l2282 0FD3  
                                    l2274 0FB5                                      l2284 0FDB  
                                    l2276 0FBA                                      l2268 0FA4  
                                    l2428 0C2F                                      l2508 0408  
                                    l2620 0657                                      l2612 0643  
                                    l4140 029B                                      l4116 0252  
                                    l2518 0423                                      l2462 0374  
                                    l2534 06B4                                      l4134 0295  
                                    l4126 027E                                      l2448 0D80  
                                    l2480 039D                                      l2528 069E  
                                    l2624 065F                                      l2608 063B  
                                    l4152 02D2                                      l4240 07C5  
                                    l2490 03BF                                      l2458 036D  
                                    l4146 02BA                                      l4170 0227  
                                    l2810 0568                                      l4410 0508  
                                    l2492 03C3                                      l2468 0383  
                                    l2556 070E                                      l2548 06F5  
                                    l2572 0F3D                                      l4164 032E  
                                    l4156 02E5                                      l4172 0342  
                                    l2486 03B0                                      l2590 05EA  
                                    l2830 0583                                      l2814 056F  
                                    l2488 03BA                                      l2568 0F27  
                                    l4168 02EA                                      l4264 07DF  
                                    l4256 07D6                                      l4248 07CD  
                                    l4272 07F7                                      l4408 04F1  
                                    l2498 03D6                                      l2842 0590  
                                    l2596 0600                                      l2852 059D  
                                    l2854 059F                                      l2774 053D  
                                    l2870 05B5                                      l4382 04AC  
                                    l4374 045B                                      l2944 00B8  
                                    l2970 0199                                      l2882 05D1  
                                    l2866 05AE                                      l2786 054A  
                                    l4394 04BE                                      l2964 018B  
                                    l2980 021F                                      l2796 0557  
                                    l4396 04D5                                      l2958 0128  
                                    l2878 05C9                                      l2798 0559  
                                    l2976 01FD                                      l2978 020D  
                                    STR_1 1047                                      STR_2 1000  
                                    STR_3 1055                                      STR_4 1075  
                                    STR_5 1038                                      STR_6 106B  
                                    STR_7 1015                                      STR_8 1047  
                                    STR_9 1027                                      u2115 0FC9  
                                    _LATA 010C                                      _LATB 010D  
                                    u2135 0FD6                                      _LATC 010E  
                                    _LATD 010F                                      _LATE 0110  
                                    u3130 0086                                      u3140 00A4  
                                    u3205 0197                                      u2255 0D41  
                                    u2175 0FF0                                      u2095 0FB0  
                                    u2425 039E                                      u2515 03D7  
                                    u2275 0CEC                                      u3235 020B  
                                    u3155 00B6                                      u3325 0795  
                                    u2605 06F6                                      u2285 0CF1  
                                    u3245 021D                                      u3165 00C9  
                                    u2455 03B1                                      u2615 0705  
                                    u3175 00DD                                      u3265 0750  
                                    u2625 070F                                      u2705 061C  
                                    u3185 0126                                      u3195 0189  
                                    u1915 0E11                                      u2485 03C4  
                                    u2725 0644                                      u1845 0E74  
                                    u3295 077A                                      u2735 064A  
                                    u1935 0E20                                      u2585 06C6  
                                    u1865 0E7E                                      u1945 0E27  
                                    u2595 06D6                                      u1875 0E88  
                                    u2765 0660                                      u1885 0E90  
                                    u2775 0666                                      u2695 060C  
                                    u5407 0E3C                                      u5417 0E48  
                                    u5427 0E54                                      u5437 0E60  
                                    u5447 0D52                                      u2895 0C6F  
                                    u5457 0DC7                                      u5377 04B7  
                                    u5467 0DD1                                      u5387 04DD  
                                    u5477 0DDB                                      u5397 050C  
                                    u4965 02B0                                      _WPUB 020D  
                                    _WPUE 0210                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _main 043B  
                            ___ftpack@arg 0020                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    start 003C                ??_TMR1_SetInterruptHandler 0022  
                       ___bmul@multiplier 0023                             __CFG_MCLRE$ON 0000  
                            ___ftmul@cntr 003C                           turn_egs@step_nr 0169  
                            ___ftmul@sign 003D                              ___fttol@exp1 002D  
                            ___fttol@lval 0029                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 0BE6  
                                   ?_main 0070                           __end_of___ftadd 043B  
                           __CFG_WDTE$OFF 0000                           __end_of___ftdiv 0730  
                         _TMR1_StartTimer 0BDA                           __end_of___ftneg 0C0D  
                         __end_of___ftmul 0687                                     _T1CON 0018  
                         __end_of___fttol 07B7                           __end_of___lwdiv 0E9D  
                                   i1l141 0D36                                     i1l181 0037  
                                   i1l173 0015                                     i1l175 0021  
                                   i1l177 002D                           __end_of___lwmod 0E34  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TMR1H 0017                                     _TMR1L 0016  
                         __end_of__doprnt 0345                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _TRISD 008F                                     _TRISE 0090  
                  ?i1_ADC_StartConversion 0070                                     _TXREG 019A  
                                   _TXSTA 019E                   comparare@resistor_value 004E  
        __size_of_ADC_GetConversionResult 001C                          __end_of_TMR1_ISR 0CE2  
                           ___awtoft@sign 002D                           __end_of_dpowers 106B  
                                   _line1 01D3                                     _line2 01CA  
                          _WDT_Initialize 0BDD                                     _rcreg 006B  
                         __end_of_int_gsm 07FB                             ___ftpack@sign 0024  
                                   _putch 07FB                                     main@n 0065  
                                   main@x 005F                   __end_of_TMR1_Initialize 0CAA  
                                   pclath 000A                              comparare@dif 0052  
                            comparare@res 0120                                     status 0003  
                                   wtemp0 007E                           __end_of_sprintf 0D75  
                         __initialization 003E                __size_of_send_command_byte 001E  
                            __end_of_main 051D                            ??_EUSART_Write 0020  
                               ??_ADC_ISR 0079               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 005E                             ___fttol@sign1 0028  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 0BE1  
                                  _ADCON0 009D                                    _ADCON1 009E  
                            ?_send_nibble 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _APFCON 011D  
                        __end_of___awtoft 0D97                                    _ANSELA 018C  
                                  ?_putch 0022                                    _ANSELB 018D  
                                  _ANSELD 018F                                    _ANSELE 0190  
                        __end_of___ftpack 1000                                    _T1GCON 0019  
                                  i1l4202 0F91                                    i1l2700 0EC0  
                                  i1l2704 0EC9                                    i1l2706 0ECB  
                                  i1l4190 0F77                                    i1l4184 0F6C  
                                  i1l4196 0F82                                    i1l2688 0EA2  
                                  u224_25 0CAE                          __end_of___lwtoft 0C67  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                          __CFG_PWRTE$OFF 0000      __end_of_TMR1_DefaultInterruptHandler 0BD4  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 0BD3  
                                  ___bmul 0C2C                                    ___ftge 0F10  
                 __end_of_TMR1_StartTimer 0BDD                                    ___wmul 0CE2  
                               ??___ftadd 0047                            __CFG_STVREN$ON 0000  
                               ??___ftdiv 0044                                 ??___ftneg 0041  
                               ??___ftmul 0034                                    _flag_G 0160  
                               ??___fttol 0024                                    _flag_N 0162  
                               ??___lwdiv 0024                                 ??___lwmod 002C  
                     _EUSART_Transmit_ISR 0D1B                                 ??__doprnt 0031  
                        __end_of_init_lcd 0E68                              __doprnt@flag 0035  
                                  _printf 0C7C                            _send_data_byte 0C67  
                            __doprnt@prec 0036                     ___ftmul@f3_as_product 0039  
                               ??_int_gsm 0042                           ?_WDT_Initialize 0070  
                           comparare@step 0055  TMR1_SetInterruptHandler@InterruptHandler 0020  
                               ??_sprintf 003F                      ?_EUSART_Transmit_ISR 0070  
                   __end_of_TMR1_CallBack 0F9B                          __end_of_turn_egs 05D3  
                        ?_TMR1_Initialize 0070                         _SYSTEM_Initialize 0C1A  
                 __end_of__initialization 0077                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                                ___ftge@ff1 002E  
                              ___ftge@ff2 0031                        ?_SYSTEM_Initialize 0070  
                              ___ftdiv@f1 0041                                ___ftdiv@f2 003E  
                              ___ftdiv@f3 0049                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 0020              __size_of_ADC_StartConversion 0003  
                          __pcstackCOMMON 0070                              __pidataBANK2 0002  
                            __pidataBANK3 0ED5                       ??_SYSTEM_Initialize 0022  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                  __end_of_send_data_byte 0C7C                             __end_of_putch 0800  
                            _flag_1000_ms 0156                              _flag_4000_ms 00ED  
                              ___lwtoft@c 0028                   _ADC_GetConversionResult 0CAA  
                          _OPTION_REGbits 0095                                __doprnt@ap 0030  
                              __doprnt@pb 003A                        __size_of_comparare 01AA  
               __end_of_SYSTEM_Initialize 0C2C                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0023                                __pbssBANK0 0069  
                              __pbssBANK1 00ED                                __pbssBANK2 014A  
                              __pbssBANK3 01DB                                __pbssBANK4 0220  
                    __end_of_EUSART_Write 0E07                           __CFG_VCAPEN$OFF 0000  
             __size_of_EUSART_Receive_ISR 0038                                _flag_10_ms 015C  
                              __pmaintext 043B                                   ?___bmul 0020  
                                 ?___ftge 002E                                   ?___wmul 0020  
                        ?_TMR1_StartTimer 0070                                ??_TMR1_ISR 0070  
                              __pintentry 0004                           ?_send_data_byte 0070  
                                 _ADC_ISR 0C0D                                   _BAUDCON 019F  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                 ??i1_ADC_StartConversion 0070                                   ?_printf 003B  
                 __size_of_ADC_Initialize 0009                                 ?___lwtoft 0028  
                           _eusartRxCount 00EF                                _comand_lcd 0C3E  
                                 _OSCTUNE 0098                      __size_of_send_nibble 0026  
                               ?_init_lcd 0070                     send_command_byte@byte 0023  
                         __size_of___bmul 0012                           __size_of___ftge 003C  
                                 ___ftadd 0345                         __end_of_comparare 0225  
                                 ___ftdiv 0687                                   ___ftneg 0C04  
                         __size_of___wmul 001C                                   ___ftmul 05D3  
                                 ___fttol 0730                                   ___lwdiv 0E68  
                                 ___lwmod 0E07                                   __doprnt 0225  
               ??_ADC_GetConversionResult 0072                                ??___awtoft 002B  
                              ??___ftpack 0025                                   __ptext1 051D  
                                 __ptext2 0D57                                   __ptext3 0C67  
                                 __ptext4 07B7                                   __ptext5 0C7C  
                                 __ptext6 0225                                   __ptext7 07FB  
                                 __ptext8 0DE0                                   __ptext9 0E07  
                               ?_turn_egs 0070                           __size_of_printf 0016  
                              ??___lwtoft 002B            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                                   _dpowers 1061  
                   _OSCILLATOR_Initialize 0BE1                                   _int_gsm 07B7  
       __size_of_TMR1_SetInterruptHandler 0009                  ??_PIN_MANAGER_Initialize 0020  
               ?_TMR1_SetInterruptHandler 0020                __size_of_SYSTEM_Initialize 0012  
                                 _sprintf 0D57                                   clrloop0 0BE7  
                    end_of_initialization 0077                            comparare@F3710 0220  
                          comparare@F3705 01A0                                   init_ram 0BEC  
                              ??_init_lcd 0022                                   initloop 0BED  
                       _EUSART_Initialize 0CFE                            comparare@j_738 005C  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@f 003B                         send_nibble@nibble 0021  
                          comparare@table 00A0                       ??_EUSART_Initialize 0020  
                        ??_WDT_Initialize 0020                                ??_turn_egs 0020  
                             ?_comand_lcd 0070                                 _TRISCbits 008E  
                   __size_of_EUSART_Write 0027                       _ADC_StartConversion 0BD7  
               __end_of_EUSART_Initialize 0D1B                               ___ftdiv@exp 004C  
                            _count_100_ms 0154                              _count_500_ms 0152  
                              comparare@i 00EB                                comparare@j 005A  
                             ___ftmul@exp 0038                      ?_ADC_StartConversion 0070  
                      turn_egs@step_index 007A                            __end_of___bmul 0C3E  
                          __end_of___ftge 0F4C                            __end_of___wmul 0CFE  
                            _EUSART_Write 0DE0                         __size_of_TMR1_ISR 001C  
                          _ADC_Initialize 0BF2                    ?_OSCILLATOR_Initialize 0070  
                          __end_of_printf 0C92                       start_initialization 003E  
         __size_of_PIN_MANAGER_Initialize 0023                               putch@txData 0022  
                       int_gsm@sms1_index 0069                          ??_send_data_byte 0022  
                     __size_of_comand_lcd 0014                     ??_ADC_StartConversion 0020  
                __size_of_TMR1_Initialize 0018                                  ??___bmul 0021  
                                ??___ftge 0034                                  ??___wmul 0024  
                  __end_of_ADC_Initialize 0BFB                               __doprnt@val 0037  
                             __pdataBANK2 0169                               __pdataBANK3 01A0  
                                ?_ADC_ISR 0070                    __size_of_TMR1_CallBack 004F  
                                ??_printf 003D            __size_ofi1_ADC_StartConversion 0003  
           __end_ofi1_ADC_StartConversion 0BD7                         __size_of___awtoft 0022  
                       __size_of___ftpack 0065               __end_of_EUSART_Transmit_ISR 0D39  
                   TMR1_ISR@CountCallBack 014C                               __pbssCOMMON 007A  
                               ___latbits 0002                        send_data_byte@byte 0023  
                       __size_of___lwtoft 0015                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 0120  
                             _flag_100_ms 015A                               _flag_500_ms 0158  
              __end_of_EUSART_Receive_ISR 0ED5                __size_of_EUSART_Initialize 001D  
                               __doprnt@c 0039                                 __doprnt@f 002E  
                               __pnvBANK0 006D                                 __pnvBANK2 0166  
                       __size_of_init_lcd 0034                          ___lwdiv@dividend 0022  
                  _PIN_MANAGER_Initialize 0D97                                 _flag_1_ms 015E  
        __end_of_TMR1_SetInterruptHandler 0C04                                  ?___ftadd 0041  
                                ?___ftdiv 003E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 0020  
                                ?___lwdiv 0020                                  ?___lwmod 0028  
                         ?_ADC_Initialize 0070                              _eusartRxHead 007B  
                            _eusartTxHead 007D                              _eusartRxTail 006C  
                                ?__doprnt 002E                              _eusartTxTail 007C  
            ??_INTERRUPT_InterruptManager 0079                                 _comparare 007B  
                 _eusartTxBufferRemaining 0168                  __size_of_TMR1_StartTimer 0003  
                                ?_int_gsm 0070                         __size_of_turn_egs 00B6  
                           ??_send_nibble 0020                          ___lwdiv@quotient 0025  
                                ?_sprintf 003B                            __size_of_putch 0005  
                          _eusartRxBuffer 01DB                             _TMR1_CallBack 0F4C  
                          _eusartTxBuffer 01E3                            ___wmul@product 0024  
                                _LATCbits 010E                                  _LATDbits 010F  
                               clear_ram0 0BE6                                  _PIE1bits 0091  
     __size_of_INTERRUPT_InterruptManager 0038                                  _PIR1bits 0011  
                                _TMR1_ISR 0CC6                         ??_TMR1_Initialize 0022  
                        __size_of_ADC_ISR 000D                                _ADCON0bits 009D  
                              ?_comparare 004E                         ___wmul@multiplier 0020  
                               main@n_763 0067                              ??_comand_lcd 0024  
                           _rez_conversie 0164                            ?_TMR1_CallBack 0070  
                           _flag_directie 014A                       __end_of_send_nibble 0DE0  
                      __end_of_comand_lcd 0C52                  ?_ADC_GetConversionResult 0070  
                 ??_OSCILLATOR_Initialize 0020                          __size_of___ftadd 00F6  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0035                          __size_of___lwmod 002D  
                                ___awtoft 0D75                                  ___ftpack 0F9B  
                        __size_of__doprnt 0120                  _TMR1_SetInterruptHandler 0BFB  
                                ___lwtoft 0C52                     _TMR1_InterruptHandler 0166  
                        __size_of_int_gsm 0044                           ___lwdiv@divisor 0020  
                         ___lwdiv@counter 0027                                  __ptext10 0E68  
                                __ptext11 0E34                                  __ptext20 0C2C  
                                __ptext12 007B                                  __ptext21 0D75  
                                __ptext13 0CE2                                _T1GCONbits 0019  
                                __ptext30 0BDA                                  __ptext22 0F9B  
                                __ptext14 0C52                                  __ptext31 0BFB  
                                __ptext23 0C3E                                  __ptext15 0C04  
                                __ptext40 0BD3                                  __ptext32 0D97  
                                __ptext24 0D39                                  __ptext16 05D3  
                                __ptext41 0D1B                                  __ptext33 0BE1  
                                __ptext25 0DBA                                  __ptext17 0F10  
                                __ptext42 0E9D                                  __ptext34 0CFE  
                                __ptext26 0730                                  __ptext18 0687  
                                __ptext43 0C0D                                  __ptext35 0BF2  
                                __ptext27 0C1A                                  __ptext19 0345  
                                __ptext44 0BD4                                  __ptext36 0BD7  
                                __ptext28 0BDD                                  __ptext45 0CAA  
                                __ptext29 0C92                                  __ptext38 0CC6  
                                __ptext39 0F4C                         ??_TMR1_StartTimer 0020  
                        __size_of_sprintf 001E                                  _init_lcd 0E34  
                           __size_of_main 00E2                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 003C                _INTERRUPT_InterruptManager 0004  
                                main@temp 0063                                  main@volt 0060  
                             ??_comparare 0050                                  _turn_egs 051D  
                              _INTCONbits 000B                            __pstringtext10 0000  
                         ??_TMR1_CallBack 0070                               _send_nibble 0DBA  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                               sprintf@ap 0041                                 sprintf@pb 0042  
                               sprintf@wh 0040               __end_of_ADC_StartConversion 0BDA  
                        ___lwmod@dividend 002A                   ?_PIN_MANAGER_Initialize 0070  
         __end_of_ADC_GetConversionResult 0CC6                         __CFG_CLKOUTEN$OFF 0000  
                        ??_ADC_Initialize 0020                                  printf@ap 003E  
                                printf@pb 003F                        _EUSART_Receive_ISR 0E9D  
                       _send_command_byte 0D39                           comparare@result 0058  
                           __pstringtext1 1061                             __pstringtext2 1000  
                           __pstringtext3 1015                             __pstringtext4 1027  
                           __pstringtext5 1038                             __pstringtext6 1047  
                           __pstringtext7 1055                             __pstringtext8 106B  
                           __pstringtext9 1075                        ?_send_command_byte 0070  
                                sprintf@f 003B                       ?_EUSART_Receive_ISR 0070  
                         ___lwmod@divisor 0028                           ___lwmod@counter 002D  
                   i1_ADC_StartConversion 0BD4                       ??_send_command_byte 0022  
                      EUSART_Write@txData 0021              __size_of_EUSART_Transmit_ISR 001E  
          __end_of_PIN_MANAGER_Initialize 0DBA                      ??_EUSART_Receive_ISR 0070  
                         _TMR1_Initialize 0C92  
