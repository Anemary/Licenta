

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Oct 31 21:19:45 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	intentry,global,class=CODE,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 1.42
    76                           ; Generated 13/04/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F1937 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001E                     	;# 
   139  001F                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  008F                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0095                     	;# 
   149  0096                     	;# 
   150  0097                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009A                     	;# 
   154  009B                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  0110                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0115                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0118                     	;# 
   172  0119                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011D                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178  018F                     	;# 
   179  0190                     	;# 
   180  0191                     	;# 
   181  0191                     	;# 
   182  0192                     	;# 
   183  0193                     	;# 
   184  0193                     	;# 
   185  0193                     	;# 
   186  0194                     	;# 
   187  0195                     	;# 
   188  0196                     	;# 
   189  0199                     	;# 
   190  019A                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019B                     	;# 
   195  019C                     	;# 
   196  019C                     	;# 
   197  019D                     	;# 
   198  019E                     	;# 
   199  019F                     	;# 
   200  020D                     	;# 
   201  0210                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0213                     	;# 
   205  0214                     	;# 
   206  0215                     	;# 
   207  0215                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0291                     	;# 
   211  0291                     	;# 
   212  0292                     	;# 
   213  0293                     	;# 
   214  0294                     	;# 
   215  0295                     	;# 
   216  0295                     	;# 
   217  0296                     	;# 
   218  0298                     	;# 
   219  0298                     	;# 
   220  0299                     	;# 
   221  029A                     	;# 
   222  029B                     	;# 
   223  029C                     	;# 
   224  029C                     	;# 
   225  029D                     	;# 
   226  029E                     	;# 
   227  029F                     	;# 
   228  0311                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0314                     	;# 
   233  0315                     	;# 
   234  0315                     	;# 
   235  0316                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  0415                     	;# 
   248  0416                     	;# 
   249  0417                     	;# 
   250  041C                     	;# 
   251  041D                     	;# 
   252  041E                     	;# 
   253  0791                     	;# 
   254  0792                     	;# 
   255  0793                     	;# 
   256  0794                     	;# 
   257  0795                     	;# 
   258  0798                     	;# 
   259  0799                     	;# 
   260  079A                     	;# 
   261  07A0                     	;# 
   262  07A1                     	;# 
   263  07A2                     	;# 
   264  07A3                     	;# 
   265  07A4                     	;# 
   266  07A5                     	;# 
   267  07A6                     	;# 
   268  07A7                     	;# 
   269  07A8                     	;# 
   270  07A9                     	;# 
   271  07AA                     	;# 
   272  07AB                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000F                     	;# 
   300  0010                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  008F                     	;# 
   319  0090                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  0110                     	;# 
   339  0111                     	;# 
   340  0112                     	;# 
   341  0113                     	;# 
   342  0114                     	;# 
   343  0115                     	;# 
   344  0116                     	;# 
   345  0117                     	;# 
   346  0118                     	;# 
   347  0119                     	;# 
   348  011A                     	;# 
   349  011B                     	;# 
   350  011D                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018F                     	;# 
   354  0190                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019C                     	;# 
   371  019C                     	;# 
   372  019D                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  020D                     	;# 
   376  0210                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0215                     	;# 
   382  0215                     	;# 
   383  0216                     	;# 
   384  0217                     	;# 
   385  0291                     	;# 
   386  0291                     	;# 
   387  0292                     	;# 
   388  0293                     	;# 
   389  0294                     	;# 
   390  0295                     	;# 
   391  0295                     	;# 
   392  0296                     	;# 
   393  0298                     	;# 
   394  0298                     	;# 
   395  0299                     	;# 
   396  029A                     	;# 
   397  029B                     	;# 
   398  029C                     	;# 
   399  029C                     	;# 
   400  029D                     	;# 
   401  029E                     	;# 
   402  029F                     	;# 
   403  0311                     	;# 
   404  0311                     	;# 
   405  0312                     	;# 
   406  0313                     	;# 
   407  0314                     	;# 
   408  0315                     	;# 
   409  0315                     	;# 
   410  0316                     	;# 
   411  0318                     	;# 
   412  0318                     	;# 
   413  0319                     	;# 
   414  031A                     	;# 
   415  031C                     	;# 
   416  031C                     	;# 
   417  031D                     	;# 
   418  031E                     	;# 
   419  0394                     	;# 
   420  0395                     	;# 
   421  0396                     	;# 
   422  0415                     	;# 
   423  0416                     	;# 
   424  0417                     	;# 
   425  041C                     	;# 
   426  041D                     	;# 
   427  041E                     	;# 
   428  0791                     	;# 
   429  0792                     	;# 
   430  0793                     	;# 
   431  0794                     	;# 
   432  0795                     	;# 
   433  0798                     	;# 
   434  0799                     	;# 
   435  079A                     	;# 
   436  07A0                     	;# 
   437  07A1                     	;# 
   438  07A2                     	;# 
   439  07A3                     	;# 
   440  07A4                     	;# 
   441  07A5                     	;# 
   442  07A6                     	;# 
   443  07A7                     	;# 
   444  07A8                     	;# 
   445  07A9                     	;# 
   446  07AA                     	;# 
   447  07AB                     	;# 
   448  0FE4                     	;# 
   449  0FE5                     	;# 
   450  0FE6                     	;# 
   451  0FE7                     	;# 
   452  0FE8                     	;# 
   453  0FE9                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEF                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0008                     	;# 
   468  0009                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000D                     	;# 
   473  000E                     	;# 
   474  000F                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  008F                     	;# 
   494  0090                     	;# 
   495  0091                     	;# 
   496  0092                     	;# 
   497  0093                     	;# 
   498  0095                     	;# 
   499  0096                     	;# 
   500  0097                     	;# 
   501  0098                     	;# 
   502  0099                     	;# 
   503  009A                     	;# 
   504  009B                     	;# 
   505  009B                     	;# 
   506  009C                     	;# 
   507  009D                     	;# 
   508  009E                     	;# 
   509  010C                     	;# 
   510  010D                     	;# 
   511  010E                     	;# 
   512  010F                     	;# 
   513  0110                     	;# 
   514  0111                     	;# 
   515  0112                     	;# 
   516  0113                     	;# 
   517  0114                     	;# 
   518  0115                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  0118                     	;# 
   522  0119                     	;# 
   523  011A                     	;# 
   524  011B                     	;# 
   525  011D                     	;# 
   526  018C                     	;# 
   527  018D                     	;# 
   528  018F                     	;# 
   529  0190                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0193                     	;# 
   536  0194                     	;# 
   537  0195                     	;# 
   538  0196                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019C                     	;# 
   546  019C                     	;# 
   547  019D                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  020D                     	;# 
   551  0210                     	;# 
   552  0211                     	;# 
   553  0212                     	;# 
   554  0213                     	;# 
   555  0214                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0298                     	;# 
   569  0298                     	;# 
   570  0299                     	;# 
   571  029A                     	;# 
   572  029B                     	;# 
   573  029C                     	;# 
   574  029C                     	;# 
   575  029D                     	;# 
   576  029E                     	;# 
   577  029F                     	;# 
   578  0311                     	;# 
   579  0311                     	;# 
   580  0312                     	;# 
   581  0313                     	;# 
   582  0314                     	;# 
   583  0315                     	;# 
   584  0315                     	;# 
   585  0316                     	;# 
   586  0318                     	;# 
   587  0318                     	;# 
   588  0319                     	;# 
   589  031A                     	;# 
   590  031C                     	;# 
   591  031C                     	;# 
   592  031D                     	;# 
   593  031E                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0415                     	;# 
   598  0416                     	;# 
   599  0417                     	;# 
   600  041C                     	;# 
   601  041D                     	;# 
   602  041E                     	;# 
   603  0791                     	;# 
   604  0792                     	;# 
   605  0793                     	;# 
   606  0794                     	;# 
   607  0795                     	;# 
   608  0798                     	;# 
   609  0799                     	;# 
   610  079A                     	;# 
   611  07A0                     	;# 
   612  07A1                     	;# 
   613  07A2                     	;# 
   614  07A3                     	;# 
   615  07A4                     	;# 
   616  07A5                     	;# 
   617  07A6                     	;# 
   618  07A7                     	;# 
   619  07A8                     	;# 
   620  07A9                     	;# 
   621  07AA                     	;# 
   622  07AB                     	;# 
   623  0FE4                     	;# 
   624  0FE5                     	;# 
   625  0FE6                     	;# 
   626  0FE7                     	;# 
   627  0FE8                     	;# 
   628  0FE9                     	;# 
   629  0FEA                     	;# 
   630  0FEB                     	;# 
   631  0FED                     	;# 
   632  0FEE                     	;# 
   633  0FEF                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0008                     	;# 
   643  0009                     	;# 
   644  000A                     	;# 
   645  000B                     	;# 
   646  000C                     	;# 
   647  000D                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0016                     	;# 
   657  0017                     	;# 
   658  0018                     	;# 
   659  0019                     	;# 
   660  001A                     	;# 
   661  001B                     	;# 
   662  001C                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  008C                     	;# 
   666  008D                     	;# 
   667  008E                     	;# 
   668  008F                     	;# 
   669  0090                     	;# 
   670  0091                     	;# 
   671  0092                     	;# 
   672  0093                     	;# 
   673  0095                     	;# 
   674  0096                     	;# 
   675  0097                     	;# 
   676  0098                     	;# 
   677  0099                     	;# 
   678  009A                     	;# 
   679  009B                     	;# 
   680  009B                     	;# 
   681  009C                     	;# 
   682  009D                     	;# 
   683  009E                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  0110                     	;# 
   689  0111                     	;# 
   690  0112                     	;# 
   691  0113                     	;# 
   692  0114                     	;# 
   693  0115                     	;# 
   694  0116                     	;# 
   695  0117                     	;# 
   696  0118                     	;# 
   697  0119                     	;# 
   698  011A                     	;# 
   699  011B                     	;# 
   700  011D                     	;# 
   701  018C                     	;# 
   702  018D                     	;# 
   703  018F                     	;# 
   704  0190                     	;# 
   705  0191                     	;# 
   706  0191                     	;# 
   707  0192                     	;# 
   708  0193                     	;# 
   709  0193                     	;# 
   710  0193                     	;# 
   711  0194                     	;# 
   712  0195                     	;# 
   713  0196                     	;# 
   714  0199                     	;# 
   715  019A                     	;# 
   716  019B                     	;# 
   717  019B                     	;# 
   718  019B                     	;# 
   719  019B                     	;# 
   720  019C                     	;# 
   721  019C                     	;# 
   722  019D                     	;# 
   723  019E                     	;# 
   724  019F                     	;# 
   725  020D                     	;# 
   726  0210                     	;# 
   727  0211                     	;# 
   728  0212                     	;# 
   729  0213                     	;# 
   730  0214                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0217                     	;# 
   735  0291                     	;# 
   736  0291                     	;# 
   737  0292                     	;# 
   738  0293                     	;# 
   739  0294                     	;# 
   740  0295                     	;# 
   741  0295                     	;# 
   742  0296                     	;# 
   743  0298                     	;# 
   744  0298                     	;# 
   745  0299                     	;# 
   746  029A                     	;# 
   747  029B                     	;# 
   748  029C                     	;# 
   749  029C                     	;# 
   750  029D                     	;# 
   751  029E                     	;# 
   752  029F                     	;# 
   753  0311                     	;# 
   754  0311                     	;# 
   755  0312                     	;# 
   756  0313                     	;# 
   757  0314                     	;# 
   758  0315                     	;# 
   759  0315                     	;# 
   760  0316                     	;# 
   761  0318                     	;# 
   762  0318                     	;# 
   763  0319                     	;# 
   764  031A                     	;# 
   765  031C                     	;# 
   766  031C                     	;# 
   767  031D                     	;# 
   768  031E                     	;# 
   769  0394                     	;# 
   770  0395                     	;# 
   771  0396                     	;# 
   772  0415                     	;# 
   773  0416                     	;# 
   774  0417                     	;# 
   775  041C                     	;# 
   776  041D                     	;# 
   777  041E                     	;# 
   778  0791                     	;# 
   779  0792                     	;# 
   780  0793                     	;# 
   781  0794                     	;# 
   782  0795                     	;# 
   783  0798                     	;# 
   784  0799                     	;# 
   785  079A                     	;# 
   786  07A0                     	;# 
   787  07A1                     	;# 
   788  07A2                     	;# 
   789  07A3                     	;# 
   790  07A4                     	;# 
   791  07A5                     	;# 
   792  07A6                     	;# 
   793  07A7                     	;# 
   794  07A8                     	;# 
   795  07A9                     	;# 
   796  07AA                     	;# 
   797  07AB                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  000F                     	;# 
   825  0010                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0013                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  001E                     	;# 
   839  001F                     	;# 
   840  008C                     	;# 
   841  008D                     	;# 
   842  008E                     	;# 
   843  008F                     	;# 
   844  0090                     	;# 
   845  0091                     	;# 
   846  0092                     	;# 
   847  0093                     	;# 
   848  0095                     	;# 
   849  0096                     	;# 
   850  0097                     	;# 
   851  0098                     	;# 
   852  0099                     	;# 
   853  009A                     	;# 
   854  009B                     	;# 
   855  009B                     	;# 
   856  009C                     	;# 
   857  009D                     	;# 
   858  009E                     	;# 
   859  010C                     	;# 
   860  010D                     	;# 
   861  010E                     	;# 
   862  010F                     	;# 
   863  0110                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  011A                     	;# 
   874  011B                     	;# 
   875  011D                     	;# 
   876  018C                     	;# 
   877  018D                     	;# 
   878  018F                     	;# 
   879  0190                     	;# 
   880  0191                     	;# 
   881  0191                     	;# 
   882  0192                     	;# 
   883  0193                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0199                     	;# 
   890  019A                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019C                     	;# 
   896  019C                     	;# 
   897  019D                     	;# 
   898  019E                     	;# 
   899  019F                     	;# 
   900  020D                     	;# 
   901  0210                     	;# 
   902  0211                     	;# 
   903  0212                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0294                     	;# 
   915  0295                     	;# 
   916  0295                     	;# 
   917  0296                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  029B                     	;# 
   923  029C                     	;# 
   924  029C                     	;# 
   925  029D                     	;# 
   926  029E                     	;# 
   927  029F                     	;# 
   928  0311                     	;# 
   929  0311                     	;# 
   930  0312                     	;# 
   931  0313                     	;# 
   932  0314                     	;# 
   933  0315                     	;# 
   934  0315                     	;# 
   935  0316                     	;# 
   936  0318                     	;# 
   937  0318                     	;# 
   938  0319                     	;# 
   939  031A                     	;# 
   940  031C                     	;# 
   941  031C                     	;# 
   942  031D                     	;# 
   943  031E                     	;# 
   944  0394                     	;# 
   945  0395                     	;# 
   946  0396                     	;# 
   947  0415                     	;# 
   948  0416                     	;# 
   949  0417                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  0791                     	;# 
   954  0792                     	;# 
   955  0793                     	;# 
   956  0794                     	;# 
   957  0795                     	;# 
   958  0798                     	;# 
   959  0799                     	;# 
   960  079A                     	;# 
   961  07A0                     	;# 
   962  07A1                     	;# 
   963  07A2                     	;# 
   964  07A3                     	;# 
   965  07A4                     	;# 
   966  07A5                     	;# 
   967  07A6                     	;# 
   968  07A7                     	;# 
   969  07A8                     	;# 
   970  07A9                     	;# 
   971  07AA                     	;# 
   972  07AB                     	;# 
   973  0FE4                     	;# 
   974  0FE5                     	;# 
   975  0FE6                     	;# 
   976  0FE7                     	;# 
   977  0FE8                     	;# 
   978  0FE9                     	;# 
   979  0FEA                     	;# 
   980  0FEB                     	;# 
   981  0FED                     	;# 
   982  0FEE                     	;# 
   983  0FEF                     	;# 
   984  0000                     	;# 
   985  0001                     	;# 
   986  0002                     	;# 
   987  0003                     	;# 
   988  0004                     	;# 
   989  0005                     	;# 
   990  0006                     	;# 
   991  0007                     	;# 
   992  0008                     	;# 
   993  0009                     	;# 
   994  000A                     	;# 
   995  000B                     	;# 
   996  000C                     	;# 
   997  000D                     	;# 
   998  000E                     	;# 
   999  000F                     	;# 
  1000  0010                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0013                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  001E                     	;# 
  1014  001F                     	;# 
  1015  008C                     	;# 
  1016  008D                     	;# 
  1017  008E                     	;# 
  1018  008F                     	;# 
  1019  0090                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009A                     	;# 
  1029  009B                     	;# 
  1030  009B                     	;# 
  1031  009C                     	;# 
  1032  009D                     	;# 
  1033  009E                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  010F                     	;# 
  1038  0110                     	;# 
  1039  0111                     	;# 
  1040  0112                     	;# 
  1041  0113                     	;# 
  1042  0114                     	;# 
  1043  0115                     	;# 
  1044  0116                     	;# 
  1045  0117                     	;# 
  1046  0118                     	;# 
  1047  0119                     	;# 
  1048  011A                     	;# 
  1049  011B                     	;# 
  1050  011D                     	;# 
  1051  018C                     	;# 
  1052  018D                     	;# 
  1053  018F                     	;# 
  1054  0190                     	;# 
  1055  0191                     	;# 
  1056  0191                     	;# 
  1057  0192                     	;# 
  1058  0193                     	;# 
  1059  0193                     	;# 
  1060  0193                     	;# 
  1061  0194                     	;# 
  1062  0195                     	;# 
  1063  0196                     	;# 
  1064  0199                     	;# 
  1065  019A                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019C                     	;# 
  1071  019C                     	;# 
  1072  019D                     	;# 
  1073  019E                     	;# 
  1074  019F                     	;# 
  1075  020D                     	;# 
  1076  0210                     	;# 
  1077  0211                     	;# 
  1078  0212                     	;# 
  1079  0213                     	;# 
  1080  0214                     	;# 
  1081  0215                     	;# 
  1082  0215                     	;# 
  1083  0216                     	;# 
  1084  0217                     	;# 
  1085  0291                     	;# 
  1086  0291                     	;# 
  1087  0292                     	;# 
  1088  0293                     	;# 
  1089  0294                     	;# 
  1090  0295                     	;# 
  1091  0295                     	;# 
  1092  0296                     	;# 
  1093  0298                     	;# 
  1094  0298                     	;# 
  1095  0299                     	;# 
  1096  029A                     	;# 
  1097  029B                     	;# 
  1098  029C                     	;# 
  1099  029C                     	;# 
  1100  029D                     	;# 
  1101  029E                     	;# 
  1102  029F                     	;# 
  1103  0311                     	;# 
  1104  0311                     	;# 
  1105  0312                     	;# 
  1106  0313                     	;# 
  1107  0314                     	;# 
  1108  0315                     	;# 
  1109  0315                     	;# 
  1110  0316                     	;# 
  1111  0318                     	;# 
  1112  0318                     	;# 
  1113  0319                     	;# 
  1114  031A                     	;# 
  1115  031C                     	;# 
  1116  031C                     	;# 
  1117  031D                     	;# 
  1118  031E                     	;# 
  1119  0394                     	;# 
  1120  0395                     	;# 
  1121  0396                     	;# 
  1122  0415                     	;# 
  1123  0416                     	;# 
  1124  0417                     	;# 
  1125  041C                     	;# 
  1126  041D                     	;# 
  1127  041E                     	;# 
  1128  0791                     	;# 
  1129  0792                     	;# 
  1130  0793                     	;# 
  1131  0794                     	;# 
  1132  0795                     	;# 
  1133  0798                     	;# 
  1134  0799                     	;# 
  1135  079A                     	;# 
  1136  07A0                     	;# 
  1137  07A1                     	;# 
  1138  07A2                     	;# 
  1139  07A3                     	;# 
  1140  07A4                     	;# 
  1141  07A5                     	;# 
  1142  07A6                     	;# 
  1143  07A7                     	;# 
  1144  07A8                     	;# 
  1145  07A9                     	;# 
  1146  07AA                     	;# 
  1147  07AB                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159  0000                     	;# 
  1160  0001                     	;# 
  1161  0002                     	;# 
  1162  0003                     	;# 
  1163  0004                     	;# 
  1164  0005                     	;# 
  1165  0006                     	;# 
  1166  0007                     	;# 
  1167  0008                     	;# 
  1168  0009                     	;# 
  1169  000A                     	;# 
  1170  000B                     	;# 
  1171  000C                     	;# 
  1172  000D                     	;# 
  1173  000E                     	;# 
  1174  000F                     	;# 
  1175  0010                     	;# 
  1176  0011                     	;# 
  1177  0012                     	;# 
  1178  0013                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  001E                     	;# 
  1189  001F                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  008F                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0093                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0098                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  010F                     	;# 
  1213  0110                     	;# 
  1214  0111                     	;# 
  1215  0112                     	;# 
  1216  0113                     	;# 
  1217  0114                     	;# 
  1218  0115                     	;# 
  1219  0116                     	;# 
  1220  0117                     	;# 
  1221  0118                     	;# 
  1222  0119                     	;# 
  1223  011A                     	;# 
  1224  011B                     	;# 
  1225  011D                     	;# 
  1226  018C                     	;# 
  1227  018D                     	;# 
  1228  018F                     	;# 
  1229  0190                     	;# 
  1230  0191                     	;# 
  1231  0191                     	;# 
  1232  0192                     	;# 
  1233  0193                     	;# 
  1234  0193                     	;# 
  1235  0193                     	;# 
  1236  0194                     	;# 
  1237  0195                     	;# 
  1238  0196                     	;# 
  1239  0199                     	;# 
  1240  019A                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019B                     	;# 
  1244  019B                     	;# 
  1245  019C                     	;# 
  1246  019C                     	;# 
  1247  019D                     	;# 
  1248  019E                     	;# 
  1249  019F                     	;# 
  1250  020D                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0291                     	;# 
  1261  0291                     	;# 
  1262  0292                     	;# 
  1263  0293                     	;# 
  1264  0294                     	;# 
  1265  0295                     	;# 
  1266  0295                     	;# 
  1267  0296                     	;# 
  1268  0298                     	;# 
  1269  0298                     	;# 
  1270  0299                     	;# 
  1271  029A                     	;# 
  1272  029B                     	;# 
  1273  029C                     	;# 
  1274  029C                     	;# 
  1275  029D                     	;# 
  1276  029E                     	;# 
  1277  029F                     	;# 
  1278  0311                     	;# 
  1279  0311                     	;# 
  1280  0312                     	;# 
  1281  0313                     	;# 
  1282  0314                     	;# 
  1283  0315                     	;# 
  1284  0315                     	;# 
  1285  0316                     	;# 
  1286  0318                     	;# 
  1287  0318                     	;# 
  1288  0319                     	;# 
  1289  031A                     	;# 
  1290  031C                     	;# 
  1291  031C                     	;# 
  1292  031D                     	;# 
  1293  031E                     	;# 
  1294  0394                     	;# 
  1295  0395                     	;# 
  1296  0396                     	;# 
  1297  0415                     	;# 
  1298  0416                     	;# 
  1299  0417                     	;# 
  1300  041C                     	;# 
  1301  041D                     	;# 
  1302  041E                     	;# 
  1303  0791                     	;# 
  1304  0792                     	;# 
  1305  0793                     	;# 
  1306  0794                     	;# 
  1307  0795                     	;# 
  1308  0798                     	;# 
  1309  0799                     	;# 
  1310  079A                     	;# 
  1311  07A0                     	;# 
  1312  07A1                     	;# 
  1313  07A2                     	;# 
  1314  07A3                     	;# 
  1315  07A4                     	;# 
  1316  07A5                     	;# 
  1317  07A6                     	;# 
  1318  07A7                     	;# 
  1319  07A8                     	;# 
  1320  07A9                     	;# 
  1321  07AA                     	;# 
  1322  07AB                     	;# 
  1323  0FE4                     	;# 
  1324  0FE5                     	;# 
  1325  0FE6                     	;# 
  1326  0FE7                     	;# 
  1327  0FE8                     	;# 
  1328  0FE9                     	;# 
  1329  0FEA                     	;# 
  1330  0FEB                     	;# 
  1331  0FED                     	;# 
  1332  0FEE                     	;# 
  1333  0FEF                     	;# 
  1334                           
  1335                           	psect	idataBANK2
  1336  0002                     __pidataBANK2:	
  1337                           
  1338                           ;initializer for turn_egs@step_nr
  1339  0002  3401               	retlw	1
  1340  0003  3400               	retlw	0
  1341                           
  1342                           	psect	idataBANK3
  1343  0F89                     __pidataBANK3:	
  1344                           
  1345                           ;initializer for comparare@F3715
  1346  0F89  34BA               	retlw	186
  1347  0F8A  340B               	retlw	11
  1348  0F8B  3481               	retlw	129
  1349  0F8C  340A               	retlw	10
  1350  0F8D  3449               	retlw	73
  1351  0F8E  3409               	retlw	9
  1352  0F8F  348A               	retlw	138
  1353  0F90  3408               	retlw	8
  1354  0F91  3467               	retlw	103
  1355  0F92  3407               	retlw	7
  1356  0F93  34AB               	retlw	171
  1357  0F94  3406               	retlw	6
  1358  0F95  34F0               	retlw	240
  1359  0F96  3405               	retlw	5
  1360  0F97  345E               	retlw	94
  1361  0F98  3405               	retlw	5
  1362  0F99  34CC               	retlw	204
  1363  0F9A  3404               	retlw	4
  1364  0F9B  345A               	retlw	90
  1365  0F9C  3404               	retlw	4
  1366  0F9D  34E8               	retlw	232
  1367  0F9E  3403               	retlw	3
  1368  0F9F  348C               	retlw	140
  1369  0FA0  3403               	retlw	3
  1370  0FA1  3431               	retlw	49
  1371  0FA2  3403               	retlw	3
  1372  0FA3  34E9               	retlw	233
  1373  0FA4  3402               	retlw	2
  1374  0FA5  34A1               	retlw	161
  1375  0FA6  3402               	retlw	2
  1376  0FA7  3467               	retlw	103
  1377  0FA8  3402               	retlw	2
  1378  0FA9  342D               	retlw	45
  1379  0FAA  3402               	retlw	2
  1380  0FAB  34F0               	retlw	240
  1381  0FAC  3401               	retlw	1
  1382  0FAD  34CF               	retlw	207
  1383  0FAE  3401               	retlw	1
  1384  0FAF  34A9               	retlw	169
  1385  0FB0  3401               	retlw	1
  1386  0FB1  3483               	retlw	131
  1387  0FB2  3401               	retlw	1
  1388                           
  1389                           ;initializer for _line2
  1390  0FB3  346D               	retlw	109
  1391  0FB4  3465               	retlw	101
  1392  0FB5  3472               	retlw	114
  1393  0FB6  3467               	retlw	103
  1394  0FB7  3465               	retlw	101
  1395  0FB8  3420               	retlw	32
  1396  0FB9  3420               	retlw	32
  1397  0FBA  3420               	retlw	32
  1398  0FBB  3400               	retlw	0
  1399                           
  1400                           ;initializer for _line1
  1401  0FBC  3468               	retlw	104
  1402  0FBD  3461               	retlw	97
  1403  0FBE  3468               	retlw	104
  1404  0FBF  3461               	retlw	97
  1405  0FC0  3420               	retlw	32
  1406  0FC1  3420               	retlw	32
  1407  0FC2  3420               	retlw	32
  1408  0FC3  3400               	retlw	0
  1409                           
  1410                           	psect	nvBANK0
  1411  006D                     __pnvBANK0:	
  1412  006D                     _timer1ReloadVal:	
  1413  006D                     	ds	2
  1414  006F                     _eusartTxBufferRemaining:	
  1415  006F                     	ds	1
  1416                           
  1417                           	psect	nvBANK2
  1418  016A                     __pnvBANK2:	
  1419  016A                     _TMR1_InterruptHandler:	
  1420  016A                     	ds	2
  1421  0019                     _T1GCONbits	set	25
  1422  0018                     _T1CONbits	set	24
  1423  0016                     _TMR1L	set	22
  1424  0017                     _TMR1H	set	23
  1425  0019                     _T1GCON	set	25
  1426  0018                     _T1CON	set	24
  1427  0011                     _PIR1bits	set	17
  1428  000B                     _INTCONbits	set	11
  1429  008E                     _TRISCbits	set	142
  1430  009D                     _ADCON0bits	set	157
  1431  009C                     _ADRESH	set	156
  1432  009B                     _ADRESL	set	155
  1433  009E                     _ADCON1	set	158
  1434  009D                     _ADCON0	set	157
  1435  0091                     _PIE1bits	set	145
  1436  0095                     _OPTION_REGbits	set	149
  1437  008F                     _TRISD	set	143
  1438  008E                     _TRISC	set	142
  1439  008D                     _TRISB	set	141
  1440  008C                     _TRISA	set	140
  1441  0090                     _TRISE	set	144
  1442  0097                     _WDTCON	set	151
  1443  0098                     _OSCTUNE	set	152
  1444  0099                     _OSCCON	set	153
  1445  010E                     _LATCbits	set	270
  1446  010F                     _LATDbits	set	271
  1447  011D                     _APFCON	set	285
  1448  010E                     _LATC	set	270
  1449  010D                     _LATB	set	269
  1450  010C                     _LATA	set	268
  1451  010F                     _LATD	set	271
  1452  0110                     _LATE	set	272
  1453  0199                     _RCREG	set	409
  1454  019D                     _RCSTAbits	set	413
  1455  019A                     _TXREG	set	410
  1456  019C                     _SPBRGH	set	412
  1457  019B                     _SPBRGL	set	411
  1458  019E                     _TXSTA	set	414
  1459  019D                     _RCSTA	set	413
  1460  019F                     _BAUDCON	set	415
  1461  018C                     _ANSELA	set	396
  1462  0190                     _ANSELE	set	400
  1463  018F                     _ANSELD	set	399
  1464  018D                     _ANSELB	set	397
  1465  020D                     _WPUB	set	525
  1466  0210                     _WPUE	set	528
  1467                           
  1468                           	psect	stringtext1
  1469  1000                     __pstringtext1:	
  1470  1000                     STR_2:	
  1471  1000  3441               	retlw	65	;'A'
  1472  1001  3454               	retlw	84	;'T'
  1473  1002  342B               	retlw	43	;'+'
  1474  1003  3443               	retlw	67	;'C'
  1475  1004  344D               	retlw	77	;'M'
  1476  1005  3447               	retlw	71	;'G'
  1477  1006  3453               	retlw	83	;'S'
  1478  1007  343D               	retlw	61	;'='
  1479  1008  3422               	retlw	34	;'"'
  1480  1009  3430               	retlw	48	;'0'
  1481  100A  3437               	retlw	55	;'7'
  1482  100B  3435               	retlw	53	;'5'
  1483  100C  3437               	retlw	55	;'7'
  1484  100D  3434               	retlw	52	;'4'
  1485  100E  3439               	retlw	57	;'9'
  1486  100F  3434               	retlw	52	;'4'
  1487  1010  3438               	retlw	56	;'8'
  1488  1011  3432               	retlw	50	;'2'
  1489  1012  3433               	retlw	51	;'3'
  1490  1013  3422               	retlw	34	;'"'
  1491  1014  3400               	retlw	0
  1492                           
  1493                           	psect	stringtext2
  1494  1015                     __pstringtext2:	
  1495  1015                     STR_7:	
  1496  1015  3441               	retlw	65	;'A'
  1497  1016  3454               	retlw	84	;'T'
  1498  1017  342B               	retlw	43	;'+'
  1499  1018  3443               	retlw	67	;'C'
  1500  1019  344E               	retlw	78	;'N'
  1501  101A  344D               	retlw	77	;'M'
  1502  101B  3449               	retlw	73	;'I'
  1503  101C  343D               	retlw	61	;'='
  1504  101D  3431               	retlw	49	;'1'
  1505  101E  342C               	retlw	44	;','
  1506  101F  3432               	retlw	50	;'2'
  1507  1020  342C               	retlw	44	;','
  1508  1021  3430               	retlw	48	;'0'
  1509  1022  342C               	retlw	44	;','
  1510  1023  3430               	retlw	48	;'0'
  1511  1024  342C               	retlw	44	;','
  1512  1025  3430               	retlw	48	;'0'
  1513  1026  3400               	retlw	0
  1514                           
  1515                           	psect	stringtext3
  1516  1027                     __pstringtext3:	
  1517  1027                     STR_5:	
  1518  1027  3441               	retlw	65	;'A'
  1519  1028  3454               	retlw	84	;'T'
  1520  1029  342B               	retlw	43	;'+'
  1521  102A  3443               	retlw	67	;'C'
  1522  102B  3450               	retlw	80	;'P'
  1523  102C  3449               	retlw	73	;'I'
  1524  102D  344E               	retlw	78	;'N'
  1525  102E  343D               	retlw	61	;'='
  1526  102F  3422               	retlw	34	;'"'
  1527  1030  3430               	retlw	48	;'0'
  1528  1031  3430               	retlw	48	;'0'
  1529  1032  3430               	retlw	48	;'0'
  1530  1033  3430               	retlw	48	;'0'
  1531  1034  3422               	retlw	34	;'"'
  1532  1035  3400               	retlw	0
  1533                           
  1534                           	psect	stringtext4
  1535  1036                     __pstringtext4:	
  1536  1036                     STR_1:	
  1537  1036  3441               	retlw	65	;'A'
  1538  1037  3454               	retlw	84	;'T'
  1539  1038  342B               	retlw	43	;'+'
  1540  1039  3443               	retlw	67	;'C'
  1541  103A  3453               	retlw	83	;'S'
  1542  103B  3443               	retlw	67	;'C'
  1543  103C  3453               	retlw	83	;'S'
  1544  103D  343D               	retlw	61	;'='
  1545  103E  3422               	retlw	34	;'"'
  1546  103F  3447               	retlw	71	;'G'
  1547  1040  3453               	retlw	83	;'S'
  1548  1041  344D               	retlw	77	;'M'
  1549  1042  3422               	retlw	34	;'"'
  1550  1043  3400               	retlw	0
  1551                           
  1552                           	psect	stringtext5
  1553  1044                     __pstringtext5:	
  1554  1044                     STR_3:	
  1555  1044  3469               	retlw	105	;'i'
  1556  1045  3475               	retlw	117	;'u'
  1557  1046  3470               	retlw	112	;'p'
  1558  1047  3469               	retlw	105	;'i'
  1559  1048  3469               	retlw	105	;'i'
  1560  1049  3420               	retlw	32	;' '
  1561  104A  346D               	retlw	109	;'m'
  1562  104B  3465               	retlw	101	;'e'
  1563  104C  3472               	retlw	114	;'r'
  1564  104D  3467               	retlw	103	;'g'
  1565  104E  3465               	retlw	101	;'e'
  1566  104F  3400               	retlw	0
  1567                           
  1568                           	psect	stringtext6
  1569  1050                     __pstringtext6:	
  1570  1050                     STR_6:	
  1571  1050  3441               	retlw	65	;'A'
  1572  1051  3454               	retlw	84	;'T'
  1573  1052  342B               	retlw	43	;'+'
  1574  1053  3443               	retlw	67	;'C'
  1575  1054  344D               	retlw	77	;'M'
  1576  1055  3447               	retlw	71	;'G'
  1577  1056  3446               	retlw	70	;'F'
  1578  1057  343D               	retlw	61	;'='
  1579  1058  3431               	retlw	49	;'1'
  1580  1059  3400               	retlw	0
  1581                           
  1582                           	psect	stringtext7
  1583  105A                     __pstringtext7:	
  1584  105A                     STR_4:	
  1585  105A  3441               	retlw	65	;'A'
  1586  105B  3454               	retlw	84	;'T'
  1587  105C  3400               	retlw	0
  1588                           
  1589                           	psect	stringtext8
  1590  0000                     __pstringtext8:	
  1591  1036                     
  1592                           ; #config settings
  1593  0000                     
  1594                           	psect	cinit
  1595  003E                     start_initialization:	
  1596  003E                     __initialization:	
  1597                           
  1598                           ; Initialize objects allocated to BANK2
  1599  003E  0022               	movlb	2	; select bank2
  1600  003F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  1601  0042  00EC               	movwf	__pdataBANK2& (0+127)
  1602  0043  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  1603  0046  00ED               	movwf	(__pdataBANK2+1)& (0+127)
  1604                           
  1605                           ; Initialize objects allocated to BANK3
  1606  0047  3089               	movlw	low __pidataBANK3
  1607  0048  0084               	movwf	4
  1608  0049  308F               	movlw	(high __pidataBANK3)| (0+128)
  1609  004A  0085               	movwf	5
  1610  004B  30A0               	movlw	low __pdataBANK3
  1611  004C  0086               	movwf	6
  1612  004D  3001               	movlw	high __pdataBANK3
  1613  004E  0087               	movwf	7
  1614  004F  303B               	movlw	59
  1615  0050  318D  2587  3180   	fcall	init_ram
  1616                           
  1617                           ; Clear objects allocated to COMMON
  1618  0053  01FA               	clrf	__pbssCOMMON& (0+127)
  1619  0054  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1620  0055  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  1621  0056  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  1622                           
  1623                           ; Clear objects allocated to BANK0
  1624  0057  3066               	movlw	low __pbssBANK0
  1625  0058  0084               	movwf	4
  1626  0059  3000               	movlw	high __pbssBANK0
  1627  005A  0085               	movwf	5
  1628  005B  3007               	movlw	7
  1629  005C  318D  2581  3180   	fcall	clear_ram0
  1630                           
  1631                           ; Clear objects allocated to BANK1
  1632  005F  0021               	movlb	1	; select bank1
  1633  0060  01ED               	clrf	__pbssBANK1& (0+127)
  1634  0061  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  1635                           
  1636                           ; Clear objects allocated to BANK2
  1637  0062  304A               	movlw	low __pbssBANK2
  1638  0063  0084               	movwf	4
  1639  0064  3001               	movlw	high __pbssBANK2
  1640  0065  0085               	movwf	5
  1641  0066  3020               	movlw	32
  1642  0067  318D  2581  3180   	fcall	clear_ram0
  1643                           
  1644                           ; Clear objects allocated to BANK3
  1645  006A  30DB               	movlw	low __pbssBANK3
  1646  006B  0084               	movwf	4
  1647  006C  3001               	movlw	high __pbssBANK3
  1648  006D  0085               	movwf	5
  1649  006E  3010               	movlw	16
  1650  006F  318D  2581  3180   	fcall	clear_ram0
  1651                           
  1652                           ; Clear objects allocated to BANK4
  1653  0072  3020               	movlw	low __pbssBANK4
  1654  0073  0084               	movwf	4
  1655  0074  3002               	movlw	high __pbssBANK4
  1656  0075  0085               	movwf	5
  1657  0076  304B               	movlw	75
  1658  0077  318D  2581         	fcall	clear_ram0
  1659  0079                     end_of_initialization:	
  1660                           ;End of C runtime variable initialization code
  1661                           
  1662  0079                     __end_of__initialization:	
  1663  0079  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1664  007A  0020               	movlb	0
  1665  007B  3185  2D35         	ljmp	_main	;jump to C main() function
  1666                           
  1667                           	psect	bssCOMMON
  1668  007A                     __pbssCOMMON:	
  1669  007A                     turn_egs@step_index:	
  1670  007A                     	ds	1
  1671  007B                     _rcreg:	
  1672  007B                     	ds	1
  1673  007C                     _eusartTxTail:	
  1674  007C                     	ds	1
  1675  007D                     _eusartTxHead:	
  1676  007D                     	ds	1
  1677                           
  1678                           	psect	bssBANK0
  1679  0066                     __pbssBANK0:	
  1680  0066                     int_gsm@sms1_index:	
  1681  0066                     	ds	2
  1682  0068                     _flag_directie:	
  1683  0068                     	ds	2
  1684  006A                     _eusartRxCount:	
  1685  006A                     	ds	1
  1686  006B                     _eusartRxTail:	
  1687  006B                     	ds	1
  1688  006C                     _eusartRxHead:	
  1689  006C                     	ds	1
  1690                           
  1691                           	psect	bssBANK1
  1692  00ED                     __pbssBANK1:	
  1693  00ED                     sms_text@sms_index:	
  1694  00ED                     	ds	2
  1695                           
  1696                           	psect	bssBANK2
  1697  014A                     __pbssBANK2:	
  1698  014A                     TMR1_ISR@CountCallBack:	
  1699  014A                     	ds	2
  1700  014C                     _count_4000_ms:	
  1701  014C                     	ds	2
  1702  014E                     _count_1000_ms:	
  1703  014E                     	ds	2
  1704  0150                     _count_500_ms:	
  1705  0150                     	ds	2
  1706  0152                     _count_100_ms:	
  1707  0152                     	ds	2
  1708  0154                     _flag_4000_ms:	
  1709  0154                     	ds	2
  1710  0156                     _flag_1000_ms:	
  1711  0156                     	ds	2
  1712  0158                     _flag_500_ms:	
  1713  0158                     	ds	2
  1714  015A                     _flag_100_ms:	
  1715  015A                     	ds	2
  1716  015C                     _flag_10_ms:	
  1717  015C                     	ds	2
  1718  015E                     _flag_1_ms:	
  1719  015E                     	ds	2
  1720  0160                     _flag_B:	
  1721  0160                     	ds	2
  1722  0162                     _flag_A:	
  1723  0162                     	ds	2
  1724  0164                     _flag_G:	
  1725  0164                     	ds	2
  1726  0166                     _flag_N:	
  1727  0166                     	ds	2
  1728  0168                     _rez_conversie:	
  1729  0168                     	ds	2
  1730                           
  1731                           	psect	dataBANK2
  1732  016C                     __pdataBANK2:	
  1733  016C                     turn_egs@step_nr:	
  1734  016C                     	ds	2
  1735                           
  1736                           	psect	bssBANK3
  1737  01DB                     __pbssBANK3:	
  1738  01DB                     _eusartRxBuffer:	
  1739  01DB                     	ds	8
  1740  01E3                     _eusartTxBuffer:	
  1741  01E3                     	ds	8
  1742                           
  1743                           	psect	dataBANK3
  1744  01A0                     __pdataBANK3:	
  1745  01A0                     comparare@F3715:	
  1746  01A0                     	ds	42
  1747  01CA                     _line2:	
  1748  01CA                     	ds	9
  1749  01D3                     _line1:	
  1750  01D3                     	ds	8
  1751                           
  1752                           	psect	bssBANK4
  1753  0220                     __pbssBANK4:	
  1754  0220                     comparare@F3720:	
  1755  0220                     	ds	75
  1756                           
  1757                           	psect	inittext
  1758  0D87                     init_ram:	
  1759  0D87  00FE               	movwf	126
  1760  0D88                     initloop:	
  1761  0D88  0012               	moviw fsr0++
  1762  0D89  001E               	movwi fsr1++
  1763  0D8A  0BFE               	decfsz	126,f
  1764  0D8B  2D88               	goto	initloop
  1765  0D8C  3400               	retlw	0
  1766                           
  1767                           	psect	clrtext
  1768  0D81                     clear_ram0:	
  1769                           ;	Called with FSR0 containing the base address, and
  1770                           ;	WREG with the size to clear
  1771                           
  1772  0D81  0064               	clrwdt	;clear the watchdog before getting into this loop
  1773  0D82                     clrloop0:	
  1774  0D82  0180               	clrf	0	;clear RAM location pointed to by FSR
  1775  0D83  3101               	addfsr 0,1
  1776  0D84  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1777  0D85  2D82               	goto	clrloop0	;have we reached the end yet?
  1778  0D86  3400               	retlw	0	;all done for this memory range, return
  1779                           
  1780                           	psect	cstackBANK2
  1781  0120                     __pcstackBANK2:	
  1782  0120                     comparare@res:	
  1783                           
  1784                           ; 42 bytes @ 0x0
  1785  0120                     	ds	42
  1786                           
  1787                           	psect	cstackBANK1
  1788  00A0                     __pcstackBANK1:	
  1789  00A0                     comparare@table:	
  1790                           
  1791                           ; 75 bytes @ 0x0
  1792  00A0                     	ds	75
  1793  00EB                     comparare@i:	
  1794                           
  1795                           ; 2 bytes @ 0x4B
  1796  00EB                     	ds	2
  1797                           
  1798                           	psect	cstackCOMMON
  1799  0070                     __pcstackCOMMON:	
  1800  0070                     ?_PIN_MANAGER_Initialize:	
  1801  0070                     ?_OSCILLATOR_Initialize:	
  1802                           ; 1 bytes @ 0x0
  1803                           
  1804  0070                     ?_WDT_Initialize:	
  1805                           ; 1 bytes @ 0x0
  1806                           
  1807  0070                     ?_TMR1_Initialize:	
  1808                           ; 1 bytes @ 0x0
  1809                           
  1810  0070                     ?_ADC_Initialize:	
  1811                           ; 1 bytes @ 0x0
  1812                           
  1813  0070                     ?_EUSART_Initialize:	
  1814                           ; 1 bytes @ 0x0
  1815                           
  1816  0070                     ?_ADC_ISR:	
  1817                           ; 1 bytes @ 0x0
  1818                           
  1819  0070                     ?_TMR1_ISR:	
  1820                           ; 1 bytes @ 0x0
  1821                           
  1822  0070                     ??_TMR1_ISR:	
  1823                           ; 1 bytes @ 0x0
  1824                           
  1825  0070                     ?_TMR1_DefaultInterruptHandler:	
  1826                           ; 1 bytes @ 0x0
  1827                           
  1828  0070                     ??_TMR1_DefaultInterruptHandler:	
  1829                           ; 1 bytes @ 0x0
  1830                           
  1831  0070                     ?_TMR1_StartTimer:	
  1832                           ; 1 bytes @ 0x0
  1833                           
  1834  0070                     ?_TMR1_CallBack:	
  1835                           ; 1 bytes @ 0x0
  1836                           
  1837  0070                     ??_TMR1_CallBack:	
  1838                           ; 1 bytes @ 0x0
  1839                           
  1840  0070                     ?_send_nibble:	
  1841                           ; 1 bytes @ 0x0
  1842                           
  1843  0070                     ?_send_command_byte:	
  1844                           ; 1 bytes @ 0x0
  1845                           
  1846  0070                     ?_SYSTEM_Initialize:	
  1847                           ; 1 bytes @ 0x0
  1848                           
  1849  0070                     ?_EUSART_Write:	
  1850                           ; 1 bytes @ 0x0
  1851                           
  1852  0070                     ?_putch:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0070                     ?_EUSART_Transmit_ISR:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0070                     ??_EUSART_Transmit_ISR:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0070                     ?_EUSART_Receive_ISR:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0070                     ??_EUSART_Receive_ISR:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0070                     ?_INTERRUPT_InterruptManager:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0070                     ?_ADC_StartConversion:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ?_init_lcd:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_comand_lcd:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ?_turn_egs:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ?_sms_text:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ?_int_gsm:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_main:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?i1_ADC_StartConversion:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ??i1_ADC_StartConversion:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_ADC_GetConversionResult:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900                           
  1901                           ; 2 bytes @ 0x0
  1902  0070                     	ds	2
  1903  0072                     ??_ADC_GetConversionResult:	
  1904                           
  1905                           ; 1 bytes @ 0x2
  1906  0072                     	ds	7
  1907  0079                     ??_ADC_ISR:	
  1908  0079                     ??_INTERRUPT_InterruptManager:	
  1909                           ; 1 bytes @ 0x9
  1910                           
  1911                           
  1912                           ; 1 bytes @ 0x9
  1913  0079                     	ds	1
  1914                           
  1915                           	psect	cstackBANK0
  1916  0020                     __pcstackBANK0:	
  1917  0020                     ??_PIN_MANAGER_Initialize:	
  1918  0020                     ??_OSCILLATOR_Initialize:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0020                     ??_WDT_Initialize:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0020                     ??_ADC_Initialize:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0020                     ??_EUSART_Initialize:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0020                     ?_TMR1_SetInterruptHandler:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0020                     ??_TMR1_StartTimer:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0020                     ??_send_nibble:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0020                     ??_EUSART_Write:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0020                     ??_ADC_StartConversion:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0020                     ??_turn_egs:	
  1946                           ; 1 bytes @ 0x0
  1947                           
  1948  0020                     ?___bmul:	
  1949                           ; 1 bytes @ 0x0
  1950                           
  1951  0020                     ?___wmul:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0020                     ?___ftpack:	
  1955                           ; 2 bytes @ 0x0
  1956                           
  1957  0020                     ?___fttol:	
  1958                           ; 3 bytes @ 0x0
  1959                           
  1960  0020                     ___bmul@multiplicand:	
  1961                           ; 4 bytes @ 0x0
  1962                           
  1963  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0020                     ___wmul@multiplier:	
  1967                           ; 2 bytes @ 0x0
  1968                           
  1969  0020                     ___ftpack@arg:	
  1970                           ; 2 bytes @ 0x0
  1971                           
  1972  0020                     ___fttol@f1:	
  1973                           ; 3 bytes @ 0x0
  1974                           
  1975                           
  1976                           ; 3 bytes @ 0x0
  1977  0020                     	ds	1
  1978  0021                     ??___bmul:	
  1979  0021                     EUSART_Write@txData:	
  1980                           ; 1 bytes @ 0x1
  1981                           
  1982  0021                     send_nibble@nibble:	
  1983                           ; 1 bytes @ 0x1
  1984                           
  1985                           
  1986                           ; 1 bytes @ 0x1
  1987  0021                     	ds	1
  1988  0022                     ??_TMR1_Initialize:	
  1989  0022                     ??_TMR1_SetInterruptHandler:	
  1990                           ; 1 bytes @ 0x2
  1991                           
  1992  0022                     ??_send_command_byte:	
  1993                           ; 1 bytes @ 0x2
  1994                           
  1995  0022                     ??_SYSTEM_Initialize:	
  1996                           ; 1 bytes @ 0x2
  1997                           
  1998  0022                     ??_putch:	
  1999                           ; 1 bytes @ 0x2
  2000                           
  2001  0022                     ??_init_lcd:	
  2002                           ; 1 bytes @ 0x2
  2003                           
  2004  0022                     putch@txData:	
  2005                           ; 1 bytes @ 0x2
  2006                           
  2007  0022                     ___bmul@product:	
  2008                           ; 1 bytes @ 0x2
  2009                           
  2010  0022                     ___wmul@multiplicand:	
  2011                           ; 1 bytes @ 0x2
  2012                           
  2013                           
  2014                           ; 2 bytes @ 0x2
  2015  0022                     	ds	1
  2016  0023                     ?_printf:	
  2017  0023                     send_command_byte@byte:	
  2018                           ; 2 bytes @ 0x3
  2019                           
  2020  0023                     ___bmul@multiplier:	
  2021                           ; 1 bytes @ 0x3
  2022                           
  2023  0023                     ___ftpack@exp:	
  2024                           ; 1 bytes @ 0x3
  2025                           
  2026  0023                     printf@f:	
  2027                           ; 1 bytes @ 0x3
  2028                           
  2029                           
  2030                           ; 2 bytes @ 0x3
  2031  0023                     	ds	1
  2032  0024                     ??_comand_lcd:	
  2033  0024                     ??___wmul:	
  2034                           ; 1 bytes @ 0x4
  2035                           
  2036  0024                     ??___fttol:	
  2037                           ; 1 bytes @ 0x4
  2038                           
  2039  0024                     ___ftpack@sign:	
  2040                           ; 1 bytes @ 0x4
  2041                           
  2042  0024                     ___wmul@product:	
  2043                           ; 1 bytes @ 0x4
  2044                           
  2045                           
  2046                           ; 2 bytes @ 0x4
  2047  0024                     	ds	1
  2048  0025                     ??_printf:	
  2049  0025                     ??___ftpack:	
  2050                           ; 1 bytes @ 0x5
  2051                           
  2052                           
  2053                           ; 1 bytes @ 0x5
  2054  0025                     	ds	3
  2055  0028                     ?___awtoft:	
  2056  0028                     ?___lwtoft:	
  2057                           ; 3 bytes @ 0x8
  2058                           
  2059  0028                     printf@ap:	
  2060                           ; 3 bytes @ 0x8
  2061                           
  2062  0028                     ___fttol@sign1:	
  2063                           ; 1 bytes @ 0x8
  2064                           
  2065  0028                     ___awtoft@c:	
  2066                           ; 1 bytes @ 0x8
  2067                           
  2068  0028                     ___lwtoft@c:	
  2069                           ; 2 bytes @ 0x8
  2070                           
  2071                           
  2072                           ; 2 bytes @ 0x8
  2073  0028                     	ds	1
  2074  0029                     printf@c:	
  2075  0029                     ___fttol@lval:	
  2076                           ; 1 bytes @ 0x9
  2077                           
  2078                           
  2079                           ; 4 bytes @ 0x9
  2080  0029                     	ds	1
  2081  002A                     ??_sms_text:	
  2082  002A                     ??_int_gsm:	
  2083                           ; 1 bytes @ 0xA
  2084                           
  2085                           
  2086                           ; 1 bytes @ 0xA
  2087  002A                     	ds	1
  2088  002B                     ??___awtoft:	
  2089  002B                     ??___lwtoft:	
  2090                           ; 1 bytes @ 0xB
  2091                           
  2092                           
  2093                           ; 1 bytes @ 0xB
  2094  002B                     	ds	2
  2095  002D                     ___awtoft@sign:	
  2096  002D                     ___fttol@exp1:	
  2097                           ; 1 bytes @ 0xD
  2098                           
  2099                           
  2100                           ; 1 bytes @ 0xD
  2101  002D                     	ds	1
  2102  002E                     ?___ftge:	
  2103  002E                     ?___ftmul:	
  2104                           ; 1 bit 
  2105                           
  2106  002E                     ___ftge@ff1:	
  2107                           ; 3 bytes @ 0xE
  2108                           
  2109  002E                     ___ftmul@f1:	
  2110                           ; 3 bytes @ 0xE
  2111                           
  2112                           
  2113                           ; 3 bytes @ 0xE
  2114  002E                     	ds	3
  2115  0031                     ___ftge@ff2:	
  2116  0031                     ___ftmul@f2:	
  2117                           ; 3 bytes @ 0x11
  2118                           
  2119                           
  2120                           ; 3 bytes @ 0x11
  2121  0031                     	ds	3
  2122  0034                     ??___ftge:	
  2123  0034                     ??___ftmul:	
  2124                           ; 1 bytes @ 0x14
  2125                           
  2126                           
  2127                           ; 1 bytes @ 0x14
  2128  0034                     	ds	4
  2129  0038                     ___ftmul@exp:	
  2130                           
  2131                           ; 1 bytes @ 0x18
  2132  0038                     	ds	1
  2133  0039                     ___ftmul@f3_as_product:	
  2134                           
  2135                           ; 3 bytes @ 0x19
  2136  0039                     	ds	3
  2137  003C                     ___ftmul@cntr:	
  2138                           
  2139                           ; 1 bytes @ 0x1C
  2140  003C                     	ds	1
  2141  003D                     ___ftmul@sign:	
  2142                           
  2143                           ; 1 bytes @ 0x1D
  2144  003D                     	ds	1
  2145  003E                     ?___ftdiv:	
  2146  003E                     ?___ftneg:	
  2147                           ; 3 bytes @ 0x1E
  2148                           
  2149  003E                     ___ftdiv@f2:	
  2150                           ; 3 bytes @ 0x1E
  2151                           
  2152  003E                     ___ftneg@f1:	
  2153                           ; 3 bytes @ 0x1E
  2154                           
  2155                           
  2156                           ; 3 bytes @ 0x1E
  2157  003E                     	ds	3
  2158  0041                     ??___ftneg:	
  2159  0041                     ?___ftadd:	
  2160                           ; 1 bytes @ 0x21
  2161                           
  2162  0041                     ___ftadd@f1:	
  2163                           ; 3 bytes @ 0x21
  2164                           
  2165  0041                     ___ftdiv@f1:	
  2166                           ; 3 bytes @ 0x21
  2167                           
  2168                           
  2169                           ; 3 bytes @ 0x21
  2170  0041                     	ds	3
  2171  0044                     ??___ftdiv:	
  2172  0044                     ___ftadd@f2:	
  2173                           ; 1 bytes @ 0x24
  2174                           
  2175                           
  2176                           ; 3 bytes @ 0x24
  2177  0044                     	ds	3
  2178  0047                     ??___ftadd:	
  2179                           
  2180                           ; 1 bytes @ 0x27
  2181  0047                     	ds	1
  2182  0048                     ___ftdiv@cntr:	
  2183                           
  2184                           ; 1 bytes @ 0x28
  2185  0048                     	ds	1
  2186  0049                     ___ftdiv@f3:	
  2187                           
  2188                           ; 3 bytes @ 0x29
  2189  0049                     	ds	2
  2190  004B                     ___ftadd@sign:	
  2191                           
  2192                           ; 1 bytes @ 0x2B
  2193  004B                     	ds	1
  2194  004C                     ___ftadd@exp2:	
  2195  004C                     ___ftdiv@exp:	
  2196                           ; 1 bytes @ 0x2C
  2197                           
  2198                           
  2199                           ; 1 bytes @ 0x2C
  2200  004C                     	ds	1
  2201  004D                     ___ftadd@exp1:	
  2202  004D                     ___ftdiv@sign:	
  2203                           ; 1 bytes @ 0x2D
  2204                           
  2205                           
  2206                           ; 1 bytes @ 0x2D
  2207  004D                     	ds	1
  2208  004E                     ?_comparare:	
  2209  004E                     comparare@resistor_value:	
  2210                           ; 2 bytes @ 0x2E
  2211                           
  2212                           
  2213                           ; 2 bytes @ 0x2E
  2214  004E                     	ds	2
  2215  0050                     ??_comparare:	
  2216                           
  2217                           ; 1 bytes @ 0x30
  2218  0050                     	ds	2
  2219  0052                     comparare@dif:	
  2220                           
  2221                           ; 3 bytes @ 0x32
  2222  0052                     	ds	3
  2223  0055                     comparare@step:	
  2224                           
  2225                           ; 3 bytes @ 0x35
  2226  0055                     	ds	3
  2227  0058                     comparare@result:	
  2228                           
  2229                           ; 2 bytes @ 0x38
  2230  0058                     	ds	2
  2231  005A                     comparare@j:	
  2232                           
  2233                           ; 2 bytes @ 0x3A
  2234  005A                     	ds	2
  2235  005C                     comparare@j_745:	
  2236                           
  2237                           ; 2 bytes @ 0x3C
  2238  005C                     	ds	2
  2239  005E                     ??_main:	
  2240                           
  2241                           ; 1 bytes @ 0x3E
  2242  005E                     	ds	1
  2243  005F                     main@temp:	
  2244                           
  2245                           ; 2 bytes @ 0x3F
  2246  005F                     	ds	2
  2247  0061                     main@x:	
  2248                           
  2249                           ; 1 bytes @ 0x41
  2250  0061                     	ds	1
  2251  0062                     main@incubator_state:	
  2252                           
  2253                           ; 1 bytes @ 0x42
  2254  0062                     	ds	1
  2255  0063                     main@volt:	
  2256                           
  2257                           ; 3 bytes @ 0x43
  2258  0063                     	ds	3
  2259                           
  2260                           	psect	maintext
  2261  0535                     __pmaintext:	
  2262 ;;
  2263 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2264 ;;
  2265 ;; *************** function _main *****************
  2266 ;; Defined at:
  2267 ;;		line 376 in file "main.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  volt            3   67[BANK0 ] float 
  2272 ;;  temp            2   63[BANK0 ] int 
  2273 ;;  incubator_st    1   66[BANK0 ] unsigned char 
  2274 ;;  x               1   65[BANK0 ] unsigned char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : B1F/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2284 ;;      Params:         0       0       0       0       0       0       0       0
  2285 ;;      Locals:         0       7       0       0       0       0       0       0
  2286 ;;      Temps:          0       1       0       0       0       0       0       0
  2287 ;;      Totals:         0       8       0       0       0       0       0       0
  2288 ;;Total ram usage:        8 bytes
  2289 ;; Hardware stack levels required when called:    8
  2290 ;; This function calls:
  2291 ;;		_ADC_StartConversion
  2292 ;;		_SYSTEM_Initialize
  2293 ;;		___ftdiv
  2294 ;;		___ftmul
  2295 ;;		___fttol
  2296 ;;		___lwtoft
  2297 ;;		_comand_lcd
  2298 ;;		_comparare
  2299 ;;		_init_lcd
  2300 ;;		_int_gsm
  2301 ;;		_sms_text
  2302 ;;		_turn_egs
  2303 ;; This function is called by:
  2304 ;;		Startup code after reset
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function _main
  2310  0535                     _main:	
  2311                           
  2312                           ;main.c: 378: char x=0;
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2316  0535  0020               	movlb	0	; select bank0
  2317  0536  01E1               	clrf	main@x
  2318                           
  2319                           ;main.c: 381: SYSTEM_Initialize();
  2320  0537  318D  25B5  3185   	fcall	_SYSTEM_Initialize
  2321                           
  2322                           ;main.c: 382: ADC_StartConversion();
  2323  053A  318D  256C  3185   	fcall	_ADC_StartConversion
  2324                           
  2325                           ;main.c: 383: TRISCbits.TRISC0=0;
  2326  053D  0021               	movlb	1	; select bank1
  2327  053E  100E               	bcf	14,0	;volatile
  2328                           
  2329                           ;main.c: 384: TRISCbits.TRISC3=0;
  2330  053F  118E               	bcf	14,3	;volatile
  2331                           
  2332                           ;main.c: 385: TRISCbits.TRISC4=0;
  2333  0540  120E               	bcf	14,4	;volatile
  2334                           
  2335                           ;main.c: 386: TRISCbits.TRISC5=0;
  2336  0541  128E               	bcf	14,5	;volatile
  2337                           
  2338                           ;main.c: 387: TRISB = 0b00000000;
  2339  0542  018D               	clrf	13	;volatile
  2340                           
  2341                           ;main.c: 388: TRISD = 0x00;
  2342  0543  018F               	clrf	15	;volatile
  2343                           
  2344                           ;main.c: 389: ANSELD=ANSELD & 0b11100000;
  2345  0544  0023               	movlb	3	; select bank3
  2346  0545  080F               	movf	15,w	;volatile
  2347  0546  39E0               	andlw	224
  2348  0547  008F               	movwf	15	;volatile
  2349                           
  2350                           ;main.c: 394: (INTCONbits.GIE = 1);
  2351  0548  178B               	bsf	11,7	;volatile
  2352                           
  2353                           ;main.c: 397: (INTCONbits.PEIE = 1);
  2354  0549  170B               	bsf	11,6	;volatile
  2355                           
  2356                           ;main.c: 404: char incubator_state=none;
  2357  054A  3006               	movlw	6
  2358  054B  0020               	movlb	0	; select bank0
  2359  054C  00DE               	movwf	??_main
  2360  054D  085E               	movf	??_main,w
  2361  054E  00E2               	movwf	main@incubator_state
  2362                           
  2363                           ;main.c: 405: init_lcd();
  2364  054F  318F  2755  3185   	fcall	_init_lcd
  2365                           
  2366                           ;main.c: 406: comand_lcd();
  2367  0552  318D  25D9  3185   	fcall	_comand_lcd
  2368                           
  2369                           ;main.c: 407: flag_directie=1;
  2370  0555  3001               	movlw	1
  2371  0556  0020               	movlb	0	; select bank0
  2372  0557  00E8               	movwf	_flag_directie
  2373  0558  3000               	movlw	0
  2374  0559  00E9               	movwf	_flag_directie+1
  2375  055A                     l2844:	
  2376                           ;main.c: 409: float volt;
  2377                           ;main.c: 410: int temp;
  2378                           ;main.c: 411: while (1)
  2379                           
  2380                           
  2381                           ;main.c: 412: {
  2382                           ;main.c: 414: int_gsm();
  2383  055A  3187  27A3  3185   	fcall	_int_gsm
  2384                           
  2385                           ;main.c: 416: if (flag_G==1)
  2386  055D  0022               	movlb	2	; select bank2
  2387  055E  0364               	decf	_flag_G^(0+256),w
  2388  055F  0465               	iorwf	(_flag_G+1)^(0+256),w
  2389  0560  1D03               	btfss	3,2
  2390  0561  2D69               	goto	l2852
  2391                           
  2392                           ;main.c: 417: {
  2393                           ;main.c: 418: if (flag_N==1)
  2394  0562  0366               	decf	_flag_N^(0+256),w
  2395  0563  0467               	iorwf	(_flag_N+1)^(0+256),w
  2396  0564  1D03               	btfss	3,2
  2397  0565  2D69               	goto	l2852
  2398                           
  2399                           ;main.c: 419: {
  2400                           ;main.c: 421: turn_egs();
  2401  0566  3183  231D  3185   	fcall	_turn_egs
  2402  0569                     l2852:	
  2403                           
  2404                           ;main.c: 423: }
  2405                           ;main.c: 425: }
  2406                           ;main.c: 427: if (flag_A==1)
  2407  0569  0022               	movlb	2	; select bank2
  2408  056A  0362               	decf	_flag_A^(0+256),w
  2409  056B  0463               	iorwf	(_flag_A+1)^(0+256),w
  2410  056C  1D03               	btfss	3,2
  2411  056D  2D75               	goto	l2858
  2412                           
  2413                           ;main.c: 428: {
  2414                           ;main.c: 429: if (flag_B==1)
  2415  056E  0360               	decf	_flag_B^(0+256),w
  2416  056F  0461               	iorwf	(_flag_B+1)^(0+256),w
  2417  0570  1D03               	btfss	3,2
  2418  0571  2D75               	goto	l2858
  2419                           
  2420                           ;main.c: 430: {
  2421                           ;main.c: 432: sms_text();
  2422  0572  3186  26B3  3185   	fcall	_sms_text
  2423  0575                     l2858:	
  2424                           
  2425                           ;main.c: 435: }
  2426                           ;main.c: 437: }
  2427                           ;main.c: 440: if (flag_500_ms==1)
  2428  0575  0022               	movlb	2	; select bank2
  2429  0576  0358               	decf	_flag_500_ms^(0+256),w
  2430  0577  0459               	iorwf	(_flag_500_ms+1)^(0+256),w
  2431  0578  1D03               	btfss	3,2
  2432  0579  2D5A               	goto	l2844
  2433                           
  2434                           ;main.c: 441: {
  2435                           ;main.c: 443: volt=(rez_conversie*4.7461)/1.533;
  2436  057A  3039               	movlw	57
  2437  057B  0020               	movlb	0	; select bank0
  2438  057C  00BE               	movwf	___ftdiv@f2
  2439  057D  30C4               	movlw	196
  2440  057E  00BF               	movwf	___ftdiv@f2+1
  2441  057F  303F               	movlw	63
  2442  0580  00C0               	movwf	___ftdiv@f2+2
  2443  0581  30E0               	movlw	224
  2444  0582  00AE               	movwf	___ftmul@f1
  2445  0583  3097               	movlw	151
  2446  0584  00AF               	movwf	___ftmul@f1+1
  2447  0585  3040               	movlw	64
  2448  0586  00B0               	movwf	___ftmul@f1+2
  2449  0587  0022               	movlb	2	; select bank2
  2450  0588  0869               	movf	(_rez_conversie+1)^(0+256),w
  2451  0589  0020               	movlb	0	; select bank0
  2452  058A  00A9               	movwf	___lwtoft@c+1
  2453  058B  0022               	movlb	2	; select bank2
  2454  058C  0868               	movf	_rez_conversie^(0+256),w
  2455  058D  0020               	movlb	0	; select bank0
  2456  058E  00A8               	movwf	___lwtoft@c
  2457  058F  318D  25ED  3185   	fcall	___lwtoft
  2458  0592  0020               	movlb	0	; select bank0
  2459  0593  0828               	movf	?___lwtoft,w
  2460  0594  00B1               	movwf	___ftmul@f2
  2461  0595  0829               	movf	?___lwtoft+1,w
  2462  0596  00B2               	movwf	___ftmul@f2+1
  2463  0597  082A               	movf	?___lwtoft+2,w
  2464  0598  00B3               	movwf	___ftmul@f2+2
  2465  0599  3183  23D8  3185   	fcall	___ftmul
  2466  059C  0020               	movlb	0	; select bank0
  2467  059D  082E               	movf	?___ftmul,w
  2468  059E  00C1               	movwf	___ftdiv@f1
  2469  059F  082F               	movf	?___ftmul+1,w
  2470  05A0  00C2               	movwf	___ftdiv@f1+1
  2471  05A1  0830               	movf	?___ftmul+2,w
  2472  05A2  00C3               	movwf	___ftdiv@f1+2
  2473  05A3  3184  248C  3185   	fcall	___ftdiv
  2474  05A6  0020               	movlb	0	; select bank0
  2475  05A7  083E               	movf	?___ftdiv,w
  2476  05A8  00E3               	movwf	main@volt
  2477  05A9  083F               	movf	?___ftdiv+1,w
  2478  05AA  00E4               	movwf	main@volt+1
  2479  05AB  0840               	movf	?___ftdiv+2,w
  2480  05AC  00E5               	movwf	main@volt+2
  2481                           
  2482                           ;main.c: 444: temp=comparare(volt);
  2483  05AD  0863               	movf	main@volt,w
  2484  05AE  00A0               	movwf	___fttol@f1
  2485  05AF  0864               	movf	main@volt+1,w
  2486  05B0  00A1               	movwf	___fttol@f1+1
  2487  05B1  0865               	movf	main@volt+2,w
  2488  05B2  00A2               	movwf	___fttol@f1+2
  2489  05B3  3185  25C7  3185   	fcall	___fttol
  2490  05B6  0020               	movlb	0	; select bank0
  2491  05B7  0821               	movf	?___fttol+1,w
  2492  05B8  00CF               	movwf	comparare@resistor_value+1
  2493  05B9  0820               	movf	?___fttol,w
  2494  05BA  00CE               	movwf	comparare@resistor_value
  2495  05BB  3180  207D  3185   	fcall	_comparare
  2496  05BE  0020               	movlb	0	; select bank0
  2497  05BF  084F               	movf	?_comparare+1,w
  2498  05C0  00E0               	movwf	main@temp+1
  2499  05C1  084E               	movf	?_comparare,w
  2500  05C2  00DF               	movwf	main@temp
  2501                           
  2502                           ;main.c: 445: flag_500_ms=0;
  2503  05C3  0022               	movlb	2	; select bank2
  2504  05C4  01D8               	clrf	_flag_500_ms^(0+256)
  2505  05C5  01D9               	clrf	(_flag_500_ms+1)^(0+256)
  2506  05C6  2D5A               	goto	l2844
  2507  05C7                     __end_of_main:	
  2508                           
  2509                           	psect	text1
  2510  031D                     __ptext1:	
  2511 ;; *************** function _turn_egs *****************
  2512 ;; Defined at:
  2513 ;;		line 149 in file "main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;		None
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;		None
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2527 ;;      Params:         0       0       0       0       0       0       0       0
  2528 ;;      Locals:         0       0       0       0       0       0       0       0
  2529 ;;      Temps:          0       1       0       0       0       0       0       0
  2530 ;;      Totals:         0       1       0       0       0       0       0       0
  2531 ;;Total ram usage:        1 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function _turn_egs
  2543  031D                     _turn_egs:	
  2544                           
  2545                           ;main.c: 151: static unsigned char step_index;
  2546                           ;main.c: 152: static unsigned int step_nr=1;
  2547                           ;main.c: 159: if((step_nr<300)&&(flag_10_ms==1))
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in _turn_egs: [wreg+status,2+status,0]
  2551  031D  3001               	movlw	1
  2552  031E  0022               	movlb	2	; select bank2
  2553  031F  026D               	subwf	(turn_egs@step_nr+1)^(0+256),w
  2554  0320  302C               	movlw	44
  2555  0321  1903               	skipnz
  2556  0322  026C               	subwf	turn_egs@step_nr^(0+256),w
  2557  0323  1803               	skipnc
  2558  0324  2BB9               	goto	l2588
  2559  0325  035C               	decf	_flag_10_ms^(0+256),w
  2560  0326  045D               	iorwf	(_flag_10_ms+1)^(0+256),w
  2561  0327  1D03               	btfss	3,2
  2562  0328  2BB9               	goto	l2588
  2563                           
  2564                           ;main.c: 160: {
  2565                           ;main.c: 161: if(flag_directie==1)
  2566  0329  0020               	movlb	0	; select bank0
  2567  032A  0368               	decf	_flag_directie,w
  2568  032B  0469               	iorwf	_flag_directie+1,w
  2569  032C  1D03               	btfss	3,2
  2570  032D  2B71               	goto	l2532
  2571                           
  2572                           ;main.c: 162: {
  2573                           ;main.c: 163: step_nr++;
  2574  032E  3001               	movlw	1
  2575  032F  0022               	movlb	2	; select bank2
  2576  0330  07EC               	addwf	turn_egs@step_nr^(0+256),f
  2577  0331  3000               	movlw	0
  2578  0332  3DED               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  2579                           
  2580                           ;main.c: 164: if(step_index==0)
  2581  0333  087A               	movf	turn_egs@step_index,w
  2582  0334  1D03               	btfss	3,2
  2583  0335  2B3F               	goto	l2492
  2584                           
  2585                           ;main.c: 165: {
  2586                           ;main.c: 166: step_index++;
  2587  0336  3001               	movlw	1
  2588  0337  0020               	movlb	0	; select bank0
  2589  0338  00A0               	movwf	??_turn_egs
  2590  0339  0820               	movf	??_turn_egs,w
  2591  033A  07FA               	addwf	turn_egs@step_index,f
  2592                           
  2593                           ;main.c: 167: LATCbits.LATC0=1;
  2594  033B  0022               	movlb	2	; select bank2
  2595  033C  140E               	bsf	14,0	;volatile
  2596                           
  2597                           ;main.c: 168: LATCbits.LATC3=0;
  2598  033D  118E               	bcf	14,3	;volatile
  2599  033E  2B4A               	goto	L1
  2600  033F                     l2492:	
  2601                           ;main.c: 171: }
  2602                           
  2603                           ;main.c: 170: LATCbits.LATC5=0;
  2604                           
  2605                           ;main.c: 169: LATCbits.LATC4=0;
  2606                           
  2607                           
  2608                           ;main.c: 172: else if(step_index==1)
  2609  033F  037A               	decf	turn_egs@step_index,w
  2610  0340  1D03               	btfss	3,2
  2611  0341  2B4C               	goto	l2504
  2612                           
  2613                           ;main.c: 173: {
  2614                           ;main.c: 174: step_index++;
  2615  0342  3001               	movlw	1
  2616  0343  0020               	movlb	0	; select bank0
  2617  0344  00A0               	movwf	??_turn_egs
  2618  0345  0820               	movf	??_turn_egs,w
  2619  0346  07FA               	addwf	turn_egs@step_index,f
  2620                           
  2621                           ;main.c: 175: LATCbits.LATC0=0;
  2622  0347  0022               	movlb	2	; select bank2
  2623  0348  100E               	bcf	14,0	;volatile
  2624                           
  2625                           ;main.c: 176: LATCbits.LATC3=1;
  2626  0349  158E               	bsf	14,3	;volatile
  2627  034A                     L1:	
  2628                           
  2629                           ;main.c: 177: LATCbits.LATC4=0;
  2630  034A  120E               	bcf	14,4	;volatile
  2631  034B  2B59               	goto	l2514
  2632  034C                     l2504:	
  2633                           ;main.c: 179: }
  2634                           
  2635                           ;main.c: 178: LATCbits.LATC5=0;
  2636                           
  2637                           
  2638                           ;main.c: 180: else if(step_index==2)
  2639  034C  3002               	movlw	2
  2640  034D  067A               	xorwf	turn_egs@step_index,w
  2641  034E  1D03               	btfss	3,2
  2642  034F  2B5B               	goto	l2516
  2643                           
  2644                           ;main.c: 181: {
  2645                           ;main.c: 182: step_index++;
  2646  0350  3001               	movlw	1
  2647  0351  0020               	movlb	0	; select bank0
  2648  0352  00A0               	movwf	??_turn_egs
  2649  0353  0820               	movf	??_turn_egs,w
  2650  0354  07FA               	addwf	turn_egs@step_index,f
  2651                           
  2652                           ;main.c: 183: LATCbits.LATC0=0;
  2653  0355  0022               	movlb	2	; select bank2
  2654  0356  100E               	bcf	14,0	;volatile
  2655                           
  2656                           ;main.c: 184: LATCbits.LATC3=0;
  2657  0357  118E               	bcf	14,3	;volatile
  2658                           
  2659                           ;main.c: 185: LATCbits.LATC4=1;
  2660  0358  160E               	bsf	14,4	;volatile
  2661  0359                     l2514:	
  2662                           
  2663                           ;main.c: 186: LATCbits.LATC5=0;
  2664  0359  128E               	bcf	14,5	;volatile
  2665                           
  2666                           ;main.c: 187: }
  2667  035A  2B6E               	goto	l402
  2668  035B                     l2516:	
  2669                           
  2670                           ;main.c: 188: else if(step_index==3)
  2671  035B  3003               	movlw	3
  2672  035C  067A               	xorwf	turn_egs@step_index,w
  2673  035D  1D03               	btfss	3,2
  2674  035E  2B6A               	goto	l2528
  2675                           
  2676                           ;main.c: 189: {
  2677                           ;main.c: 190: step_index++;
  2678  035F  3001               	movlw	1
  2679  0360  0020               	movlb	0	; select bank0
  2680  0361  00A0               	movwf	??_turn_egs
  2681  0362  0820               	movf	??_turn_egs,w
  2682  0363  07FA               	addwf	turn_egs@step_index,f
  2683                           
  2684                           ;main.c: 191: LATCbits.LATC0=0;
  2685  0364  0022               	movlb	2	; select bank2
  2686  0365  100E               	bcf	14,0	;volatile
  2687                           
  2688                           ;main.c: 192: LATCbits.LATC3=0;
  2689  0366  118E               	bcf	14,3	;volatile
  2690                           
  2691                           ;main.c: 193: LATCbits.LATC4=0;
  2692  0367  120E               	bcf	14,4	;volatile
  2693                           
  2694                           ;main.c: 194: LATCbits.LATC5=1;
  2695  0368  168E               	bsf	14,5	;volatile
  2696                           
  2697                           ;main.c: 195: }
  2698  0369  2B6E               	goto	l402
  2699  036A                     l2528:	
  2700                           
  2701                           ;main.c: 196: else if(step_index==4)
  2702  036A  3004               	movlw	4
  2703  036B  067A               	xorwf	turn_egs@step_index,w
  2704  036C  1903               	btfsc	3,2
  2705                           
  2706                           ;main.c: 197: {
  2707                           ;main.c: 198: step_index=0;
  2708  036D  01FA               	clrf	turn_egs@step_index
  2709  036E                     l402:	
  2710                           
  2711                           ;main.c: 199: }
  2712                           ;main.c: 201: flag_10_ms=0;
  2713  036E  01DC               	clrf	_flag_10_ms^(0+256)
  2714  036F  01DD               	clrf	(_flag_10_ms+1)^(0+256)
  2715                           
  2716                           ;main.c: 202: }
  2717  0370  0008               	return
  2718  0371                     l2532:	
  2719                           
  2720                           ;main.c: 203: else if(flag_directie==0)
  2721  0371  0020               	movlb	0	; select bank0
  2722  0372  0868               	movf	_flag_directie,w
  2723  0373  0469               	iorwf	_flag_directie+1,w
  2724  0374  1D03               	btfss	3,2
  2725  0375  0008               	return
  2726                           
  2727                           ;main.c: 204: {
  2728                           ;main.c: 205: step_nr++;
  2729  0376  3001               	movlw	1
  2730  0377  0022               	movlb	2	; select bank2
  2731  0378  07EC               	addwf	turn_egs@step_nr^(0+256),f
  2732  0379  3000               	movlw	0
  2733  037A  3DED               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  2734                           
  2735                           ;main.c: 206: if(step_index==0)
  2736  037B  087A               	movf	turn_egs@step_index,w
  2737  037C  1D03               	btfss	3,2
  2738  037D  2B87               	goto	l2548
  2739                           
  2740                           ;main.c: 207: {
  2741                           ;main.c: 208: step_index++;
  2742  037E  3001               	movlw	1
  2743  037F  0020               	movlb	0	; select bank0
  2744  0380  00A0               	movwf	??_turn_egs
  2745  0381  0820               	movf	??_turn_egs,w
  2746  0382  07FA               	addwf	turn_egs@step_index,f
  2747                           
  2748                           ;main.c: 209: LATCbits.LATC5=1;
  2749  0383  0022               	movlb	2	; select bank2
  2750  0384  168E               	bsf	14,5	;volatile
  2751                           
  2752                           ;main.c: 210: LATCbits.LATC4=0;
  2753  0385  120E               	bcf	14,4	;volatile
  2754  0386  2B92               	goto	L2
  2755  0387                     l2548:	
  2756                           ;main.c: 213: }
  2757                           
  2758                           ;main.c: 212: LATCbits.LATC0=0;
  2759                           
  2760                           ;main.c: 211: LATCbits.LATC3=0;
  2761                           
  2762                           
  2763                           ;main.c: 214: else if(step_index==1)
  2764  0387  037A               	decf	turn_egs@step_index,w
  2765  0388  1D03               	btfss	3,2
  2766  0389  2B94               	goto	l2560
  2767                           
  2768                           ;main.c: 215: {
  2769                           ;main.c: 216: step_index++;
  2770  038A  3001               	movlw	1
  2771  038B  0020               	movlb	0	; select bank0
  2772  038C  00A0               	movwf	??_turn_egs
  2773  038D  0820               	movf	??_turn_egs,w
  2774  038E  07FA               	addwf	turn_egs@step_index,f
  2775                           
  2776                           ;main.c: 217: LATCbits.LATC5=0;
  2777  038F  0022               	movlb	2	; select bank2
  2778  0390  128E               	bcf	14,5	;volatile
  2779                           
  2780                           ;main.c: 218: LATCbits.LATC4=1;
  2781  0391  160E               	bsf	14,4	;volatile
  2782  0392                     L2:	
  2783                           
  2784                           ;main.c: 219: LATCbits.LATC3=0;
  2785  0392  118E               	bcf	14,3	;volatile
  2786  0393  2BA1               	goto	l2570
  2787  0394                     l2560:	
  2788                           ;main.c: 221: }
  2789                           
  2790                           ;main.c: 220: LATCbits.LATC0=0;
  2791                           
  2792                           
  2793                           ;main.c: 222: else if(step_index==2)
  2794  0394  3002               	movlw	2
  2795  0395  067A               	xorwf	turn_egs@step_index,w
  2796  0396  1D03               	btfss	3,2
  2797  0397  2BA3               	goto	l2572
  2798                           
  2799                           ;main.c: 223: {
  2800                           ;main.c: 224: step_index++;
  2801  0398  3001               	movlw	1
  2802  0399  0020               	movlb	0	; select bank0
  2803  039A  00A0               	movwf	??_turn_egs
  2804  039B  0820               	movf	??_turn_egs,w
  2805  039C  07FA               	addwf	turn_egs@step_index,f
  2806                           
  2807                           ;main.c: 225: LATCbits.LATC5=0;
  2808  039D  0022               	movlb	2	; select bank2
  2809  039E  128E               	bcf	14,5	;volatile
  2810                           
  2811                           ;main.c: 226: LATCbits.LATC4=0;
  2812  039F  120E               	bcf	14,4	;volatile
  2813                           
  2814                           ;main.c: 227: LATCbits.LATC3=1;
  2815  03A0  158E               	bsf	14,3	;volatile
  2816  03A1                     l2570:	
  2817                           
  2818                           ;main.c: 228: LATCbits.LATC0=0;
  2819  03A1  100E               	bcf	14,0	;volatile
  2820                           
  2821                           ;main.c: 229: }
  2822  03A2  2BB6               	goto	l413
  2823  03A3                     l2572:	
  2824                           
  2825                           ;main.c: 230: else if(step_index==3)
  2826  03A3  3003               	movlw	3
  2827  03A4  067A               	xorwf	turn_egs@step_index,w
  2828  03A5  1D03               	btfss	3,2
  2829  03A6  2BB2               	goto	l2584
  2830                           
  2831                           ;main.c: 231: {
  2832                           ;main.c: 232: step_index++;
  2833  03A7  3001               	movlw	1
  2834  03A8  0020               	movlb	0	; select bank0
  2835  03A9  00A0               	movwf	??_turn_egs
  2836  03AA  0820               	movf	??_turn_egs,w
  2837  03AB  07FA               	addwf	turn_egs@step_index,f
  2838                           
  2839                           ;main.c: 233: LATCbits.LATC5=0;
  2840  03AC  0022               	movlb	2	; select bank2
  2841  03AD  128E               	bcf	14,5	;volatile
  2842                           
  2843                           ;main.c: 234: LATCbits.LATC4=0;
  2844  03AE  120E               	bcf	14,4	;volatile
  2845                           
  2846                           ;main.c: 235: LATCbits.LATC3=0;
  2847  03AF  118E               	bcf	14,3	;volatile
  2848                           
  2849                           ;main.c: 236: LATCbits.LATC0=1;
  2850  03B0  140E               	bsf	14,0	;volatile
  2851                           
  2852                           ;main.c: 237: }
  2853  03B1  2BB6               	goto	l413
  2854  03B2                     l2584:	
  2855                           
  2856                           ;main.c: 238: else if(step_index==4)
  2857  03B2  3004               	movlw	4
  2858  03B3  067A               	xorwf	turn_egs@step_index,w
  2859  03B4  1903               	btfsc	3,2
  2860                           
  2861                           ;main.c: 239: {
  2862                           ;main.c: 240: step_index=0;
  2863  03B5  01FA               	clrf	turn_egs@step_index
  2864  03B6                     l413:	
  2865                           
  2866                           ;main.c: 241: }
  2867                           ;main.c: 243: flag_10_ms=0;
  2868  03B6  01DC               	clrf	_flag_10_ms^(0+256)
  2869  03B7  01DD               	clrf	(_flag_10_ms+1)^(0+256)
  2870                           
  2871                           ;main.c: 244: }
  2872                           ;main.c: 245: }
  2873  03B8  0008               	return
  2874  03B9                     l2588:	
  2875                           
  2876                           ;main.c: 246: else if(step_nr==300)
  2877  03B9  302C               	movlw	44
  2878  03BA  066C               	xorwf	turn_egs@step_nr^(0+256),w
  2879  03BB  1D03               	skipz
  2880  03BC  0008               	return
  2881  03BD  036D               	decf	(turn_egs@step_nr+1)^(0+256),w
  2882  03BE  1D03               	btfss	3,2
  2883  03BF  0008               	return
  2884                           
  2885                           ;main.c: 247: {
  2886                           ;main.c: 248: flag_N=0;
  2887  03C0  01E6               	clrf	_flag_N^(0+256)
  2888  03C1  01E7               	clrf	(_flag_N+1)^(0+256)
  2889                           
  2890                           ;main.c: 249: flag_G=0;
  2891  03C2  01E4               	clrf	_flag_G^(0+256)
  2892  03C3  01E5               	clrf	(_flag_G+1)^(0+256)
  2893                           
  2894                           ;main.c: 250: step_nr=0;
  2895  03C4  01EC               	clrf	turn_egs@step_nr^(0+256)
  2896  03C5  01ED               	clrf	(turn_egs@step_nr+1)^(0+256)
  2897                           
  2898                           ;main.c: 251: if(flag_directie==1)
  2899  03C6  0020               	movlb	0	; select bank0
  2900  03C7  0368               	decf	_flag_directie,w
  2901  03C8  0469               	iorwf	_flag_directie+1,w
  2902  03C9  1D03               	btfss	3,2
  2903  03CA  2BCE               	goto	l2596
  2904                           
  2905                           ;main.c: 252: {
  2906                           ;main.c: 253: flag_directie=0;
  2907  03CB  01E8               	clrf	_flag_directie
  2908  03CC  01E9               	clrf	_flag_directie+1
  2909                           
  2910                           ;main.c: 254: }
  2911  03CD  2BD6               	goto	l2600
  2912  03CE                     l2596:	
  2913                           
  2914                           ;main.c: 255: else if(flag_directie==0)
  2915  03CE  0868               	movf	_flag_directie,w
  2916  03CF  0469               	iorwf	_flag_directie+1,w
  2917  03D0  1D03               	btfss	3,2
  2918  03D1  2BD6               	goto	l2600
  2919                           
  2920                           ;main.c: 256: {
  2921                           ;main.c: 257: flag_directie=1;
  2922  03D2  3001               	movlw	1
  2923  03D3  00E8               	movwf	_flag_directie
  2924  03D4  3000               	movlw	0
  2925  03D5  00E9               	movwf	_flag_directie+1
  2926  03D6                     l2600:	
  2927                           
  2928                           ;main.c: 258: }
  2929                           ;main.c: 259: step_index=0;
  2930  03D6  01FA               	clrf	turn_egs@step_index
  2931  03D7  0008               	return
  2932  03D8                     __end_of_turn_egs:	
  2933                           
  2934                           	psect	text2
  2935  06B3                     __ptext2:	
  2936 ;; *************** function _sms_text *****************
  2937 ;; Defined at:
  2938 ;;		line 266 in file "main.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2952 ;;      Params:         0       0       0       0       0       0       0       0
  2953 ;;      Locals:         0       0       0       0       0       0       0       0
  2954 ;;      Temps:          0       0       0       0       0       0       0       0
  2955 ;;      Totals:         0       0       0       0       0       0       0       0
  2956 ;;Total ram usage:        0 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    7
  2959 ;; This function calls:
  2960 ;;		_printf
  2961 ;;		_putch
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function _sms_text
  2969  06B3                     _sms_text:	
  2970                           
  2971                           ;main.c: 268: static int sms_index=0;
  2972                           ;main.c: 269: if (flag_4000_ms==1)
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in _sms_text: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2976  06B3  0022               	movlb	2	; select bank2
  2977  06B4  0354               	decf	_flag_4000_ms^(0+256),w
  2978  06B5  0455               	iorwf	(_flag_4000_ms+1)^(0+256),w
  2979  06B6  1D03               	btfss	3,2
  2980  06B7  0008               	return
  2981                           
  2982                           ;main.c: 270: {
  2983                           ;main.c: 271: if (sms_index==0)
  2984  06B8  0021               	movlb	1	; select bank1
  2985  06B9  086D               	movf	sms_text@sms_index^(0+128),w
  2986  06BA  046E               	iorwf	(sms_text@sms_index+1)^(0+128),w
  2987  06BB  1D03               	btfss	3,2
  2988  06BC  2ECE               	goto	l2612
  2989                           
  2990                           ;main.c: 272: {
  2991                           ;main.c: 274: printf("AT+CSCS=\"GSM\"");
  2992  06BD  3036               	movlw	low (STR_1| (0+32768))
  2993  06BE  0020               	movlb	0	; select bank0
  2994  06BF  00A3               	movwf	printf@f
  2995  06C0  3090               	movlw	high (STR_1| (0+32768))
  2996  06C1  00A4               	movwf	printf@f+1
  2997  06C2  3187  27E3  3186   	fcall	_printf
  2998                           
  2999                           ;main.c: 275: putch(0x0d);
  3000  06C5  300D               	movlw	13
  3001  06C6  318D  257B         	fcall	_putch
  3002                           
  3003                           ;main.c: 276: sms_index++;
  3004  06C8  3001               	movlw	1
  3005  06C9  0021               	movlb	1	; select bank1
  3006  06CA  07ED               	addwf	sms_text@sms_index^(0+128),f
  3007  06CB  3000               	movlw	0
  3008  06CC  3DEE               	addwfc	(sms_text@sms_index+1)^(0+128),f
  3009                           
  3010                           ;main.c: 277: }
  3011  06CD  0008               	return
  3012  06CE                     l2612:	
  3013                           
  3014                           ;main.c: 278: else if (sms_index==1)
  3015  06CE  036D               	decf	sms_text@sms_index^(0+128),w
  3016  06CF  046E               	iorwf	(sms_text@sms_index+1)^(0+128),w
  3017  06D0  1D03               	btfss	3,2
  3018  06D1  2EE3               	goto	l2620
  3019                           
  3020                           ;main.c: 279: {
  3021                           ;main.c: 280: printf("AT+CMGS=\"0757494823\"");
  3022  06D2  3000               	movlw	low (STR_2| (0+32768))
  3023  06D3  0020               	movlb	0	; select bank0
  3024  06D4  00A3               	movwf	printf@f
  3025  06D5  3090               	movlw	high (STR_2| (0+32768))
  3026  06D6  00A4               	movwf	printf@f+1
  3027  06D7  3187  27E3  3186   	fcall	_printf
  3028                           
  3029                           ;main.c: 281: putch(0x0d);
  3030  06DA  300D               	movlw	13
  3031  06DB  318D  257B         	fcall	_putch
  3032                           
  3033                           ;main.c: 282: sms_index++;
  3034  06DD  3001               	movlw	1
  3035  06DE  0021               	movlb	1	; select bank1
  3036  06DF  07ED               	addwf	sms_text@sms_index^(0+128),f
  3037  06E0  3000               	movlw	0
  3038  06E1  3DEE               	addwfc	(sms_text@sms_index+1)^(0+128),f
  3039                           
  3040                           ;main.c: 283: }
  3041  06E2  0008               	return
  3042  06E3                     l2620:	
  3043                           
  3044                           ;main.c: 284: else if (sms_index==2)
  3045  06E3  3002               	movlw	2
  3046  06E4  066D               	xorwf	sms_text@sms_index^(0+128),w
  3047  06E5  046E               	iorwf	(sms_text@sms_index+1)^(0+128),w
  3048  06E6  1D03               	btfss	3,2
  3049  06E7  2EFD               	goto	l2630
  3050                           
  3051                           ;main.c: 285: {
  3052                           ;main.c: 286: printf("iupii merge");
  3053  06E8  3044               	movlw	low (STR_3| (0+32768))
  3054  06E9  0020               	movlb	0	; select bank0
  3055  06EA  00A3               	movwf	printf@f
  3056  06EB  3090               	movlw	high (STR_3| (0+32768))
  3057  06EC  00A4               	movwf	printf@f+1
  3058  06ED  3187  27E3  3186   	fcall	_printf
  3059                           
  3060                           ;main.c: 287: putch(26);
  3061  06F0  301A               	movlw	26
  3062  06F1  318D  257B  3186   	fcall	_putch
  3063                           
  3064                           ;main.c: 288: putch(0x0d);
  3065  06F4  300D               	movlw	13
  3066  06F5  318D  257B         	fcall	_putch
  3067                           
  3068                           ;main.c: 289: sms_index++;
  3069  06F7  3001               	movlw	1
  3070  06F8  0021               	movlb	1	; select bank1
  3071  06F9  07ED               	addwf	sms_text@sms_index^(0+128),f
  3072  06FA  3000               	movlw	0
  3073  06FB  3DEE               	addwfc	(sms_text@sms_index+1)^(0+128),f
  3074                           
  3075                           ;main.c: 290: }
  3076  06FC  0008               	return
  3077  06FD                     l2630:	
  3078                           
  3079                           ;main.c: 291: else if (sms_index==3)
  3080  06FD  3003               	movlw	3
  3081  06FE  066D               	xorwf	sms_text@sms_index^(0+128),w
  3082  06FF  046E               	iorwf	(sms_text@sms_index+1)^(0+128),w
  3083  0700  1D03               	btfss	3,2
  3084  0701  0008               	return
  3085                           
  3086                           ;main.c: 292: {
  3087                           ;main.c: 293: sms_index=0;
  3088  0702  01ED               	clrf	sms_text@sms_index^(0+128)
  3089  0703  01EE               	clrf	(sms_text@sms_index+1)^(0+128)
  3090                           
  3091                           ;main.c: 294: flag_A=0;
  3092  0704  0022               	movlb	2	; select bank2
  3093  0705  01E2               	clrf	_flag_A^(0+256)
  3094  0706  01E3               	clrf	(_flag_A+1)^(0+256)
  3095                           
  3096                           ;main.c: 295: flag_B=0;
  3097  0707  01E0               	clrf	_flag_B^(0+256)
  3098  0708  01E1               	clrf	(_flag_B+1)^(0+256)
  3099  0709  0008               	return
  3100  070A                     __end_of_sms_text:	
  3101                           
  3102                           	psect	text3
  3103  07A3                     __ptext3:	
  3104 ;; *************** function _int_gsm *****************
  3105 ;; Defined at:
  3106 ;;		line 302 in file "main.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      void 
  3113 ;; Registers used:
  3114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3120 ;;      Params:         0       0       0       0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0
  3123 ;;      Totals:         0       0       0       0       0       0       0       0
  3124 ;;Total ram usage:        0 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    7
  3127 ;; This function calls:
  3128 ;;		_printf
  3129 ;;		_putch
  3130 ;; This function is called by:
  3131 ;;		_main
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _int_gsm
  3137  07A3                     _int_gsm:	
  3138                           
  3139                           ;main.c: 304: static int sms1_index;
  3140                           ;main.c: 305: if (flag_4000_ms==1)
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _int_gsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3144  07A3  0022               	movlb	2	; select bank2
  3145  07A4  0354               	decf	_flag_4000_ms^(0+256),w
  3146  07A5  0455               	iorwf	(_flag_4000_ms+1)^(0+256),w
  3147  07A6  1D03               	btfss	3,2
  3148  07A7  0008               	return
  3149                           
  3150                           ;main.c: 306: {
  3151                           ;main.c: 307: if (sms1_index==0)
  3152  07A8  0020               	movlb	0	; select bank0
  3153  07A9  0866               	movf	int_gsm@sms1_index,w
  3154  07AA  0467               	iorwf	int_gsm@sms1_index+1,w
  3155  07AB  1D03               	btfss	3,2
  3156  07AC  2FB1               	goto	l2644
  3157                           
  3158                           ;main.c: 308: {
  3159                           ;main.c: 309: printf("AT");
  3160  07AD  305A               	movlw	low (STR_4| (0+32768))
  3161  07AE  00A3               	movwf	printf@f
  3162  07AF  3090               	movlw	high (STR_4| (0+32768))
  3163  07B0  2FD3               	goto	L3
  3164  07B1                     l2644:	
  3165                           ;main.c: 312: }
  3166                           
  3167                           ;main.c: 311: sms1_index++;
  3168                           
  3169                           ;main.c: 310: putch(0x0d);
  3170                           
  3171                           
  3172                           ;main.c: 313: else if (sms1_index==1)
  3173  07B1  0366               	decf	int_gsm@sms1_index,w
  3174  07B2  0467               	iorwf	int_gsm@sms1_index+1,w
  3175  07B3  1D03               	btfss	3,2
  3176  07B4  2FB9               	goto	l2652
  3177                           
  3178                           ;main.c: 314: {
  3179                           ;main.c: 315: printf("AT+CPIN=\"0000\"");
  3180  07B5  3027               	movlw	low (STR_5| (0+32768))
  3181  07B6  00A3               	movwf	printf@f
  3182  07B7  3090               	movlw	high (STR_5| (0+32768))
  3183  07B8  2FD3               	goto	L3
  3184  07B9                     l2652:	
  3185                           ;main.c: 318: }
  3186                           
  3187                           ;main.c: 317: sms1_index++;
  3188                           
  3189                           ;main.c: 316: putch(0x0d);
  3190                           
  3191                           
  3192                           ;main.c: 319: else if (sms1_index==2)
  3193  07B9  3002               	movlw	2
  3194  07BA  0666               	xorwf	int_gsm@sms1_index,w
  3195  07BB  0467               	iorwf	int_gsm@sms1_index+1,w
  3196  07BC  1D03               	btfss	3,2
  3197  07BD  2FC2               	goto	l2660
  3198                           
  3199                           ;main.c: 320: {
  3200                           ;main.c: 321: printf("AT+CMGF=1");
  3201  07BE  3050               	movlw	low (STR_6| (0+32768))
  3202  07BF  00A3               	movwf	printf@f
  3203  07C0  3090               	movlw	high (STR_6| (0+32768))
  3204  07C1  2FD3               	goto	L3
  3205  07C2                     l2660:	
  3206                           ;main.c: 324: }
  3207                           
  3208                           ;main.c: 323: sms1_index++;
  3209                           
  3210                           ;main.c: 322: putch(0x0d);
  3211                           
  3212                           
  3213                           ;main.c: 325: else if (sms1_index==3)
  3214  07C2  3003               	movlw	3
  3215  07C3  0666               	xorwf	int_gsm@sms1_index,w
  3216  07C4  0467               	iorwf	int_gsm@sms1_index+1,w
  3217  07C5  1D03               	btfss	3,2
  3218  07C6  2FCB               	goto	l2668
  3219                           
  3220                           ;main.c: 326: {
  3221                           ;main.c: 327: printf("AT+CNMI=1,2,0,0,0");
  3222  07C7  3015               	movlw	low (STR_7| (0+32768))
  3223  07C8  00A3               	movwf	printf@f
  3224  07C9  3090               	movlw	high (STR_7| (0+32768))
  3225  07CA  2FD3               	goto	L3
  3226  07CB                     l2668:	
  3227                           ;main.c: 330: }
  3228                           
  3229                           ;main.c: 329: sms1_index++;
  3230                           
  3231                           ;main.c: 328: putch(0x0d);
  3232                           
  3233                           
  3234                           ;main.c: 331: else if (sms1_index==4)
  3235  07CB  3004               	movlw	4
  3236  07CC  0666               	xorwf	int_gsm@sms1_index,w
  3237  07CD  0467               	iorwf	int_gsm@sms1_index+1,w
  3238  07CE  1D03               	btfss	3,2
  3239  07CF  2FDF               	goto	l2676
  3240                           
  3241                           ;main.c: 332: {
  3242                           ;main.c: 333: printf("AT+CSCS=\"GSM\"");
  3243  07D0  3036               	movlw	low (STR_1| (0+32768))
  3244  07D1  00A3               	movwf	printf@f
  3245  07D2  3090               	movlw	high (STR_1| (0+32768))
  3246  07D3                     L3:	
  3247  07D3  00A4               	movwf	printf@f+1
  3248  07D4  3187  27E3  3187   	fcall	_printf
  3249                           
  3250                           ;main.c: 334: putch(0x0d);
  3251  07D7  300D               	movlw	13
  3252  07D8  318D  257B         	fcall	_putch
  3253                           
  3254                           ;main.c: 335: sms1_index++;
  3255  07DA  3001               	movlw	1
  3256  07DB  0020               	movlb	0	; select bank0
  3257  07DC  07E6               	addwf	int_gsm@sms1_index,f
  3258  07DD  3000               	movlw	0
  3259  07DE  3DE7               	addwfc	int_gsm@sms1_index+1,f
  3260  07DF                     l2676:	
  3261                           
  3262                           ;main.c: 336: }
  3263                           ;main.c: 337: flag_4000_ms=0;
  3264  07DF  0022               	movlb	2	; select bank2
  3265  07E0  01D4               	clrf	_flag_4000_ms^(0+256)
  3266  07E1  01D5               	clrf	(_flag_4000_ms+1)^(0+256)
  3267  07E2  0008               	return
  3268  07E3                     __end_of_int_gsm:	
  3269                           
  3270                           	psect	text4
  3271  07E3                     __ptext4:	
  3272 ;; *************** function _printf *****************
  3273 ;; Defined at:
  3274 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  3277 ;;		 -> STR_8(14), STR_7(18), STR_6(10), STR_5(15), 
  3278 ;;		 -> STR_4(3), STR_3(12), STR_2(21), STR_1(14), 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  tmpval          4    0        struct .
  3281 ;;  cp              2    0        PTR const unsigned char 
  3282 ;;  len             2    0        unsigned int 
  3283 ;;  val             2    0        unsigned int 
  3284 ;;  c               1    9[BANK0 ] char 
  3285 ;;  ap              1    8[BANK0 ] PTR void [1]
  3286 ;;		 -> ?_printf(2), 
  3287 ;;  flag            1    0        unsigned char 
  3288 ;;  prec            1    0        char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2    3[BANK0 ] int 
  3291 ;; Registers used:
  3292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3298 ;;      Params:         0       2       0       0       0       0       0       0
  3299 ;;      Locals:         0       2       0       0       0       0       0       0
  3300 ;;      Temps:          0       3       0       0       0       0       0       0
  3301 ;;      Totals:         0       7       0       0       0       0       0       0
  3302 ;;Total ram usage:        7 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    6
  3305 ;; This function calls:
  3306 ;;		_putch
  3307 ;; This function is called by:
  3308 ;;		_sms_text
  3309 ;;		_int_gsm
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function _printf
  3315  07E3                     _printf:	
  3316                           
  3317                           ;doprnt.c: 466: va_list ap;
  3318                           ;doprnt.c: 499: signed char c;
  3319                           ;doprnt.c: 506: signed char prec;
  3320                           ;doprnt.c: 508: unsigned char flag;
  3321                           ;doprnt.c: 523: union {
  3322                           ;doprnt.c: 524: unsigned long vd;
  3323                           ;doprnt.c: 525: double integ;
  3324                           ;doprnt.c: 526: } tmpval;
  3325                           ;doprnt.c: 528: unsigned int val;
  3326                           ;doprnt.c: 529: unsigned len;
  3327                           ;doprnt.c: 530: const char * cp;
  3328                           ;doprnt.c: 533: *ap = __va_start();
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3332  07E3  3025               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3333  07E4  0020               	movlb	0	; select bank0
  3334  07E5  00A5               	movwf	??_printf
  3335  07E6  0825               	movf	??_printf,w
  3336  07E7  00A8               	movwf	printf@ap
  3337  07E8                     l2120:	
  3338                           ;doprnt.c: 543: }
  3339                           ;doprnt.c: 1422: {
  3340                           
  3341                           ;doprnt.c: 542: continue;
  3342                           
  3343                           ;doprnt.c: 536: while(c = *f++) {
  3344                           
  3345  07E8  0020               	movlb	0	; select bank0
  3346  07E9  0824               	movf	printf@f+1,w
  3347  07EA  00A6               	movwf	??_printf+1
  3348  07EB  0823               	movf	printf@f,w
  3349  07EC  00A5               	movwf	??_printf
  3350  07ED  0AA3               	incf	printf@f,f
  3351  07EE  1903               	skipnz
  3352  07EF  0AA4               	incf	printf@f+1,f
  3353  07F0  0825               	movf	??_printf,w
  3354  07F1  0084               	movwf	4
  3355  07F2  0826               	movf	??_printf+1,w
  3356  07F3  0085               	movwf	5
  3357  07F4  0800               	movf	0,w	;code access
  3358  07F5  00A7               	movwf	??_printf+2
  3359  07F6  0827               	movf	??_printf+2,w
  3360  07F7  00A9               	movwf	printf@c
  3361  07F8  0829               	movf	printf@c,w
  3362  07F9  1903               	btfsc	3,2
  3363  07FA  0008               	return
  3364                           
  3365                           ;doprnt.c: 540: {
  3366                           ;doprnt.c: 541: (putch(c) );
  3367  07FB  0829               	movf	printf@c,w
  3368  07FC  318D  257B  3187   	fcall	_putch
  3369  07FF  2FE8               	goto	l2120
  3370  0800                     __end_of_printf:	
  3371                           ;doprnt.c: 1469: }
  3372                           ;doprnt.c: 1533: }
  3373                           ;doprnt.c: 1540: return 0;
  3374                           ;	Return value of _printf is never used
  3375                           
  3376                           
  3377                           	psect	text5
  3378  0D7B                     __ptext5:	
  3379 ;; *************** function _putch *****************
  3380 ;; Defined at:
  3381 ;;		line 161 in file "mcc_generated_files/eusart.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  txData          1    wreg     unsigned char 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  txData          1    2[BANK0 ] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3395 ;;      Params:         0       0       0       0       0       0       0       0
  3396 ;;      Locals:         0       1       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0
  3398 ;;      Totals:         0       1       0       0       0       0       0       0
  3399 ;;Total ram usage:        1 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    5
  3402 ;; This function calls:
  3403 ;;		_EUSART_Write
  3404 ;; This function is called by:
  3405 ;;		_sms_text
  3406 ;;		_int_gsm
  3407 ;;		_printf
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _putch
  3413  0D7B                     _putch:	
  3414                           
  3415                           ;incstack = 0
  3416                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3417                           ;putch@txData stored from wreg
  3418  0D7B  0020               	movlb	0	; select bank0
  3419  0D7C  00A2               	movwf	putch@txData
  3420                           
  3421                           ;eusart.c: 163: EUSART_Write(txData);
  3422  0D7D  0822               	movf	putch@txData,w
  3423  0D7E  318F  270A         	fcall	_EUSART_Write
  3424  0D80  0008               	return
  3425  0D81                     __end_of_putch:	
  3426                           
  3427                           	psect	text6
  3428  0F0A                     __ptext6:	
  3429 ;; *************** function _EUSART_Write *****************
  3430 ;; Defined at:
  3431 ;;		line 133 in file "mcc_generated_files/eusart.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  txData          1    wreg     unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  txData          1    1[BANK0 ] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3445 ;;      Params:         0       0       0       0       0       0       0       0
  3446 ;;      Locals:         0       1       0       0       0       0       0       0
  3447 ;;      Temps:          0       1       0       0       0       0       0       0
  3448 ;;      Totals:         0       2       0       0       0       0       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    4
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_putch
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           
  3460                           ;psect for function _EUSART_Write
  3461  0F0A                     _EUSART_Write:	
  3462                           
  3463                           ;incstack = 0
  3464                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3465                           ;EUSART_Write@txData stored from wreg
  3466  0F0A  0020               	movlb	0	; select bank0
  3467  0F0B  00A1               	movwf	EUSART_Write@txData
  3468  0F0C                     l1944:	
  3469                           ;eusart.c: 136: {
  3470                           
  3471                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  3472                           
  3473  0F0C  086F               	movf	_eusartTxBufferRemaining,w	;volatile
  3474  0F0D  1903               	btfsc	3,2
  3475  0F0E  2F0C               	goto	l1944
  3476                           
  3477                           ;eusart.c: 137: }
  3478                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  3479  0F0F  0021               	movlb	1	; select bank1
  3480  0F10  1A11               	btfsc	17,4	;volatile
  3481  0F11  2F17               	goto	l133
  3482                           
  3483                           ;eusart.c: 140: {
  3484                           ;eusart.c: 141: TXREG = txData;
  3485  0F12  0020               	movlb	0	; select bank0
  3486  0F13  0821               	movf	EUSART_Write@txData,w
  3487  0F14  0023               	movlb	3	; select bank3
  3488  0F15  009A               	movwf	26	;volatile
  3489                           
  3490                           ;eusart.c: 142: }
  3491  0F16  2F2C               	goto	l1958
  3492  0F17                     l133:	
  3493                           
  3494                           ;eusart.c: 143: else
  3495                           ;eusart.c: 144: {
  3496                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  3497  0F17  1211               	bcf	17,4	;volatile
  3498                           
  3499                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  3500  0F18  0020               	movlb	0	; select bank0
  3501  0F19  0821               	movf	EUSART_Write@txData,w
  3502  0F1A  00A0               	movwf	??_EUSART_Write
  3503  0F1B  087D               	movf	_eusartTxHead,w
  3504  0F1C  3EE3               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  3505  0F1D  0086               	movwf	6
  3506  0F1E  3001               	movlw	1	; select bank3/4
  3507  0F1F  0087               	movwf	7
  3508  0F20  0820               	movf	??_EUSART_Write,w
  3509  0F21  0081               	movwf	1
  3510  0F22  3001               	movlw	1
  3511  0F23  00A0               	movwf	??_EUSART_Write
  3512  0F24  0820               	movf	??_EUSART_Write,w
  3513  0F25  07FD               	addwf	_eusartTxHead,f	;volatile
  3514                           
  3515                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3516  0F26  3008               	movlw	8
  3517  0F27  027D               	subwf	_eusartTxHead,w	;volatile
  3518  0F28  1803               	btfsc	3,0
  3519                           
  3520                           ;eusart.c: 148: {
  3521                           ;eusart.c: 149: eusartTxHead = 0;
  3522  0F29  01FD               	clrf	_eusartTxHead	;volatile
  3523                           
  3524                           ;eusart.c: 150: }
  3525                           ;eusart.c: 151: eusartTxBufferRemaining--;
  3526  0F2A  3001               	movlw	1
  3527  0F2B  02EF               	subwf	_eusartTxBufferRemaining,f	;volatile
  3528  0F2C                     l1958:	
  3529                           
  3530                           ;eusart.c: 152: }
  3531                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  3532  0F2C  0021               	movlb	1	; select bank1
  3533  0F2D  1611               	bsf	17,4	;volatile
  3534  0F2E  0008               	return
  3535  0F2F                     __end_of_EUSART_Write:	
  3536                           
  3537                           	psect	text7
  3538  0F55                     __ptext7:	
  3539 ;; *************** function _init_lcd *****************
  3540 ;; Defined at:
  3541 ;;		line 86 in file "main.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3555 ;;      Params:         0       0       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0
  3557 ;;      Temps:          0       1       0       0       0       0       0       0
  3558 ;;      Totals:         0       1       0       0       0       0       0       0
  3559 ;;Total ram usage:        1 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    5
  3562 ;; This function calls:
  3563 ;;		_send_nibble
  3564 ;; This function is called by:
  3565 ;;		_main
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _init_lcd
  3571  0F55                     _init_lcd:	
  3572                           
  3573                           ;main.c: 88: LATDbits.LATD1 = 0;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _init_lcd: [wreg+status,2+status,0+pclath+cstack]
  3577  0F55  0022               	movlb	2	; select bank2
  3578  0F56  108F               	bcf	15,1	;volatile
  3579                           
  3580                           ;main.c: 89: LATDbits.LATD3 = 0;
  3581  0F57  118F               	bcf	15,3	;volatile
  3582                           
  3583                           ;main.c: 90: LATDbits.LATD0 = 1;
  3584  0F58  140F               	bsf	15,0	;volatile
  3585                           
  3586                           ;main.c: 93: _delay((unsigned long)((16)*(18432000/4000.0)));
  3587  0F59  3060               	movlw	96
  3588  0F5A  0020               	movlb	0	; select bank0
  3589  0F5B  00A2               	movwf	??_init_lcd
  3590  0F5C  30BF               	movlw	191
  3591  0F5D                     u3157:	
  3592  0F5D  0B89               	decfsz	9,f
  3593  0F5E  2F5D               	goto	u3157
  3594  0F5F  0BA2               	decfsz	??_init_lcd,f
  3595  0F60  2F5D               	goto	u3157
  3596                           
  3597                           ;main.c: 94: send_nibble(0b0011);
  3598  0F61  3003               	movlw	3
  3599  0F62  318F  272F  318F   	fcall	_send_nibble
  3600                           
  3601                           ;main.c: 95: _delay((unsigned long)((5)*(18432000/4000.0)));
  3602  0F65  301E               	movlw	30
  3603  0F66  0020               	movlb	0	; select bank0
  3604  0F67  00A2               	movwf	??_init_lcd
  3605  0F68  30EB               	movlw	235
  3606  0F69                     u3167:	
  3607  0F69  0B89               	decfsz	9,f
  3608  0F6A  2F69               	goto	u3167
  3609  0F6B  0BA2               	decfsz	??_init_lcd,f
  3610  0F6C  2F69               	goto	u3167
  3611                           
  3612                           ;main.c: 96: send_nibble(0b0011);
  3613  0F6D  3003               	movlw	3
  3614  0F6E  318F  272F  318F   	fcall	_send_nibble
  3615                           
  3616                           ;main.c: 97: _delay((unsigned long)((1)*(18432000/4000.0)));
  3617  0F71  3006               	movlw	6
  3618  0F72  0020               	movlb	0	; select bank0
  3619  0F73  00A2               	movwf	??_init_lcd
  3620  0F74  30FB               	movlw	251
  3621  0F75                     u3177:	
  3622  0F75  0B89               	decfsz	9,f
  3623  0F76  2F75               	goto	u3177
  3624  0F77  0BA2               	decfsz	??_init_lcd,f
  3625  0F78  2F75               	goto	u3177
  3626                           
  3627                           ;main.c: 98: send_nibble(0b0011);
  3628  0F79  3003               	movlw	3
  3629  0F7A  318F  272F  318F   	fcall	_send_nibble
  3630                           
  3631                           ;main.c: 99: _delay((unsigned long)((5)*(18432000/4000.0)));
  3632  0F7D  301E               	movlw	30
  3633  0F7E  0020               	movlb	0	; select bank0
  3634  0F7F  00A2               	movwf	??_init_lcd
  3635  0F80  30EB               	movlw	235
  3636  0F81                     u3187:	
  3637  0F81  0B89               	decfsz	9,f
  3638  0F82  2F81               	goto	u3187
  3639  0F83  0BA2               	decfsz	??_init_lcd,f
  3640  0F84  2F81               	goto	u3187
  3641                           
  3642                           ;main.c: 100: send_nibble(0b0010);
  3643  0F85  3002               	movlw	2
  3644  0F86  318F  272F         	fcall	_send_nibble
  3645  0F88  0008               	return
  3646  0F89                     __end_of_init_lcd:	
  3647                           
  3648                           	psect	text8
  3649  007D                     __ptext8:	
  3650 ;; *************** function _comparare *****************
  3651 ;; Defined at:
  3652 ;;		line 343 in file "main.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  resistor_val    2   46[BANK0 ] int 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  j               2   60[BANK0 ] int 
  3657 ;;  j               2   58[BANK0 ] int 
  3658 ;;  i               2   75[BANK1 ] int 
  3659 ;;  table          75    0[BANK1 ] float [25]
  3660 ;;  res            42    0[BANK2 ] unsigned int [21]
  3661 ;;  step            3   53[BANK0 ] float 
  3662 ;;  dif             3   50[BANK0 ] float 
  3663 ;;  result          2   56[BANK0 ] int 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  2   46[BANK0 ] int 
  3666 ;; Registers used:
  3667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3673 ;;      Params:         0       2       0       0       0       0       0       0
  3674 ;;      Locals:         0      12      77      42       0       0       0       0
  3675 ;;      Temps:          0       2       0       0       0       0       0       0
  3676 ;;      Totals:         0      16      77      42       0       0       0       0
  3677 ;;Total ram usage:      135 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    6
  3680 ;; This function calls:
  3681 ;;		___awtoft
  3682 ;;		___bmul
  3683 ;;		___ftadd
  3684 ;;		___ftdiv
  3685 ;;		___ftge
  3686 ;;		___ftmul
  3687 ;;		___ftneg
  3688 ;;		___lwtoft
  3689 ;;		___wmul
  3690 ;; This function is called by:
  3691 ;;		_main
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _comparare
  3697  007D                     _comparare:	
  3698                           
  3699                           ;main.c: 345: unsigned int res[]={3002,2689,2377,2186,1895,1707,1520,1374,1228,1114,1000
      +                          ,908,817,745,673,615,557,496,463,425,387};
  3700                           
  3701                           ;incstack = 0
  3702                           ; Regs used in _comparare: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3703  007D  30A0               	movlw	low comparare@F3715
  3704  007E  0086               	movwf	6
  3705  007F  3001               	movlw	high comparare@F3715
  3706  0080  0087               	movwf	7
  3707  0081  3020               	movlw	low comparare@res
  3708  0082  0084               	movwf	4
  3709  0083  3001               	movlw	high comparare@res
  3710  0084  0085               	movwf	5
  3711  0085  302A               	movlw	42
  3712  0086  0020               	movlb	0	; select bank0
  3713  0087  00D0               	movwf	??_comparare
  3714  0088                     u2750:	
  3715  0088  0016               	moviw fsr1++
  3716  0089  001A               	movwi fsr0++
  3717  008A  0BD0               	decfsz	??_comparare,f
  3718  008B  2888               	goto	u2750
  3719                           
  3720                           ;main.c: 346: int result=1000;
  3721  008C  30E8               	movlw	232
  3722  008D  00D8               	movwf	comparare@result
  3723  008E  3003               	movlw	3
  3724  008F  00D9               	movwf	comparare@result+1
  3725                           
  3726                           ;main.c: 347: float dif=0,step=0;
  3727  0090  3000               	movlw	0
  3728  0091  00D2               	movwf	comparare@dif
  3729  0092  3000               	movlw	0
  3730  0093  00D3               	movwf	comparare@dif+1
  3731  0094  3000               	movlw	0
  3732  0095  00D4               	movwf	comparare@dif+2
  3733  0096  3000               	movlw	0
  3734  0097  00D5               	movwf	comparare@step
  3735  0098  3000               	movlw	0
  3736  0099  00D6               	movwf	comparare@step+1
  3737  009A  3000               	movlw	0
  3738  009B  00D7               	movwf	comparare@step+2
  3739                           
  3740                           ;main.c: 348: float table[25]={};
  3741  009C  3020               	movlw	low comparare@F3720
  3742  009D  0086               	movwf	6
  3743  009E  3002               	movlw	high comparare@F3720
  3744  009F  0087               	movwf	7
  3745  00A0  30A0               	movlw	low comparare@table
  3746  00A1  0084               	movwf	4
  3747  00A2  3000               	movlw	high comparare@table
  3748  00A3  0085               	movwf	5
  3749  00A4  304B               	movlw	75
  3750  00A5  00D0               	movwf	??_comparare
  3751  00A6                     u2760:	
  3752  00A6  0016               	moviw fsr1++
  3753  00A7  001A               	movwi fsr0++
  3754  00A8  0BD0               	decfsz	??_comparare,f
  3755  00A9  28A6               	goto	u2760
  3756                           
  3757                           ;main.c: 349: for(int i=0;i<19;i++)
  3758  00AA  0021               	movlb	1	; select bank1
  3759  00AB  01EB               	clrf	comparare@i^(0+128)
  3760  00AC  01EC               	clrf	(comparare@i+1)^(0+128)
  3761  00AD  086C               	movf	(comparare@i+1)^(0+128),w
  3762  00AE  3A80               	xorlw	128
  3763  00AF  0020               	movlb	0	; select bank0
  3764  00B0  00D0               	movwf	??_comparare
  3765  00B1  3080               	movlw	128
  3766  00B2  0250               	subwf	??_comparare,w
  3767  00B3  1D03               	skipz
  3768  00B4  28B8               	goto	u2775
  3769  00B5  3013               	movlw	19
  3770  00B6  0021               	movlb	1	; select bank1
  3771  00B7  026B               	subwf	comparare@i^(0+128),w
  3772  00B8                     u2775:	
  3773  00B8  1803               	btfsc	3,0
  3774  00B9  2A21               	goto	l2730
  3775  00BA                     l2694:	
  3776                           
  3777                           ;main.c: 350: {
  3778                           ;main.c: 351: if((resistor_value<=res[i])&(resistor_value>=res[i+1]))
  3779  00BA  0021               	movlb	1	; select bank1
  3780  00BB  356B               	lslf	comparare@i^(0+128),w
  3781  00BC  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  3782  00BD  0086               	movwf	6
  3783  00BE  3001               	movlw	1	; select bank2/3
  3784  00BF  0087               	movwf	7
  3785  00C0  3F40               	moviw [0]fsr1
  3786  00C1  0020               	movlb	0	; select bank0
  3787  00C2  00D0               	movwf	??_comparare
  3788  00C3  3F41               	moviw [1]fsr1
  3789  00C4  00D1               	movwf	??_comparare+1
  3790  00C5  084F               	movf	comparare@resistor_value+1,w
  3791  00C6  0251               	subwf	??_comparare+1,w
  3792  00C7  1D03               	skipz
  3793  00C8  28CB               	goto	u2785
  3794  00C9  084E               	movf	comparare@resistor_value,w
  3795  00CA  0250               	subwf	??_comparare,w
  3796  00CB                     u2785:	
  3797  00CB  1C03               	skipc
  3798  00CC  2A0F               	goto	l2728
  3799  00CD  0021               	movlb	1	; select bank1
  3800  00CE  356B               	lslf	comparare@i^(0+128),w
  3801  00CF  3E02               	addlw	2
  3802  00D0  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  3803  00D1  0086               	movwf	6
  3804  00D2  3001               	movlw	1	; select bank2/3
  3805  00D3  0087               	movwf	7
  3806  00D4  3F40               	moviw [0]fsr1
  3807  00D5  0020               	movlb	0	; select bank0
  3808  00D6  00D0               	movwf	??_comparare
  3809  00D7  3F41               	moviw [1]fsr1
  3810  00D8  00D1               	movwf	??_comparare+1
  3811  00D9  0851               	movf	??_comparare+1,w
  3812  00DA  024F               	subwf	comparare@resistor_value+1,w
  3813  00DB  1D03               	skipz
  3814  00DC  28DF               	goto	u2795
  3815  00DD  0850               	movf	??_comparare,w
  3816  00DE  024E               	subwf	comparare@resistor_value,w
  3817  00DF                     u2795:	
  3818  00DF  1C03               	skipc
  3819  00E0  2A0F               	goto	l2728
  3820                           
  3821                           ;main.c: 352: {
  3822                           ;main.c: 353: dif=res[i]-res[i+1];
  3823  00E1  0021               	movlb	1	; select bank1
  3824  00E2  356B               	lslf	comparare@i^(0+128),w
  3825  00E3  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  3826  00E4  0086               	movwf	6
  3827  00E5  3001               	movlw	1	; select bank2/3
  3828  00E6  0087               	movwf	7
  3829  00E7  356B               	lslf	comparare@i^(0+128),w
  3830  00E8  3E02               	addlw	2
  3831  00E9  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  3832  00EA  0084               	movwf	4
  3833  00EB  3001               	movlw	1	; select bank2/3
  3834  00EC  0085               	movwf	5
  3835  00ED  3F00               	moviw [0]fsr0
  3836  00EE  0020               	movlb	0	; select bank0
  3837  00EF  00D0               	movwf	??_comparare
  3838  00F0  3F01               	moviw [1]fsr0
  3839  00F1  00D1               	movwf	??_comparare+1
  3840  00F2  09D0               	comf	??_comparare,f
  3841  00F3  09D1               	comf	??_comparare+1,f
  3842  00F4  0AD0               	incf	??_comparare,f
  3843  00F5  1903               	skipnz
  3844  00F6  0AD1               	incf	??_comparare+1,f
  3845  00F7  3F40               	moviw [0]fsr1
  3846  00F8  0750               	addwf	??_comparare,w
  3847  00F9  00A8               	movwf	___lwtoft@c
  3848  00FA  3F41               	moviw [1]fsr1
  3849  00FB  3D51               	addwfc	??_comparare+1,w
  3850  00FC  00A9               	movwf	___lwtoft@c+1
  3851  00FD  318D  25ED  3180   	fcall	___lwtoft
  3852  0100  0020               	movlb	0	; select bank0
  3853  0101  0828               	movf	?___lwtoft,w
  3854  0102  00D2               	movwf	comparare@dif
  3855  0103  0829               	movf	?___lwtoft+1,w
  3856  0104  00D3               	movwf	comparare@dif+1
  3857  0105  082A               	movf	?___lwtoft+2,w
  3858  0106  00D4               	movwf	comparare@dif+2
  3859                           
  3860                           ;main.c: 354: step=dif/25;
  3861  0107  3000               	movlw	0
  3862  0108  00BE               	movwf	___ftdiv@f2
  3863  0109  30C8               	movlw	200
  3864  010A  00BF               	movwf	___ftdiv@f2+1
  3865  010B  3041               	movlw	65
  3866  010C  00C0               	movwf	___ftdiv@f2+2
  3867  010D  0852               	movf	comparare@dif,w
  3868  010E  00C1               	movwf	___ftdiv@f1
  3869  010F  0853               	movf	comparare@dif+1,w
  3870  0110  00C2               	movwf	___ftdiv@f1+1
  3871  0111  0854               	movf	comparare@dif+2,w
  3872  0112  00C3               	movwf	___ftdiv@f1+2
  3873  0113  3184  248C  3180   	fcall	___ftdiv
  3874  0116  0020               	movlb	0	; select bank0
  3875  0117  083E               	movf	?___ftdiv,w
  3876  0118  00D5               	movwf	comparare@step
  3877  0119  083F               	movf	?___ftdiv+1,w
  3878  011A  00D6               	movwf	comparare@step+1
  3879  011B  0840               	movf	?___ftdiv+2,w
  3880  011C  00D7               	movwf	comparare@step+2
  3881                           
  3882                           ;main.c: 355: for(int j=0;j<25;j++)
  3883  011D  01DA               	clrf	comparare@j
  3884  011E  01DB               	clrf	comparare@j+1
  3885  011F  085B               	movf	comparare@j+1,w
  3886  0120  3A80               	xorlw	128
  3887  0121  00D0               	movwf	??_comparare
  3888  0122  3080               	movlw	128
  3889  0123  0250               	subwf	??_comparare,w
  3890  0124  1D03               	skipz
  3891  0125  2928               	goto	u2805
  3892  0126  3019               	movlw	25
  3893  0127  025A               	subwf	comparare@j,w
  3894  0128                     u2805:	
  3895  0128  1803               	btfsc	3,0
  3896  0129  298D               	goto	l2714
  3897  012A                     l2708:	
  3898                           
  3899                           ;main.c: 356: {
  3900                           ;main.c: 358: table[j]=res[i]-j*step;
  3901  012A  3003               	movlw	3
  3902  012B  0020               	movlb	0	; select bank0
  3903  012C  00D0               	movwf	??_comparare
  3904  012D  0850               	movf	??_comparare,w
  3905  012E  00A0               	movwf	___bmul@multiplicand
  3906  012F  085A               	movf	comparare@j,w
  3907  0130  318D  25C7  3180   	fcall	___bmul
  3908  0133  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  3909  0134  0086               	movwf	6
  3910  0135  0187               	clrf	7
  3911  0136  0020               	movlb	0	; select bank0
  3912  0137  085B               	movf	comparare@j+1,w
  3913  0138  00A9               	movwf	___awtoft@c+1
  3914  0139  085A               	movf	comparare@j,w
  3915  013A  00A8               	movwf	___awtoft@c
  3916  013B  318E  26C5  3180   	fcall	___awtoft
  3917  013E  0020               	movlb	0	; select bank0
  3918  013F  0828               	movf	?___awtoft,w
  3919  0140  00B1               	movwf	___ftmul@f2
  3920  0141  0829               	movf	?___awtoft+1,w
  3921  0142  00B2               	movwf	___ftmul@f2+1
  3922  0143  082A               	movf	?___awtoft+2,w
  3923  0144  00B3               	movwf	___ftmul@f2+2
  3924  0145  0855               	movf	comparare@step,w
  3925  0146  00AE               	movwf	___ftmul@f1
  3926  0147  0856               	movf	comparare@step+1,w
  3927  0148  00AF               	movwf	___ftmul@f1+1
  3928  0149  0857               	movf	comparare@step+2,w
  3929  014A  00B0               	movwf	___ftmul@f1+2
  3930  014B  3183  23D8  3180   	fcall	___ftmul
  3931  014E  0020               	movlb	0	; select bank0
  3932  014F  082E               	movf	?___ftmul,w
  3933  0150  00BE               	movwf	___ftneg@f1
  3934  0151  082F               	movf	?___ftmul+1,w
  3935  0152  00BF               	movwf	___ftneg@f1+1
  3936  0153  0830               	movf	?___ftmul+2,w
  3937  0154  00C0               	movwf	___ftneg@f1+2
  3938  0155  318D  259F  3180   	fcall	___ftneg
  3939  0158  0020               	movlb	0	; select bank0
  3940  0159  083E               	movf	?___ftneg,w
  3941  015A  00C1               	movwf	___ftadd@f1
  3942  015B  083F               	movf	?___ftneg+1,w
  3943  015C  00C2               	movwf	___ftadd@f1+1
  3944  015D  0840               	movf	?___ftneg+2,w
  3945  015E  00C3               	movwf	___ftadd@f1+2
  3946  015F  0021               	movlb	1	; select bank1
  3947  0160  356B               	lslf	comparare@i^(0+128),w
  3948  0161  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  3949  0162  0084               	movwf	4
  3950  0163  3001               	movlw	1	; select bank2/3
  3951  0164  0085               	movwf	5
  3952  0165  3F00               	moviw [0]fsr0
  3953  0166  0020               	movlb	0	; select bank0
  3954  0167  00A8               	movwf	___lwtoft@c
  3955  0168  3F01               	moviw [1]fsr0
  3956  0169  00A9               	movwf	___lwtoft@c+1
  3957  016A  318D  25ED  3180   	fcall	___lwtoft
  3958  016D  0020               	movlb	0	; select bank0
  3959  016E  0828               	movf	?___lwtoft,w
  3960  016F  00C4               	movwf	___ftadd@f2
  3961  0170  0829               	movf	?___lwtoft+1,w
  3962  0171  00C5               	movwf	___ftadd@f2+1
  3963  0172  082A               	movf	?___lwtoft+2,w
  3964  0173  00C6               	movwf	___ftadd@f2+2
  3965  0174  3182  2227  3180   	fcall	___ftadd
  3966  0177  0020               	movlb	0	; select bank0
  3967  0178  0841               	movf	?___ftadd,w
  3968  0179  3FC0               	movwi [0]fsr1
  3969  017A  0842               	movf	?___ftadd+1,w
  3970  017B  3FC1               	movwi [1]fsr1
  3971  017C  0843               	movf	?___ftadd+2,w
  3972  017D  3FC2               	movwi [2]fsr1
  3973  017E  3001               	movlw	1
  3974  017F  07DA               	addwf	comparare@j,f
  3975  0180  3000               	movlw	0
  3976  0181  3DDB               	addwfc	comparare@j+1,f
  3977  0182  085B               	movf	comparare@j+1,w
  3978  0183  3A80               	xorlw	128
  3979  0184  00D0               	movwf	??_comparare
  3980  0185  3080               	movlw	128
  3981  0186  0250               	subwf	??_comparare,w
  3982  0187  1D03               	skipz
  3983  0188  298B               	goto	u2815
  3984  0189  3019               	movlw	25
  3985  018A  025A               	subwf	comparare@j,w
  3986  018B                     u2815:	
  3987  018B  1C03               	skipc
  3988  018C  292A               	goto	l2708
  3989  018D                     l2714:	
  3990                           
  3991                           ;main.c: 360: }
  3992                           ;main.c: 361: for(int j=0;j<25;j++)
  3993  018D  0020               	movlb	0	; select bank0
  3994  018E  01DC               	clrf	comparare@j_745
  3995  018F  01DD               	clrf	comparare@j_745+1
  3996  0190  085D               	movf	comparare@j_745+1,w
  3997  0191  3A80               	xorlw	128
  3998  0192  00D0               	movwf	??_comparare
  3999  0193  3080               	movlw	128
  4000  0194  0250               	subwf	??_comparare,w
  4001  0195  1D03               	skipz
  4002  0196  2999               	goto	u2825
  4003  0197  3019               	movlw	25
  4004  0198  025C               	subwf	comparare@j_745,w
  4005  0199                     u2825:	
  4006  0199  1803               	btfsc	3,0
  4007  019A  2A0F               	goto	l2728
  4008  019B                     l2720:	
  4009                           
  4010                           ;main.c: 362: {
  4011                           ;main.c: 363: if((resistor_value<=table[j])&(resistor_value>=table[j+1]))
  4012  019B  3003               	movlw	3
  4013  019C  0020               	movlb	0	; select bank0
  4014  019D  00D0               	movwf	??_comparare
  4015  019E  0850               	movf	??_comparare,w
  4016  019F  00A0               	movwf	___bmul@multiplicand
  4017  01A0  085C               	movf	comparare@j_745,w
  4018  01A1  318D  25C7  3180   	fcall	___bmul
  4019  01A4  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4020  01A5  0086               	movwf	6
  4021  01A6  0187               	clrf	7
  4022  01A7  3F40               	moviw [0]fsr1
  4023  01A8  0020               	movlb	0	; select bank0
  4024  01A9  00AE               	movwf	___ftge@ff1
  4025  01AA  3F41               	moviw [1]fsr1
  4026  01AB  00AF               	movwf	___ftge@ff1+1
  4027  01AC  3F42               	moviw [2]fsr1
  4028  01AD  00B0               	movwf	___ftge@ff1+2
  4029  01AE  084F               	movf	comparare@resistor_value+1,w
  4030  01AF  00A9               	movwf	___awtoft@c+1
  4031  01B0  084E               	movf	comparare@resistor_value,w
  4032  01B1  00A8               	movwf	___awtoft@c
  4033  01B2  318E  26C5  3180   	fcall	___awtoft
  4034  01B5  0020               	movlb	0	; select bank0
  4035  01B6  0828               	movf	?___awtoft,w
  4036  01B7  00B1               	movwf	___ftge@ff2
  4037  01B8  0829               	movf	?___awtoft+1,w
  4038  01B9  00B2               	movwf	___ftge@ff2+1
  4039  01BA  082A               	movf	?___awtoft+2,w
  4040  01BB  00B3               	movwf	___ftge@ff2+2
  4041  01BC  318F  27C4  3180   	fcall	___ftge
  4042  01BF  1C03               	btfss	3,0
  4043  01C0  29FF               	goto	l2726
  4044  01C1  0020               	movlb	0	; select bank0
  4045  01C2  084F               	movf	comparare@resistor_value+1,w
  4046  01C3  00A9               	movwf	___awtoft@c+1
  4047  01C4  084E               	movf	comparare@resistor_value,w
  4048  01C5  00A8               	movwf	___awtoft@c
  4049  01C6  318E  26C5  3180   	fcall	___awtoft
  4050  01C9  0020               	movlb	0	; select bank0
  4051  01CA  0828               	movf	?___awtoft,w
  4052  01CB  00AE               	movwf	___ftge@ff1
  4053  01CC  0829               	movf	?___awtoft+1,w
  4054  01CD  00AF               	movwf	___ftge@ff1+1
  4055  01CE  082A               	movf	?___awtoft+2,w
  4056  01CF  00B0               	movwf	___ftge@ff1+2
  4057  01D0  3003               	movlw	3
  4058  01D1  00D0               	movwf	??_comparare
  4059  01D2  0850               	movf	??_comparare,w
  4060  01D3  00A0               	movwf	___bmul@multiplicand
  4061  01D4  085C               	movf	comparare@j_745,w
  4062  01D5  3E01               	addlw	1
  4063  01D6  318D  25C7  3180   	fcall	___bmul
  4064  01D9  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4065  01DA  0086               	movwf	6
  4066  01DB  0187               	clrf	7
  4067  01DC  3F40               	moviw [0]fsr1
  4068  01DD  0020               	movlb	0	; select bank0
  4069  01DE  00B1               	movwf	___ftge@ff2
  4070  01DF  3F41               	moviw [1]fsr1
  4071  01E0  00B2               	movwf	___ftge@ff2+1
  4072  01E1  3F42               	moviw [2]fsr1
  4073  01E2  00B3               	movwf	___ftge@ff2+2
  4074  01E3  318F  27C4  3180   	fcall	___ftge
  4075  01E6  1C03               	btfss	3,0
  4076  01E7  29FF               	goto	l2726
  4077                           
  4078                           ;main.c: 364: {
  4079                           ;main.c: 365: result=(i*25+1*j);
  4080  01E8  0021               	movlb	1	; select bank1
  4081  01E9  086C               	movf	(comparare@i+1)^(0+128),w
  4082  01EA  0020               	movlb	0	; select bank0
  4083  01EB  00A1               	movwf	___wmul@multiplier+1
  4084  01EC  0021               	movlb	1	; select bank1
  4085  01ED  086B               	movf	comparare@i^(0+128),w
  4086  01EE  0020               	movlb	0	; select bank0
  4087  01EF  00A0               	movwf	___wmul@multiplier
  4088  01F0  3019               	movlw	25
  4089  01F1  00A2               	movwf	___wmul@multiplicand
  4090  01F2  3000               	movlw	0
  4091  01F3  00A3               	movwf	___wmul@multiplicand+1
  4092  01F4  318E  266D  3180   	fcall	___wmul
  4093  01F7  0020               	movlb	0	; select bank0
  4094  01F8  085C               	movf	comparare@j_745,w
  4095  01F9  0720               	addwf	?___wmul,w
  4096  01FA  00D8               	movwf	comparare@result
  4097  01FB  085D               	movf	comparare@j_745+1,w
  4098  01FC  3D21               	addwfc	?___wmul+1,w
  4099  01FD  00D9               	movwf	comparare@result+1
  4100                           
  4101                           ;main.c: 366: break;
  4102  01FE  2A0F               	goto	l2728
  4103  01FF                     l2726:	
  4104  01FF  3001               	movlw	1
  4105  0200  0020               	movlb	0	; select bank0
  4106  0201  07DC               	addwf	comparare@j_745,f
  4107  0202  3000               	movlw	0
  4108  0203  3DDD               	addwfc	comparare@j_745+1,f
  4109  0204  085D               	movf	comparare@j_745+1,w
  4110  0205  3A80               	xorlw	128
  4111  0206  00D0               	movwf	??_comparare
  4112  0207  3080               	movlw	128
  4113  0208  0250               	subwf	??_comparare,w
  4114  0209  1D03               	skipz
  4115  020A  2A0D               	goto	u2855
  4116  020B  3019               	movlw	25
  4117  020C  025C               	subwf	comparare@j_745,w
  4118  020D                     u2855:	
  4119  020D  1C03               	skipc
  4120  020E  299B               	goto	l2720
  4121  020F                     l2728:	
  4122  020F  3001               	movlw	1
  4123  0210  0021               	movlb	1	; select bank1
  4124  0211  07EB               	addwf	comparare@i^(0+128),f
  4125  0212  3000               	movlw	0
  4126  0213  3DEC               	addwfc	(comparare@i+1)^(0+128),f
  4127  0214  086C               	movf	(comparare@i+1)^(0+128),w
  4128  0215  3A80               	xorlw	128
  4129  0216  0020               	movlb	0	; select bank0
  4130  0217  00D0               	movwf	??_comparare
  4131  0218  3080               	movlw	128
  4132  0219  0250               	subwf	??_comparare,w
  4133  021A  1D03               	skipz
  4134  021B  2A1F               	goto	u2865
  4135  021C  3013               	movlw	19
  4136  021D  0021               	movlb	1	; select bank1
  4137  021E  026B               	subwf	comparare@i^(0+128),w
  4138  021F                     u2865:	
  4139  021F  1C03               	skipc
  4140  0220  28BA               	goto	l2694
  4141  0221                     l2730:	
  4142                           
  4143                           ;main.c: 367: }
  4144                           ;main.c: 368: }
  4145                           ;main.c: 369: }
  4146                           ;main.c: 370: }
  4147                           ;main.c: 371: return result;
  4148  0221  0020               	movlb	0	; select bank0
  4149  0222  0859               	movf	comparare@result+1,w
  4150  0223  00CF               	movwf	?_comparare+1
  4151  0224  0858               	movf	comparare@result,w
  4152  0225  00CE               	movwf	?_comparare
  4153  0226  0008               	return
  4154  0227                     __end_of_comparare:	
  4155                           
  4156                           	psect	text9
  4157  0E6D                     __ptext9:	
  4158 ;; *************** function ___wmul *****************
  4159 ;; Defined at:
  4160 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4163 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  product         2    4[BANK0 ] unsigned int 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2    0[BANK0 ] unsigned int 
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4175 ;;      Params:         0       4       0       0       0       0       0       0
  4176 ;;      Locals:         0       2       0       0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0       0
  4178 ;;      Totals:         0       6       0       0       0       0       0       0
  4179 ;;Total ram usage:        6 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    4
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_comparare
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function ___wmul
  4191  0E6D                     ___wmul:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4195  0E6D  0020               	movlb	0	; select bank0
  4196  0E6E  01A4               	clrf	___wmul@product
  4197  0E6F  01A5               	clrf	___wmul@product+1
  4198  0E70                     l2124:	
  4199  0E70  1C20               	btfss	___wmul@multiplier,0
  4200  0E71  2E76               	goto	l576
  4201  0E72  0822               	movf	___wmul@multiplicand,w
  4202  0E73  07A4               	addwf	___wmul@product,f
  4203  0E74  0823               	movf	___wmul@multiplicand+1,w
  4204  0E75  3DA5               	addwfc	___wmul@product+1,f
  4205  0E76                     l576:	
  4206  0E76  3001               	movlw	1
  4207  0E77                     u1835:	
  4208  0E77  35A2               	lslf	___wmul@multiplicand,f
  4209  0E78  0DA3               	rlf	___wmul@multiplicand+1,f
  4210  0E79  0B89               	decfsz	9,f
  4211  0E7A  2E77               	goto	u1835
  4212  0E7B  3001               	movlw	1
  4213  0E7C                     u1845:	
  4214  0E7C  36A1               	lsrf	___wmul@multiplier+1,f
  4215  0E7D  0CA0               	rrf	___wmul@multiplier,f
  4216  0E7E  0B89               	decfsz	9,f
  4217  0E7F  2E7C               	goto	u1845
  4218  0E80  0820               	movf	___wmul@multiplier,w
  4219  0E81  0421               	iorwf	___wmul@multiplier+1,w
  4220  0E82  1D03               	btfss	3,2
  4221  0E83  2E70               	goto	l2124
  4222  0E84  0825               	movf	___wmul@product+1,w
  4223  0E85  00A1               	movwf	?___wmul+1
  4224  0E86  0824               	movf	___wmul@product,w
  4225  0E87  00A0               	movwf	?___wmul
  4226  0E88  0008               	return
  4227  0E89                     __end_of___wmul:	
  4228                           
  4229                           	psect	text10
  4230  0DED                     __ptext10:	
  4231 ;; *************** function ___lwtoft *****************
  4232 ;; Defined at:
  4233 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  c               2    8[BANK0 ] unsigned int 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  3    8[BANK0 ] float 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4247 ;;      Params:         0       3       0       0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0
  4249 ;;      Temps:          0       1       0       0       0       0       0       0
  4250 ;;      Totals:         0       4       0       0       0       0       0       0
  4251 ;;Total ram usage:        4 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		___ftpack
  4256 ;; This function is called by:
  4257 ;;		_comparare
  4258 ;;		_main
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function ___lwtoft
  4264  0DED                     ___lwtoft:	
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4268  0DED  0020               	movlb	0	; select bank0
  4269  0DEE  0828               	movf	___lwtoft@c,w
  4270  0DEF  00A0               	movwf	___ftpack@arg
  4271  0DF0  0829               	movf	___lwtoft@c+1,w
  4272  0DF1  00A1               	movwf	___ftpack@arg+1
  4273  0DF2  01A2               	clrf	___ftpack@arg+2
  4274  0DF3  308E               	movlw	142
  4275  0DF4  00AB               	movwf	??___lwtoft
  4276  0DF5  082B               	movf	??___lwtoft,w
  4277  0DF6  00A3               	movwf	___ftpack@exp
  4278  0DF7  01A4               	clrf	___ftpack@sign
  4279  0DF8  3186  264E         	fcall	___ftpack
  4280  0DFA  0020               	movlb	0	; select bank0
  4281  0DFB  0820               	movf	?___ftpack,w
  4282  0DFC  00A8               	movwf	?___lwtoft
  4283  0DFD  0821               	movf	?___ftpack+1,w
  4284  0DFE  00A9               	movwf	?___lwtoft+1
  4285  0DFF  0822               	movf	?___ftpack+2,w
  4286  0E00  00AA               	movwf	?___lwtoft+2
  4287  0E01  0008               	return
  4288  0E02                     __end_of___lwtoft:	
  4289                           
  4290                           	psect	text11
  4291  0D9F                     __ptext11:	
  4292 ;; *************** function ___ftneg *****************
  4293 ;; Defined at:
  4294 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  f1              3   30[BANK0 ] float 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  3   30[BANK0 ] float 
  4301 ;; Registers used:
  4302 ;;		wreg
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4308 ;;      Params:         0       3       0       0       0       0       0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0
  4311 ;;      Totals:         0       3       0       0       0       0       0       0
  4312 ;;Total ram usage:        3 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    4
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_comparare
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function ___ftneg
  4324  0D9F                     ___ftneg:	
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in ___ftneg: [wreg]
  4328  0D9F  0020               	movlb	0	; select bank0
  4329  0DA0  0840               	movf	___ftneg@f1+2,w
  4330  0DA1  043F               	iorwf	___ftneg@f1+1,w
  4331  0DA2  043E               	iorwf	___ftneg@f1,w
  4332  0DA3  1903               	skipnz
  4333  0DA4  0008               	return
  4334  0DA5  3080               	movlw	128
  4335  0DA6  06C0               	xorwf	___ftneg@f1+2,f
  4336  0DA7  0008               	return
  4337  0DA8                     __end_of___ftneg:	
  4338                           
  4339                           	psect	text12
  4340  03D8                     __ptext12:	
  4341 ;; *************** function ___ftmul *****************
  4342 ;; Defined at:
  4343 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  f1              3   14[BANK0 ] float 
  4346 ;;  f2              3   17[BANK0 ] float 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  4349 ;;  sign            1   29[BANK0 ] unsigned char 
  4350 ;;  cntr            1   28[BANK0 ] unsigned char 
  4351 ;;  exp             1   24[BANK0 ] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  3   14[BANK0 ] float 
  4354 ;; Registers used:
  4355 ;;		wreg, status,2, status,0, pclath, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4361 ;;      Params:         0       6       0       0       0       0       0       0
  4362 ;;      Locals:         0       6       0       0       0       0       0       0
  4363 ;;      Temps:          0       4       0       0       0       0       0       0
  4364 ;;      Totals:         0      16       0       0       0       0       0       0
  4365 ;;Total ram usage:       16 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    5
  4368 ;; This function calls:
  4369 ;;		___ftpack
  4370 ;; This function is called by:
  4371 ;;		_comparare
  4372 ;;		_main
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function ___ftmul
  4378  03D8                     ___ftmul:	
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4382  03D8  0020               	movlb	0	; select bank0
  4383  03D9  082E               	movf	___ftmul@f1,w
  4384  03DA  00B4               	movwf	??___ftmul
  4385  03DB  082F               	movf	___ftmul@f1+1,w
  4386  03DC  00B5               	movwf	??___ftmul+1
  4387  03DD  0830               	movf	___ftmul@f1+2,w
  4388  03DE  00B6               	movwf	??___ftmul+2
  4389  03DF  1003               	clrc
  4390  03E0  0D35               	rlf	??___ftmul+1,w
  4391  03E1  0D36               	rlf	??___ftmul+2,w
  4392  03E2  00B7               	movwf	??___ftmul+3
  4393  03E3  0837               	movf	??___ftmul+3,w
  4394  03E4  00B8               	movwf	___ftmul@exp
  4395  03E5  0838               	movf	___ftmul@exp,w
  4396  03E6  1D03               	btfss	3,2
  4397  03E7  2BEF               	goto	l2300
  4398  03E8  3000               	movlw	0
  4399  03E9  00AE               	movwf	?___ftmul
  4400  03EA  3000               	movlw	0
  4401  03EB  00AF               	movwf	?___ftmul+1
  4402  03EC  3000               	movlw	0
  4403  03ED  00B0               	movwf	?___ftmul+2
  4404  03EE  0008               	return
  4405  03EF                     l2300:	
  4406  03EF  0831               	movf	___ftmul@f2,w
  4407  03F0  00B4               	movwf	??___ftmul
  4408  03F1  0832               	movf	___ftmul@f2+1,w
  4409  03F2  00B5               	movwf	??___ftmul+1
  4410  03F3  0833               	movf	___ftmul@f2+2,w
  4411  03F4  00B6               	movwf	??___ftmul+2
  4412  03F5  1003               	clrc
  4413  03F6  0D35               	rlf	??___ftmul+1,w
  4414  03F7  0D36               	rlf	??___ftmul+2,w
  4415  03F8  00B7               	movwf	??___ftmul+3
  4416  03F9  0837               	movf	??___ftmul+3,w
  4417  03FA  00BD               	movwf	___ftmul@sign
  4418  03FB  083D               	movf	___ftmul@sign,w
  4419  03FC  1D03               	btfss	3,2
  4420  03FD  2C05               	goto	l2306
  4421  03FE  3000               	movlw	0
  4422  03FF  00AE               	movwf	?___ftmul
  4423  0400  3000               	movlw	0
  4424  0401  00AF               	movwf	?___ftmul+1
  4425  0402  3000               	movlw	0
  4426  0403  00B0               	movwf	?___ftmul+2
  4427  0404  0008               	return
  4428  0405                     l2306:	
  4429  0405  083D               	movf	___ftmul@sign,w
  4430  0406  3E7B               	addlw	123
  4431  0407  00B4               	movwf	??___ftmul
  4432  0408  0834               	movf	??___ftmul,w
  4433  0409  07B8               	addwf	___ftmul@exp,f
  4434  040A  082E               	movf	___ftmul@f1,w
  4435  040B  00B4               	movwf	??___ftmul
  4436  040C  082F               	movf	___ftmul@f1+1,w
  4437  040D  00B5               	movwf	??___ftmul+1
  4438  040E  0830               	movf	___ftmul@f1+2,w
  4439  040F  00B6               	movwf	??___ftmul+2
  4440  0410  3010               	movlw	16
  4441  0411                     u2255:	
  4442  0411  36B6               	lsrf	??___ftmul+2,f
  4443  0412  0CB5               	rrf	??___ftmul+1,f
  4444  0413  0CB4               	rrf	??___ftmul,f
  4445  0414  0B89               	decfsz	9,f
  4446  0415  2C11               	goto	u2255
  4447  0416  0834               	movf	??___ftmul,w
  4448  0417  00B7               	movwf	??___ftmul+3
  4449  0418  0837               	movf	??___ftmul+3,w
  4450  0419  00BD               	movwf	___ftmul@sign
  4451  041A  0831               	movf	___ftmul@f2,w
  4452  041B  00B4               	movwf	??___ftmul
  4453  041C  0832               	movf	___ftmul@f2+1,w
  4454  041D  00B5               	movwf	??___ftmul+1
  4455  041E  0833               	movf	___ftmul@f2+2,w
  4456  041F  00B6               	movwf	??___ftmul+2
  4457  0420  3010               	movlw	16
  4458  0421                     u2265:	
  4459  0421  36B6               	lsrf	??___ftmul+2,f
  4460  0422  0CB5               	rrf	??___ftmul+1,f
  4461  0423  0CB4               	rrf	??___ftmul,f
  4462  0424  0B89               	decfsz	9,f
  4463  0425  2C21               	goto	u2265
  4464  0426  0834               	movf	??___ftmul,w
  4465  0427  00B7               	movwf	??___ftmul+3
  4466  0428  0837               	movf	??___ftmul+3,w
  4467  0429  06BD               	xorwf	___ftmul@sign,f
  4468  042A  3080               	movlw	128
  4469  042B  00B4               	movwf	??___ftmul
  4470  042C  0834               	movf	??___ftmul,w
  4471  042D  05BD               	andwf	___ftmul@sign,f
  4472  042E  17AF               	bsf	___ftmul@f1+1,7
  4473  042F  17B2               	bsf	___ftmul@f2+1,7
  4474  0430  30FF               	movlw	255
  4475  0431  05B1               	andwf	___ftmul@f2,f
  4476  0432  30FF               	movlw	255
  4477  0433  05B2               	andwf	___ftmul@f2+1,f
  4478  0434  3000               	movlw	0
  4479  0435  05B3               	andwf	___ftmul@f2+2,f
  4480  0436  3000               	movlw	0
  4481  0437  00B9               	movwf	___ftmul@f3_as_product
  4482  0438  3000               	movlw	0
  4483  0439  00BA               	movwf	___ftmul@f3_as_product+1
  4484  043A  3000               	movlw	0
  4485  043B  00BB               	movwf	___ftmul@f3_as_product+2
  4486  043C  3007               	movlw	7
  4487  043D  00B4               	movwf	??___ftmul
  4488  043E  0834               	movf	??___ftmul,w
  4489  043F  00BC               	movwf	___ftmul@cntr
  4490  0440                     l2318:	
  4491  0440  1C2E               	btfss	___ftmul@f1,0
  4492  0441  2C48               	goto	l2322
  4493  0442  0831               	movf	___ftmul@f2,w
  4494  0443  07B9               	addwf	___ftmul@f3_as_product,f
  4495  0444  0832               	movf	___ftmul@f2+1,w
  4496  0445  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  4497  0446  0833               	movf	___ftmul@f2+2,w
  4498  0447  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  4499  0448                     l2322:	
  4500  0448  3001               	movlw	1
  4501  0449                     u2285:	
  4502  0449  36B0               	lsrf	___ftmul@f1+2,f
  4503  044A  0CAF               	rrf	___ftmul@f1+1,f
  4504  044B  0CAE               	rrf	___ftmul@f1,f
  4505  044C  0B89               	decfsz	9,f
  4506  044D  2C49               	goto	u2285
  4507  044E  3001               	movlw	1
  4508  044F                     u2295:	
  4509  044F  35B1               	lslf	___ftmul@f2,f
  4510  0450  0DB2               	rlf	___ftmul@f2+1,f
  4511  0451  0DB3               	rlf	___ftmul@f2+2,f
  4512  0452  0B89               	decfsz	9,f
  4513  0453  2C4F               	goto	u2295
  4514  0454  3001               	movlw	1
  4515  0455  02BC               	subwf	___ftmul@cntr,f
  4516  0456  1D03               	btfss	3,2
  4517  0457  2C40               	goto	l2318
  4518  0458  3009               	movlw	9
  4519  0459  00B4               	movwf	??___ftmul
  4520  045A  0834               	movf	??___ftmul,w
  4521  045B  00BC               	movwf	___ftmul@cntr
  4522  045C                     l2330:	
  4523  045C  1C2E               	btfss	___ftmul@f1,0
  4524  045D  2C64               	goto	l2334
  4525  045E  0831               	movf	___ftmul@f2,w
  4526  045F  07B9               	addwf	___ftmul@f3_as_product,f
  4527  0460  0832               	movf	___ftmul@f2+1,w
  4528  0461  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  4529  0462  0833               	movf	___ftmul@f2+2,w
  4530  0463  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  4531  0464                     l2334:	
  4532  0464  3001               	movlw	1
  4533  0465                     u2325:	
  4534  0465  36B0               	lsrf	___ftmul@f1+2,f
  4535  0466  0CAF               	rrf	___ftmul@f1+1,f
  4536  0467  0CAE               	rrf	___ftmul@f1,f
  4537  0468  0B89               	decfsz	9,f
  4538  0469  2C65               	goto	u2325
  4539  046A  3001               	movlw	1
  4540  046B                     u2335:	
  4541  046B  36BB               	lsrf	___ftmul@f3_as_product+2,f
  4542  046C  0CBA               	rrf	___ftmul@f3_as_product+1,f
  4543  046D  0CB9               	rrf	___ftmul@f3_as_product,f
  4544  046E  0B89               	decfsz	9,f
  4545  046F  2C6B               	goto	u2335
  4546  0470  3001               	movlw	1
  4547  0471  02BC               	subwf	___ftmul@cntr,f
  4548  0472  1D03               	btfss	3,2
  4549  0473  2C5C               	goto	l2330
  4550  0474  0839               	movf	___ftmul@f3_as_product,w
  4551  0475  00A0               	movwf	___ftpack@arg
  4552  0476  083A               	movf	___ftmul@f3_as_product+1,w
  4553  0477  00A1               	movwf	___ftpack@arg+1
  4554  0478  083B               	movf	___ftmul@f3_as_product+2,w
  4555  0479  00A2               	movwf	___ftpack@arg+2
  4556  047A  0838               	movf	___ftmul@exp,w
  4557  047B  00B4               	movwf	??___ftmul
  4558  047C  0834               	movf	??___ftmul,w
  4559  047D  00A3               	movwf	___ftpack@exp
  4560  047E  083D               	movf	___ftmul@sign,w
  4561  047F  00B5               	movwf	??___ftmul+1
  4562  0480  0835               	movf	??___ftmul+1,w
  4563  0481  00A4               	movwf	___ftpack@sign
  4564  0482  3186  264E         	fcall	___ftpack
  4565  0484  0020               	movlb	0	; select bank0
  4566  0485  0820               	movf	?___ftpack,w
  4567  0486  00AE               	movwf	?___ftmul
  4568  0487  0821               	movf	?___ftpack+1,w
  4569  0488  00AF               	movwf	?___ftmul+1
  4570  0489  0822               	movf	?___ftpack+2,w
  4571  048A  00B0               	movwf	?___ftmul+2
  4572  048B  0008               	return
  4573  048C                     __end_of___ftmul:	
  4574                           
  4575                           	psect	text13
  4576  0FC4                     __ptext13:	
  4577 ;; *************** function ___ftge *****************
  4578 ;; Defined at:
  4579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;  ff1             3   14[BANK0 ] float 
  4582 ;;  ff2             3   17[BANK0 ] float 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;		None               void
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4594 ;;      Params:         0       6       0       0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0       0       0       0
  4596 ;;      Temps:          0       3       0       0       0       0       0       0
  4597 ;;      Totals:         0       9       0       0       0       0       0       0
  4598 ;;Total ram usage:        9 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    4
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_comparare
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           
  4609                           ;psect for function ___ftge
  4610  0FC4                     ___ftge:	
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4614  0FC4  0020               	movlb	0	; select bank0
  4615  0FC5  1FB0               	btfss	___ftge@ff1+2,7
  4616  0FC6  2FDB               	goto	l2278
  4617  0FC7  092E               	comf	___ftge@ff1,w
  4618  0FC8  00B4               	movwf	??___ftge
  4619  0FC9  092F               	comf	___ftge@ff1+1,w
  4620  0FCA  00B5               	movwf	??___ftge+1
  4621  0FCB  0930               	comf	___ftge@ff1+2,w
  4622  0FCC  00B6               	movwf	??___ftge+2
  4623  0FCD  0AB4               	incf	??___ftge,f
  4624  0FCE  1903               	skipnz
  4625  0FCF  0AB5               	incf	??___ftge+1,f
  4626  0FD0  1903               	skipnz
  4627  0FD1  0AB6               	incf	??___ftge+2,f
  4628  0FD2  3000               	movlw	0
  4629  0FD3  0734               	addwf	??___ftge,w
  4630  0FD4  00AE               	movwf	___ftge@ff1
  4631  0FD5  3000               	movlw	0
  4632  0FD6  3D35               	addwfc	??___ftge+1,w
  4633  0FD7  00AF               	movwf	___ftge@ff1+1
  4634  0FD8  3080               	movlw	128
  4635  0FD9  3D36               	addwfc	??___ftge+2,w
  4636  0FDA  00B0               	movwf	___ftge@ff1+2
  4637  0FDB                     l2278:	
  4638  0FDB  1FB3               	btfss	___ftge@ff2+2,7
  4639  0FDC  2FF1               	goto	l2282
  4640  0FDD  0931               	comf	___ftge@ff2,w
  4641  0FDE  00B4               	movwf	??___ftge
  4642  0FDF  0932               	comf	___ftge@ff2+1,w
  4643  0FE0  00B5               	movwf	??___ftge+1
  4644  0FE1  0933               	comf	___ftge@ff2+2,w
  4645  0FE2  00B6               	movwf	??___ftge+2
  4646  0FE3  0AB4               	incf	??___ftge,f
  4647  0FE4  1903               	skipnz
  4648  0FE5  0AB5               	incf	??___ftge+1,f
  4649  0FE6  1903               	skipnz
  4650  0FE7  0AB6               	incf	??___ftge+2,f
  4651  0FE8  3000               	movlw	0
  4652  0FE9  0734               	addwf	??___ftge,w
  4653  0FEA  00B1               	movwf	___ftge@ff2
  4654  0FEB  3000               	movlw	0
  4655  0FEC  3D35               	addwfc	??___ftge+1,w
  4656  0FED  00B2               	movwf	___ftge@ff2+1
  4657  0FEE  3080               	movlw	128
  4658  0FEF  3D36               	addwfc	??___ftge+2,w
  4659  0FF0  00B3               	movwf	___ftge@ff2+2
  4660  0FF1                     l2282:	
  4661  0FF1  3080               	movlw	128
  4662  0FF2  06B0               	xorwf	___ftge@ff1+2,f
  4663  0FF3  3080               	movlw	128
  4664  0FF4  06B3               	xorwf	___ftge@ff2+2,f
  4665  0FF5  0833               	movf	___ftge@ff2+2,w
  4666  0FF6  0230               	subwf	___ftge@ff1+2,w
  4667  0FF7  1D03               	skipz
  4668  0FF8  0008               	return
  4669  0FF9  0832               	movf	___ftge@ff2+1,w
  4670  0FFA  022F               	subwf	___ftge@ff1+1,w
  4671  0FFB  1D03               	skipz
  4672  0FFC  0008               	return
  4673  0FFD  0831               	movf	___ftge@ff2,w
  4674  0FFE  022E               	subwf	___ftge@ff1,w
  4675  0FFF  0008               	return
  4676  1000                     __end_of___ftge:	
  4677                           
  4678                           	psect	text14
  4679  048C                     __ptext14:	
  4680 ;; *************** function ___ftdiv *****************
  4681 ;; Defined at:
  4682 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  f2              3   30[BANK0 ] float 
  4685 ;;  f1              3   33[BANK0 ] float 
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  f3              3   41[BANK0 ] float 
  4688 ;;  sign            1   45[BANK0 ] unsigned char 
  4689 ;;  exp             1   44[BANK0 ] unsigned char 
  4690 ;;  cntr            1   40[BANK0 ] unsigned char 
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  3   30[BANK0 ] float 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2, status,0, pclath, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4700 ;;      Params:         0       6       0       0       0       0       0       0
  4701 ;;      Locals:         0       6       0       0       0       0       0       0
  4702 ;;      Temps:          0       4       0       0       0       0       0       0
  4703 ;;      Totals:         0      16       0       0       0       0       0       0
  4704 ;;Total ram usage:       16 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    5
  4707 ;; This function calls:
  4708 ;;		___ftpack
  4709 ;; This function is called by:
  4710 ;;		_comparare
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function ___ftdiv
  4717  048C                     ___ftdiv:	
  4718                           
  4719                           ;incstack = 0
  4720                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4721  048C  0020               	movlb	0	; select bank0
  4722  048D  0841               	movf	___ftdiv@f1,w
  4723  048E  00C4               	movwf	??___ftdiv
  4724  048F  0842               	movf	___ftdiv@f1+1,w
  4725  0490  00C5               	movwf	??___ftdiv+1
  4726  0491  0843               	movf	___ftdiv@f1+2,w
  4727  0492  00C6               	movwf	??___ftdiv+2
  4728  0493  1003               	clrc
  4729  0494  0D45               	rlf	??___ftdiv+1,w
  4730  0495  0D46               	rlf	??___ftdiv+2,w
  4731  0496  00C7               	movwf	??___ftdiv+3
  4732  0497  0847               	movf	??___ftdiv+3,w
  4733  0498  00CC               	movwf	___ftdiv@exp
  4734  0499  084C               	movf	___ftdiv@exp,w
  4735  049A  1D03               	btfss	3,2
  4736  049B  2CA3               	goto	l2238
  4737  049C  3000               	movlw	0
  4738  049D  00BE               	movwf	?___ftdiv
  4739  049E  3000               	movlw	0
  4740  049F  00BF               	movwf	?___ftdiv+1
  4741  04A0  3000               	movlw	0
  4742  04A1  00C0               	movwf	?___ftdiv+2
  4743  04A2  0008               	return
  4744  04A3                     l2238:	
  4745  04A3  083E               	movf	___ftdiv@f2,w
  4746  04A4  00C4               	movwf	??___ftdiv
  4747  04A5  083F               	movf	___ftdiv@f2+1,w
  4748  04A6  00C5               	movwf	??___ftdiv+1
  4749  04A7  0840               	movf	___ftdiv@f2+2,w
  4750  04A8  00C6               	movwf	??___ftdiv+2
  4751  04A9  1003               	clrc
  4752  04AA  0D45               	rlf	??___ftdiv+1,w
  4753  04AB  0D46               	rlf	??___ftdiv+2,w
  4754  04AC  00C7               	movwf	??___ftdiv+3
  4755  04AD  0847               	movf	??___ftdiv+3,w
  4756  04AE  00CD               	movwf	___ftdiv@sign
  4757  04AF  084D               	movf	___ftdiv@sign,w
  4758  04B0  1D03               	btfss	3,2
  4759  04B1  2CB9               	goto	l2244
  4760  04B2  3000               	movlw	0
  4761  04B3  00BE               	movwf	?___ftdiv
  4762  04B4  3000               	movlw	0
  4763  04B5  00BF               	movwf	?___ftdiv+1
  4764  04B6  3000               	movlw	0
  4765  04B7  00C0               	movwf	?___ftdiv+2
  4766  04B8  0008               	return
  4767  04B9                     l2244:	
  4768  04B9  3000               	movlw	0
  4769  04BA  00C9               	movwf	___ftdiv@f3
  4770  04BB  3000               	movlw	0
  4771  04BC  00CA               	movwf	___ftdiv@f3+1
  4772  04BD  3000               	movlw	0
  4773  04BE  00CB               	movwf	___ftdiv@f3+2
  4774  04BF  3089               	movlw	137
  4775  04C0  074D               	addwf	___ftdiv@sign,w
  4776  04C1  00C4               	movwf	??___ftdiv
  4777  04C2  0844               	movf	??___ftdiv,w
  4778  04C3  02CC               	subwf	___ftdiv@exp,f
  4779  04C4  0841               	movf	___ftdiv@f1,w
  4780  04C5  00C4               	movwf	??___ftdiv
  4781  04C6  0842               	movf	___ftdiv@f1+1,w
  4782  04C7  00C5               	movwf	??___ftdiv+1
  4783  04C8  0843               	movf	___ftdiv@f1+2,w
  4784  04C9  00C6               	movwf	??___ftdiv+2
  4785  04CA  3010               	movlw	16
  4786  04CB                     u2145:	
  4787  04CB  36C6               	lsrf	??___ftdiv+2,f
  4788  04CC  0CC5               	rrf	??___ftdiv+1,f
  4789  04CD  0CC4               	rrf	??___ftdiv,f
  4790  04CE  0B89               	decfsz	9,f
  4791  04CF  2CCB               	goto	u2145
  4792  04D0  0844               	movf	??___ftdiv,w
  4793  04D1  00C7               	movwf	??___ftdiv+3
  4794  04D2  0847               	movf	??___ftdiv+3,w
  4795  04D3  00CD               	movwf	___ftdiv@sign
  4796  04D4  083E               	movf	___ftdiv@f2,w
  4797  04D5  00C4               	movwf	??___ftdiv
  4798  04D6  083F               	movf	___ftdiv@f2+1,w
  4799  04D7  00C5               	movwf	??___ftdiv+1
  4800  04D8  0840               	movf	___ftdiv@f2+2,w
  4801  04D9  00C6               	movwf	??___ftdiv+2
  4802  04DA  3010               	movlw	16
  4803  04DB                     u2155:	
  4804  04DB  36C6               	lsrf	??___ftdiv+2,f
  4805  04DC  0CC5               	rrf	??___ftdiv+1,f
  4806  04DD  0CC4               	rrf	??___ftdiv,f
  4807  04DE  0B89               	decfsz	9,f
  4808  04DF  2CDB               	goto	u2155
  4809  04E0  0844               	movf	??___ftdiv,w
  4810  04E1  00C7               	movwf	??___ftdiv+3
  4811  04E2  0847               	movf	??___ftdiv+3,w
  4812  04E3  06CD               	xorwf	___ftdiv@sign,f
  4813  04E4  3080               	movlw	128
  4814  04E5  00C4               	movwf	??___ftdiv
  4815  04E6  0844               	movf	??___ftdiv,w
  4816  04E7  05CD               	andwf	___ftdiv@sign,f
  4817  04E8  17C2               	bsf	___ftdiv@f1+1,7
  4818  04E9  30FF               	movlw	255
  4819  04EA  05C1               	andwf	___ftdiv@f1,f
  4820  04EB  30FF               	movlw	255
  4821  04EC  05C2               	andwf	___ftdiv@f1+1,f
  4822  04ED  3000               	movlw	0
  4823  04EE  05C3               	andwf	___ftdiv@f1+2,f
  4824  04EF  17BF               	bsf	___ftdiv@f2+1,7
  4825  04F0  30FF               	movlw	255
  4826  04F1  05BE               	andwf	___ftdiv@f2,f
  4827  04F2  30FF               	movlw	255
  4828  04F3  05BF               	andwf	___ftdiv@f2+1,f
  4829  04F4  3000               	movlw	0
  4830  04F5  05C0               	andwf	___ftdiv@f2+2,f
  4831  04F6  3018               	movlw	24
  4832  04F7  00C4               	movwf	??___ftdiv
  4833  04F8  0844               	movf	??___ftdiv,w
  4834  04F9  00C8               	movwf	___ftdiv@cntr
  4835  04FA                     l2258:	
  4836  04FA  3001               	movlw	1
  4837  04FB                     u2165:	
  4838  04FB  35C9               	lslf	___ftdiv@f3,f
  4839  04FC  0DCA               	rlf	___ftdiv@f3+1,f
  4840  04FD  0DCB               	rlf	___ftdiv@f3+2,f
  4841  04FE  0B89               	decfsz	9,f
  4842  04FF  2CFB               	goto	u2165
  4843  0500  0840               	movf	___ftdiv@f2+2,w
  4844  0501  0243               	subwf	___ftdiv@f1+2,w
  4845  0502  1D03               	skipz
  4846  0503  2D0A               	goto	u2175
  4847  0504  083F               	movf	___ftdiv@f2+1,w
  4848  0505  0242               	subwf	___ftdiv@f1+1,w
  4849  0506  1D03               	skipz
  4850  0507  2D0A               	goto	u2175
  4851  0508  083E               	movf	___ftdiv@f2,w
  4852  0509  0241               	subwf	___ftdiv@f1,w
  4853  050A                     u2175:	
  4854  050A  1C03               	skipc
  4855  050B  2D13               	goto	l2266
  4856  050C  083E               	movf	___ftdiv@f2,w
  4857  050D  02C1               	subwf	___ftdiv@f1,f
  4858  050E  083F               	movf	___ftdiv@f2+1,w
  4859  050F  3BC2               	subwfb	___ftdiv@f1+1,f
  4860  0510  0840               	movf	___ftdiv@f2+2,w
  4861  0511  3BC3               	subwfb	___ftdiv@f1+2,f
  4862  0512  1449               	bsf	___ftdiv@f3,0
  4863  0513                     l2266:	
  4864  0513  3001               	movlw	1
  4865  0514                     u2185:	
  4866  0514  35C1               	lslf	___ftdiv@f1,f
  4867  0515  0DC2               	rlf	___ftdiv@f1+1,f
  4868  0516  0DC3               	rlf	___ftdiv@f1+2,f
  4869  0517  0B89               	decfsz	9,f
  4870  0518  2D14               	goto	u2185
  4871  0519  3001               	movlw	1
  4872  051A  02C8               	subwf	___ftdiv@cntr,f
  4873  051B  1D03               	btfss	3,2
  4874  051C  2CFA               	goto	l2258
  4875  051D  0849               	movf	___ftdiv@f3,w
  4876  051E  00A0               	movwf	___ftpack@arg
  4877  051F  084A               	movf	___ftdiv@f3+1,w
  4878  0520  00A1               	movwf	___ftpack@arg+1
  4879  0521  084B               	movf	___ftdiv@f3+2,w
  4880  0522  00A2               	movwf	___ftpack@arg+2
  4881  0523  084C               	movf	___ftdiv@exp,w
  4882  0524  00C4               	movwf	??___ftdiv
  4883  0525  0844               	movf	??___ftdiv,w
  4884  0526  00A3               	movwf	___ftpack@exp
  4885  0527  084D               	movf	___ftdiv@sign,w
  4886  0528  00C5               	movwf	??___ftdiv+1
  4887  0529  0845               	movf	??___ftdiv+1,w
  4888  052A  00A4               	movwf	___ftpack@sign
  4889  052B  3186  264E         	fcall	___ftpack
  4890  052D  0020               	movlb	0	; select bank0
  4891  052E  0820               	movf	?___ftpack,w
  4892  052F  00BE               	movwf	?___ftdiv
  4893  0530  0821               	movf	?___ftpack+1,w
  4894  0531  00BF               	movwf	?___ftdiv+1
  4895  0532  0822               	movf	?___ftpack+2,w
  4896  0533  00C0               	movwf	?___ftdiv+2
  4897  0534  0008               	return
  4898  0535                     __end_of___ftdiv:	
  4899                           
  4900                           	psect	text15
  4901  0227                     __ptext15:	
  4902 ;; *************** function ___ftadd *****************
  4903 ;; Defined at:
  4904 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  f1              3   33[BANK0 ] float 
  4907 ;;  f2              3   36[BANK0 ] float 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  exp1            1   45[BANK0 ] unsigned char 
  4910 ;;  exp2            1   44[BANK0 ] unsigned char 
  4911 ;;  sign            1   43[BANK0 ] unsigned char 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  3   33[BANK0 ] float 
  4914 ;; Registers used:
  4915 ;;		wreg, status,2, status,0, pclath, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4921 ;;      Params:         0       6       0       0       0       0       0       0
  4922 ;;      Locals:         0       3       0       0       0       0       0       0
  4923 ;;      Temps:          0       4       0       0       0       0       0       0
  4924 ;;      Totals:         0      13       0       0       0       0       0       0
  4925 ;;Total ram usage:       13 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    5
  4928 ;; This function calls:
  4929 ;;		___ftpack
  4930 ;; This function is called by:
  4931 ;;		_comparare
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           
  4936                           ;psect for function ___ftadd
  4937  0227                     ___ftadd:	
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4941  0227  0020               	movlb	0	; select bank0
  4942  0228  0841               	movf	___ftadd@f1,w
  4943  0229  00C7               	movwf	??___ftadd
  4944  022A  0842               	movf	___ftadd@f1+1,w
  4945  022B  00C8               	movwf	??___ftadd+1
  4946  022C  0843               	movf	___ftadd@f1+2,w
  4947  022D  00C9               	movwf	??___ftadd+2
  4948  022E  1003               	clrc
  4949  022F  0D48               	rlf	??___ftadd+1,w
  4950  0230  0D49               	rlf	??___ftadd+2,w
  4951  0231  00CA               	movwf	??___ftadd+3
  4952  0232  084A               	movf	??___ftadd+3,w
  4953  0233  00CD               	movwf	___ftadd@exp1
  4954  0234  0844               	movf	___ftadd@f2,w
  4955  0235  00C7               	movwf	??___ftadd
  4956  0236  0845               	movf	___ftadd@f2+1,w
  4957  0237  00C8               	movwf	??___ftadd+1
  4958  0238  0846               	movf	___ftadd@f2+2,w
  4959  0239  00C9               	movwf	??___ftadd+2
  4960  023A  1003               	clrc
  4961  023B  0D48               	rlf	??___ftadd+1,w
  4962  023C  0D49               	rlf	??___ftadd+2,w
  4963  023D  00CA               	movwf	??___ftadd+3
  4964  023E  084A               	movf	??___ftadd+3,w
  4965  023F  00CC               	movwf	___ftadd@exp2
  4966  0240  084D               	movf	___ftadd@exp1,w
  4967  0241  1903               	btfsc	3,2
  4968  0242  2A4F               	goto	l2168
  4969  0243  084C               	movf	___ftadd@exp2,w
  4970  0244  024D               	subwf	___ftadd@exp1,w
  4971  0245  1803               	skipnc
  4972  0246  2A56               	goto	l2172
  4973  0247  034D               	decf	___ftadd@exp1,w
  4974  0248  3AFF               	xorlw	255
  4975  0249  074C               	addwf	___ftadd@exp2,w
  4976  024A  00C7               	movwf	??___ftadd
  4977  024B  3019               	movlw	25
  4978  024C  0247               	subwf	??___ftadd,w
  4979  024D  1C03               	skipc
  4980  024E  2A56               	goto	l2172
  4981  024F                     l2168:	
  4982  024F  0844               	movf	___ftadd@f2,w
  4983  0250  00C1               	movwf	?___ftadd
  4984  0251  0845               	movf	___ftadd@f2+1,w
  4985  0252  00C2               	movwf	?___ftadd+1
  4986  0253  0846               	movf	___ftadd@f2+2,w
  4987  0254  00C3               	movwf	?___ftadd+2
  4988  0255  0008               	return
  4989  0256                     l2172:	
  4990  0256  084C               	movf	___ftadd@exp2,w
  4991  0257  1903               	btfsc	3,2
  4992  0258  0008               	return
  4993  0259  084D               	movf	___ftadd@exp1,w
  4994  025A  024C               	subwf	___ftadd@exp2,w
  4995  025B  1803               	skipnc
  4996  025C  2A65               	goto	l2178
  4997  025D  034C               	decf	___ftadd@exp2,w
  4998  025E  3AFF               	xorlw	255
  4999  025F  074D               	addwf	___ftadd@exp1,w
  5000  0260  00C7               	movwf	??___ftadd
  5001  0261  3019               	movlw	25
  5002  0262  0247               	subwf	??___ftadd,w
  5003  0263  1803               	btfsc	3,0
  5004  0264  0008               	return
  5005  0265                     l2178:	
  5006  0265  3006               	movlw	6
  5007  0266  00C7               	movwf	??___ftadd
  5008  0267  0847               	movf	??___ftadd,w
  5009  0268  00CB               	movwf	___ftadd@sign
  5010  0269  1BC3               	btfsc	___ftadd@f1+2,7
  5011  026A  17CB               	bsf	___ftadd@sign,7
  5012  026B  1BC6               	btfsc	___ftadd@f2+2,7
  5013  026C  174B               	bsf	___ftadd@sign,6
  5014  026D  17C2               	bsf	___ftadd@f1+1,7
  5015  026E  30FF               	movlw	255
  5016  026F  05C1               	andwf	___ftadd@f1,f
  5017  0270  30FF               	movlw	255
  5018  0271  05C2               	andwf	___ftadd@f1+1,f
  5019  0272  3000               	movlw	0
  5020  0273  05C3               	andwf	___ftadd@f1+2,f
  5021  0274  17C5               	bsf	___ftadd@f2+1,7
  5022  0275  30FF               	movlw	255
  5023  0276  05C4               	andwf	___ftadd@f2,f
  5024  0277  30FF               	movlw	255
  5025  0278  05C5               	andwf	___ftadd@f2+1,f
  5026  0279  3000               	movlw	0
  5027  027A  05C6               	andwf	___ftadd@f2+2,f
  5028  027B  084C               	movf	___ftadd@exp2,w
  5029  027C  024D               	subwf	___ftadd@exp1,w
  5030  027D  1803               	skipnc
  5031  027E  2AA1               	goto	l2200
  5032  027F                     l2190:	
  5033  027F  3001               	movlw	1
  5034  0280                     u1985:	
  5035  0280  35C4               	lslf	___ftadd@f2,f
  5036  0281  0DC5               	rlf	___ftadd@f2+1,f
  5037  0282  0DC6               	rlf	___ftadd@f2+2,f
  5038  0283  0B89               	decfsz	9,f
  5039  0284  2A80               	goto	u1985
  5040  0285  3001               	movlw	1
  5041  0286  02CC               	subwf	___ftadd@exp2,f
  5042  0287  084C               	movf	___ftadd@exp2,w
  5043  0288  064D               	xorwf	___ftadd@exp1,w
  5044  0289  1903               	skipnz
  5045  028A  2A9C               	goto	l2198
  5046  028B  3001               	movlw	1
  5047  028C  02CB               	subwf	___ftadd@sign,f
  5048  028D  084B               	movf	___ftadd@sign,w
  5049  028E  3907               	andlw	7
  5050  028F  1903               	btfsc	3,2
  5051  0290  2A9C               	goto	l2198
  5052  0291  2A7F               	goto	l2190
  5053  0292                     l2196:	
  5054  0292  3001               	movlw	1
  5055  0293                     u2015:	
  5056  0293  36C3               	lsrf	___ftadd@f1+2,f
  5057  0294  0CC2               	rrf	___ftadd@f1+1,f
  5058  0295  0CC1               	rrf	___ftadd@f1,f
  5059  0296  0B89               	decfsz	9,f
  5060  0297  2A93               	goto	u2015
  5061  0298  3001               	movlw	1
  5062  0299  00C7               	movwf	??___ftadd
  5063  029A  0847               	movf	??___ftadd,w
  5064  029B  07CD               	addwf	___ftadd@exp1,f
  5065  029C                     l2198:	
  5066  029C  084D               	movf	___ftadd@exp1,w
  5067  029D  064C               	xorwf	___ftadd@exp2,w
  5068  029E  1903               	btfsc	3,2
  5069  029F  2AC6               	goto	l768
  5070  02A0  2A92               	goto	l2196
  5071  02A1                     l2200:	
  5072  02A1  084D               	movf	___ftadd@exp1,w
  5073  02A2  024C               	subwf	___ftadd@exp2,w
  5074  02A3  1803               	skipnc
  5075  02A4  2AC6               	goto	l768
  5076  02A5                     l2202:	
  5077  02A5  3001               	movlw	1
  5078  02A6                     u2045:	
  5079  02A6  35C1               	lslf	___ftadd@f1,f
  5080  02A7  0DC2               	rlf	___ftadd@f1+1,f
  5081  02A8  0DC3               	rlf	___ftadd@f1+2,f
  5082  02A9  0B89               	decfsz	9,f
  5083  02AA  2AA6               	goto	u2045
  5084  02AB  3001               	movlw	1
  5085  02AC  02CD               	subwf	___ftadd@exp1,f
  5086  02AD  084C               	movf	___ftadd@exp2,w
  5087  02AE  064D               	xorwf	___ftadd@exp1,w
  5088  02AF  1903               	skipnz
  5089  02B0  2AC2               	goto	l2210
  5090  02B1  3001               	movlw	1
  5091  02B2  02CB               	subwf	___ftadd@sign,f
  5092  02B3  084B               	movf	___ftadd@sign,w
  5093  02B4  3907               	andlw	7
  5094  02B5  1903               	btfsc	3,2
  5095  02B6  2AC2               	goto	l2210
  5096  02B7  2AA5               	goto	l2202
  5097  02B8                     l2208:	
  5098  02B8  3001               	movlw	1
  5099  02B9                     u2075:	
  5100  02B9  36C6               	lsrf	___ftadd@f2+2,f
  5101  02BA  0CC5               	rrf	___ftadd@f2+1,f
  5102  02BB  0CC4               	rrf	___ftadd@f2,f
  5103  02BC  0B89               	decfsz	9,f
  5104  02BD  2AB9               	goto	u2075
  5105  02BE  3001               	movlw	1
  5106  02BF  00C7               	movwf	??___ftadd
  5107  02C0  0847               	movf	??___ftadd,w
  5108  02C1  07CC               	addwf	___ftadd@exp2,f
  5109  02C2                     l2210:	
  5110  02C2  084D               	movf	___ftadd@exp1,w
  5111  02C3  064C               	xorwf	___ftadd@exp2,w
  5112  02C4  1D03               	skipz
  5113  02C5  2AB8               	goto	l2208
  5114  02C6                     l768:	
  5115  02C6  1FCB               	btfss	___ftadd@sign,7
  5116  02C7  2AD8               	goto	l2214
  5117  02C8  30FF               	movlw	255
  5118  02C9  06C1               	xorwf	___ftadd@f1,f
  5119  02CA  30FF               	movlw	255
  5120  02CB  06C2               	xorwf	___ftadd@f1+1,f
  5121  02CC  30FF               	movlw	255
  5122  02CD  06C3               	xorwf	___ftadd@f1+2,f
  5123  02CE  3001               	movlw	1
  5124  02CF  07C1               	addwf	___ftadd@f1,f
  5125  02D0  3000               	movlw	0
  5126  02D1  1803               	skipnc
  5127  02D2  3001               	movlw	1
  5128  02D3  07C2               	addwf	___ftadd@f1+1,f
  5129  02D4  3000               	movlw	0
  5130  02D5  1803               	skipnc
  5131  02D6  3001               	movlw	1
  5132  02D7  07C3               	addwf	___ftadd@f1+2,f
  5133  02D8                     l2214:	
  5134  02D8  1F4B               	btfss	___ftadd@sign,6
  5135  02D9  2AEA               	goto	l2218
  5136  02DA  30FF               	movlw	255
  5137  02DB  06C4               	xorwf	___ftadd@f2,f
  5138  02DC  30FF               	movlw	255
  5139  02DD  06C5               	xorwf	___ftadd@f2+1,f
  5140  02DE  30FF               	movlw	255
  5141  02DF  06C6               	xorwf	___ftadd@f2+2,f
  5142  02E0  3001               	movlw	1
  5143  02E1  07C4               	addwf	___ftadd@f2,f
  5144  02E2  3000               	movlw	0
  5145  02E3  1803               	skipnc
  5146  02E4  3001               	movlw	1
  5147  02E5  07C5               	addwf	___ftadd@f2+1,f
  5148  02E6  3000               	movlw	0
  5149  02E7  1803               	skipnc
  5150  02E8  3001               	movlw	1
  5151  02E9  07C6               	addwf	___ftadd@f2+2,f
  5152  02EA                     l2218:	
  5153  02EA  01CB               	clrf	___ftadd@sign
  5154  02EB  0841               	movf	___ftadd@f1,w
  5155  02EC  07C4               	addwf	___ftadd@f2,f
  5156  02ED  0842               	movf	___ftadd@f1+1,w
  5157  02EE  3DC5               	addwfc	___ftadd@f2+1,f
  5158  02EF  0843               	movf	___ftadd@f1+2,w
  5159  02F0  3DC6               	addwfc	___ftadd@f2+2,f
  5160  02F1  1FC6               	btfss	___ftadd@f2+2,7
  5161  02F2  2B05               	goto	l2228
  5162  02F3  30FF               	movlw	255
  5163  02F4  06C4               	xorwf	___ftadd@f2,f
  5164  02F5  30FF               	movlw	255
  5165  02F6  06C5               	xorwf	___ftadd@f2+1,f
  5166  02F7  30FF               	movlw	255
  5167  02F8  06C6               	xorwf	___ftadd@f2+2,f
  5168  02F9  3001               	movlw	1
  5169  02FA  07C4               	addwf	___ftadd@f2,f
  5170  02FB  3000               	movlw	0
  5171  02FC  1803               	skipnc
  5172  02FD  3001               	movlw	1
  5173  02FE  07C5               	addwf	___ftadd@f2+1,f
  5174  02FF  3000               	movlw	0
  5175  0300  1803               	skipnc
  5176  0301  3001               	movlw	1
  5177  0302  07C6               	addwf	___ftadd@f2+2,f
  5178  0303  01CB               	clrf	___ftadd@sign
  5179  0304  0ACB               	incf	___ftadd@sign,f
  5180  0305                     l2228:	
  5181  0305  0844               	movf	___ftadd@f2,w
  5182  0306  00A0               	movwf	___ftpack@arg
  5183  0307  0845               	movf	___ftadd@f2+1,w
  5184  0308  00A1               	movwf	___ftpack@arg+1
  5185  0309  0846               	movf	___ftadd@f2+2,w
  5186  030A  00A2               	movwf	___ftpack@arg+2
  5187  030B  084D               	movf	___ftadd@exp1,w
  5188  030C  00C7               	movwf	??___ftadd
  5189  030D  0847               	movf	??___ftadd,w
  5190  030E  00A3               	movwf	___ftpack@exp
  5191  030F  084B               	movf	___ftadd@sign,w
  5192  0310  00C8               	movwf	??___ftadd+1
  5193  0311  0848               	movf	??___ftadd+1,w
  5194  0312  00A4               	movwf	___ftpack@sign
  5195  0313  3186  264E         	fcall	___ftpack
  5196  0315  0020               	movlb	0	; select bank0
  5197  0316  0820               	movf	?___ftpack,w
  5198  0317  00C1               	movwf	?___ftadd
  5199  0318  0821               	movf	?___ftpack+1,w
  5200  0319  00C2               	movwf	?___ftadd+1
  5201  031A  0822               	movf	?___ftpack+2,w
  5202  031B  00C3               	movwf	?___ftadd+2
  5203  031C  0008               	return
  5204  031D                     __end_of___ftadd:	
  5205                           
  5206                           	psect	text16
  5207  0DC7                     __ptext16:	
  5208 ;; *************** function ___bmul *****************
  5209 ;; Defined at:
  5210 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  multiplier      1    wreg     unsigned char 
  5213 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5216 ;;  product         1    2[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      unsigned char 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5226 ;;      Params:         0       1       0       0       0       0       0       0
  5227 ;;      Locals:         0       2       0       0       0       0       0       0
  5228 ;;      Temps:          0       1       0       0       0       0       0       0
  5229 ;;      Totals:         0       4       0       0       0       0       0       0
  5230 ;;Total ram usage:        4 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    4
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_comparare
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function ___bmul
  5242  0DC7                     ___bmul:	
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5246                           ;___bmul@multiplier stored from wreg
  5247  0DC7  0020               	movlb	0	; select bank0
  5248  0DC8  00A3               	movwf	___bmul@multiplier
  5249  0DC9  01A2               	clrf	___bmul@product
  5250  0DCA                     l2138:	
  5251  0DCA  1C23               	btfss	___bmul@multiplier,0
  5252  0DCB  2DD0               	goto	l2142
  5253  0DCC  0820               	movf	___bmul@multiplicand,w
  5254  0DCD  00A1               	movwf	??___bmul
  5255  0DCE  0821               	movf	??___bmul,w
  5256  0DCF  07A2               	addwf	___bmul@product,f
  5257  0DD0                     l2142:	
  5258  0DD0  1003               	clrc
  5259  0DD1  0DA0               	rlf	___bmul@multiplicand,f
  5260  0DD2  1003               	clrc
  5261  0DD3  0CA3               	rrf	___bmul@multiplier,f
  5262  0DD4  0823               	movf	___bmul@multiplier,w
  5263  0DD5  1D03               	btfss	3,2
  5264  0DD6  2DCA               	goto	l2138
  5265  0DD7  0822               	movf	___bmul@product,w
  5266  0DD8  0008               	return
  5267  0DD9                     __end_of___bmul:	
  5268                           
  5269                           	psect	text17
  5270  0EC5                     __ptext17:	
  5271 ;; *************** function ___awtoft *****************
  5272 ;; Defined at:
  5273 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  c               2    8[BANK0 ] int 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  sign            1   13[BANK0 ] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  3    8[BANK0 ] float 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5287 ;;      Params:         0       3       0       0       0       0       0       0
  5288 ;;      Locals:         0       1       0       0       0       0       0       0
  5289 ;;      Temps:          0       2       0       0       0       0       0       0
  5290 ;;      Totals:         0       6       0       0       0       0       0       0
  5291 ;;Total ram usage:        6 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    5
  5294 ;; This function calls:
  5295 ;;		___ftpack
  5296 ;; This function is called by:
  5297 ;;		_comparare
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           
  5302                           ;psect for function ___awtoft
  5303  0EC5                     ___awtoft:	
  5304                           
  5305                           ;incstack = 0
  5306                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5307  0EC5  0020               	movlb	0	; select bank0
  5308  0EC6  01AD               	clrf	___awtoft@sign
  5309  0EC7  1FA9               	btfss	___awtoft@c+1,7
  5310  0EC8  2ED0               	goto	l2158
  5311  0EC9  09A8               	comf	___awtoft@c,f
  5312  0ECA  09A9               	comf	___awtoft@c+1,f
  5313  0ECB  0AA8               	incf	___awtoft@c,f
  5314  0ECC  1903               	skipnz
  5315  0ECD  0AA9               	incf	___awtoft@c+1,f
  5316  0ECE  01AD               	clrf	___awtoft@sign
  5317  0ECF  0AAD               	incf	___awtoft@sign,f
  5318  0ED0                     l2158:	
  5319  0ED0  0828               	movf	___awtoft@c,w
  5320  0ED1  00A0               	movwf	___ftpack@arg
  5321  0ED2  0829               	movf	___awtoft@c+1,w
  5322  0ED3  00A1               	movwf	___ftpack@arg+1
  5323  0ED4  01A2               	clrf	___ftpack@arg+2
  5324  0ED5  308E               	movlw	142
  5325  0ED6  00AB               	movwf	??___awtoft
  5326  0ED7  082B               	movf	??___awtoft,w
  5327  0ED8  00A3               	movwf	___ftpack@exp
  5328  0ED9  082D               	movf	___awtoft@sign,w
  5329  0EDA  00AC               	movwf	??___awtoft+1
  5330  0EDB  082C               	movf	??___awtoft+1,w
  5331  0EDC  00A4               	movwf	___ftpack@sign
  5332  0EDD  3186  264E         	fcall	___ftpack
  5333  0EDF  0020               	movlb	0	; select bank0
  5334  0EE0  0820               	movf	?___ftpack,w
  5335  0EE1  00A8               	movwf	?___awtoft
  5336  0EE2  0821               	movf	?___ftpack+1,w
  5337  0EE3  00A9               	movwf	?___awtoft+1
  5338  0EE4  0822               	movf	?___ftpack+2,w
  5339  0EE5  00AA               	movwf	?___awtoft+2
  5340  0EE6  0008               	return
  5341  0EE7                     __end_of___awtoft:	
  5342                           
  5343                           	psect	text18
  5344  064E                     __ptext18:	
  5345 ;; *************** function ___ftpack *****************
  5346 ;; Defined at:
  5347 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  arg             3    0[BANK0 ] unsigned um
  5350 ;;  exp             1    3[BANK0 ] unsigned char 
  5351 ;;  sign            1    4[BANK0 ] unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;		None
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  3    0[BANK0 ] float 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5363 ;;      Params:         0       5       0       0       0       0       0       0
  5364 ;;      Locals:         0       0       0       0       0       0       0       0
  5365 ;;      Temps:          0       3       0       0       0       0       0       0
  5366 ;;      Totals:         0       8       0       0       0       0       0       0
  5367 ;;Total ram usage:        8 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    4
  5370 ;; This function calls:
  5371 ;;		Nothing
  5372 ;; This function is called by:
  5373 ;;		___awtoft
  5374 ;;		___ftadd
  5375 ;;		___ftdiv
  5376 ;;		___ftmul
  5377 ;;		___lwtoft
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function ___ftpack
  5383  064E                     ___ftpack:	
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5387  064E  0020               	movlb	0	; select bank0
  5388  064F  0823               	movf	___ftpack@exp,w
  5389  0650  1903               	btfsc	3,2
  5390  0651  2E57               	goto	l1982
  5391  0652  0822               	movf	___ftpack@arg+2,w
  5392  0653  0421               	iorwf	___ftpack@arg+1,w
  5393  0654  0420               	iorwf	___ftpack@arg,w
  5394  0655  1D03               	skipz
  5395  0656  2E68               	goto	l1988
  5396  0657                     l1982:	
  5397  0657  3000               	movlw	0
  5398  0658  00A0               	movwf	?___ftpack
  5399  0659  3000               	movlw	0
  5400  065A  00A1               	movwf	?___ftpack+1
  5401  065B  3000               	movlw	0
  5402  065C  00A2               	movwf	?___ftpack+2
  5403  065D  0008               	return
  5404  065E                     l1986:	
  5405  065E  3001               	movlw	1
  5406  065F  00A5               	movwf	??___ftpack
  5407  0660  0825               	movf	??___ftpack,w
  5408  0661  07A3               	addwf	___ftpack@exp,f
  5409  0662  3001               	movlw	1
  5410  0663                     u1645:	
  5411  0663  36A2               	lsrf	___ftpack@arg+2,f
  5412  0664  0CA1               	rrf	___ftpack@arg+1,f
  5413  0665  0CA0               	rrf	___ftpack@arg,f
  5414  0666  0B89               	decfsz	9,f
  5415  0667  2E63               	goto	u1645
  5416  0668                     l1988:	
  5417  0668  30FE               	movlw	254
  5418  0669  0522               	andwf	___ftpack@arg+2,w
  5419  066A  1903               	btfsc	3,2
  5420  066B  2E81               	goto	l737
  5421  066C  2E5E               	goto	l1986
  5422  066D                     l1990:	
  5423  066D  3001               	movlw	1
  5424  066E  00A5               	movwf	??___ftpack
  5425  066F  0825               	movf	??___ftpack,w
  5426  0670  07A3               	addwf	___ftpack@exp,f
  5427  0671  3001               	movlw	1
  5428  0672  07A0               	addwf	___ftpack@arg,f
  5429  0673  3000               	movlw	0
  5430  0674  1803               	skipnc
  5431  0675  3001               	movlw	1
  5432  0676  07A1               	addwf	___ftpack@arg+1,f
  5433  0677  3000               	movlw	0
  5434  0678  1803               	skipnc
  5435  0679  3001               	movlw	1
  5436  067A  07A2               	addwf	___ftpack@arg+2,f
  5437  067B  3001               	movlw	1
  5438  067C                     u1665:	
  5439  067C  36A2               	lsrf	___ftpack@arg+2,f
  5440  067D  0CA1               	rrf	___ftpack@arg+1,f
  5441  067E  0CA0               	rrf	___ftpack@arg,f
  5442  067F  0B89               	decfsz	9,f
  5443  0680  2E7C               	goto	u1665
  5444  0681                     l737:	
  5445  0681  30FF               	movlw	255
  5446  0682  0522               	andwf	___ftpack@arg+2,w
  5447  0683  1903               	btfsc	3,2
  5448  0684  2E8E               	goto	l1998
  5449  0685  2E6D               	goto	l1990
  5450  0686                     l1996:	
  5451  0686  3001               	movlw	1
  5452  0687  02A3               	subwf	___ftpack@exp,f
  5453  0688  3001               	movlw	1
  5454  0689                     u1685:	
  5455  0689  35A0               	lslf	___ftpack@arg,f
  5456  068A  0DA1               	rlf	___ftpack@arg+1,f
  5457  068B  0DA2               	rlf	___ftpack@arg+2,f
  5458  068C  0B89               	decfsz	9,f
  5459  068D  2E89               	goto	u1685
  5460  068E                     l1998:	
  5461  068E  1BA1               	btfsc	___ftpack@arg+1,7
  5462  068F  2E94               	goto	l744
  5463  0690  3002               	movlw	2
  5464  0691  0223               	subwf	___ftpack@exp,w
  5465  0692  1803               	skipnc
  5466  0693  2E86               	goto	l1996
  5467  0694                     l744:	
  5468  0694  1823               	btfsc	___ftpack@exp,0
  5469  0695  2E9C               	goto	l745
  5470  0696  30FF               	movlw	255
  5471  0697  05A0               	andwf	___ftpack@arg,f
  5472  0698  307F               	movlw	127
  5473  0699  05A1               	andwf	___ftpack@arg+1,f
  5474  069A  30FF               	movlw	255
  5475  069B  05A2               	andwf	___ftpack@arg+2,f
  5476  069C                     l745:	
  5477  069C  1003               	clrc
  5478  069D  0CA3               	rrf	___ftpack@exp,f
  5479  069E  0823               	movf	___ftpack@exp,w
  5480  069F  00A5               	movwf	??___ftpack
  5481  06A0  01A6               	clrf	??___ftpack+1
  5482  06A1  01A7               	clrf	??___ftpack+2
  5483  06A2  3010               	movlw	16
  5484  06A3                     u1725:	
  5485  06A3  35A5               	lslf	??___ftpack,f
  5486  06A4  0DA6               	rlf	??___ftpack+1,f
  5487  06A5  0DA7               	rlf	??___ftpack+2,f
  5488  06A6  0B89               	decfsz	9,f
  5489  06A7  2EA3               	goto	u1725
  5490  06A8  0825               	movf	??___ftpack,w
  5491  06A9  04A0               	iorwf	___ftpack@arg,f
  5492  06AA  0826               	movf	??___ftpack+1,w
  5493  06AB  04A1               	iorwf	___ftpack@arg+1,f
  5494  06AC  0827               	movf	??___ftpack+2,w
  5495  06AD  04A2               	iorwf	___ftpack@arg+2,f
  5496  06AE  0824               	movf	___ftpack@sign,w
  5497  06AF  1903               	btfsc	3,2
  5498  06B0  0008               	return
  5499  06B1  17A2               	bsf	___ftpack@arg+2,7
  5500  06B2  0008               	return
  5501  06B3                     __end_of___ftpack:	
  5502                           
  5503                           	psect	text19
  5504  0DD9                     __ptext19:	
  5505 ;; *************** function _comand_lcd *****************
  5506 ;; Defined at:
  5507 ;;		line 104 in file "main.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      void 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0, pclath, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5521 ;;      Params:         0       0       0       0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    6
  5528 ;; This function calls:
  5529 ;;		_send_command_byte
  5530 ;; This function is called by:
  5531 ;;		_main
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _comand_lcd
  5537  0DD9                     _comand_lcd:	
  5538                           
  5539                           ;main.c: 106: send_command_byte(0b00101000);
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _comand_lcd: [wreg+status,2+status,0+pclath+cstack]
  5543  0DD9  3028               	movlw	40
  5544  0DDA  318E  26A7  318D   	fcall	_send_command_byte
  5545                           
  5546                           ;main.c: 107: send_command_byte(0b00001000);
  5547  0DDD  3008               	movlw	8
  5548  0DDE  318E  26A7  318D   	fcall	_send_command_byte
  5549                           
  5550                           ;main.c: 108: send_command_byte(0b00000001);
  5551  0DE1  3001               	movlw	1
  5552  0DE2  318E  26A7  318D   	fcall	_send_command_byte
  5553                           
  5554                           ;main.c: 109: send_command_byte(0b00000110);
  5555  0DE5  3006               	movlw	6
  5556  0DE6  318E  26A7  318D   	fcall	_send_command_byte
  5557                           
  5558                           ;main.c: 111: send_command_byte(0x0C);
  5559  0DE9  300C               	movlw	12
  5560  0DEA  318E  26A7         	fcall	_send_command_byte
  5561  0DEC  0008               	return
  5562  0DED                     __end_of_comand_lcd:	
  5563                           
  5564                           	psect	text20
  5565  0EA7                     __ptext20:	
  5566 ;; *************** function _send_command_byte *****************
  5567 ;; Defined at:
  5568 ;;		line 134 in file "main.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  byte            1    wreg     unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  byte            1    3[BANK0 ] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5582 ;;      Params:         0       0       0       0       0       0       0       0
  5583 ;;      Locals:         0       1       0       0       0       0       0       0
  5584 ;;      Temps:          0       1       0       0       0       0       0       0
  5585 ;;      Totals:         0       2       0       0       0       0       0       0
  5586 ;;Total ram usage:        2 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    5
  5589 ;; This function calls:
  5590 ;;		_send_nibble
  5591 ;; This function is called by:
  5592 ;;		_comand_lcd
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _send_command_byte
  5598  0EA7                     _send_command_byte:	
  5599                           
  5600                           ;incstack = 0
  5601                           ; Regs used in _send_command_byte: [wreg+status,2+status,0+pclath+cstack]
  5602                           ;send_command_byte@byte stored from wreg
  5603  0EA7  0020               	movlb	0	; select bank0
  5604  0EA8  00A3               	movwf	send_command_byte@byte
  5605                           
  5606                           ;main.c: 136: LATDbits.LATD3 = 0;
  5607  0EA9  0022               	movlb	2	; select bank2
  5608  0EAA  118F               	bcf	15,3	;volatile
  5609                           
  5610                           ;main.c: 137: send_nibble(byte >> 4);
  5611  0EAB  0020               	movlb	0	; select bank0
  5612  0EAC  0823               	movf	send_command_byte@byte,w
  5613  0EAD  00A2               	movwf	??_send_command_byte
  5614  0EAE  3004               	movlw	4
  5615  0EAF                     u1805:	
  5616  0EAF  36A2               	lsrf	??_send_command_byte,f
  5617  0EB0  0B89               	decfsz	9,f
  5618  0EB1  2EAF               	goto	u1805
  5619  0EB2  0822               	movf	??_send_command_byte,w
  5620  0EB3  318F  272F  318E   	fcall	_send_nibble
  5621                           
  5622                           ;main.c: 138: send_nibble(byte & 0x0F);
  5623  0EB6  0020               	movlb	0	; select bank0
  5624  0EB7  0823               	movf	send_command_byte@byte,w
  5625  0EB8  390F               	andlw	15
  5626  0EB9  318F  272F  318E   	fcall	_send_nibble
  5627                           
  5628                           ;main.c: 139: _delay((unsigned long)((1)*(18432000/4000.0)));
  5629  0EBC  3006               	movlw	6
  5630  0EBD  0020               	movlb	0	; select bank0
  5631  0EBE  00A2               	movwf	??_send_command_byte
  5632  0EBF  30FB               	movlw	251
  5633  0EC0                     u3197:	
  5634  0EC0  0B89               	decfsz	9,f
  5635  0EC1  2EC0               	goto	u3197
  5636  0EC2  0BA2               	decfsz	??_send_command_byte,f
  5637  0EC3  2EC0               	goto	u3197
  5638  0EC4  0008               	return
  5639  0EC5                     __end_of_send_command_byte:	
  5640                           
  5641                           	psect	text21
  5642  0F2F                     __ptext21:	
  5643 ;; *************** function _send_nibble *****************
  5644 ;; Defined at:
  5645 ;;		line 114 in file "main.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  nibble          1    wreg     unsigned char 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  nibble          1    1[BANK0 ] unsigned char 
  5650 ;; Return value:  Size  Location     Type
  5651 ;;                  1    wreg      void 
  5652 ;; Registers used:
  5653 ;;		wreg, status,2, status,0
  5654 ;; Tracked objects:
  5655 ;;		On entry : 0/0
  5656 ;;		On exit  : 0/0
  5657 ;;		Unchanged: 0/0
  5658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5659 ;;      Params:         0       0       0       0       0       0       0       0
  5660 ;;      Locals:         0       1       0       0       0       0       0       0
  5661 ;;      Temps:          0       1       0       0       0       0       0       0
  5662 ;;      Totals:         0       2       0       0       0       0       0       0
  5663 ;;Total ram usage:        2 bytes
  5664 ;; Hardware stack levels used:    1
  5665 ;; Hardware stack levels required when called:    4
  5666 ;; This function calls:
  5667 ;;		Nothing
  5668 ;; This function is called by:
  5669 ;;		_init_lcd
  5670 ;;		_send_command_byte
  5671 ;;		_send_data_byte
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           
  5676                           ;psect for function _send_nibble
  5677  0F2F                     _send_nibble:	
  5678                           
  5679                           ;incstack = 0
  5680                           ; Regs used in _send_nibble: [wreg+status,2+status,0]
  5681                           ;send_nibble@nibble stored from wreg
  5682  0F2F  0020               	movlb	0	; select bank0
  5683  0F30  00A1               	movwf	send_nibble@nibble
  5684                           
  5685                           ;main.c: 120: LATB = (LATB & 0xF0)+nibble;
  5686  0F31  0022               	movlb	2	; select bank2
  5687  0F32  080D               	movf	13,w	;volatile
  5688  0F33  39F0               	andlw	240
  5689  0F34  0020               	movlb	0	; select bank0
  5690  0F35  0721               	addwf	send_nibble@nibble,w
  5691  0F36  0022               	movlb	2	; select bank2
  5692  0F37  008D               	movwf	13	;volatile
  5693                           
  5694                           ;main.c: 123: _delay((unsigned long)((1)*(18432000/4000.0)));
  5695  0F38  3006               	movlw	6
  5696  0F39  0020               	movlb	0	; select bank0
  5697  0F3A  00A0               	movwf	??_send_nibble
  5698  0F3B  30FB               	movlw	251
  5699  0F3C                     u3207:	
  5700  0F3C  0B89               	decfsz	9,f
  5701  0F3D  2F3C               	goto	u3207
  5702  0F3E  0BA0               	decfsz	??_send_nibble,f
  5703  0F3F  2F3C               	goto	u3207
  5704                           
  5705                           ;main.c: 125: LATDbits.LATD0 = 0;
  5706  0F40  0022               	movlb	2	; select bank2
  5707  0F41  100F               	bcf	15,0	;volatile
  5708                           
  5709                           ;main.c: 126: _delay((unsigned long)((1)*(18432000/4000.0)));
  5710  0F42  3006               	movlw	6
  5711  0F43  0020               	movlb	0	; select bank0
  5712  0F44  00A0               	movwf	??_send_nibble
  5713  0F45  30FB               	movlw	251
  5714  0F46                     u3217:	
  5715  0F46  0B89               	decfsz	9,f
  5716  0F47  2F46               	goto	u3217
  5717  0F48  0BA0               	decfsz	??_send_nibble,f
  5718  0F49  2F46               	goto	u3217
  5719                           
  5720                           ;main.c: 127: LATDbits.LATD0 = 1;
  5721  0F4A  0022               	movlb	2	; select bank2
  5722  0F4B  140F               	bsf	15,0	;volatile
  5723                           
  5724                           ;main.c: 129: _delay((unsigned long)((2)*(18432000/4000.0)));
  5725  0F4C  300C               	movlw	12
  5726  0F4D  0020               	movlb	0	; select bank0
  5727  0F4E  00A0               	movwf	??_send_nibble
  5728  0F4F  30F7               	movlw	247
  5729  0F50                     u3227:	
  5730  0F50  0B89               	decfsz	9,f
  5731  0F51  2F50               	goto	u3227
  5732  0F52  0BA0               	decfsz	??_send_nibble,f
  5733  0F53  2F50               	goto	u3227
  5734  0F54  0008               	return
  5735  0F55                     __end_of_send_nibble:	
  5736                           
  5737                           	psect	text22
  5738  05C7                     __ptext22:	
  5739 ;; *************** function ___fttol *****************
  5740 ;; Defined at:
  5741 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  f1              3    0[BANK0 ] float 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  lval            4    9[BANK0 ] unsigned long 
  5746 ;;  exp1            1   13[BANK0 ] unsigned char 
  5747 ;;  sign1           1    8[BANK0 ] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  4    0[BANK0 ] long 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5757 ;;      Params:         0       4       0       0       0       0       0       0
  5758 ;;      Locals:         0       6       0       0       0       0       0       0
  5759 ;;      Temps:          0       4       0       0       0       0       0       0
  5760 ;;      Totals:         0      14       0       0       0       0       0       0
  5761 ;;Total ram usage:       14 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    4
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_main
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function ___fttol
  5773  05C7                     ___fttol:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5777  05C7  0020               	movlb	0	; select bank0
  5778  05C8  0820               	movf	___fttol@f1,w
  5779  05C9  00A4               	movwf	??___fttol
  5780  05CA  0821               	movf	___fttol@f1+1,w
  5781  05CB  00A5               	movwf	??___fttol+1
  5782  05CC  0822               	movf	___fttol@f1+2,w
  5783  05CD  00A6               	movwf	??___fttol+2
  5784  05CE  1003               	clrc
  5785  05CF  0D25               	rlf	??___fttol+1,w
  5786  05D0  0D26               	rlf	??___fttol+2,w
  5787  05D1  00A7               	movwf	??___fttol+3
  5788  05D2  0827               	movf	??___fttol+3,w
  5789  05D3  00AD               	movwf	___fttol@exp1
  5790  05D4  082D               	movf	___fttol@exp1,w
  5791  05D5  1D03               	btfss	3,2
  5792  05D6  2DE0               	goto	l2740
  5793  05D7  3000               	movlw	0
  5794  05D8  00A3               	movwf	?___fttol+3
  5795  05D9  3000               	movlw	0
  5796  05DA  00A2               	movwf	?___fttol+2
  5797  05DB  3000               	movlw	0
  5798  05DC  00A1               	movwf	?___fttol+1
  5799  05DD  3000               	movlw	0
  5800  05DE  00A0               	movwf	?___fttol
  5801  05DF  0008               	return
  5802  05E0                     l2740:	
  5803  05E0  0820               	movf	___fttol@f1,w
  5804  05E1  00A4               	movwf	??___fttol
  5805  05E2  0821               	movf	___fttol@f1+1,w
  5806  05E3  00A5               	movwf	??___fttol+1
  5807  05E4  0822               	movf	___fttol@f1+2,w
  5808  05E5  00A6               	movwf	??___fttol+2
  5809  05E6  3017               	movlw	23
  5810  05E7                     u2885:	
  5811  05E7  36A6               	lsrf	??___fttol+2,f
  5812  05E8  0CA5               	rrf	??___fttol+1,f
  5813  05E9  0CA4               	rrf	??___fttol,f
  5814  05EA  0B89               	decfsz	9,f
  5815  05EB  2DE7               	goto	u2885
  5816  05EC  0824               	movf	??___fttol,w
  5817  05ED  00A7               	movwf	??___fttol+3
  5818  05EE  0827               	movf	??___fttol+3,w
  5819  05EF  00A8               	movwf	___fttol@sign1
  5820  05F0  17A1               	bsf	___fttol@f1+1,7
  5821  05F1  30FF               	movlw	255
  5822  05F2  05A0               	andwf	___fttol@f1,f
  5823  05F3  30FF               	movlw	255
  5824  05F4  05A1               	andwf	___fttol@f1+1,f
  5825  05F5  3000               	movlw	0
  5826  05F6  05A2               	andwf	___fttol@f1+2,f
  5827  05F7  0820               	movf	___fttol@f1,w
  5828  05F8  00A9               	movwf	___fttol@lval
  5829  05F9  0821               	movf	___fttol@f1+1,w
  5830  05FA  00AA               	movwf	___fttol@lval+1
  5831  05FB  0822               	movf	___fttol@f1+2,w
  5832  05FC  00AB               	movwf	___fttol@lval+2
  5833  05FD  01AC               	clrf	___fttol@lval+3
  5834  05FE  308E               	movlw	142
  5835  05FF  02AD               	subwf	___fttol@exp1,f
  5836  0600  1FAD               	btfss	___fttol@exp1,7
  5837  0601  2E1E               	goto	l2760
  5838  0602  082D               	movf	___fttol@exp1,w
  5839  0603  3A80               	xorlw	128
  5840  0604  3E8F               	addlw	143
  5841  0605  1803               	skipnc
  5842  0606  2E10               	goto	l2758
  5843  0607  3000               	movlw	0
  5844  0608  00A3               	movwf	?___fttol+3
  5845  0609  3000               	movlw	0
  5846  060A  00A2               	movwf	?___fttol+2
  5847  060B  3000               	movlw	0
  5848  060C  00A1               	movwf	?___fttol+1
  5849  060D  3000               	movlw	0
  5850  060E  00A0               	movwf	?___fttol
  5851  060F  0008               	return
  5852  0610                     l2758:	
  5853  0610  3001               	movlw	1
  5854  0611                     u2915:	
  5855  0611  36AC               	lsrf	___fttol@lval+3,f
  5856  0612  0CAB               	rrf	___fttol@lval+2,f
  5857  0613  0CAA               	rrf	___fttol@lval+1,f
  5858  0614  0CA9               	rrf	___fttol@lval,f
  5859  0615  0B89               	decfsz	9,f
  5860  0616  2E11               	goto	u2915
  5861  0617  3001               	movlw	1
  5862  0618  00A4               	movwf	??___fttol
  5863  0619  0824               	movf	??___fttol,w
  5864  061A  07AD               	addwf	___fttol@exp1,f
  5865  061B  1903               	btfsc	3,2
  5866  061C  2E37               	goto	l2768
  5867  061D  2E10               	goto	l2758
  5868  061E                     l2760:	
  5869  061E  3018               	movlw	24
  5870  061F  022D               	subwf	___fttol@exp1,w
  5871  0620  1C03               	skipc
  5872  0621  2E34               	goto	l828
  5873  0622  3000               	movlw	0
  5874  0623  00A3               	movwf	?___fttol+3
  5875  0624  3000               	movlw	0
  5876  0625  00A2               	movwf	?___fttol+2
  5877  0626  3000               	movlw	0
  5878  0627  00A1               	movwf	?___fttol+1
  5879  0628  3000               	movlw	0
  5880  0629  00A0               	movwf	?___fttol
  5881  062A  0008               	return
  5882  062B                     l2766:	
  5883  062B  3001               	movlw	1
  5884  062C                     u2945:	
  5885  062C  35A9               	lslf	___fttol@lval,f
  5886  062D  0DAA               	rlf	___fttol@lval+1,f
  5887  062E  0DAB               	rlf	___fttol@lval+2,f
  5888  062F  0DAC               	rlf	___fttol@lval+3,f
  5889  0630  0B89               	decfsz	9,f
  5890  0631  2E2C               	goto	u2945
  5891  0632  3001               	movlw	1
  5892  0633  02AD               	subwf	___fttol@exp1,f
  5893  0634                     l828:	
  5894  0634  082D               	movf	___fttol@exp1,w
  5895  0635  1D03               	btfss	3,2
  5896  0636  2E2B               	goto	l2766
  5897  0637                     l2768:	
  5898  0637  0828               	movf	___fttol@sign1,w
  5899  0638  1903               	btfsc	3,2
  5900  0639  2E45               	goto	l2772
  5901  063A  09A9               	comf	___fttol@lval,f
  5902  063B  09AA               	comf	___fttol@lval+1,f
  5903  063C  09AB               	comf	___fttol@lval+2,f
  5904  063D  09AC               	comf	___fttol@lval+3,f
  5905  063E  0AA9               	incf	___fttol@lval,f
  5906  063F  1903               	skipnz
  5907  0640  0AAA               	incf	___fttol@lval+1,f
  5908  0641  1903               	skipnz
  5909  0642  0AAB               	incf	___fttol@lval+2,f
  5910  0643  1903               	skipnz
  5911  0644  0AAC               	incf	___fttol@lval+3,f
  5912  0645                     l2772:	
  5913  0645  082C               	movf	___fttol@lval+3,w
  5914  0646  00A3               	movwf	?___fttol+3
  5915  0647  082B               	movf	___fttol@lval+2,w
  5916  0648  00A2               	movwf	?___fttol+2
  5917  0649  082A               	movf	___fttol@lval+1,w
  5918  064A  00A1               	movwf	?___fttol+1
  5919  064B  0829               	movf	___fttol@lval,w
  5920  064C  00A0               	movwf	?___fttol
  5921  064D  0008               	return
  5922  064E                     __end_of___fttol:	
  5923                           
  5924                           	psect	text23
  5925  0DB5                     __ptext23:	
  5926 ;; *************** function _SYSTEM_Initialize *****************
  5927 ;; Defined at:
  5928 ;;		line 70 in file "mcc_generated_files/mcc.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, pclath, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5942 ;;      Params:         0       0       0       0       0       0       0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0
  5945 ;;      Totals:         0       0       0       0       0       0       0       0
  5946 ;;Total ram usage:        0 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    6
  5949 ;; This function calls:
  5950 ;;		_ADC_Initialize
  5951 ;;		_EUSART_Initialize
  5952 ;;		_OSCILLATOR_Initialize
  5953 ;;		_PIN_MANAGER_Initialize
  5954 ;;		_TMR1_Initialize
  5955 ;;		_WDT_Initialize
  5956 ;; This function is called by:
  5957 ;;		_main
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           
  5962                           ;psect for function _SYSTEM_Initialize
  5963  0DB5                     _SYSTEM_Initialize:	
  5964                           
  5965                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  5966                           
  5967                           ;incstack = 0
  5968                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5969  0DB5  318E  26E7  318D   	fcall	_PIN_MANAGER_Initialize
  5970                           
  5971                           ;mcc.c: 74: OSCILLATOR_Initialize();
  5972  0DB8  318D  2576  318D   	fcall	_OSCILLATOR_Initialize
  5973                           
  5974                           ;mcc.c: 75: WDT_Initialize();
  5975  0DBB  318D  2572  318D   	fcall	_WDT_Initialize
  5976                           
  5977                           ;mcc.c: 76: TMR1_Initialize();
  5978  0DBE  318E  2602  318D   	fcall	_TMR1_Initialize
  5979                           
  5980                           ;mcc.c: 77: ADC_Initialize();
  5981  0DC1  318D  258D  318D   	fcall	_ADC_Initialize
  5982                           
  5983                           ;mcc.c: 78: EUSART_Initialize();
  5984  0DC4  318E  261A         	fcall	_EUSART_Initialize
  5985  0DC6  0008               	return
  5986  0DC7                     __end_of_SYSTEM_Initialize:	
  5987                           
  5988                           	psect	text24
  5989  0D72                     __ptext24:	
  5990 ;; *************** function _WDT_Initialize *****************
  5991 ;; Defined at:
  5992 ;;		line 89 in file "mcc_generated_files/mcc.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6006 ;;      Params:         0       0       0       0       0       0       0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0
  6009 ;;      Totals:         0       0       0       0       0       0       0       0
  6010 ;;Total ram usage:        0 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    4
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_SYSTEM_Initialize
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           
  6021                           ;psect for function _WDT_Initialize
  6022  0D72                     _WDT_Initialize:	
  6023                           
  6024                           ;mcc.c: 92: WDTCON = 0x16;
  6025                           
  6026                           ;incstack = 0
  6027                           ; Regs used in _WDT_Initialize: [wreg]
  6028  0D72  3016               	movlw	22
  6029  0D73  0021               	movlb	1	; select bank1
  6030  0D74  0097               	movwf	23	;volatile
  6031  0D75  0008               	return
  6032  0D76                     __end_of_WDT_Initialize:	
  6033                           
  6034                           	psect	text25
  6035  0E02                     __ptext25:	
  6036 ;; *************** function _TMR1_Initialize *****************
  6037 ;; Defined at:
  6038 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0, pclath, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6052 ;;      Params:         0       0       0       0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0
  6055 ;;      Totals:         0       0       0       0       0       0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    5
  6059 ;; This function calls:
  6060 ;;		_TMR1_SetInterruptHandler
  6061 ;;		_TMR1_StartTimer
  6062 ;; This function is called by:
  6063 ;;		_SYSTEM_Initialize
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           
  6068                           ;psect for function _TMR1_Initialize
  6069  0E02                     _TMR1_Initialize:	
  6070                           
  6071                           ;tmr1.c: 69: T1CON = 0x00;
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6075  0E02  0020               	movlb	0	; select bank0
  6076  0E03  0198               	clrf	24	;volatile
  6077                           
  6078                           ;tmr1.c: 72: T1GCON = 0x00;
  6079  0E04  0199               	clrf	25	;volatile
  6080                           
  6081                           ;tmr1.c: 75: TMR1H = 0xEE;
  6082  0E05  30EE               	movlw	238
  6083  0E06  0097               	movwf	23	;volatile
  6084                           
  6085                           ;tmr1.c: 78: TMR1L = 0x00;
  6086  0E07  0196               	clrf	22	;volatile
  6087                           
  6088                           ;tmr1.c: 81: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6089  0E08  0817               	movf	23,w	;volatile
  6090  0E09  00EE               	movwf	_timer1ReloadVal+1	;volatile
  6091  0E0A  0816               	movf	22,w	;volatile
  6092  0E0B  00ED               	movwf	_timer1ReloadVal	;volatile
  6093                           
  6094                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
  6095  0E0C  1011               	bcf	17,0	;volatile
  6096                           
  6097                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
  6098  0E0D  0021               	movlb	1	; select bank1
  6099  0E0E  1411               	bsf	17,0	;volatile
  6100                           
  6101                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6102  0E0F  3068               	movlw	low _TMR1_DefaultInterruptHandler
  6103  0E10  0020               	movlb	0	; select bank0
  6104  0E11  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6105  0E12  300D               	movlw	high _TMR1_DefaultInterruptHandler
  6106  0E13  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6107  0E14  318D  2596  318E   	fcall	_TMR1_SetInterruptHandler
  6108                           
  6109                           ;tmr1.c: 93: TMR1_StartTimer();
  6110  0E17  318D  256F         	fcall	_TMR1_StartTimer
  6111  0E19  0008               	return
  6112  0E1A                     __end_of_TMR1_Initialize:	
  6113                           
  6114                           	psect	text26
  6115  0D6F                     __ptext26:	
  6116 ;; *************** function _TMR1_StartTimer *****************
  6117 ;; Defined at:
  6118 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		None
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6132 ;;      Params:         0       0       0       0       0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    4
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		_TMR1_Initialize
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _TMR1_StartTimer
  6148  0D6F                     _TMR1_StartTimer:	
  6149                           
  6150                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _TMR1_StartTimer: []
  6154  0D6F  0020               	movlb	0	; select bank0
  6155  0D70  1418               	bsf	24,0	;volatile
  6156  0D71  0008               	return
  6157  0D72                     __end_of_TMR1_StartTimer:	
  6158                           
  6159                           	psect	text27
  6160  0D96                     __ptext27:	
  6161 ;; *************** function _TMR1_SetInterruptHandler *****************
  6162 ;; Defined at:
  6163 ;;		line 217 in file "mcc_generated_files/tmr1.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6166 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		wreg
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6178 ;;      Params:         0       2       0       0       0       0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0
  6181 ;;      Totals:         0       2       0       0       0       0       0       0
  6182 ;;Total ram usage:        2 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    4
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_TMR1_Initialize
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           
  6193                           ;psect for function _TMR1_SetInterruptHandler
  6194  0D96                     _TMR1_SetInterruptHandler:	
  6195                           
  6196                           ;tmr1.c: 218: TMR1_InterruptHandler = InterruptHandler;
  6197                           
  6198                           ;incstack = 0
  6199                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6200  0D96  0020               	movlb	0	; select bank0
  6201  0D97  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6202  0D98  0022               	movlb	2	; select bank2
  6203  0D99  00EB               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  6204  0D9A  0020               	movlb	0	; select bank0
  6205  0D9B  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6206  0D9C  0022               	movlb	2	; select bank2
  6207  0D9D  00EA               	movwf	_TMR1_InterruptHandler^(0+256)
  6208  0D9E  0008               	return
  6209  0D9F                     __end_of_TMR1_SetInterruptHandler:	
  6210                           
  6211                           	psect	text28
  6212  0EE7                     __ptext28:	
  6213 ;; *************** function _PIN_MANAGER_Initialize *****************
  6214 ;; Defined at:
  6215 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;		None
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;		None
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg, status,2
  6224 ;; Tracked objects:
  6225 ;;		On entry : 0/0
  6226 ;;		On exit  : 0/0
  6227 ;;		Unchanged: 0/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6229 ;;      Params:         0       0       0       0       0       0       0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0
  6231 ;;      Temps:          0       0       0       0       0       0       0       0
  6232 ;;      Totals:         0       0       0       0       0       0       0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used:    1
  6235 ;; Hardware stack levels required when called:    4
  6236 ;; This function calls:
  6237 ;;		Nothing
  6238 ;; This function is called by:
  6239 ;;		_SYSTEM_Initialize
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           
  6244                           ;psect for function _PIN_MANAGER_Initialize
  6245  0EE7                     _PIN_MANAGER_Initialize:	
  6246                           
  6247                           ;pin_manager.c: 57: LATE = 0x00;
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6251  0EE7  0022               	movlb	2	; select bank2
  6252  0EE8  0190               	clrf	16	;volatile
  6253                           
  6254                           ;pin_manager.c: 58: LATD = 0x00;
  6255  0EE9  018F               	clrf	15	;volatile
  6256                           
  6257                           ;pin_manager.c: 59: LATA = 0x00;
  6258  0EEA  018C               	clrf	12	;volatile
  6259                           
  6260                           ;pin_manager.c: 60: LATB = 0x00;
  6261  0EEB  018D               	clrf	13	;volatile
  6262                           
  6263                           ;pin_manager.c: 61: LATC = 0x00;
  6264  0EEC  018E               	clrf	14	;volatile
  6265                           
  6266                           ;pin_manager.c: 66: TRISE = 0x0F;
  6267  0EED  300F               	movlw	15
  6268  0EEE  0021               	movlb	1	; select bank1
  6269  0EEF  0090               	movwf	16	;volatile
  6270                           
  6271                           ;pin_manager.c: 67: TRISA = 0xFF;
  6272  0EF0  30FF               	movlw	255
  6273  0EF1  008C               	movwf	12	;volatile
  6274                           
  6275                           ;pin_manager.c: 68: TRISB = 0x00;
  6276  0EF2  018D               	clrf	13	;volatile
  6277                           
  6278                           ;pin_manager.c: 69: TRISC = 0xBF;
  6279  0EF3  30BF               	movlw	191
  6280  0EF4  008E               	movwf	14	;volatile
  6281                           
  6282                           ;pin_manager.c: 70: TRISD = 0xFF;
  6283  0EF5  30FF               	movlw	255
  6284  0EF6  008F               	movwf	15	;volatile
  6285                           
  6286                           ;pin_manager.c: 75: ANSELB = 0x0F;
  6287  0EF7  300F               	movlw	15
  6288  0EF8  0023               	movlb	3	; select bank3
  6289  0EF9  008D               	movwf	13	;volatile
  6290                           
  6291                           ;pin_manager.c: 76: ANSELD = 0xFF;
  6292  0EFA  30FF               	movlw	255
  6293  0EFB  008F               	movwf	15	;volatile
  6294                           
  6295                           ;pin_manager.c: 77: ANSELE = 0x07;
  6296  0EFC  3007               	movlw	7
  6297  0EFD  0090               	movwf	16	;volatile
  6298                           
  6299                           ;pin_manager.c: 78: ANSELA = 0x3F;
  6300  0EFE  303F               	movlw	63
  6301  0EFF  008C               	movwf	12	;volatile
  6302                           
  6303                           ;pin_manager.c: 83: WPUE = 0x08;
  6304  0F00  3008               	movlw	8
  6305  0F01  0024               	movlb	4	; select bank4
  6306  0F02  0090               	movwf	16	;volatile
  6307                           
  6308                           ;pin_manager.c: 84: WPUB = 0xFF;
  6309  0F03  30FF               	movlw	255
  6310  0F04  008D               	movwf	13	;volatile
  6311                           
  6312                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
  6313  0F05  0021               	movlb	1	; select bank1
  6314  0F06  1395               	bcf	21,7	;volatile
  6315                           
  6316                           ;pin_manager.c: 91: APFCON = 0x00;
  6317  0F07  0022               	movlb	2	; select bank2
  6318  0F08  019D               	clrf	29	;volatile
  6319  0F09  0008               	return
  6320  0F0A                     __end_of_PIN_MANAGER_Initialize:	
  6321                           
  6322                           	psect	text29
  6323  0D76                     __ptext29:	
  6324 ;; *************** function _OSCILLATOR_Initialize *****************
  6325 ;; Defined at:
  6326 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6340 ;;      Params:         0       0       0       0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    4
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_SYSTEM_Initialize
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           
  6355                           ;psect for function _OSCILLATOR_Initialize
  6356  0D76                     _OSCILLATOR_Initialize:	
  6357                           
  6358                           ;mcc.c: 84: OSCCON = 0x38;
  6359                           
  6360                           ;incstack = 0
  6361                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6362  0D76  3038               	movlw	56
  6363  0D77  0021               	movlb	1	; select bank1
  6364  0D78  0099               	movwf	25	;volatile
  6365                           
  6366                           ;mcc.c: 86: OSCTUNE = 0x00;
  6367  0D79  0198               	clrf	24	;volatile
  6368  0D7A  0008               	return
  6369  0D7B                     __end_of_OSCILLATOR_Initialize:	
  6370                           
  6371                           	psect	text30
  6372  0E1A                     __ptext30:	
  6373 ;; *************** function _EUSART_Initialize *****************
  6374 ;; Defined at:
  6375 ;;		line 76 in file "mcc_generated_files/eusart.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      void 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6389 ;;      Params:         0       0       0       0       0       0       0       0
  6390 ;;      Locals:         0       0       0       0       0       0       0       0
  6391 ;;      Temps:          0       1       0       0       0       0       0       0
  6392 ;;      Totals:         0       1       0       0       0       0       0       0
  6393 ;;Total ram usage:        1 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    4
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_SYSTEM_Initialize
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           
  6404                           ;psect for function _EUSART_Initialize
  6405  0E1A                     _EUSART_Initialize:	
  6406                           
  6407                           ;eusart.c: 79: PIE1bits.RCIE = 0;
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6411  0E1A  0021               	movlb	1	; select bank1
  6412  0E1B  1291               	bcf	17,5	;volatile
  6413                           
  6414                           ;eusart.c: 80: PIE1bits.TXIE = 0;
  6415  0E1C  1211               	bcf	17,4	;volatile
  6416                           
  6417                           ;eusart.c: 85: BAUDCON = 0x08;
  6418  0E1D  3008               	movlw	8
  6419  0E1E  0023               	movlb	3	; select bank3
  6420  0E1F  009F               	movwf	31	;volatile
  6421                           
  6422                           ;eusart.c: 88: RCSTA = 0x90;
  6423  0E20  3090               	movlw	144
  6424  0E21  009D               	movwf	29	;volatile
  6425                           
  6426                           ;eusart.c: 91: TXSTA = 0x24;
  6427  0E22  3024               	movlw	36
  6428  0E23  009E               	movwf	30	;volatile
  6429                           
  6430                           ;eusart.c: 94: SPBRGL = 0xDF;
  6431  0E24  30DF               	movlw	223
  6432  0E25  009B               	movwf	27	;volatile
  6433                           
  6434                           ;eusart.c: 97: SPBRGH = 0x01;
  6435  0E26  3001               	movlw	1
  6436  0E27  009C               	movwf	28	;volatile
  6437                           
  6438                           ;eusart.c: 101: eusartTxHead = 0;
  6439  0E28  01FD               	clrf	_eusartTxHead	;volatile
  6440                           
  6441                           ;eusart.c: 102: eusartTxTail = 0;
  6442  0E29  01FC               	clrf	_eusartTxTail	;volatile
  6443                           
  6444                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  6445  0E2A  3008               	movlw	8
  6446  0E2B  0020               	movlb	0	; select bank0
  6447  0E2C  00A0               	movwf	??_EUSART_Initialize
  6448  0E2D  0820               	movf	??_EUSART_Initialize,w
  6449  0E2E  00EF               	movwf	_eusartTxBufferRemaining	;volatile
  6450                           
  6451                           ;eusart.c: 105: eusartRxHead = 0;
  6452  0E2F  01EC               	clrf	_eusartRxHead	;volatile
  6453                           
  6454                           ;eusart.c: 106: eusartRxTail = 0;
  6455  0E30  01EB               	clrf	_eusartRxTail	;volatile
  6456                           
  6457                           ;eusart.c: 107: eusartRxCount = 0;
  6458  0E31  01EA               	clrf	_eusartRxCount	;volatile
  6459                           
  6460                           ;eusart.c: 110: PIE1bits.RCIE = 1;
  6461  0E32  0021               	movlb	1	; select bank1
  6462  0E33  1691               	bsf	17,5	;volatile
  6463  0E34  0008               	return
  6464  0E35                     __end_of_EUSART_Initialize:	
  6465                           
  6466                           	psect	text31
  6467  0D8D                     __ptext31:	
  6468 ;; *************** function _ADC_Initialize *****************
  6469 ;; Defined at:
  6470 ;;		line 64 in file "mcc_generated_files/adc.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6484 ;;      Params:         0       0       0       0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    4
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_SYSTEM_Initialize
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _ADC_Initialize
  6500  0D8D                     _ADC_Initialize:	
  6501                           
  6502                           ;adc.c: 69: ADCON0 = 0x01;
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  6506  0D8D  3001               	movlw	1
  6507  0D8E  0021               	movlb	1	; select bank1
  6508  0D8F  009D               	movwf	29	;volatile
  6509                           
  6510                           ;adc.c: 72: ADCON1 = 0x60;
  6511  0D90  3060               	movlw	96
  6512  0D91  009E               	movwf	30	;volatile
  6513                           
  6514                           ;adc.c: 75: ADRESL = 0x00;
  6515  0D92  019B               	clrf	27	;volatile
  6516                           
  6517                           ;adc.c: 78: ADRESH = 0x00;
  6518  0D93  019C               	clrf	28	;volatile
  6519                           
  6520                           ;adc.c: 81: PIE1bits.ADIE = 1;
  6521  0D94  1711               	bsf	17,6	;volatile
  6522  0D95  0008               	return
  6523  0D96                     __end_of_ADC_Initialize:	
  6524                           
  6525                           	psect	text32
  6526  0D6C                     __ptext32:	
  6527 ;; *************** function _ADC_StartConversion *****************
  6528 ;; Defined at:
  6529 ;;		line 92 in file "mcc_generated_files/adc.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;		None
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      void 
  6536 ;; Registers used:
  6537 ;;		None
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6543 ;;      Params:         0       0       0       0       0       0       0       0
  6544 ;;      Locals:         0       0       0       0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0       0
  6546 ;;      Totals:         0       0       0       0       0       0       0       0
  6547 ;;Total ram usage:        0 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    4
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_main
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           
  6558                           ;psect for function _ADC_StartConversion
  6559  0D6C                     _ADC_StartConversion:	
  6560                           
  6561                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  6562                           
  6563                           ;incstack = 0
  6564                           ; Regs used in _ADC_StartConversion: []
  6565  0D6C  0021               	movlb	1	; select bank1
  6566  0D6D  149D               	bsf	29,1	;volatile
  6567  0D6E  0008               	return
  6568  0D6F                     __end_of_ADC_StartConversion:	
  6569                           
  6570                           	psect	intentry
  6571  0004                     __pintentry:	
  6572 ;; *************** function _INTERRUPT_InterruptManager *****************
  6573 ;; Defined at:
  6574 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;		None
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;		None
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      void 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6588 ;;      Params:         0       0       0       0       0       0       0       0
  6589 ;;      Locals:         0       0       0       0       0       0       0       0
  6590 ;;      Temps:          1       0       0       0       0       0       0       0
  6591 ;;      Totals:         1       0       0       0       0       0       0       0
  6592 ;;Total ram usage:        1 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    3
  6595 ;; This function calls:
  6596 ;;		_ADC_ISR
  6597 ;;		_EUSART_Receive_ISR
  6598 ;;		_EUSART_Transmit_ISR
  6599 ;;		_TMR1_ISR
  6600 ;; This function is called by:
  6601 ;;		Interrupt level 1
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605  0004                     _INTERRUPT_InterruptManager:	
  6606                           
  6607                           ;incstack = 0
  6608  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6609                           
  6610                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6611  0005  3180               	pagesel	$
  6612  0006  0020               	movlb	0	; select bank0
  6613  0007  087F               	movf	127,w
  6614  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  6615                           
  6616                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  6617  0009  1F0B               	btfss	11,6	;volatile
  6618  000A  2815               	goto	i1l181
  6619  000B  0021               	movlb	1	; select bank1
  6620  000C  1F11               	btfss	17,6	;volatile
  6621  000D  2815               	goto	i1l181
  6622  000E  0020               	movlb	0	; select bank0
  6623  000F  1F11               	btfss	17,6	;volatile
  6624  0010  2815               	goto	i1l181
  6625                           
  6626                           ;interrupt_manager.c: 55: {
  6627                           ;interrupt_manager.c: 56: ADC_ISR();
  6628  0011  318D  25A8  3180   	fcall	_ADC_ISR
  6629                           
  6630                           ;interrupt_manager.c: 57: }
  6631  0014  2837               	goto	i1l189
  6632  0015                     i1l181:	
  6633                           
  6634                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  6635  0015  1F0B               	btfss	11,6	;volatile
  6636  0016  2821               	goto	i1l183
  6637  0017  0021               	movlb	1	; select bank1
  6638  0018  1E11               	btfss	17,4	;volatile
  6639  0019  2821               	goto	i1l183
  6640  001A  0020               	movlb	0	; select bank0
  6641  001B  1E11               	btfss	17,4	;volatile
  6642  001C  2821               	goto	i1l183
  6643                           
  6644                           ;interrupt_manager.c: 59: {
  6645                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  6646  001D  318E  2689  3180   	fcall	_EUSART_Transmit_ISR
  6647                           
  6648                           ;interrupt_manager.c: 61: }
  6649  0020  2837               	goto	i1l189
  6650  0021                     i1l183:	
  6651                           
  6652                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  6653  0021  1F0B               	btfss	11,6	;volatile
  6654  0022  282D               	goto	i1l185
  6655  0023  0021               	movlb	1	; select bank1
  6656  0024  1E91               	btfss	17,5	;volatile
  6657  0025  282D               	goto	i1l185
  6658  0026  0020               	movlb	0	; select bank0
  6659  0027  1E91               	btfss	17,5	;volatile
  6660  0028  282D               	goto	i1l185
  6661                           
  6662                           ;interrupt_manager.c: 63: {
  6663                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  6664  0029  3187  2757  3180   	fcall	_EUSART_Receive_ISR
  6665                           
  6666                           ;interrupt_manager.c: 65: }
  6667  002C  2837               	goto	i1l189
  6668  002D                     i1l185:	
  6669                           
  6670                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  6671  002D  1F0B               	btfss	11,6	;volatile
  6672  002E  2837               	goto	i1l189
  6673  002F  0021               	movlb	1	; select bank1
  6674  0030  1C11               	btfss	17,0	;volatile
  6675  0031  2837               	goto	i1l189
  6676  0032  0020               	movlb	0	; select bank0
  6677  0033  1C11               	btfss	17,0	;volatile
  6678  0034  2837               	goto	i1l189
  6679                           
  6680                           ;interrupt_manager.c: 67: {
  6681                           ;interrupt_manager.c: 68: TMR1_ISR();
  6682  0035  318E  2651         	fcall	_TMR1_ISR
  6683  0037                     i1l189:	
  6684                           ;interrupt_manager.c: 70: else
  6685                           ;interrupt_manager.c: 71: {
  6686                           
  6687                           ;interrupt_manager.c: 69: }
  6688                           
  6689  0037  0879               	movf	??_INTERRUPT_InterruptManager,w
  6690  0038  0020               	movlb	0	; select bank0
  6691  0039  00FF               	movwf	127
  6692  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6693  003B  0009               	retfie
  6694  003C                     __end_of_INTERRUPT_InterruptManager:	
  6695                           
  6696                           	psect	text34
  6697  0E51                     __ptext34:	
  6698 ;; *************** function _TMR1_ISR *****************
  6699 ;; Defined at:
  6700 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0, pclath, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6714 ;;      Params:         0       0       0       0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0
  6717 ;;      Totals:         0       0       0       0       0       0       0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    2
  6721 ;; This function calls:
  6722 ;;		_TMR1_CallBack
  6723 ;; This function is called by:
  6724 ;;		_INTERRUPT_InterruptManager
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           
  6729                           ;psect for function _TMR1_ISR
  6730  0E51                     _TMR1_ISR:	
  6731                           
  6732                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
  6733                           ;tmr1.c: 166: PIR1bits.TMR1IF = 0;
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  6737  0E51  0020               	movlb	0	; select bank0
  6738  0E52  1011               	bcf	17,0	;volatile
  6739                           
  6740                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  6741  0E53  086E               	movf	_timer1ReloadVal+1,w	;volatile
  6742  0E54  0097               	movwf	23	;volatile
  6743                           
  6744                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
  6745  0E55  086D               	movf	_timer1ReloadVal,w	;volatile
  6746  0E56  0096               	movwf	22	;volatile
  6747                           
  6748                           ;tmr1.c: 170: flag_1_ms=1;
  6749  0E57  3001               	movlw	1
  6750  0E58  0022               	movlb	2	; select bank2
  6751  0E59  00DE               	movwf	_flag_1_ms^(0+256)
  6752  0E5A  3000               	movlw	0
  6753  0E5B  00DF               	movwf	(_flag_1_ms^(0+256)+1)
  6754                           
  6755                           ;tmr1.c: 172: if (++CountCallBack >= 10)
  6756  0E5C  3001               	movlw	1
  6757  0E5D  07CA               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
  6758  0E5E  3000               	movlw	0
  6759  0E5F  3DCB               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
  6760  0E60  3000               	movlw	0
  6761  0E61  024B               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
  6762  0E62  300A               	movlw	10
  6763  0E63  1903               	skipnz
  6764  0E64  024A               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
  6765  0E65  1C03               	skipc
  6766  0E66  0008               	return
  6767                           
  6768                           ;tmr1.c: 173: {
  6769                           ;tmr1.c: 175: TMR1_CallBack();
  6770  0E67  3187  270A         	fcall	_TMR1_CallBack
  6771                           
  6772                           ;tmr1.c: 178: CountCallBack = 0;
  6773  0E69  0022               	movlb	2	; select bank2
  6774  0E6A  01CA               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
  6775  0E6B  01CB               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
  6776  0E6C  0008               	return
  6777  0E6D                     __end_of_TMR1_ISR:	
  6778                           
  6779                           	psect	text35
  6780  070A                     __ptext35:	
  6781 ;; *************** function _TMR1_CallBack *****************
  6782 ;; Defined at:
  6783 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6797 ;;      Params:         0       0       0       0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0       0       0       0
  6800 ;;      Totals:         0       0       0       0       0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    1
  6804 ;; This function calls:
  6805 ;;		Absolute function
  6806 ;;		_TMR1_DefaultInterruptHandler
  6807 ;; This function is called by:
  6808 ;;		_TMR1_ISR
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _TMR1_CallBack
  6814  070A                     _TMR1_CallBack:	
  6815                           
  6816                           ;tmr1.c: 184: flag_10_ms=1;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  6820  070A  3001               	movlw	1
  6821  070B  0022               	movlb	2	; select bank2
  6822  070C  00DC               	movwf	_flag_10_ms^(0+256)
  6823  070D  3000               	movlw	0
  6824  070E  00DD               	movwf	(_flag_10_ms^(0+256)+1)
  6825                           
  6826                           ;tmr1.c: 185: count_100_ms++;
  6827  070F  3001               	movlw	1
  6828  0710  07D2               	addwf	_count_100_ms^(0+256),f
  6829  0711  3000               	movlw	0
  6830  0712  3DD3               	addwfc	(_count_100_ms+1)^(0+256),f
  6831                           
  6832                           ;tmr1.c: 186: count_500_ms++;
  6833  0713  3001               	movlw	1
  6834  0714  07D0               	addwf	_count_500_ms^(0+256),f
  6835  0715  3000               	movlw	0
  6836  0716  3DD1               	addwfc	(_count_500_ms+1)^(0+256),f
  6837                           
  6838                           ;tmr1.c: 187: count_1000_ms++;
  6839  0717  3001               	movlw	1
  6840  0718  07CE               	addwf	_count_1000_ms^(0+256),f
  6841  0719  3000               	movlw	0
  6842  071A  3DCF               	addwfc	(_count_1000_ms+1)^(0+256),f
  6843                           
  6844                           ;tmr1.c: 188: count_4000_ms++;
  6845  071B  3001               	movlw	1
  6846  071C  07CC               	addwf	_count_4000_ms^(0+256),f
  6847  071D  3000               	movlw	0
  6848  071E  3DCD               	addwfc	(_count_4000_ms+1)^(0+256),f
  6849                           
  6850                           ;tmr1.c: 190: if (count_100_ms==10)
  6851  071F  300A               	movlw	10
  6852  0720  0652               	xorwf	_count_100_ms^(0+256),w
  6853  0721  0453               	iorwf	(_count_100_ms+1)^(0+256),w
  6854  0722  1D03               	btfss	3,2
  6855  0723  2F2A               	goto	i1l2084
  6856                           
  6857                           ;tmr1.c: 191: {
  6858                           ;tmr1.c: 192: flag_100_ms=1;
  6859  0724  3001               	movlw	1
  6860  0725  00DA               	movwf	_flag_100_ms^(0+256)
  6861  0726  3000               	movlw	0
  6862  0727  00DB               	movwf	(_flag_100_ms^(0+256)+1)
  6863                           
  6864                           ;tmr1.c: 193: count_100_ms=0;
  6865  0728  01D2               	clrf	_count_100_ms^(0+256)
  6866  0729  01D3               	clrf	(_count_100_ms+1)^(0+256)
  6867  072A                     i1l2084:	
  6868                           
  6869                           ;tmr1.c: 194: }
  6870                           ;tmr1.c: 195: if(count_500_ms==50)
  6871  072A  3032               	movlw	50
  6872  072B  0650               	xorwf	_count_500_ms^(0+256),w
  6873  072C  0451               	iorwf	(_count_500_ms+1)^(0+256),w
  6874  072D  1D03               	btfss	3,2
  6875  072E  2F35               	goto	i1l2090
  6876                           
  6877                           ;tmr1.c: 196: {
  6878                           ;tmr1.c: 197: flag_500_ms=1;
  6879  072F  3001               	movlw	1
  6880  0730  00D8               	movwf	_flag_500_ms^(0+256)
  6881  0731  3000               	movlw	0
  6882  0732  00D9               	movwf	(_flag_500_ms^(0+256)+1)
  6883                           
  6884                           ;tmr1.c: 198: count_500_ms=0;
  6885  0733  01D0               	clrf	_count_500_ms^(0+256)
  6886  0734  01D1               	clrf	(_count_500_ms+1)^(0+256)
  6887  0735                     i1l2090:	
  6888                           
  6889                           ;tmr1.c: 199: }
  6890                           ;tmr1.c: 200: if (count_1000_ms==100)
  6891  0735  3064               	movlw	100
  6892  0736  064E               	xorwf	_count_1000_ms^(0+256),w
  6893  0737  044F               	iorwf	(_count_1000_ms+1)^(0+256),w
  6894  0738  1D03               	btfss	3,2
  6895  0739  2F40               	goto	i1l2096
  6896                           
  6897                           ;tmr1.c: 201: {
  6898                           ;tmr1.c: 202: flag_1000_ms=1;
  6899  073A  3001               	movlw	1
  6900  073B  00D6               	movwf	_flag_1000_ms^(0+256)
  6901  073C  3000               	movlw	0
  6902  073D  00D7               	movwf	(_flag_1000_ms^(0+256)+1)
  6903                           
  6904                           ;tmr1.c: 203: count_1000_ms=0;
  6905  073E  01CE               	clrf	_count_1000_ms^(0+256)
  6906  073F  01CF               	clrf	(_count_1000_ms+1)^(0+256)
  6907  0740                     i1l2096:	
  6908                           
  6909                           ;tmr1.c: 204: }
  6910                           ;tmr1.c: 205: if (count_4000_ms==400)
  6911  0740  3090               	movlw	144
  6912  0741  064C               	xorwf	_count_4000_ms^(0+256),w
  6913  0742  1D03               	skipz
  6914  0743  2F4D               	goto	i1l2102
  6915  0744  034D               	decf	(_count_4000_ms+1)^(0+256),w
  6916  0745  1D03               	btfss	3,2
  6917  0746  2F4D               	goto	i1l2102
  6918                           
  6919                           ;tmr1.c: 206: {
  6920                           ;tmr1.c: 207: flag_4000_ms=1;
  6921  0747  3001               	movlw	1
  6922  0748  00D4               	movwf	_flag_4000_ms^(0+256)
  6923  0749  3000               	movlw	0
  6924  074A  00D5               	movwf	(_flag_4000_ms^(0+256)+1)
  6925                           
  6926                           ;tmr1.c: 208: count_4000_ms=0;
  6927  074B  01CC               	clrf	_count_4000_ms^(0+256)
  6928  074C  01CD               	clrf	(_count_4000_ms+1)^(0+256)
  6929  074D                     i1l2102:	
  6930                           
  6931                           ;tmr1.c: 209: }
  6932                           ;tmr1.c: 210: if(TMR1_InterruptHandler)
  6933  074D  086A               	movf	_TMR1_InterruptHandler^(0+256),w
  6934  074E  046B               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
  6935  074F  1903               	btfsc	3,2
  6936  0750  0008               	return
  6937                           
  6938                           ;tmr1.c: 211: {
  6939                           ;tmr1.c: 213: TMR1_InterruptHandler();
  6940  0751  086B               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
  6941  0752  008A               	movwf	10
  6942  0753  086A               	movf	_TMR1_InterruptHandler^(0+256),w
  6943  0754  000A               	callw
  6944  0755  3187               	pagesel	$
  6945  0756  0008               	return
  6946  0757                     __end_of_TMR1_CallBack:	
  6947                           
  6948                           	psect	text36
  6949  0D68                     __ptext36:	
  6950 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6951 ;; Defined at:
  6952 ;;		line 221 in file "mcc_generated_files/tmr1.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;		None
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;		None
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      void 
  6959 ;; Registers used:
  6960 ;;		None
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6966 ;;      Params:         0       0       0       0       0       0       0       0
  6967 ;;      Locals:         0       0       0       0       0       0       0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0
  6969 ;;      Totals:         0       0       0       0       0       0       0       0
  6970 ;;Total ram usage:        0 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_TMR1_Initialize
  6976 ;;		_TMR1_CallBack
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _TMR1_DefaultInterruptHandler
  6982  0D68                     _TMR1_DefaultInterruptHandler:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  6986  0D68  0008               	return
  6987  0D69                     __end_of_TMR1_DefaultInterruptHandler:	
  6988                           
  6989                           	psect	text37
  6990  0E89                     __ptext37:	
  6991 ;; *************** function _EUSART_Transmit_ISR *****************
  6992 ;; Defined at:
  6993 ;;		line 166 in file "mcc_generated_files/eusart.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7007 ;;      Params:         0       0       0       0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0
  7009 ;;      Temps:          1       0       0       0       0       0       0       0
  7010 ;;      Totals:         1       0       0       0       0       0       0       0
  7011 ;;Total ram usage:        1 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_INTERRUPT_InterruptManager
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _EUSART_Transmit_ISR
  7022  0E89                     _EUSART_Transmit_ISR:	
  7023                           
  7024                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  7025                           
  7026                           ;incstack = 0
  7027                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7028  0E89  3008               	movlw	8
  7029  0E8A  0020               	movlb	0	; select bank0
  7030  0E8B  026F               	subwf	_eusartTxBufferRemaining,w	;volatile
  7031  0E8C  1803               	skipnc
  7032  0E8D  2EA4               	goto	i1l145
  7033                           
  7034                           ;eusart.c: 171: {
  7035                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  7036  0E8E  087C               	movf	_eusartTxTail,w
  7037  0E8F  3EE3               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7038  0E90  0086               	movwf	6
  7039  0E91  3001               	movlw	1	; select bank3/4
  7040  0E92  0087               	movwf	7
  7041  0E93  0801               	movf	1,w
  7042  0E94  0023               	movlb	3	; select bank3
  7043  0E95  009A               	movwf	26	;volatile
  7044  0E96  3001               	movlw	1
  7045  0E97  00F0               	movwf	??_EUSART_Transmit_ISR
  7046  0E98  0870               	movf	??_EUSART_Transmit_ISR,w
  7047  0E99  07FC               	addwf	_eusartTxTail,f	;volatile
  7048                           
  7049                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  7050  0E9A  3008               	movlw	8
  7051  0E9B  027C               	subwf	_eusartTxTail,w	;volatile
  7052  0E9C  1803               	btfsc	3,0
  7053                           
  7054                           ;eusart.c: 174: {
  7055                           ;eusart.c: 175: eusartTxTail = 0;
  7056  0E9D  01FC               	clrf	_eusartTxTail	;volatile
  7057                           
  7058                           ;eusart.c: 176: }
  7059                           ;eusart.c: 177: eusartTxBufferRemaining++;
  7060  0E9E  3001               	movlw	1
  7061  0E9F  00F0               	movwf	??_EUSART_Transmit_ISR
  7062  0EA0  0870               	movf	??_EUSART_Transmit_ISR,w
  7063  0EA1  0020               	movlb	0	; select bank0
  7064  0EA2  07EF               	addwf	_eusartTxBufferRemaining,f	;volatile
  7065                           
  7066                           ;eusart.c: 178: }
  7067  0EA3  0008               	return
  7068  0EA4                     i1l145:	
  7069                           
  7070                           ;eusart.c: 179: else
  7071                           ;eusart.c: 180: {
  7072                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  7073  0EA4  0021               	movlb	1	; select bank1
  7074  0EA5  1211               	bcf	17,4	;volatile
  7075  0EA6  0008               	return
  7076  0EA7                     __end_of_EUSART_Transmit_ISR:	
  7077                           
  7078                           	psect	text38
  7079  0757                     __ptext38:	
  7080 ;; *************** function _EUSART_Receive_ISR *****************
  7081 ;; Defined at:
  7082 ;;		line 185 in file "mcc_generated_files/eusart.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;		None
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;		None
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7096 ;;      Params:         0       0       0       0       0       0       0       0
  7097 ;;      Locals:         0       0       0       0       0       0       0       0
  7098 ;;      Temps:          1       0       0       0       0       0       0       0
  7099 ;;      Totals:         1       0       0       0       0       0       0       0
  7100 ;;Total ram usage:        1 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_INTERRUPT_InterruptManager
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _EUSART_Receive_ISR
  7111  0757                     _EUSART_Receive_ISR:	
  7112                           
  7113                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  7117  0757  0023               	movlb	3	; select bank3
  7118  0758  1C9D               	btfss	29,1	;volatile
  7119  0759  2F5C               	goto	i1l2398
  7120                           
  7121                           ;eusart.c: 189: {
  7122                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  7123  075A  121D               	bcf	29,4	;volatile
  7124                           
  7125                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  7126  075B  161D               	bsf	29,4	;volatile
  7127  075C                     i1l2398:	
  7128                           
  7129                           ;eusart.c: 194: }
  7130                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  7131  075C  0819               	movf	25,w	;volatile
  7132  075D  00F0               	movwf	??_EUSART_Receive_ISR
  7133  075E  0020               	movlb	0	; select bank0
  7134  075F  086C               	movf	_eusartRxHead,w
  7135  0760  3EDB               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7136  0761  0086               	movwf	6
  7137  0762  3001               	movlw	1	; select bank3/4
  7138  0763  0087               	movwf	7
  7139  0764  0870               	movf	??_EUSART_Receive_ISR,w
  7140  0765  0081               	movwf	1
  7141  0766  3001               	movlw	1
  7142  0767  00F0               	movwf	??_EUSART_Receive_ISR
  7143  0768  0870               	movf	??_EUSART_Receive_ISR,w
  7144  0769  07EC               	addwf	_eusartRxHead,f	;volatile
  7145                           
  7146                           ;eusart.c: 198: rcreg=RCREG;
  7147  076A  0023               	movlb	3	; select bank3
  7148  076B  0819               	movf	25,w	;volatile
  7149  076C  00F0               	movwf	??_EUSART_Receive_ISR
  7150  076D  0870               	movf	??_EUSART_Receive_ISR,w
  7151  076E  00FB               	movwf	_rcreg	;volatile
  7152                           
  7153                           ;eusart.c: 200: if(rcreg=='X')
  7154  076F  3058               	movlw	88
  7155  0770  067B               	xorwf	_rcreg,w	;volatile
  7156  0771  1D03               	btfss	3,2
  7157  0772  2F7B               	goto	i1l2410
  7158                           
  7159                           ;eusart.c: 201: {
  7160                           ;eusart.c: 202: LATB=0xAA;
  7161  0773  30AA               	movlw	170
  7162  0774  0022               	movlb	2	; select bank2
  7163  0775  008D               	movwf	13	;volatile
  7164                           
  7165                           ;eusart.c: 203: flag_G=1;
  7166  0776  3001               	movlw	1
  7167  0777  00E4               	movwf	_flag_G^(0+256)
  7168  0778  3000               	movlw	0
  7169  0779  00E5               	movwf	(_flag_G^(0+256)+1)
  7170  077A  2F98               	goto	i1l2426
  7171  077B                     i1l2410:	
  7172                           ;eusart.c: 205: }
  7173                           
  7174                           ;eusart.c: 204: rcreg=0;
  7175                           
  7176                           
  7177                           ;eusart.c: 206: else if(rcreg=='Y')
  7178  077B  3059               	movlw	89
  7179  077C  067B               	xorwf	_rcreg,w	;volatile
  7180  077D  1D03               	btfss	3,2
  7181  077E  2F85               	goto	i1l2416
  7182                           
  7183                           ;eusart.c: 207: {
  7184                           ;eusart.c: 208: flag_N=1;
  7185  077F  3001               	movlw	1
  7186  0780  0022               	movlb	2	; select bank2
  7187  0781  00E6               	movwf	_flag_N^(0+256)
  7188  0782  3000               	movlw	0
  7189  0783  00E7               	movwf	(_flag_N^(0+256)+1)
  7190  0784  2F98               	goto	i1l2426
  7191  0785                     i1l2416:	
  7192                           ;eusart.c: 210: }
  7193                           
  7194                           ;eusart.c: 209: rcreg=0;
  7195                           
  7196                           
  7197                           ;eusart.c: 211: else if(rcreg=='A')
  7198  0785  3041               	movlw	65
  7199  0786  067B               	xorwf	_rcreg,w	;volatile
  7200  0787  1D03               	btfss	3,2
  7201  0788  2F8F               	goto	i1l2422
  7202                           
  7203                           ;eusart.c: 212: {
  7204                           ;eusart.c: 213: flag_A=1;
  7205  0789  3001               	movlw	1
  7206  078A  0022               	movlb	2	; select bank2
  7207  078B  00E2               	movwf	_flag_A^(0+256)
  7208  078C  3000               	movlw	0
  7209  078D  00E3               	movwf	(_flag_A^(0+256)+1)
  7210  078E  2F98               	goto	i1l2426
  7211  078F                     i1l2422:	
  7212                           ;eusart.c: 215: }
  7213                           
  7214                           ;eusart.c: 214: rcreg=0;
  7215                           
  7216                           
  7217                           ;eusart.c: 216: else if(rcreg=='B')
  7218  078F  3042               	movlw	66
  7219  0790  067B               	xorwf	_rcreg,w	;volatile
  7220  0791  1D03               	btfss	3,2
  7221  0792  2F99               	goto	i1l2428
  7222                           
  7223                           ;eusart.c: 217: {
  7224                           ;eusart.c: 218: flag_B=1;
  7225  0793  3001               	movlw	1
  7226  0794  0022               	movlb	2	; select bank2
  7227  0795  00E0               	movwf	_flag_B^(0+256)
  7228  0796  3000               	movlw	0
  7229  0797  00E1               	movwf	(_flag_B^(0+256)+1)
  7230  0798                     i1l2426:	
  7231                           
  7232                           ;eusart.c: 219: rcreg=0;
  7233  0798  01FB               	clrf	_rcreg	;volatile
  7234  0799                     i1l2428:	
  7235                           
  7236                           ;eusart.c: 220: }
  7237                           ;eusart.c: 226: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7238  0799  3008               	movlw	8
  7239  079A  0020               	movlb	0	; select bank0
  7240  079B  026C               	subwf	_eusartRxHead,w	;volatile
  7241  079C  1803               	btfsc	3,0
  7242                           
  7243                           ;eusart.c: 227: {
  7244                           ;eusart.c: 228: eusartRxHead = 0;
  7245  079D  01EC               	clrf	_eusartRxHead	;volatile
  7246                           
  7247                           ;eusart.c: 229: }
  7248                           ;eusart.c: 230: eusartRxCount++;
  7249  079E  3001               	movlw	1
  7250  079F  00F0               	movwf	??_EUSART_Receive_ISR
  7251  07A0  0870               	movf	??_EUSART_Receive_ISR,w
  7252  07A1  07EA               	addwf	_eusartRxCount,f	;volatile
  7253  07A2  0008               	return
  7254  07A3                     __end_of_EUSART_Receive_ISR:	
  7255                           
  7256                           	psect	text39
  7257  0DA8                     __ptext39:	
  7258 ;; *************** function _ADC_ISR *****************
  7259 ;; Defined at:
  7260 ;;		line 136 in file "mcc_generated_files/adc.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;		None
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;		None
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0, pclath, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7274 ;;      Params:         0       0       0       0       0       0       0       0
  7275 ;;      Locals:         0       0       0       0       0       0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0       0
  7277 ;;      Totals:         0       0       0       0       0       0       0       0
  7278 ;;Total ram usage:        0 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    1
  7281 ;; This function calls:
  7282 ;;		_ADC_GetConversionResult
  7283 ;;		i1_ADC_StartConversion
  7284 ;; This function is called by:
  7285 ;;		_INTERRUPT_InterruptManager
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _ADC_ISR
  7291  0DA8                     _ADC_ISR:	
  7292                           
  7293                           ;adc.c: 139: PIR1bits.ADIF = 0;
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
  7297  0DA8  0020               	movlb	0	; select bank0
  7298  0DA9  1311               	bcf	17,6	;volatile
  7299                           
  7300                           ;adc.c: 140: rez_conversie=ADC_GetConversionResult();
  7301  0DAA  318E  2635  318D   	fcall	_ADC_GetConversionResult
  7302  0DAD  0871               	movf	?_ADC_GetConversionResult+1,w
  7303  0DAE  0022               	movlb	2	; select bank2
  7304  0DAF  00E9               	movwf	(_rez_conversie+1)^(0+256)
  7305  0DB0  0870               	movf	?_ADC_GetConversionResult,w
  7306  0DB1  00E8               	movwf	_rez_conversie^(0+256)
  7307                           
  7308                           ;adc.c: 141: ADC_StartConversion();
  7309  0DB2  318D  2569         	fcall	i1_ADC_StartConversion
  7310  0DB4  0008               	return
  7311  0DB5                     __end_of_ADC_ISR:	
  7312                           
  7313                           	psect	text40
  7314  0D69                     __ptext40:	
  7315 ;; *************** function i1_ADC_StartConversion *****************
  7316 ;; Defined at:
  7317 ;;		line 92 in file "mcc_generated_files/adc.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;		None
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		None
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7331 ;;      Params:         0       0       0       0       0       0       0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0
  7334 ;;      Totals:         0       0       0       0       0       0       0       0
  7335 ;;Total ram usage:        0 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; This function calls:
  7338 ;;		Nothing
  7339 ;; This function is called by:
  7340 ;;		_ADC_ISR
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           
  7345                           ;psect for function i1_ADC_StartConversion
  7346  0D69                     i1_ADC_StartConversion:	
  7347                           
  7348                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  7349                           
  7350                           ;incstack = 0
  7351                           ; Regs used in i1_ADC_StartConversion: []
  7352  0D69  0021               	movlb	1	; select bank1
  7353  0D6A  149D               	bsf	29,1	;volatile
  7354  0D6B  0008               	return
  7355  0D6C                     __end_ofi1_ADC_StartConversion:	
  7356                           
  7357                           	psect	text41
  7358  0E35                     __ptext41:	
  7359 ;; *************** function _ADC_GetConversionResult *****************
  7360 ;; Defined at:
  7361 ;;		line 105 in file "mcc_generated_files/adc.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  2    0[COMMON] unsigned int 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7375 ;;      Params:         2       0       0       0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0
  7377 ;;      Temps:          7       0       0       0       0       0       0       0
  7378 ;;      Totals:         9       0       0       0       0       0       0       0
  7379 ;;Total ram usage:        9 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_ADC_ISR
  7385 ;; This function uses a non-reentrant model
  7386 ;;
  7387                           
  7388                           
  7389                           ;psect for function _ADC_GetConversionResult
  7390  0E35                     _ADC_GetConversionResult:	
  7391                           
  7392                           ;adc.c: 109: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _ADC_GetConversionResult: [wreg+status,2+status,0]
  7396  0E35  0021               	movlb	1	; select bank1
  7397  0E36  081B               	movf	27,w	;volatile
  7398  0E37  00F2               	movwf	??_ADC_GetConversionResult
  7399  0E38  3006               	movlw	6
  7400  0E39                     u179_25:	
  7401  0E39  36F2               	lsrf	??_ADC_GetConversionResult,f
  7402  0E3A  0B89               	decfsz	9,f
  7403  0E3B  2E39               	goto	u179_25
  7404  0E3C  0872               	movf	??_ADC_GetConversionResult,w
  7405  0E3D  00F3               	movwf	??_ADC_GetConversionResult+1
  7406  0E3E  01F4               	clrf	??_ADC_GetConversionResult+2
  7407  0E3F  081C               	movf	28,w	;volatile
  7408  0E40  00F5               	movwf	??_ADC_GetConversionResult+3
  7409  0E41  01F6               	clrf	??_ADC_GetConversionResult+4
  7410  0E42  35F5               	lslf	??_ADC_GetConversionResult+3,f
  7411  0E43  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  7412  0E44  35F5               	lslf	??_ADC_GetConversionResult+3,f
  7413  0E45  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  7414  0E46  0873               	movf	??_ADC_GetConversionResult+1,w
  7415  0E47  0775               	addwf	??_ADC_GetConversionResult+3,w
  7416  0E48  00F7               	movwf	??_ADC_GetConversionResult+5
  7417  0E49  0874               	movf	??_ADC_GetConversionResult+2,w
  7418  0E4A  3D76               	addwfc	??_ADC_GetConversionResult+4,w
  7419  0E4B  00F8               	movwf	??_ADC_GetConversionResult+6
  7420  0E4C  0877               	movf	??_ADC_GetConversionResult+5,w
  7421  0E4D  00F0               	movwf	?_ADC_GetConversionResult
  7422  0E4E  0878               	movf	??_ADC_GetConversionResult+6,w
  7423  0E4F  00F1               	movwf	?_ADC_GetConversionResult+1
  7424  0E50  0008               	return
  7425  0E51                     __end_of_ADC_GetConversionResult:	
  7426  007E                     btemp	set	126	;btemp
  7427  007E                     int$flags	set	126
  7428  007E                     wtemp0	set	126


Data Sizes:
    Strings     93
    Constant    0
    Data        61
    BSS         136
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     70      80
    BANK1            80     77      79
    BANK2            80     42      78
    BANK3            80      0      75
    BANK4            80      0      75
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_8(CODE[14]), STR_7(CODE[18]), STR_6(CODE[10]), STR_5(CODE[15]), 
		 -> STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[21]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_comparare
    _sms_text->_printf
    _int_gsm->_printf
    _printf->_putch
    _putch->_EUSART_Write
    _init_lcd->_send_nibble
    _comparare->___ftadd
    _comparare->___ftdiv
    ___lwtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftge->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _comand_lcd->_send_command_byte
    _send_command_byte->_send_nibble
    _TMR1_Initialize->_TMR1_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   24695
                                             62 BANK0      8     8      0
                _ADC_StartConversion
                  _SYSTEM_Initialize
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                         _comand_lcd
                          _comparare
                           _init_lcd
                            _int_gsm
                           _sms_text
                           _turn_egs
 ---------------------------------------------------------------------------------
 (1) _turn_egs                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sms_text                                             0     0      0     690
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _int_gsm                                              0     0      0     690
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    17      2     624
                                              3 BANK0      7     5      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0      22
                                              2 BANK0      1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _comparare                                          135   133      2   15140
                                             46 BANK0     16    14      2
                                              0 BANK1     77    77      0
                                              0 BANK2     42    42      0
                           ___awtoft
                             ___bmul
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol (ARG)
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2323
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2691
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             14 BANK0      9     3      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3179
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2392
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _comand_lcd                                           0     0      0      66
                  _send_command_byte
 ---------------------------------------------------------------------------------
 (2) _send_command_byte                                    2     2      0      66
                                              2 BANK0      2     2      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     316
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0       0
                                              9 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              0     0      0       0
            _ADC_GetConversionResult
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) i1_ADC_StartConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversionResult                              9     7      2       0
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _comand_lcd
     _send_command_byte
       _send_nibble
   _comparare
     ___awtoft
       ___ftpack
     ___bmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
   _init_lcd
     _send_nibble
   _int_gsm
     _printf
       _putch
         _EUSART_Write
     _putch
       _EUSART_Write
   _sms_text
     _printf
       _putch
         _EUSART_Write
     _putch
       _EUSART_Write
   _turn_egs

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     i1_ADC_StartConversion
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     191       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     46      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4D      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     2A      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4B      12       93.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4B      14       93.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     191      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Oct 31 21:19:45 2017

               __end_of_send_command_byte 0EC5                            ___bmul@product 0022  
                             __CFG_CP$OFF 0000                       ___wmul@multiplicand 0022  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                             __CFG_LVP$ON 0000                              ___ftadd@sign 004B  
                                     l133 0F17                                       l402 036E  
                                     l413 03B6                                       l744 0694  
                                     l576 0E76                                       l745 069C  
                                     l737 0681                                       l828 0634  
                                     l768 02C6                              __CFG_CPD$OFF 0000  
                         _timer1ReloadVal 006D                           __end_of_ADC_ISR 0DB5  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              __CFG_FOSC$HS 0000  
                           _count_1000_ms 014E                              ___ftdiv@cntr 0048  
                            ___ftdiv@sign 004D                                      l2200 02A1  
                                    l2120 07E8                                      l2210 02C2  
                                    l2202 02A5                             _count_4000_ms 014C  
                                    l2300 03EF                                      l2124 0E70  
                                    l2142 0DD0                                      l2214 02D8  
                                    l2208 02B8                                      l2138 0DCA  
                                    l2218 02EA                                      l2330 045C  
                                    l2322 0448                                      l2306 0405  
                                    l2228 0305                                      l2172 0256  
                                    l2244 04B9                                      l2158 0ED0  
                                    l2190 027F                                      l2238 04A3  
                                    l2334 0464                                      l2318 0440  
                                    l2168 024F                                      l2600 03D6  
                                    l2504 034C                                      l2178 0265  
                                    l2266 0513                                      l2258 04FA  
                                    l2282 0FF1                                      l2514 0359  
                                    l2196 0292                                      l2620 06E3  
                                    l2612 06CE                                      l2516 035B  
                                    l2532 0371                                      l2198 029C  
                                    l2278 0FDB                                      l2630 06FD  
                                    l2720 019B                                      l2560 0394  
                                    l2528 036A                                      l2714 018D  
                                    l2730 0221                                      l2570 03A1  
                                    l2740 05E0                                      l2708 012A  
                                    l2660 07C2                                      l2652 07B9  
                                    l2644 07B1                                      l2572 03A3  
                                    l2548 0387                                      l2492 033F  
                                    l2726 01FF                                      l2760 061E  
                                    l2728 020F                                      l1944 0F0C  
                                    l2584 03B2                                      l2772 0645  
                                    l2668 07CB                                      l2676 07DF  
                                    l2596 03CE                                      l2588 03B9  
                                    l2852 0569                                      l2844 055A  
                                    l2766 062B                                      l2758 0610  
                                    l1990 066D                                      l1982 0657  
                                    l2694 00BA                                      l1958 0F2C  
                                    l2768 0637                                      l1986 065E  
                                    l2858 0575                                      l1996 0686  
                                    l1988 0668                                      l1998 068E  
                                    STR_1 1036                                      STR_2 1000  
                                    STR_3 1044                                      STR_4 105A  
                                    STR_5 1027                                      STR_6 1050  
                                    STR_7 1015                                      STR_8 1036  
                                    u2015 0293                                      u2045 02A6  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _LATD 010F  
                                    u2145 04CB                                      _LATE 0110  
                                    u2075 02B9                                      u2155 04DB  
                                    u2165 04FB                                      u2325 0465  
                                    u3207 0F3C                                      u2175 050A  
                                    u2335 046B                                      u2255 0411  
                                    u3217 0F46                                      u2185 0514  
                                    u2265 0421                                      u3227 0F50  
                                    u1805 0EAF                                      u1725 06A3  
                                    u1645 0663                                      u2285 0449  
                                    u3157 0F5D                                      u2295 044F  
                                    u3167 0F69                                      u1665 067C  
                                    u3177 0F75                                      u1835 0E77  
                                    u3187 0F81                                      u3197 0EC0  
                                    u1685 0689                                      u1845 0E7C  
                                    u2805 0128                                      u2750 0088  
                                    u2815 018B                                      u2760 00A6  
                                    u2825 0199                                      u2915 0611  
                                    u2855 020D                                      u2775 00B8  
                                    u2945 062C                                      u1985 0280  
                                    u2865 021F                                      u2785 00CB  
                                    u2795 00DF                                      u2885 05E7  
                                    _WPUB 020D                                      _WPUE 0210  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _main 0535                              ___ftpack@arg 0020  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 003C  
              ??_TMR1_SetInterruptHandler 0022                         ___bmul@multiplier 0023  
                           __CFG_MCLRE$ON 0000                              ___ftmul@cntr 003C  
                         turn_egs@step_nr 016C                              ___ftmul@sign 003D  
                            ___fttol@exp1 002D                              ___fttol@lval 0029  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0005  
           __end_of_OSCILLATOR_Initialize 0D7B                                     ?_main 0070  
                         __end_of___ftadd 031D                             __CFG_WDTE$OFF 0000  
                         __end_of___ftdiv 0535                           _TMR1_StartTimer 0D6F  
                         __end_of___ftneg 0DA8                           __end_of___ftmul 048C  
                                   _T1CON 0018                           __end_of___fttol 064E  
                                   i1l145 0EA4                                     i1l181 0015  
                                   i1l183 0021                                     i1l185 002D  
                                   i1l189 0037                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _TRISD 008F                                     _TRISE 0090  
                  ?i1_ADC_StartConversion 0070                                     _TXREG 019A  
                                   _TXSTA 019E                   comparare@resistor_value 004E  
        __size_of_ADC_GetConversionResult 001C                          __end_of_TMR1_ISR 0E6D  
                           ___awtoft@sign 002D                                     _line1 01D3  
                                   _line2 01CA                            _WDT_Initialize 0D72  
                                   _rcreg 007B                           __end_of_int_gsm 07E3  
                           ___ftpack@sign 0024                                     _putch 0D7B  
                                   main@x 0061                   __end_of_TMR1_Initialize 0E1A  
                                   pclath 000A                              comparare@dif 0052  
                            comparare@res 0120                                     status 0003  
                                   wtemp0 007E                           __initialization 003E  
              __size_of_send_command_byte 001E                              __end_of_main 05C7  
                          ??_EUSART_Write 0020                                 ??_ADC_ISR 0079  
             ?_INTERRUPT_InterruptManager 0070                                    ??_main 005E  
                           ___fttol@sign1 0028                            __CFG_PLLEN$OFF 0000  
                  __end_of_WDT_Initialize 0D76                                    _ADCON0 009D  
                                  _ADCON1 009E                              ?_send_nibble 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                          __end_of___awtoft 0EE7  
                                  _ANSELA 018C                                    ?_putch 0070  
                                  _ANSELB 018D                                    _ANSELD 018F  
                                  _ANSELE 0190                          __end_of___ftpack 06B3  
                                  _T1GCON 0019                                    i1l2102 074D  
                                  i1l2410 077B                                    i1l2090 0735  
                                  i1l2084 072A                                    i1l2422 078F  
                                  i1l2416 0785                                    i1l2096 0740  
                                  i1l2426 0798                                    i1l2428 0799  
                                  i1l2398 075C                          __end_of___lwtoft 0E02  
                                  u179_25 0E39                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                            __CFG_PWRTE$OFF 0000  
    __end_of_TMR1_DefaultInterruptHandler 0D69     __size_of_TMR1_DefaultInterruptHandler 0001  
            _TMR1_DefaultInterruptHandler 0D68                                    ___bmul 0DC7  
                                  ___ftge 0FC4                   __end_of_TMR1_StartTimer 0D72  
                                  ___wmul 0E6D                                 ??___ftadd 0047  
                          __CFG_STVREN$ON 0000                                 ??___ftdiv 0044  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                                  _flag_A 0162                                    _flag_B 0160  
                                  _flag_G 0164                                 ??___fttol 0024  
                                  _flag_N 0166                       _EUSART_Transmit_ISR 0E89  
                        __end_of_init_lcd 0F89                                    _printf 07E3  
                   ___ftmul@f3_as_product 0039                                 ??_int_gsm 002A  
                         ?_WDT_Initialize 0070                          __end_of_sms_text 070A  
                           comparare@step 0055  TMR1_SetInterruptHandler@InterruptHandler 0020  
                    ?_EUSART_Transmit_ISR 0070                     __end_of_TMR1_CallBack 0757  
                        __end_of_turn_egs 03D8                          ?_TMR1_Initialize 0070  
                       _SYSTEM_Initialize 0DB5                   __end_of__initialization 0079  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                              ___ftge@ff1 002E                                ___ftge@ff2 0031  
                      ?_SYSTEM_Initialize 0070                                ___ftdiv@f1 0041  
                              ___ftdiv@f2 003E                                ___ftdiv@f3 0049  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 0020  
            __size_of_ADC_StartConversion 0003                            __pcstackCOMMON 0070  
                            __pidataBANK2 0002                              __pidataBANK3 0F89  
                     ??_SYSTEM_Initialize 0022                                 ?_TMR1_ISR 0070  
           ?_TMR1_DefaultInterruptHandler 0070                             __end_of_putch 0D81  
                            _flag_1000_ms 0156                              _flag_4000_ms 0154  
                              ___lwtoft@c 0028                   _ADC_GetConversionResult 0E35  
                          _OPTION_REGbits 0095                        __size_of_comparare 01AA  
               __end_of_SYSTEM_Initialize 0DC7                     ??_EUSART_Transmit_ISR 0070  
                                 ??_putch 0022                                __pbssBANK0 0066  
                              __pbssBANK1 00ED                                __pbssBANK2 014A  
                              __pbssBANK3 01DB                                __pbssBANK4 0220  
                    __end_of_EUSART_Write 0F2F                           __CFG_VCAPEN$OFF 0000  
             __size_of_EUSART_Receive_ISR 004C                                _flag_10_ms 015C  
                              __pmaintext 0535                                   ?___bmul 0020  
                                 ?___ftge 002E                                   ?___wmul 0020  
                        ?_TMR1_StartTimer 0070                                ??_TMR1_ISR 0070  
                              __pintentry 0004                         sms_text@sms_index 00ED  
                                 _ADC_ISR 0DA8                                   _BAUDCON 019F  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                 ??i1_ADC_StartConversion 0070                                   ?_printf 0023  
                 __size_of_ADC_Initialize 0009                                 ?___lwtoft 0028  
                           _eusartRxCount 006A                                _comand_lcd 0DD9  
                                 _OSCTUNE 0098                      __size_of_send_nibble 0026  
                               ?_init_lcd 0070                     send_command_byte@byte 0023  
                         __size_of___bmul 0012                           __size_of___ftge 003C  
                                 ___ftadd 0227                         __end_of_comparare 0227  
                                 ___ftdiv 048C                                   ___ftneg 0D9F  
                         __size_of___wmul 001C                                   ___ftmul 03D8  
                                 ___fttol 05C7                                 ?_sms_text 0070  
               ??_ADC_GetConversionResult 0072                                ??___awtoft 002B  
                              ??___ftpack 0025                                   __ptext1 031D  
                                 __ptext2 06B3                                   __ptext3 07A3  
                                 __ptext4 07E3                                   __ptext5 0D7B  
                                 __ptext6 0F0A                                   __ptext7 0F55  
                                 __ptext8 007D                                   __ptext9 0E6D  
                               ?_turn_egs 0070                           __size_of_printf 001D  
                              ??___lwtoft 002B            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                     _OSCILLATOR_Initialize 0D76  
                                 _int_gsm 07A3         __size_of_TMR1_SetInterruptHandler 0009  
                ??_PIN_MANAGER_Initialize 0020                 ?_TMR1_SetInterruptHandler 0020  
              __size_of_SYSTEM_Initialize 0012                                   clrloop0 0D82  
                    end_of_initialization 0079                            comparare@F3720 0220  
                          comparare@F3715 01A0                                   init_ram 0D87  
                              ??_init_lcd 0022                                   initloop 0D88  
                       _EUSART_Initialize 0E1A                            comparare@j_745 005C  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@c 0029                                   printf@f 0023  
                       send_nibble@nibble 0021                            comparare@table 00A0  
                              ??_sms_text 002A                       ??_EUSART_Initialize 0020  
                        ??_WDT_Initialize 0020                                ??_turn_egs 0020  
                             ?_comand_lcd 0070                                 _TRISCbits 008E  
                   __size_of_EUSART_Write 0025                       _ADC_StartConversion 0D6C  
               __end_of_EUSART_Initialize 0E35                               ___ftdiv@exp 004C  
                            _count_100_ms 0152                              _count_500_ms 0150  
                              comparare@i 00EB                                comparare@j 005A  
                             ___ftmul@exp 0038                      ?_ADC_StartConversion 0070  
                      turn_egs@step_index 007A                            __end_of___bmul 0DD9  
                          __end_of___ftge 1000                            __end_of___wmul 0E89  
                            _EUSART_Write 0F0A                         __size_of_TMR1_ISR 001C  
                          _ADC_Initialize 0D8D                    ?_OSCILLATOR_Initialize 0070  
                          __end_of_printf 0800                       start_initialization 003E  
         __size_of_PIN_MANAGER_Initialize 0023                               putch@txData 0022  
                       int_gsm@sms1_index 0066                       __size_of_comand_lcd 0014  
                   ??_ADC_StartConversion 0020                  __size_of_TMR1_Initialize 0018  
                                ??___bmul 0021                                  ??___ftge 0034  
                                ??___wmul 0024                    __end_of_ADC_Initialize 0D96  
                             __pdataBANK2 016C                               __pdataBANK3 01A0  
                                ?_ADC_ISR 0070                    __size_of_TMR1_CallBack 004D  
                                ??_printf 0025            __size_ofi1_ADC_StartConversion 0003  
           __end_ofi1_ADC_StartConversion 0D6C                         __size_of___awtoft 0022  
                       __size_of___ftpack 0065               __end_of_EUSART_Transmit_ISR 0EA7  
                   TMR1_ISR@CountCallBack 014A                               __pbssCOMMON 007A  
                               ___latbits 0002                         __size_of___lwtoft 0015  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120                               _flag_100_ms 015A  
                             _flag_500_ms 0158                __end_of_EUSART_Receive_ISR 07A3  
              __size_of_EUSART_Initialize 001B                                 __pnvBANK0 006D  
                               __pnvBANK2 016A                         __size_of_init_lcd 0034  
                  _PIN_MANAGER_Initialize 0EE7                                 _flag_1_ms 015E  
        __end_of_TMR1_SetInterruptHandler 0D9F                                  ?___ftadd 0041  
                                ?___ftdiv 003E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 0020  
                         ?_ADC_Initialize 0070                              _eusartRxHead 006C  
                            _eusartTxHead 007D                              _eusartRxTail 006B  
                            _eusartTxTail 007C              ??_INTERRUPT_InterruptManager 0079  
                       __size_of_sms_text 0057                                 _comparare 007D  
                 _eusartTxBufferRemaining 006F                  __size_of_TMR1_StartTimer 0003  
                                ?_int_gsm 0070                         __size_of_turn_egs 00BB  
                           ??_send_nibble 0020                            __size_of_putch 0006  
                          _eusartRxBuffer 01DB                             _TMR1_CallBack 070A  
                          _eusartTxBuffer 01E3                            ___wmul@product 0024  
                                _LATCbits 010E                                  _LATDbits 010F  
                               clear_ram0 0D81                                  _PIE1bits 0091  
     __size_of_INTERRUPT_InterruptManager 0038                                  _PIR1bits 0011  
                                _TMR1_ISR 0E51                         ??_TMR1_Initialize 0022  
                        __size_of_ADC_ISR 000D                                _ADCON0bits 009D  
                              ?_comparare 004E                         ___wmul@multiplier 0020  
                            ??_comand_lcd 0024                             _rez_conversie 0168  
                          ?_TMR1_CallBack 0070                             _flag_directie 0068  
                     __end_of_send_nibble 0F55                        __end_of_comand_lcd 0DED  
                ?_ADC_GetConversionResult 0070                   ??_OSCILLATOR_Initialize 0020  
                        __size_of___ftadd 00F6                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                                  ___awtoft 0EC5  
                                ___ftpack 064E                  _TMR1_SetInterruptHandler 0D96  
                     main@incubator_state 0062                                  ___lwtoft 0DED  
                   _TMR1_InterruptHandler 016A                          __size_of_int_gsm 0040  
                                __ptext10 0DED                                  __ptext11 0D9F  
                                __ptext20 0EA7                                  __ptext12 03D8  
                                __ptext21 0F2F                                  __ptext13 0FC4  
                              _T1GCONbits 0019                                  __ptext30 0E1A  
                                __ptext22 05C7                                  __ptext14 048C  
                                __ptext31 0D8D                                  __ptext23 0DB5  
                                __ptext15 0227                                  __ptext40 0D69  
                                __ptext32 0D6C                                  __ptext24 0D72  
                                __ptext16 0DC7                                  __ptext41 0E35  
                                __ptext25 0E02                                  __ptext17 0EC5  
                                __ptext34 0E51                                  __ptext26 0D6F  
                                __ptext18 064E                                  __ptext35 070A  
                                __ptext27 0D96                                  __ptext19 0DD9  
                                __ptext36 0D68                                  __ptext28 0EE7  
                                __ptext37 0E89                                  __ptext29 0D76  
                                __ptext38 0757                                  __ptext39 0DA8  
                       ??_TMR1_StartTimer 0020                                  _init_lcd 0F55  
                           __size_of_main 0092                                  int$flags 007E  
                                _sms_text 06B3        __end_of_INTERRUPT_InterruptManager 003C  
              _INTERRUPT_InterruptManager 0004                                  main@temp 005F  
                                main@volt 0063                               ??_comparare 0050  
                                _turn_egs 031D                                _INTCONbits 000B  
                         ??_TMR1_CallBack 0070                               _send_nibble 0F2F  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
             __end_of_ADC_StartConversion 0D6F                   ?_PIN_MANAGER_Initialize 0070  
         __end_of_ADC_GetConversionResult 0E51                         __CFG_CLKOUTEN$OFF 0000  
                        ??_ADC_Initialize 0020                                  printf@ap 0028  
                      _EUSART_Receive_ISR 0757                         _send_command_byte 0EA7  
                         comparare@result 0058                             __pstringtext1 1000  
                           __pstringtext2 1015                             __pstringtext3 1027  
                           __pstringtext4 1036                             __pstringtext5 1044  
                           __pstringtext6 1050                             __pstringtext7 105A  
                           __pstringtext8 0000                        ?_send_command_byte 0070  
                     ?_EUSART_Receive_ISR 0070                     i1_ADC_StartConversion 0D69  
                     ??_send_command_byte 0022                        EUSART_Write@txData 0021  
            __size_of_EUSART_Transmit_ISR 001E            __end_of_PIN_MANAGER_Initialize 0F0A  
                    ??_EUSART_Receive_ISR 0070                           _TMR1_Initialize 0E02  
