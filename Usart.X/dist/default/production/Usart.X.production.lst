

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Nov 26 17:08:25 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK5,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	stringtext2,global,class=STRCODE,delta=2
    12                           	psect	stringtext3,global,class=STRCODE,delta=2
    13                           	psect	stringtext4,global,class=STRCODE,delta=2
    14                           	psect	stringtext5,global,class=STRCODE,delta=2
    15                           	psect	stringtext6,global,class=STRCODE,delta=2
    16                           	psect	stringtext7,global,class=STRCODE,delta=2
    17                           	psect	stringtext8,global,class=STRCODE,delta=2
    18                           	psect	stringtext9,global,class=STRCODE,delta=2
    19                           	psect	stringtext10,global,class=STRCODE,delta=2
    20                           	psect	stringtext11,global,class=STRCODE,delta=2
    21                           	psect	stringtext12,global,class=STRCODE,delta=2
    22                           	psect	stringtext13,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	clrtext,global,class=CODE,delta=2
    35                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    36                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    38                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    39                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    40                           	psect	text1,local,class=CODE,merge=1,delta=2
    41                           	psect	text2,local,class=CODE,merge=1,delta=2
    42                           	psect	text3,local,class=CODE,merge=1,delta=2
    43                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text5,local,class=CODE,merge=1,delta=2
    45                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text17,local,class=CODE,merge=1,delta=2
    57                           	psect	text18,local,class=CODE,merge=1,delta=2
    58                           	psect	text19,local,class=CODE,merge=1,delta=2
    59                           	psect	text20,local,class=CODE,merge=1,delta=2
    60                           	psect	text21,local,class=CODE,merge=1,delta=2
    61                           	psect	text22,local,class=CODE,merge=1,delta=2
    62                           	psect	text23,local,class=CODE,merge=1,delta=2
    63                           	psect	text24,local,class=CODE,merge=1,delta=2
    64                           	psect	text25,local,class=CODE,merge=1,delta=2
    65                           	psect	text26,local,class=CODE,merge=1,delta=2
    66                           	psect	text27,local,class=CODE,merge=1,delta=2
    67                           	psect	text28,local,class=CODE,merge=1,delta=2
    68                           	psect	text29,local,class=CODE,merge=1,delta=2
    69                           	psect	text30,local,class=CODE,merge=1,delta=2
    70                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    71                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text33,local,class=CODE,merge=1,delta=2
    73                           	psect	text34,local,class=CODE,merge=1,delta=2
    74                           	psect	text35,local,class=CODE,merge=1,delta=2
    75                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text37,local,class=CODE,merge=1,delta=2
    77                           	psect	text38,local,class=CODE,merge=1,delta=2
    78                           	psect	text39,local,class=CODE,merge=1,delta=2
    79                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text42,local,class=CODE,merge=1,delta=2
    82                           	psect	text43,local,class=CODE,merge=1,delta=2
    83                           	psect	text44,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text46,local,class=CODE,merge=1,delta=2
    86                           	psect	text47,local,class=CODE,merge=1,delta=2
    87                           	psect	text48,local,class=CODE,merge=1,delta=2
    88                           	psect	text49,local,class=CODE,merge=1,delta=2
    89                           	psect	text50,local,class=CODE,merge=1,delta=2
    90                           	psect	text51,local,class=CODE,merge=1,delta=2
    91                           	psect	text52,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x7E,2
    93  0000                     
    94                           ; Version 1.42
    95                           ; Generated 13/04/2017 GMT
    96                           ; 
    97                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC16F1937 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000F                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  008F                     	;# 
   163  0090                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0097                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009B                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  0110                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  018F                     	;# 
   198  0190                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019B                     	;# 
   214  019C                     	;# 
   215  019C                     	;# 
   216  019D                     	;# 
   217  019E                     	;# 
   218  019F                     	;# 
   219  020D                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0216                     	;# 
   228  0217                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0295                     	;# 
   235  0295                     	;# 
   236  0296                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  029B                     	;# 
   242  029C                     	;# 
   243  029C                     	;# 
   244  029D                     	;# 
   245  029E                     	;# 
   246  029F                     	;# 
   247  0311                     	;# 
   248  0311                     	;# 
   249  0312                     	;# 
   250  0313                     	;# 
   251  0314                     	;# 
   252  0315                     	;# 
   253  0315                     	;# 
   254  0316                     	;# 
   255  0318                     	;# 
   256  0318                     	;# 
   257  0319                     	;# 
   258  031A                     	;# 
   259  031C                     	;# 
   260  031C                     	;# 
   261  031D                     	;# 
   262  031E                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0415                     	;# 
   267  0416                     	;# 
   268  0417                     	;# 
   269  041C                     	;# 
   270  041D                     	;# 
   271  041E                     	;# 
   272  0791                     	;# 
   273  0792                     	;# 
   274  0793                     	;# 
   275  0794                     	;# 
   276  0795                     	;# 
   277  0798                     	;# 
   278  0799                     	;# 
   279  079A                     	;# 
   280  07A0                     	;# 
   281  07A1                     	;# 
   282  07A2                     	;# 
   283  07A3                     	;# 
   284  07A4                     	;# 
   285  07A5                     	;# 
   286  07A6                     	;# 
   287  07A7                     	;# 
   288  07A8                     	;# 
   289  07A9                     	;# 
   290  07AA                     	;# 
   291  07AB                     	;# 
   292  0FE4                     	;# 
   293  0FE5                     	;# 
   294  0FE6                     	;# 
   295  0FE7                     	;# 
   296  0FE8                     	;# 
   297  0FE9                     	;# 
   298  0FEA                     	;# 
   299  0FEB                     	;# 
   300  0FED                     	;# 
   301  0FEE                     	;# 
   302  0FEF                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001E                     	;# 
   333  001F                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  008F                     	;# 
   338  0090                     	;# 
   339  0091                     	;# 
   340  0092                     	;# 
   341  0093                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009B                     	;# 
   350  009C                     	;# 
   351  009D                     	;# 
   352  009E                     	;# 
   353  010C                     	;# 
   354  010D                     	;# 
   355  010E                     	;# 
   356  010F                     	;# 
   357  0110                     	;# 
   358  0111                     	;# 
   359  0112                     	;# 
   360  0113                     	;# 
   361  0114                     	;# 
   362  0115                     	;# 
   363  0116                     	;# 
   364  0117                     	;# 
   365  0118                     	;# 
   366  0119                     	;# 
   367  011A                     	;# 
   368  011B                     	;# 
   369  011D                     	;# 
   370  018C                     	;# 
   371  018D                     	;# 
   372  018F                     	;# 
   373  0190                     	;# 
   374  0191                     	;# 
   375  0191                     	;# 
   376  0192                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0199                     	;# 
   384  019A                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019C                     	;# 
   390  019C                     	;# 
   391  019D                     	;# 
   392  019E                     	;# 
   393  019F                     	;# 
   394  020D                     	;# 
   395  0210                     	;# 
   396  0211                     	;# 
   397  0212                     	;# 
   398  0213                     	;# 
   399  0214                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0216                     	;# 
   403  0217                     	;# 
   404  0291                     	;# 
   405  0291                     	;# 
   406  0292                     	;# 
   407  0293                     	;# 
   408  0294                     	;# 
   409  0295                     	;# 
   410  0295                     	;# 
   411  0296                     	;# 
   412  0298                     	;# 
   413  0298                     	;# 
   414  0299                     	;# 
   415  029A                     	;# 
   416  029B                     	;# 
   417  029C                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  029F                     	;# 
   422  0311                     	;# 
   423  0311                     	;# 
   424  0312                     	;# 
   425  0313                     	;# 
   426  0314                     	;# 
   427  0315                     	;# 
   428  0315                     	;# 
   429  0316                     	;# 
   430  0318                     	;# 
   431  0318                     	;# 
   432  0319                     	;# 
   433  031A                     	;# 
   434  031C                     	;# 
   435  031C                     	;# 
   436  031D                     	;# 
   437  031E                     	;# 
   438  0394                     	;# 
   439  0395                     	;# 
   440  0396                     	;# 
   441  0415                     	;# 
   442  0416                     	;# 
   443  0417                     	;# 
   444  041C                     	;# 
   445  041D                     	;# 
   446  041E                     	;# 
   447  0791                     	;# 
   448  0792                     	;# 
   449  0793                     	;# 
   450  0794                     	;# 
   451  0795                     	;# 
   452  0798                     	;# 
   453  0799                     	;# 
   454  079A                     	;# 
   455  07A0                     	;# 
   456  07A1                     	;# 
   457  07A2                     	;# 
   458  07A3                     	;# 
   459  07A4                     	;# 
   460  07A5                     	;# 
   461  07A6                     	;# 
   462  07A7                     	;# 
   463  07A8                     	;# 
   464  07A9                     	;# 
   465  07AA                     	;# 
   466  07AB                     	;# 
   467  0FE4                     	;# 
   468  0FE5                     	;# 
   469  0FE6                     	;# 
   470  0FE7                     	;# 
   471  0FE8                     	;# 
   472  0FE9                     	;# 
   473  0FEA                     	;# 
   474  0FEB                     	;# 
   475  0FED                     	;# 
   476  0FEE                     	;# 
   477  0FEF                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0008                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0015                     	;# 
   499  0016                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001C                     	;# 
   507  001E                     	;# 
   508  001F                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  008F                     	;# 
   513  0090                     	;# 
   514  0091                     	;# 
   515  0092                     	;# 
   516  0093                     	;# 
   517  0095                     	;# 
   518  0096                     	;# 
   519  0097                     	;# 
   520  0098                     	;# 
   521  0099                     	;# 
   522  009A                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  010F                     	;# 
   532  0110                     	;# 
   533  0111                     	;# 
   534  0112                     	;# 
   535  0113                     	;# 
   536  0114                     	;# 
   537  0115                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  0118                     	;# 
   541  0119                     	;# 
   542  011A                     	;# 
   543  011B                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018F                     	;# 
   548  0190                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0213                     	;# 
   574  0214                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0291                     	;# 
   580  0291                     	;# 
   581  0292                     	;# 
   582  0293                     	;# 
   583  0294                     	;# 
   584  0295                     	;# 
   585  0295                     	;# 
   586  0296                     	;# 
   587  0298                     	;# 
   588  0298                     	;# 
   589  0299                     	;# 
   590  029A                     	;# 
   591  029B                     	;# 
   592  029C                     	;# 
   593  029C                     	;# 
   594  029D                     	;# 
   595  029E                     	;# 
   596  029F                     	;# 
   597  0311                     	;# 
   598  0311                     	;# 
   599  0312                     	;# 
   600  0313                     	;# 
   601  0314                     	;# 
   602  0315                     	;# 
   603  0315                     	;# 
   604  0316                     	;# 
   605  0318                     	;# 
   606  0318                     	;# 
   607  0319                     	;# 
   608  031A                     	;# 
   609  031C                     	;# 
   610  031C                     	;# 
   611  031D                     	;# 
   612  031E                     	;# 
   613  0394                     	;# 
   614  0395                     	;# 
   615  0396                     	;# 
   616  0415                     	;# 
   617  0416                     	;# 
   618  0417                     	;# 
   619  041C                     	;# 
   620  041D                     	;# 
   621  041E                     	;# 
   622  0791                     	;# 
   623  0792                     	;# 
   624  0793                     	;# 
   625  0794                     	;# 
   626  0795                     	;# 
   627  0798                     	;# 
   628  0799                     	;# 
   629  079A                     	;# 
   630  07A0                     	;# 
   631  07A1                     	;# 
   632  07A2                     	;# 
   633  07A3                     	;# 
   634  07A4                     	;# 
   635  07A5                     	;# 
   636  07A6                     	;# 
   637  07A7                     	;# 
   638  07A8                     	;# 
   639  07A9                     	;# 
   640  07AA                     	;# 
   641  07AB                     	;# 
   642  0FE4                     	;# 
   643  0FE5                     	;# 
   644  0FE6                     	;# 
   645  0FE7                     	;# 
   646  0FE8                     	;# 
   647  0FE9                     	;# 
   648  0FEA                     	;# 
   649  0FEB                     	;# 
   650  0FED                     	;# 
   651  0FEE                     	;# 
   652  0FEF                     	;# 
   653  0000                     	;# 
   654  0001                     	;# 
   655  0002                     	;# 
   656  0003                     	;# 
   657  0004                     	;# 
   658  0005                     	;# 
   659  0006                     	;# 
   660  0007                     	;# 
   661  0008                     	;# 
   662  0009                     	;# 
   663  000A                     	;# 
   664  000B                     	;# 
   665  000C                     	;# 
   666  000D                     	;# 
   667  000E                     	;# 
   668  000F                     	;# 
   669  0010                     	;# 
   670  0011                     	;# 
   671  0012                     	;# 
   672  0013                     	;# 
   673  0015                     	;# 
   674  0016                     	;# 
   675  0016                     	;# 
   676  0017                     	;# 
   677  0018                     	;# 
   678  0019                     	;# 
   679  001A                     	;# 
   680  001B                     	;# 
   681  001C                     	;# 
   682  001E                     	;# 
   683  001F                     	;# 
   684  008C                     	;# 
   685  008D                     	;# 
   686  008E                     	;# 
   687  008F                     	;# 
   688  0090                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0093                     	;# 
   692  0095                     	;# 
   693  0096                     	;# 
   694  0097                     	;# 
   695  0098                     	;# 
   696  0099                     	;# 
   697  009A                     	;# 
   698  009B                     	;# 
   699  009B                     	;# 
   700  009C                     	;# 
   701  009D                     	;# 
   702  009E                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  010F                     	;# 
   707  0110                     	;# 
   708  0111                     	;# 
   709  0112                     	;# 
   710  0113                     	;# 
   711  0114                     	;# 
   712  0115                     	;# 
   713  0116                     	;# 
   714  0117                     	;# 
   715  0118                     	;# 
   716  0119                     	;# 
   717  011A                     	;# 
   718  011B                     	;# 
   719  011D                     	;# 
   720  018C                     	;# 
   721  018D                     	;# 
   722  018F                     	;# 
   723  0190                     	;# 
   724  0191                     	;# 
   725  0191                     	;# 
   726  0192                     	;# 
   727  0193                     	;# 
   728  0193                     	;# 
   729  0193                     	;# 
   730  0194                     	;# 
   731  0195                     	;# 
   732  0196                     	;# 
   733  0199                     	;# 
   734  019A                     	;# 
   735  019B                     	;# 
   736  019B                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019C                     	;# 
   740  019C                     	;# 
   741  019D                     	;# 
   742  019E                     	;# 
   743  019F                     	;# 
   744  020D                     	;# 
   745  0210                     	;# 
   746  0211                     	;# 
   747  0212                     	;# 
   748  0213                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0216                     	;# 
   753  0217                     	;# 
   754  0291                     	;# 
   755  0291                     	;# 
   756  0292                     	;# 
   757  0293                     	;# 
   758  0294                     	;# 
   759  0295                     	;# 
   760  0295                     	;# 
   761  0296                     	;# 
   762  0298                     	;# 
   763  0298                     	;# 
   764  0299                     	;# 
   765  029A                     	;# 
   766  029B                     	;# 
   767  029C                     	;# 
   768  029C                     	;# 
   769  029D                     	;# 
   770  029E                     	;# 
   771  029F                     	;# 
   772  0311                     	;# 
   773  0311                     	;# 
   774  0312                     	;# 
   775  0313                     	;# 
   776  0314                     	;# 
   777  0315                     	;# 
   778  0315                     	;# 
   779  0316                     	;# 
   780  0318                     	;# 
   781  0318                     	;# 
   782  0319                     	;# 
   783  031A                     	;# 
   784  031C                     	;# 
   785  031C                     	;# 
   786  031D                     	;# 
   787  031E                     	;# 
   788  0394                     	;# 
   789  0395                     	;# 
   790  0396                     	;# 
   791  0415                     	;# 
   792  0416                     	;# 
   793  0417                     	;# 
   794  041C                     	;# 
   795  041D                     	;# 
   796  041E                     	;# 
   797  0791                     	;# 
   798  0792                     	;# 
   799  0793                     	;# 
   800  0794                     	;# 
   801  0795                     	;# 
   802  0798                     	;# 
   803  0799                     	;# 
   804  079A                     	;# 
   805  07A0                     	;# 
   806  07A1                     	;# 
   807  07A2                     	;# 
   808  07A3                     	;# 
   809  07A4                     	;# 
   810  07A5                     	;# 
   811  07A6                     	;# 
   812  07A7                     	;# 
   813  07A8                     	;# 
   814  07A9                     	;# 
   815  07AA                     	;# 
   816  07AB                     	;# 
   817  0FE4                     	;# 
   818  0FE5                     	;# 
   819  0FE6                     	;# 
   820  0FE7                     	;# 
   821  0FE8                     	;# 
   822  0FE9                     	;# 
   823  0FEA                     	;# 
   824  0FEB                     	;# 
   825  0FED                     	;# 
   826  0FEE                     	;# 
   827  0FEF                     	;# 
   828  0000                     	;# 
   829  0001                     	;# 
   830  0002                     	;# 
   831  0003                     	;# 
   832  0004                     	;# 
   833  0005                     	;# 
   834  0006                     	;# 
   835  0007                     	;# 
   836  0008                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  000F                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0013                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  001E                     	;# 
   858  001F                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  008F                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0093                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0098                     	;# 
   871  0099                     	;# 
   872  009A                     	;# 
   873  009B                     	;# 
   874  009B                     	;# 
   875  009C                     	;# 
   876  009D                     	;# 
   877  009E                     	;# 
   878  010C                     	;# 
   879  010D                     	;# 
   880  010E                     	;# 
   881  010F                     	;# 
   882  0110                     	;# 
   883  0111                     	;# 
   884  0112                     	;# 
   885  0113                     	;# 
   886  0114                     	;# 
   887  0115                     	;# 
   888  0116                     	;# 
   889  0117                     	;# 
   890  0118                     	;# 
   891  0119                     	;# 
   892  011A                     	;# 
   893  011B                     	;# 
   894  011D                     	;# 
   895  018C                     	;# 
   896  018D                     	;# 
   897  018F                     	;# 
   898  0190                     	;# 
   899  0191                     	;# 
   900  0191                     	;# 
   901  0192                     	;# 
   902  0193                     	;# 
   903  0193                     	;# 
   904  0193                     	;# 
   905  0194                     	;# 
   906  0195                     	;# 
   907  0196                     	;# 
   908  0199                     	;# 
   909  019A                     	;# 
   910  019B                     	;# 
   911  019B                     	;# 
   912  019B                     	;# 
   913  019B                     	;# 
   914  019C                     	;# 
   915  019C                     	;# 
   916  019D                     	;# 
   917  019E                     	;# 
   918  019F                     	;# 
   919  020D                     	;# 
   920  0210                     	;# 
   921  0211                     	;# 
   922  0212                     	;# 
   923  0213                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0217                     	;# 
   929  0291                     	;# 
   930  0291                     	;# 
   931  0292                     	;# 
   932  0293                     	;# 
   933  0294                     	;# 
   934  0295                     	;# 
   935  0295                     	;# 
   936  0296                     	;# 
   937  0298                     	;# 
   938  0298                     	;# 
   939  0299                     	;# 
   940  029A                     	;# 
   941  029B                     	;# 
   942  029C                     	;# 
   943  029C                     	;# 
   944  029D                     	;# 
   945  029E                     	;# 
   946  029F                     	;# 
   947  0311                     	;# 
   948  0311                     	;# 
   949  0312                     	;# 
   950  0313                     	;# 
   951  0314                     	;# 
   952  0315                     	;# 
   953  0315                     	;# 
   954  0316                     	;# 
   955  0318                     	;# 
   956  0318                     	;# 
   957  0319                     	;# 
   958  031A                     	;# 
   959  031C                     	;# 
   960  031C                     	;# 
   961  031D                     	;# 
   962  031E                     	;# 
   963  0394                     	;# 
   964  0395                     	;# 
   965  0396                     	;# 
   966  0415                     	;# 
   967  0416                     	;# 
   968  0417                     	;# 
   969  041C                     	;# 
   970  041D                     	;# 
   971  041E                     	;# 
   972  0791                     	;# 
   973  0792                     	;# 
   974  0793                     	;# 
   975  0794                     	;# 
   976  0795                     	;# 
   977  0798                     	;# 
   978  0799                     	;# 
   979  079A                     	;# 
   980  07A0                     	;# 
   981  07A1                     	;# 
   982  07A2                     	;# 
   983  07A3                     	;# 
   984  07A4                     	;# 
   985  07A5                     	;# 
   986  07A6                     	;# 
   987  07A7                     	;# 
   988  07A8                     	;# 
   989  07A9                     	;# 
   990  07AA                     	;# 
   991  07AB                     	;# 
   992  0FE4                     	;# 
   993  0FE5                     	;# 
   994  0FE6                     	;# 
   995  0FE7                     	;# 
   996  0FE8                     	;# 
   997  0FE9                     	;# 
   998  0FEA                     	;# 
   999  0FEB                     	;# 
  1000  0FED                     	;# 
  1001  0FEE                     	;# 
  1002  0FEF                     	;# 
  1003  0000                     	;# 
  1004  0001                     	;# 
  1005  0002                     	;# 
  1006  0003                     	;# 
  1007  0004                     	;# 
  1008  0005                     	;# 
  1009  0006                     	;# 
  1010  0007                     	;# 
  1011  0008                     	;# 
  1012  0009                     	;# 
  1013  000A                     	;# 
  1014  000B                     	;# 
  1015  000C                     	;# 
  1016  000D                     	;# 
  1017  000E                     	;# 
  1018  000F                     	;# 
  1019  0010                     	;# 
  1020  0011                     	;# 
  1021  0012                     	;# 
  1022  0013                     	;# 
  1023  0015                     	;# 
  1024  0016                     	;# 
  1025  0016                     	;# 
  1026  0017                     	;# 
  1027  0018                     	;# 
  1028  0019                     	;# 
  1029  001A                     	;# 
  1030  001B                     	;# 
  1031  001C                     	;# 
  1032  001E                     	;# 
  1033  001F                     	;# 
  1034  008C                     	;# 
  1035  008D                     	;# 
  1036  008E                     	;# 
  1037  008F                     	;# 
  1038  0090                     	;# 
  1039  0091                     	;# 
  1040  0092                     	;# 
  1041  0093                     	;# 
  1042  0095                     	;# 
  1043  0096                     	;# 
  1044  0097                     	;# 
  1045  0098                     	;# 
  1046  0099                     	;# 
  1047  009A                     	;# 
  1048  009B                     	;# 
  1049  009B                     	;# 
  1050  009C                     	;# 
  1051  009D                     	;# 
  1052  009E                     	;# 
  1053  010C                     	;# 
  1054  010D                     	;# 
  1055  010E                     	;# 
  1056  010F                     	;# 
  1057  0110                     	;# 
  1058  0111                     	;# 
  1059  0112                     	;# 
  1060  0113                     	;# 
  1061  0114                     	;# 
  1062  0115                     	;# 
  1063  0116                     	;# 
  1064  0117                     	;# 
  1065  0118                     	;# 
  1066  0119                     	;# 
  1067  011A                     	;# 
  1068  011B                     	;# 
  1069  011D                     	;# 
  1070  018C                     	;# 
  1071  018D                     	;# 
  1072  018F                     	;# 
  1073  0190                     	;# 
  1074  0191                     	;# 
  1075  0191                     	;# 
  1076  0192                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019B                     	;# 
  1089  019C                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020D                     	;# 
  1095  0210                     	;# 
  1096  0211                     	;# 
  1097  0212                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0216                     	;# 
  1103  0217                     	;# 
  1104  0291                     	;# 
  1105  0291                     	;# 
  1106  0292                     	;# 
  1107  0293                     	;# 
  1108  0294                     	;# 
  1109  0295                     	;# 
  1110  0295                     	;# 
  1111  0296                     	;# 
  1112  0298                     	;# 
  1113  0298                     	;# 
  1114  0299                     	;# 
  1115  029A                     	;# 
  1116  029B                     	;# 
  1117  029C                     	;# 
  1118  029C                     	;# 
  1119  029D                     	;# 
  1120  029E                     	;# 
  1121  029F                     	;# 
  1122  0311                     	;# 
  1123  0311                     	;# 
  1124  0312                     	;# 
  1125  0313                     	;# 
  1126  0314                     	;# 
  1127  0315                     	;# 
  1128  0315                     	;# 
  1129  0316                     	;# 
  1130  0318                     	;# 
  1131  0318                     	;# 
  1132  0319                     	;# 
  1133  031A                     	;# 
  1134  031C                     	;# 
  1135  031C                     	;# 
  1136  031D                     	;# 
  1137  031E                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0415                     	;# 
  1142  0416                     	;# 
  1143  0417                     	;# 
  1144  041C                     	;# 
  1145  041D                     	;# 
  1146  041E                     	;# 
  1147  0791                     	;# 
  1148  0792                     	;# 
  1149  0793                     	;# 
  1150  0794                     	;# 
  1151  0795                     	;# 
  1152  0798                     	;# 
  1153  0799                     	;# 
  1154  079A                     	;# 
  1155  07A0                     	;# 
  1156  07A1                     	;# 
  1157  07A2                     	;# 
  1158  07A3                     	;# 
  1159  07A4                     	;# 
  1160  07A5                     	;# 
  1161  07A6                     	;# 
  1162  07A7                     	;# 
  1163  07A8                     	;# 
  1164  07A9                     	;# 
  1165  07AA                     	;# 
  1166  07AB                     	;# 
  1167  0FE4                     	;# 
  1168  0FE5                     	;# 
  1169  0FE6                     	;# 
  1170  0FE7                     	;# 
  1171  0FE8                     	;# 
  1172  0FE9                     	;# 
  1173  0FEA                     	;# 
  1174  0FEB                     	;# 
  1175  0FED                     	;# 
  1176  0FEE                     	;# 
  1177  0FEF                     	;# 
  1178  0000                     	;# 
  1179  0001                     	;# 
  1180  0002                     	;# 
  1181  0003                     	;# 
  1182  0004                     	;# 
  1183  0005                     	;# 
  1184  0006                     	;# 
  1185  0007                     	;# 
  1186  0008                     	;# 
  1187  0009                     	;# 
  1188  000A                     	;# 
  1189  000B                     	;# 
  1190  000C                     	;# 
  1191  000D                     	;# 
  1192  000E                     	;# 
  1193  000F                     	;# 
  1194  0010                     	;# 
  1195  0011                     	;# 
  1196  0012                     	;# 
  1197  0013                     	;# 
  1198  0015                     	;# 
  1199  0016                     	;# 
  1200  0016                     	;# 
  1201  0017                     	;# 
  1202  0018                     	;# 
  1203  0019                     	;# 
  1204  001A                     	;# 
  1205  001B                     	;# 
  1206  001C                     	;# 
  1207  001E                     	;# 
  1208  001F                     	;# 
  1209  008C                     	;# 
  1210  008D                     	;# 
  1211  008E                     	;# 
  1212  008F                     	;# 
  1213  0090                     	;# 
  1214  0091                     	;# 
  1215  0092                     	;# 
  1216  0093                     	;# 
  1217  0095                     	;# 
  1218  0096                     	;# 
  1219  0097                     	;# 
  1220  0098                     	;# 
  1221  0099                     	;# 
  1222  009A                     	;# 
  1223  009B                     	;# 
  1224  009B                     	;# 
  1225  009C                     	;# 
  1226  009D                     	;# 
  1227  009E                     	;# 
  1228  010C                     	;# 
  1229  010D                     	;# 
  1230  010E                     	;# 
  1231  010F                     	;# 
  1232  0110                     	;# 
  1233  0111                     	;# 
  1234  0112                     	;# 
  1235  0113                     	;# 
  1236  0114                     	;# 
  1237  0115                     	;# 
  1238  0116                     	;# 
  1239  0117                     	;# 
  1240  0118                     	;# 
  1241  0119                     	;# 
  1242  011A                     	;# 
  1243  011B                     	;# 
  1244  011D                     	;# 
  1245  018C                     	;# 
  1246  018D                     	;# 
  1247  018F                     	;# 
  1248  0190                     	;# 
  1249  0191                     	;# 
  1250  0191                     	;# 
  1251  0192                     	;# 
  1252  0193                     	;# 
  1253  0193                     	;# 
  1254  0193                     	;# 
  1255  0194                     	;# 
  1256  0195                     	;# 
  1257  0196                     	;# 
  1258  0199                     	;# 
  1259  019A                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019B                     	;# 
  1264  019C                     	;# 
  1265  019C                     	;# 
  1266  019D                     	;# 
  1267  019E                     	;# 
  1268  019F                     	;# 
  1269  020D                     	;# 
  1270  0210                     	;# 
  1271  0211                     	;# 
  1272  0212                     	;# 
  1273  0213                     	;# 
  1274  0214                     	;# 
  1275  0215                     	;# 
  1276  0215                     	;# 
  1277  0216                     	;# 
  1278  0217                     	;# 
  1279  0291                     	;# 
  1280  0291                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0294                     	;# 
  1284  0295                     	;# 
  1285  0295                     	;# 
  1286  0296                     	;# 
  1287  0298                     	;# 
  1288  0298                     	;# 
  1289  0299                     	;# 
  1290  029A                     	;# 
  1291  029B                     	;# 
  1292  029C                     	;# 
  1293  029C                     	;# 
  1294  029D                     	;# 
  1295  029E                     	;# 
  1296  029F                     	;# 
  1297  0311                     	;# 
  1298  0311                     	;# 
  1299  0312                     	;# 
  1300  0313                     	;# 
  1301  0314                     	;# 
  1302  0315                     	;# 
  1303  0315                     	;# 
  1304  0316                     	;# 
  1305  0318                     	;# 
  1306  0318                     	;# 
  1307  0319                     	;# 
  1308  031A                     	;# 
  1309  031C                     	;# 
  1310  031C                     	;# 
  1311  031D                     	;# 
  1312  031E                     	;# 
  1313  0394                     	;# 
  1314  0395                     	;# 
  1315  0396                     	;# 
  1316  0415                     	;# 
  1317  0416                     	;# 
  1318  0417                     	;# 
  1319  041C                     	;# 
  1320  041D                     	;# 
  1321  041E                     	;# 
  1322  0791                     	;# 
  1323  0792                     	;# 
  1324  0793                     	;# 
  1325  0794                     	;# 
  1326  0795                     	;# 
  1327  0798                     	;# 
  1328  0799                     	;# 
  1329  079A                     	;# 
  1330  07A0                     	;# 
  1331  07A1                     	;# 
  1332  07A2                     	;# 
  1333  07A3                     	;# 
  1334  07A4                     	;# 
  1335  07A5                     	;# 
  1336  07A6                     	;# 
  1337  07A7                     	;# 
  1338  07A8                     	;# 
  1339  07A9                     	;# 
  1340  07AA                     	;# 
  1341  07AB                     	;# 
  1342  0FE4                     	;# 
  1343  0FE5                     	;# 
  1344  0FE6                     	;# 
  1345  0FE7                     	;# 
  1346  0FE8                     	;# 
  1347  0FE9                     	;# 
  1348  0FEA                     	;# 
  1349  0FEB                     	;# 
  1350  0FED                     	;# 
  1351  0FEE                     	;# 
  1352  0FEF                     	;# 
  1353  0000                     	;# 
  1354  0001                     	;# 
  1355  0002                     	;# 
  1356  0003                     	;# 
  1357  0004                     	;# 
  1358  0005                     	;# 
  1359  0006                     	;# 
  1360  0007                     	;# 
  1361  0008                     	;# 
  1362  0009                     	;# 
  1363  000A                     	;# 
  1364  000B                     	;# 
  1365  000C                     	;# 
  1366  000D                     	;# 
  1367  000E                     	;# 
  1368  000F                     	;# 
  1369  0010                     	;# 
  1370  0011                     	;# 
  1371  0012                     	;# 
  1372  0013                     	;# 
  1373  0015                     	;# 
  1374  0016                     	;# 
  1375  0016                     	;# 
  1376  0017                     	;# 
  1377  0018                     	;# 
  1378  0019                     	;# 
  1379  001A                     	;# 
  1380  001B                     	;# 
  1381  001C                     	;# 
  1382  001E                     	;# 
  1383  001F                     	;# 
  1384  008C                     	;# 
  1385  008D                     	;# 
  1386  008E                     	;# 
  1387  008F                     	;# 
  1388  0090                     	;# 
  1389  0091                     	;# 
  1390  0092                     	;# 
  1391  0093                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0098                     	;# 
  1396  0099                     	;# 
  1397  009A                     	;# 
  1398  009B                     	;# 
  1399  009B                     	;# 
  1400  009C                     	;# 
  1401  009D                     	;# 
  1402  009E                     	;# 
  1403  010C                     	;# 
  1404  010D                     	;# 
  1405  010E                     	;# 
  1406  010F                     	;# 
  1407  0110                     	;# 
  1408  0111                     	;# 
  1409  0112                     	;# 
  1410  0113                     	;# 
  1411  0114                     	;# 
  1412  0115                     	;# 
  1413  0116                     	;# 
  1414  0117                     	;# 
  1415  0118                     	;# 
  1416  0119                     	;# 
  1417  011A                     	;# 
  1418  011B                     	;# 
  1419  011D                     	;# 
  1420  018C                     	;# 
  1421  018D                     	;# 
  1422  018F                     	;# 
  1423  0190                     	;# 
  1424  0191                     	;# 
  1425  0191                     	;# 
  1426  0192                     	;# 
  1427  0193                     	;# 
  1428  0193                     	;# 
  1429  0193                     	;# 
  1430  0194                     	;# 
  1431  0195                     	;# 
  1432  0196                     	;# 
  1433  0199                     	;# 
  1434  019A                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019C                     	;# 
  1440  019C                     	;# 
  1441  019D                     	;# 
  1442  019E                     	;# 
  1443  019F                     	;# 
  1444  020D                     	;# 
  1445  0210                     	;# 
  1446  0211                     	;# 
  1447  0212                     	;# 
  1448  0213                     	;# 
  1449  0214                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0216                     	;# 
  1453  0217                     	;# 
  1454  0291                     	;# 
  1455  0291                     	;# 
  1456  0292                     	;# 
  1457  0293                     	;# 
  1458  0294                     	;# 
  1459  0295                     	;# 
  1460  0295                     	;# 
  1461  0296                     	;# 
  1462  0298                     	;# 
  1463  0298                     	;# 
  1464  0299                     	;# 
  1465  029A                     	;# 
  1466  029B                     	;# 
  1467  029C                     	;# 
  1468  029C                     	;# 
  1469  029D                     	;# 
  1470  029E                     	;# 
  1471  029F                     	;# 
  1472  0311                     	;# 
  1473  0311                     	;# 
  1474  0312                     	;# 
  1475  0313                     	;# 
  1476  0314                     	;# 
  1477  0315                     	;# 
  1478  0315                     	;# 
  1479  0316                     	;# 
  1480  0318                     	;# 
  1481  0318                     	;# 
  1482  0319                     	;# 
  1483  031A                     	;# 
  1484  031C                     	;# 
  1485  031C                     	;# 
  1486  031D                     	;# 
  1487  031E                     	;# 
  1488  0394                     	;# 
  1489  0395                     	;# 
  1490  0396                     	;# 
  1491  0415                     	;# 
  1492  0416                     	;# 
  1493  0417                     	;# 
  1494  041C                     	;# 
  1495  041D                     	;# 
  1496  041E                     	;# 
  1497  0791                     	;# 
  1498  0792                     	;# 
  1499  0793                     	;# 
  1500  0794                     	;# 
  1501  0795                     	;# 
  1502  0798                     	;# 
  1503  0799                     	;# 
  1504  079A                     	;# 
  1505  07A0                     	;# 
  1506  07A1                     	;# 
  1507  07A2                     	;# 
  1508  07A3                     	;# 
  1509  07A4                     	;# 
  1510  07A5                     	;# 
  1511  07A6                     	;# 
  1512  07A7                     	;# 
  1513  07A8                     	;# 
  1514  07A9                     	;# 
  1515  07AA                     	;# 
  1516  07AB                     	;# 
  1517  0FE4                     	;# 
  1518  0FE5                     	;# 
  1519  0FE6                     	;# 
  1520  0FE7                     	;# 
  1521  0FE8                     	;# 
  1522  0FE9                     	;# 
  1523  0FEA                     	;# 
  1524  0FEB                     	;# 
  1525  0FED                     	;# 
  1526  0FEE                     	;# 
  1527  0FEF                     	;# 
  1528                           
  1529                           	psect	idataBANK2
  1530  0002                     __pidataBANK2:	
  1531                           
  1532                           ;initializer for turn_egs@step_nr
  1533  0002  3401               	retlw	1
  1534  0003  3400               	retlw	0
  1535                           
  1536                           	psect	idataBANK3
  1537  0A57                     __pidataBANK3:	
  1538                           
  1539                           ;initializer for comparare@F3732
  1540  0A57  34BA               	retlw	186
  1541  0A58  340B               	retlw	11
  1542  0A59  3481               	retlw	129
  1543  0A5A  340A               	retlw	10
  1544  0A5B  3449               	retlw	73
  1545  0A5C  3409               	retlw	9
  1546  0A5D  3458               	retlw	88
  1547  0A5E  3408               	retlw	8
  1548  0A5F  3467               	retlw	103
  1549  0A60  3407               	retlw	7
  1550  0A61  34AB               	retlw	171
  1551  0A62  3406               	retlw	6
  1552  0A63  34F0               	retlw	240
  1553  0A64  3405               	retlw	5
  1554  0A65  345E               	retlw	94
  1555  0A66  3405               	retlw	5
  1556  0A67  34CC               	retlw	204
  1557  0A68  3404               	retlw	4
  1558  0A69  345A               	retlw	90
  1559  0A6A  3404               	retlw	4
  1560  0A6B  34E8               	retlw	232
  1561  0A6C  3403               	retlw	3
  1562  0A6D  348C               	retlw	140
  1563  0A6E  3403               	retlw	3
  1564  0A6F  3431               	retlw	49
  1565  0A70  3403               	retlw	3
  1566  0A71  34E9               	retlw	233
  1567  0A72  3402               	retlw	2
  1568  0A73  34A1               	retlw	161
  1569  0A74  3402               	retlw	2
  1570  0A75  3467               	retlw	103
  1571  0A76  3402               	retlw	2
  1572  0A77  342D               	retlw	45
  1573  0A78  3402               	retlw	2
  1574  0A79  34FE               	retlw	254
  1575  0A7A  3401               	retlw	1
  1576  0A7B  34CF               	retlw	207
  1577  0A7C  3401               	retlw	1
  1578  0A7D  34A7               	retlw	167
  1579  0A7E  3401               	retlw	1
  1580  0A7F  347F               	retlw	127
  1581  0A80  3401               	retlw	1
  1582                           
  1583                           ;initializer for _line1
  1584  0A81  3420               	retlw	32
  1585  0A82  3400               	retlw	0
  1586                           
  1587                           ;initializer for _line2
  1588  0A83  3420               	retlw	32
  1589  0A84  3400               	retlw	0
  1590                           
  1591                           	psect	idataBANK5
  1592  0B2E                     __pidataBANK5:	
  1593                           
  1594                           ;initializer for ___cgram
  1595  0B2E  340C               	retlw	12
  1596  0B2F  3412               	retlw	18
  1597  0B30  3412               	retlw	18
  1598  0B31  340C               	retlw	12
  1599  0B32  3400               	retlw	0
  1600  0B33  3400               	retlw	0
  1601  0B34  3400               	retlw	0
  1602  0B35  3400               	retlw	0
  1603  0B36  3400               	retlw	0
  1604  0B37  3404               	retlw	4
  1605  0B38  340E               	retlw	14
  1606  0B39  341F               	retlw	31
  1607  0B3A  340E               	retlw	14
  1608  0B3B  3404               	retlw	4
  1609  0B3C  3400               	retlw	0
  1610  0B3D  3400               	retlw	0
  1611  0B3E  3404               	retlw	4
  1612  0B3F  3404               	retlw	4
  1613  0B40  3404               	retlw	4
  1614  0B41  3404               	retlw	4
  1615  0B42  341F               	retlw	31
  1616  0B43  340E               	retlw	14
  1617  0B44  3404               	retlw	4
  1618  0B45  3400               	retlw	0
  1619  0B46  340A               	retlw	10
  1620  0B47  3415               	retlw	21
  1621  0B48  3411               	retlw	17
  1622  0B49  340A               	retlw	10
  1623  0B4A  3404               	retlw	4
  1624  0B4B  3400               	retlw	0
  1625  0B4C  3400               	retlw	0
  1626  0B4D  3400               	retlw	0
  1627  0B4E  340A               	retlw	10
  1628  0B4F  341F               	retlw	31
  1629  0B50  341F               	retlw	31
  1630  0B51  340E               	retlw	14
  1631  0B52  3404               	retlw	4
  1632  0B53  3400               	retlw	0
  1633  0B54  3400               	retlw	0
  1634  0B55  3400               	retlw	0
  1635  0B56  3400               	retlw	0
  1636  0B57  3400               	retlw	0
  1637  0B58  3400               	retlw	0
  1638  0B59  3400               	retlw	0
  1639  0B5A  3400               	retlw	0
  1640  0B5B  3400               	retlw	0
  1641  0B5C  3400               	retlw	0
  1642  0B5D  3400               	retlw	0
  1643  0B5E  3400               	retlw	0
  1644  0B5F  3400               	retlw	0
  1645  0B60  3400               	retlw	0
  1646  0B61  3400               	retlw	0
  1647  0B62  3400               	retlw	0
  1648  0B63  3400               	retlw	0
  1649  0B64  3400               	retlw	0
  1650  0B65  3400               	retlw	0
  1651  0B66  3400               	retlw	0
  1652  0B67  3400               	retlw	0
  1653  0B68  3400               	retlw	0
  1654  0B69  3400               	retlw	0
  1655  0B6A  3400               	retlw	0
  1656  0B6B  3400               	retlw	0
  1657  0B6C  3400               	retlw	0
  1658  0B6D  3400               	retlw	0
  1659                           
  1660                           	psect	stringtext1
  1661  1066                     __pstringtext1:	
  1662  1066                     _dpowers:	
  1663  1066  3401               	retlw	1
  1664  1067  3400               	retlw	0
  1665  1068  340A               	retlw	10
  1666  1069  3400               	retlw	0
  1667  106A  3464               	retlw	100
  1668  106B  3400               	retlw	0
  1669  106C  34E8               	retlw	232
  1670  106D  3403               	retlw	3
  1671  106E  3410               	retlw	16
  1672  106F  3427               	retlw	39
  1673  1070                     __end_of_dpowers:	
  1674                           
  1675                           	psect	nvBANK0
  1676  006E                     __pnvBANK0:	
  1677  006E                     _timer1ReloadVal:	
  1678  006E                     	ds	2
  1679                           
  1680                           	psect	nvBANK2
  1681  016B                     __pnvBANK2:	
  1682  016B                     _flag_directie:	
  1683  016B                     	ds	2
  1684  016D                     _eusartTxBufferRemaining:	
  1685  016D                     	ds	1
  1686                           
  1687                           	psect	nvBANK3
  1688  01EB                     __pnvBANK3:	
  1689  01EB                     _TMR1_InterruptHandler:	
  1690  01EB                     	ds	2
  1691  000D                     _PORTB	set	13
  1692  000F                     _PORTDbits	set	15
  1693  0019                     _T1GCONbits	set	25
  1694  0018                     _T1CONbits	set	24
  1695  0016                     _TMR1L	set	22
  1696  0017                     _TMR1H	set	23
  1697  0019                     _T1GCON	set	25
  1698  0018                     _T1CON	set	24
  1699  0011                     _PIR1bits	set	17
  1700  000B                     _INTCONbits	set	11
  1701  0079                     _RD1	set	121
  1702  0078                     _RD0	set	120
  1703  007B                     _RD3	set	123
  1704  008E                     _TRISCbits	set	142
  1705  008F                     _TRISDbits	set	143
  1706  009D                     _ADCON0bits	set	157
  1707  009C                     _ADRESH	set	156
  1708  009B                     _ADRESL	set	155
  1709  009E                     _ADCON1	set	158
  1710  009D                     _ADCON0	set	157
  1711  0091                     _PIE1bits	set	145
  1712  0095                     _OPTION_REGbits	set	149
  1713  008F                     _TRISD	set	143
  1714  008E                     _TRISC	set	142
  1715  008D                     _TRISB	set	141
  1716  008C                     _TRISA	set	140
  1717  0090                     _TRISE	set	144
  1718  0097                     _WDTCON	set	151
  1719  0098                     _OSCTUNE	set	152
  1720  0099                     _OSCCON	set	153
  1721  010E                     _LATCbits	set	270
  1722  011D                     _APFCON	set	285
  1723  010E                     _LATC	set	270
  1724  010D                     _LATB	set	269
  1725  010C                     _LATA	set	268
  1726  010F                     _LATD	set	271
  1727  0110                     _LATE	set	272
  1728  0199                     _RCREG	set	409
  1729  019D                     _RCSTAbits	set	413
  1730  019A                     _TXREG	set	410
  1731  019C                     _SPBRGH	set	412
  1732  019B                     _SPBRGL	set	411
  1733  019E                     _TXSTA	set	414
  1734  019D                     _RCSTA	set	413
  1735  019F                     _BAUDCON	set	415
  1736  018C                     _ANSELA	set	396
  1737  0190                     _ANSELE	set	400
  1738  018F                     _ANSELD	set	399
  1739  018D                     _ANSELB	set	397
  1740  020D                     _WPUB	set	525
  1741  0210                     _WPUE	set	528
  1742                           
  1743                           	psect	stringtext2
  1744  1000                     __pstringtext2:	
  1745  1000                     STR_2:	
  1746  1000  3441               	retlw	65	;'A'
  1747  1001  3454               	retlw	84	;'T'
  1748  1002  342B               	retlw	43	;'+'
  1749  1003  3443               	retlw	67	;'C'
  1750  1004  344D               	retlw	77	;'M'
  1751  1005  3447               	retlw	71	;'G'
  1752  1006  3453               	retlw	83	;'S'
  1753  1007  343D               	retlw	61	;'='
  1754  1008  3422               	retlw	34	;'"'
  1755  1009  3430               	retlw	48	;'0'
  1756  100A  3437               	retlw	55	;'7'
  1757  100B  3435               	retlw	53	;'5'
  1758  100C  3437               	retlw	55	;'7'
  1759  100D  3434               	retlw	52	;'4'
  1760  100E  3439               	retlw	57	;'9'
  1761  100F  3434               	retlw	52	;'4'
  1762  1010  3438               	retlw	56	;'8'
  1763  1011  3432               	retlw	50	;'2'
  1764  1012  3433               	retlw	51	;'3'
  1765  1013  3422               	retlw	34	;'"'
  1766  1014  3400               	retlw	0
  1767                           
  1768                           	psect	stringtext3
  1769  1015                     __pstringtext3:	
  1770  1015                     STR_8:	
  1771  1015  3441               	retlw	65	;'A'
  1772  1016  3454               	retlw	84	;'T'
  1773  1017  342B               	retlw	43	;'+'
  1774  1018  3443               	retlw	67	;'C'
  1775  1019  344E               	retlw	78	;'N'
  1776  101A  344D               	retlw	77	;'M'
  1777  101B  3449               	retlw	73	;'I'
  1778  101C  343D               	retlw	61	;'='
  1779  101D  3431               	retlw	49	;'1'
  1780  101E  342C               	retlw	44	;','
  1781  101F  3432               	retlw	50	;'2'
  1782  1020  342C               	retlw	44	;','
  1783  1021  3430               	retlw	48	;'0'
  1784  1022  342C               	retlw	44	;','
  1785  1023  3430               	retlw	48	;'0'
  1786  1024  342C               	retlw	44	;','
  1787  1025  3430               	retlw	48	;'0'
  1788  1026  3400               	retlw	0
  1789                           
  1790                           	psect	stringtext4
  1791  1027                     __pstringtext4:	
  1792  1027                     STR_4:	
  1793  1027  3420               	retlw	32	;' '
  1794  1028  3455               	retlw	85	;'U'
  1795  1029  346D               	retlw	109	;'m'
  1796  102A  3469               	retlw	105	;'i'
  1797  102B  3464               	retlw	100	;'d'
  1798  102C  343D               	retlw	61	;'='
  1799  102D  3425               	retlw	37	;'%'
  1800  102E  3464               	retlw	100	;'d'
  1801  102F  3420               	retlw	32	;' '
  1802  1030  3420               	retlw	32	;' '
  1803  1031  3420               	retlw	32	;' '
  1804  1032  3420               	retlw	32	;' '
  1805  1033  3420               	retlw	32	;' '
  1806  1034  3420               	retlw	32	;' '
  1807  1035  3420               	retlw	32	;' '
  1808  1036  3420               	retlw	32	;' '
  1809  1037  3400               	retlw	0
  1810                           
  1811                           	psect	stringtext5
  1812  1038                     __pstringtext5:	
  1813  1038                     STR_3:	
  1814  1038  3420               	retlw	32	;' '
  1815  1039  3454               	retlw	84	;'T'
  1816  103A  3465               	retlw	101	;'e'
  1817  103B  346D               	retlw	109	;'m'
  1818  103C  3470               	retlw	112	;'p'
  1819  103D  3465               	retlw	101	;'e'
  1820  103E  3472               	retlw	114	;'r'
  1821  103F  343D               	retlw	61	;'='
  1822  1040  3425               	retlw	37	;'%'
  1823  1041  3464               	retlw	100	;'d'
  1824  1042  3420               	retlw	32	;' '
  1825  1043  3420               	retlw	32	;' '
  1826  1044  3420               	retlw	32	;' '
  1827  1045  3420               	retlw	32	;' '
  1828  1046  3420               	retlw	32	;' '
  1829  1047  3420               	retlw	32	;' '
  1830  1048  3400               	retlw	0
  1831                           
  1832                           	psect	stringtext6
  1833  1049                     __pstringtext6:	
  1834  1049                     STR_6:	
  1835  1049  3441               	retlw	65	;'A'
  1836  104A  3454               	retlw	84	;'T'
  1837  104B  342B               	retlw	43	;'+'
  1838  104C  3443               	retlw	67	;'C'
  1839  104D  3450               	retlw	80	;'P'
  1840  104E  3449               	retlw	73	;'I'
  1841  104F  344E               	retlw	78	;'N'
  1842  1050  343D               	retlw	61	;'='
  1843  1051  3422               	retlw	34	;'"'
  1844  1052  3431               	retlw	49	;'1'
  1845  1053  3432               	retlw	50	;'2'
  1846  1054  3433               	retlw	51	;'3'
  1847  1055  3434               	retlw	52	;'4'
  1848  1056  3422               	retlw	34	;'"'
  1849  1057  3400               	retlw	0
  1850                           
  1851                           	psect	stringtext7
  1852  1058                     __pstringtext7:	
  1853  1058                     STR_1:	
  1854  1058  3441               	retlw	65	;'A'
  1855  1059  3454               	retlw	84	;'T'
  1856  105A  342B               	retlw	43	;'+'
  1857  105B  3443               	retlw	67	;'C'
  1858  105C  3453               	retlw	83	;'S'
  1859  105D  3443               	retlw	67	;'C'
  1860  105E  3453               	retlw	83	;'S'
  1861  105F  343D               	retlw	61	;'='
  1862  1060  3422               	retlw	34	;'"'
  1863  1061  3447               	retlw	71	;'G'
  1864  1062  3453               	retlw	83	;'S'
  1865  1063  344D               	retlw	77	;'M'
  1866  1064  3422               	retlw	34	;'"'
  1867  1065  3400               	retlw	0
  1868                           
  1869                           	psect	stringtext8
  1870  1070                     __pstringtext8:	
  1871  1070                     STR_11:	
  1872  1070  3454               	retlw	84	;'T'
  1873  1071  3465               	retlw	101	;'e'
  1874  1072  346D               	retlw	109	;'m'
  1875  1073  3470               	retlw	112	;'p'
  1876  1074  3465               	retlw	101	;'e'
  1877  1075  3472               	retlw	114	;'r'
  1878  1076  343D               	retlw	61	;'='
  1879  1077  3420               	retlw	32	;' '
  1880  1078  3420               	retlw	32	;' '
  1881  1079  3400               	retlw	0
  1882                           
  1883                           	psect	stringtext9
  1884  107A                     __pstringtext9:	
  1885  107A                     STR_7:	
  1886  107A  3441               	retlw	65	;'A'
  1887  107B  3454               	retlw	84	;'T'
  1888  107C  342B               	retlw	43	;'+'
  1889  107D  3443               	retlw	67	;'C'
  1890  107E  344D               	retlw	77	;'M'
  1891  107F  3447               	retlw	71	;'G'
  1892  1080  3446               	retlw	70	;'F'
  1893  1081  343D               	retlw	61	;'='
  1894  1082  3431               	retlw	49	;'1'
  1895  1083  3400               	retlw	0
  1896                           
  1897                           	psect	stringtext10
  1898  1084                     __pstringtext10:	
  1899  1084                     STR_12:	
  1900  1084  3455               	retlw	85	;'U'
  1901  1085  346D               	retlw	109	;'m'
  1902  1086  3469               	retlw	105	;'i'
  1903  1087  3464               	retlw	100	;'d'
  1904  1088  343D               	retlw	61	;'='
  1905  1089  3420               	retlw	32	;' '
  1906  108A  3420               	retlw	32	;' '
  1907  108B  3400               	retlw	0
  1908                           
  1909                           	psect	stringtext11
  1910  108C                     __pstringtext11:	
  1911  108C                     STR_10:	
  1912  108C  3455               	retlw	85	;'U'
  1913  108D  346D               	retlw	109	;'m'
  1914  108E  343D               	retlw	61	;'='
  1915  108F  3425               	retlw	37	;'%'
  1916  1090  3464               	retlw	100	;'d'
  1917  1091  3400               	retlw	0
  1918                           
  1919                           	psect	stringtext12
  1920  1092                     __pstringtext12:	
  1921  1092                     STR_5:	
  1922  1092  3441               	retlw	65	;'A'
  1923  1093  3454               	retlw	84	;'T'
  1924  1094  3400               	retlw	0
  1925                           
  1926                           	psect	stringtext13
  1927  0000                     __pstringtext13:	
  1928  1058                     
  1929                           ; #config settings
  1930  0000                     
  1931                           	psect	cinit
  1932  003E                     start_initialization:	
  1933  003E                     __initialization:	
  1934                           
  1935                           ; Initialize objects allocated to BANK2
  1936  003E  0022               	movlb	2	; select bank2
  1937  003F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  1938  0042  00EE               	movwf	__pdataBANK2& (0+127)
  1939  0043  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  1940  0046  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  1941                           
  1942                           ; Initialize objects allocated to BANK3
  1943  0047  3057               	movlw	low __pidataBANK3
  1944  0048  0084               	movwf	4
  1945  0049  308A               	movlw	(high __pidataBANK3)| (0+128)
  1946  004A  0085               	movwf	5
  1947  004B  30A0               	movlw	low __pdataBANK3
  1948  004C  0086               	movwf	6
  1949  004D  3001               	movlw	high __pdataBANK3
  1950  004E  0087               	movwf	7
  1951  004F  302E               	movlw	46
  1952  0050  3188  205D  3180   	fcall	init_ram
  1953                           
  1954                           ; Initialize objects allocated to BANK5
  1955  0053  302E               	movlw	low __pidataBANK5
  1956  0054  0084               	movwf	4
  1957  0055  308B               	movlw	(high __pidataBANK5)| (0+128)
  1958  0056  0085               	movwf	5
  1959  0057  30A0               	movlw	low __pdataBANK5
  1960  0058  0086               	movwf	6
  1961  0059  3002               	movlw	high __pdataBANK5
  1962  005A  0087               	movwf	7
  1963  005B  3040               	movlw	64
  1964  005C  3188  205D  3180   	fcall	init_ram
  1965                           
  1966                           ; Clear objects allocated to COMMON
  1967  005F  01FA               	clrf	__pbssCOMMON& (0+127)
  1968  0060  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1969  0061  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  1970  0062  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  1971                           
  1972                           ; Clear objects allocated to BANK0
  1973  0063  3064               	movlw	low __pbssBANK0
  1974  0064  0084               	movwf	4
  1975  0065  3000               	movlw	high __pbssBANK0
  1976  0066  0085               	movwf	5
  1977  0067  300A               	movlw	10
  1978  0068  3188  2057  3180   	fcall	clear_ram0
  1979                           
  1980                           ; Clear objects allocated to BANK1
  1981  006B  0021               	movlb	1	; select bank1
  1982  006C  01ED               	clrf	__pbssBANK1& (0+127)
  1983  006D  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  1984  006E  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  1985                           
  1986                           ; Clear objects allocated to BANK2
  1987  006F  304A               	movlw	low __pbssBANK2
  1988  0070  0084               	movwf	4
  1989  0071  3001               	movlw	high __pbssBANK2
  1990  0072  0085               	movwf	5
  1991  0073  3021               	movlw	33
  1992  0074  3188  2057  3180   	fcall	clear_ram0
  1993                           
  1994                           ; Clear objects allocated to BANK3
  1995  0077  30CE               	movlw	low __pbssBANK3
  1996  0078  0084               	movwf	4
  1997  0079  3001               	movlw	high __pbssBANK3
  1998  007A  0085               	movwf	5
  1999  007B  301D               	movlw	29
  2000  007C  3188  2057  3180   	fcall	clear_ram0
  2001                           
  2002                           ; Clear objects allocated to BANK4
  2003  007F  3020               	movlw	low __pbssBANK4
  2004  0080  0084               	movwf	4
  2005  0081  3002               	movlw	high __pbssBANK4
  2006  0082  0085               	movwf	5
  2007  0083  304B               	movlw	75
  2008  0084  3188  2057         	fcall	clear_ram0
  2009  0086                     end_of_initialization:	
  2010                           ;End of C runtime variable initialization code
  2011                           
  2012  0086                     __end_of__initialization:	
  2013  0086  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2014  0087  0020               	movlb	0
  2015  0088  3183  2B82         	ljmp	_main	;jump to C main() function
  2016                           
  2017                           	psect	bssCOMMON
  2018  007A                     __pbssCOMMON:	
  2019  007A                     turn_egs@step_index:	
  2020  007A                     	ds	1
  2021  007B                     _rcreg:	
  2022  007B                     	ds	1
  2023  007C                     _eusartTxTail:	
  2024  007C                     	ds	1
  2025  007D                     _eusartTxHead:	
  2026  007D                     	ds	1
  2027                           
  2028                           	psect	bssBANK0
  2029  0064                     __pbssBANK0:	
  2030  0064                     int_gsm@sms1_index:	
  2031  0064                     	ds	2
  2032  0066                     _RH_byte2:	
  2033  0066                     	ds	1
  2034  0067                     _RH_byte1:	
  2035  0067                     	ds	1
  2036  0068                     _T_byte2:	
  2037  0068                     	ds	1
  2038  0069                     _T_byte1:	
  2039  0069                     	ds	1
  2040  006A                     _Check:	
  2041  006A                     	ds	1
  2042  006B                     _eusartRxCount:	
  2043  006B                     	ds	1
  2044  006C                     _eusartRxTail:	
  2045  006C                     	ds	1
  2046  006D                     _eusartRxHead:	
  2047  006D                     	ds	1
  2048                           
  2049                           	psect	bssBANK1
  2050  00ED                     __pbssBANK1:	
  2051  00ED                     sms_text@F3722:	
  2052  00ED                     	ds	1
  2053  00EE                     sms_text@F3720:	
  2054  00EE                     	ds	1
  2055  00EF                     _Sum:	
  2056  00EF                     	ds	1
  2057                           
  2058                           	psect	bssBANK2
  2059  014A                     __pbssBANK2:	
  2060  014A                     _umiditate:	
  2061  014A                     	ds	2
  2062  014C                     _temp:	
  2063  014C                     	ds	2
  2064  014E                     TMR1_ISR@CountCallBack:	
  2065  014E                     	ds	2
  2066  0150                     _count_4000_ms:	
  2067  0150                     	ds	2
  2068  0152                     _count_1000_ms:	
  2069  0152                     	ds	2
  2070  0154                     _count_500_ms:	
  2071  0154                     	ds	2
  2072  0156                     _count_100_ms:	
  2073  0156                     	ds	2
  2074  0158                     _flag_4000_ms:	
  2075  0158                     	ds	2
  2076  015A                     _flag_1000_ms:	
  2077  015A                     	ds	2
  2078  015C                     _flag_10_ms:	
  2079  015C                     	ds	2
  2080  015E                     _flag_B:	
  2081  015E                     	ds	2
  2082  0160                     _flag_A:	
  2083  0160                     	ds	2
  2084  0162                     _flag_G:	
  2085  0162                     	ds	2
  2086  0164                     _flag_N:	
  2087  0164                     	ds	2
  2088  0166                     _rez_conversie:	
  2089  0166                     	ds	2
  2090  0168                     _RH:	
  2091  0168                     	ds	1
  2092  0169                     _Temp:	
  2093  0169                     	ds	1
  2094  016A                     _Ch:	
  2095  016A                     	ds	1
  2096                           
  2097                           	psect	dataBANK2
  2098  016E                     __pdataBANK2:	
  2099  016E                     turn_egs@step_nr:	
  2100  016E                     	ds	2
  2101                           
  2102                           	psect	bssBANK3
  2103  01CE                     __pbssBANK3:	
  2104  01CE                     _eusartRxBuffer:	
  2105  01CE                     	ds	8
  2106  01D6                     _eusartTxBuffer:	
  2107  01D6                     	ds	8
  2108  01DE                     LCDWriteInt@F3726:	
  2109  01DE                     	ds	5
  2110  01E3                     sms_text@sms_index:	
  2111  01E3                     	ds	2
  2112  01E5                     _flag_500_ms:	
  2113  01E5                     	ds	2
  2114  01E7                     _flag_100_ms:	
  2115  01E7                     	ds	2
  2116  01E9                     _flag_1_ms:	
  2117  01E9                     	ds	2
  2118                           
  2119                           	psect	dataBANK3
  2120  01A0                     __pdataBANK3:	
  2121  01A0                     comparare@F3732:	
  2122  01A0                     	ds	42
  2123  01CA                     _line1:	
  2124  01CA                     	ds	2
  2125  01CC                     _line2:	
  2126  01CC                     	ds	2
  2127                           
  2128                           	psect	bssBANK4
  2129  0220                     __pbssBANK4:	
  2130  0220                     comparare@F3737:	
  2131  0220                     	ds	75
  2132                           
  2133                           	psect	dataBANK5
  2134  02A0                     __pdataBANK5:	
  2135  02A0                     ___cgram:	
  2136  02A0                     	ds	64
  2137                           
  2138                           	psect	inittext
  2139  085D                     init_ram:	
  2140  085D  00FE               	movwf	126
  2141  085E                     initloop:	
  2142  085E  0012               	moviw fsr0++
  2143  085F  001E               	movwi fsr1++
  2144  0860  0BFE               	decfsz	126,f
  2145  0861  285E               	goto	initloop
  2146  0862  3400               	retlw	0
  2147                           
  2148                           	psect	clrtext
  2149  0857                     clear_ram0:	
  2150                           ;	Called with FSR0 containing the base address, and
  2151                           ;	WREG with the size to clear
  2152                           
  2153  0857  0064               	clrwdt	;clear the watchdog before getting into this loop
  2154  0858                     clrloop0:	
  2155  0858  0180               	clrf	0	;clear RAM location pointed to by FSR
  2156  0859  3101               	addfsr 0,1
  2157  085A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2158  085B  2858               	goto	clrloop0	;have we reached the end yet?
  2159  085C  3400               	retlw	0	;all done for this memory range, return
  2160                           
  2161                           	psect	cstackBANK2
  2162  0120                     __pcstackBANK2:	
  2163  0120                     comparare@res:	
  2164                           
  2165                           ; 42 bytes @ 0x0
  2166  0120                     	ds	42
  2167                           
  2168                           	psect	cstackBANK1
  2169  00A0                     __pcstackBANK1:	
  2170  00A0                     comparare@table:	
  2171                           
  2172                           ; 75 bytes @ 0x0
  2173  00A0                     	ds	75
  2174  00EB                     comparare@i:	
  2175                           
  2176                           ; 2 bytes @ 0x4B
  2177  00EB                     	ds	2
  2178                           
  2179                           	psect	cstackCOMMON
  2180  0070                     __pcstackCOMMON:	
  2181  0070                     ?_PIN_MANAGER_Initialize:	
  2182  0070                     ?_OSCILLATOR_Initialize:	
  2183                           ; 1 bytes @ 0x0
  2184                           
  2185  0070                     ?_WDT_Initialize:	
  2186                           ; 1 bytes @ 0x0
  2187                           
  2188  0070                     ?_TMR1_Initialize:	
  2189                           ; 1 bytes @ 0x0
  2190                           
  2191  0070                     ?_ADC_Initialize:	
  2192                           ; 1 bytes @ 0x0
  2193                           
  2194  0070                     ?_EUSART_Initialize:	
  2195                           ; 1 bytes @ 0x0
  2196                           
  2197  0070                     ?_ADC_ISR:	
  2198                           ; 1 bytes @ 0x0
  2199                           
  2200  0070                     ?_TMR1_ISR:	
  2201                           ; 1 bytes @ 0x0
  2202                           
  2203  0070                     ??_TMR1_ISR:	
  2204                           ; 1 bytes @ 0x0
  2205                           
  2206  0070                     ?_TMR1_DefaultInterruptHandler:	
  2207                           ; 1 bytes @ 0x0
  2208                           
  2209  0070                     ??_TMR1_DefaultInterruptHandler:	
  2210                           ; 1 bytes @ 0x0
  2211                           
  2212  0070                     ?_TMR1_StartTimer:	
  2213                           ; 1 bytes @ 0x0
  2214                           
  2215  0070                     ?_TMR1_CallBack:	
  2216                           ; 1 bytes @ 0x0
  2217                           
  2218  0070                     ??_TMR1_CallBack:	
  2219                           ; 1 bytes @ 0x0
  2220                           
  2221  0070                     ?_LCDInit:	
  2222                           ; 1 bytes @ 0x0
  2223                           
  2224  0070                     ?_SYSTEM_Initialize:	
  2225                           ; 1 bytes @ 0x0
  2226                           
  2227  0070                     ?_EUSART_Write:	
  2228                           ; 1 bytes @ 0x0
  2229                           
  2230  0070                     ?_EUSART_Transmit_ISR:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ??_EUSART_Transmit_ISR:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?_EUSART_Receive_ISR:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ??_EUSART_Receive_ISR:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?_INTERRUPT_InterruptManager:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ?_TMR1_disable:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?_TMR1_enable:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ?_ADC_StartConversion:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_turn_egs:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ?_sms_text:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?_int_gsm:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_StartSignal:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_CheckResponse:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_ReadData:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_DHT_result:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_main:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_ADC_GetConversionResult:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281                           
  2282                           ; 2 bytes @ 0x0
  2283  0070                     	ds	2
  2284  0072                     ??_ADC_GetConversionResult:	
  2285                           
  2286                           ; 1 bytes @ 0x2
  2287  0072                     	ds	7
  2288  0079                     ??_ADC_ISR:	
  2289  0079                     ??_INTERRUPT_InterruptManager:	
  2290                           ; 1 bytes @ 0x9
  2291                           
  2292                           
  2293                           ; 1 bytes @ 0x9
  2294  0079                     	ds	1
  2295                           
  2296                           	psect	cstackBANK0
  2297  0020                     __pcstackBANK0:	
  2298  0020                     ??_PIN_MANAGER_Initialize:	
  2299  0020                     ??_OSCILLATOR_Initialize:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0020                     ??_WDT_Initialize:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0020                     ??_ADC_Initialize:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0020                     ??_EUSART_Initialize:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0020                     ?_TMR1_SetInterruptHandler:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0020                     ??_TMR1_StartTimer:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0020                     ?_LCDByte:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0020                     ??_EUSART_Write:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0020                     ??_TMR1_disable:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0020                     ??_TMR1_enable:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0020                     ??_ADC_StartConversion:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0020                     ??_turn_egs:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0020                     ??_StartSignal:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0020                     ??_CheckResponse:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0020                     ??_ReadData:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0020                     ?___bmul:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0020                     ?___wmul:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0020                     ?___awdiv:	
  2351                           ; 2 bytes @ 0x0
  2352                           
  2353  0020                     ?___awmod:	
  2354                           ; 2 bytes @ 0x0
  2355                           
  2356  0020                     ?___lwdiv:	
  2357                           ; 2 bytes @ 0x0
  2358                           
  2359  0020                     ?___ftpack:	
  2360                           ; 2 bytes @ 0x0
  2361                           
  2362  0020                     ?___fttol:	
  2363                           ; 3 bytes @ 0x0
  2364                           
  2365  0020                     LCDByte@isdata:	
  2366                           ; 4 bytes @ 0x0
  2367                           
  2368  0020                     ___bmul@multiplicand:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0020                     ___wmul@multiplier:	
  2375                           ; 2 bytes @ 0x0
  2376                           
  2377  0020                     ___awdiv@divisor:	
  2378                           ; 2 bytes @ 0x0
  2379                           
  2380  0020                     ___awmod@divisor:	
  2381                           ; 2 bytes @ 0x0
  2382                           
  2383  0020                     ___lwdiv@divisor:	
  2384                           ; 2 bytes @ 0x0
  2385                           
  2386  0020                     ___ftpack@arg:	
  2387                           ; 2 bytes @ 0x0
  2388                           
  2389  0020                     ___fttol@f1:	
  2390                           ; 3 bytes @ 0x0
  2391                           
  2392                           
  2393                           ; 3 bytes @ 0x0
  2394  0020                     	ds	1
  2395  0021                     ??_LCDByte:	
  2396  0021                     ??___bmul:	
  2397                           ; 1 bytes @ 0x1
  2398                           
  2399  0021                     EUSART_Write@txData:	
  2400                           ; 1 bytes @ 0x1
  2401                           
  2402                           
  2403                           ; 1 bytes @ 0x1
  2404  0021                     	ds	1
  2405  0022                     ??_TMR1_Initialize:	
  2406  0022                     ??_TMR1_SetInterruptHandler:	
  2407                           ; 1 bytes @ 0x2
  2408                           
  2409  0022                     ??_SYSTEM_Initialize:	
  2410                           ; 1 bytes @ 0x2
  2411                           
  2412  0022                     ?_putch:	
  2413                           ; 1 bytes @ 0x2
  2414                           
  2415  0022                     putch@txData:	
  2416                           ; 1 bytes @ 0x2
  2417                           
  2418  0022                     ReadData@i:	
  2419                           ; 1 bytes @ 0x2
  2420                           
  2421  0022                     ___bmul@product:	
  2422                           ; 1 bytes @ 0x2
  2423                           
  2424  0022                     ___wmul@multiplicand:	
  2425                           ; 1 bytes @ 0x2
  2426                           
  2427  0022                     ___awdiv@dividend:	
  2428                           ; 2 bytes @ 0x2
  2429                           
  2430  0022                     ___awmod@dividend:	
  2431                           ; 2 bytes @ 0x2
  2432                           
  2433  0022                     ___lwdiv@dividend:	
  2434                           ; 2 bytes @ 0x2
  2435                           
  2436                           
  2437                           ; 2 bytes @ 0x2
  2438  0022                     	ds	1
  2439  0023                     ??_putch:	
  2440  0023                     ReadData@j:	
  2441                           ; 1 bytes @ 0x3
  2442                           
  2443  0023                     LCDByte@hn:	
  2444                           ; 1 bytes @ 0x3
  2445                           
  2446  0023                     ___bmul@multiplier:	
  2447                           ; 1 bytes @ 0x3
  2448                           
  2449  0023                     ___ftpack@exp:	
  2450                           ; 1 bytes @ 0x3
  2451                           
  2452                           
  2453                           ; 1 bytes @ 0x3
  2454  0023                     	ds	1
  2455  0024                     ??___wmul:	
  2456  0024                     ??___awdiv:	
  2457                           ; 1 bytes @ 0x4
  2458                           
  2459  0024                     ??___awmod:	
  2460                           ; 1 bytes @ 0x4
  2461                           
  2462  0024                     ??___fttol:	
  2463                           ; 1 bytes @ 0x4
  2464                           
  2465  0024                     ??___lwdiv:	
  2466                           ; 1 bytes @ 0x4
  2467                           
  2468  0024                     LCDByte@ln:	
  2469                           ; 1 bytes @ 0x4
  2470                           
  2471  0024                     ___ftpack@sign:	
  2472                           ; 1 bytes @ 0x4
  2473                           
  2474  0024                     ___wmul@product:	
  2475                           ; 1 bytes @ 0x4
  2476                           
  2477                           
  2478                           ; 2 bytes @ 0x4
  2479  0024                     	ds	1
  2480  0025                     ??___ftpack:	
  2481  0025                     LCDByte@c:	
  2482                           ; 1 bytes @ 0x5
  2483                           
  2484  0025                     ___awdiv@counter:	
  2485                           ; 1 bytes @ 0x5
  2486                           
  2487  0025                     ___awmod@counter:	
  2488                           ; 1 bytes @ 0x5
  2489                           
  2490  0025                     ___lwdiv@quotient:	
  2491                           ; 1 bytes @ 0x5
  2492                           
  2493                           
  2494                           ; 2 bytes @ 0x5
  2495  0025                     	ds	1
  2496  0026                     LCDByte@temp:	
  2497  0026                     ___awdiv@sign:	
  2498                           ; 1 bytes @ 0x6
  2499                           
  2500  0026                     ___awmod@sign:	
  2501                           ; 1 bytes @ 0x6
  2502                           
  2503                           
  2504                           ; 1 bytes @ 0x6
  2505  0026                     	ds	1
  2506  0027                     ??_LCDInit:	
  2507  0027                     ?_LCDWriteString:	
  2508                           ; 1 bytes @ 0x7
  2509                           
  2510  0027                     ___lwdiv@counter:	
  2511                           ; 1 bytes @ 0x7
  2512                           
  2513  0027                     LCDWriteString@msg:	
  2514                           ; 1 bytes @ 0x7
  2515                           
  2516  0027                     ___awdiv@quotient:	
  2517                           ; 2 bytes @ 0x7
  2518                           
  2519                           
  2520                           ; 2 bytes @ 0x7
  2521  0027                     	ds	1
  2522  0028                     ?___lwmod:	
  2523  0028                     ?___awtoft:	
  2524                           ; 2 bytes @ 0x8
  2525                           
  2526  0028                     ?___lwtoft:	
  2527                           ; 3 bytes @ 0x8
  2528                           
  2529  0028                     LCDInit@style:	
  2530                           ; 3 bytes @ 0x8
  2531                           
  2532  0028                     ___fttol@sign1:	
  2533                           ; 1 bytes @ 0x8
  2534                           
  2535  0028                     ___awtoft@c:	
  2536                           ; 1 bytes @ 0x8
  2537                           
  2538  0028                     ___lwmod@divisor:	
  2539                           ; 2 bytes @ 0x8
  2540                           
  2541  0028                     ___lwtoft@c:	
  2542                           ; 2 bytes @ 0x8
  2543                           
  2544                           
  2545                           ; 2 bytes @ 0x8
  2546  0028                     	ds	1
  2547  0029                     ??_LCDWriteString:	
  2548  0029                     ?_LCDWriteInt:	
  2549                           ; 1 bytes @ 0x9
  2550                           
  2551  0029                     LCDInit@__i:	
  2552                           ; 1 bytes @ 0x9
  2553                           
  2554  0029                     LCDWriteInt@val:	
  2555                           ; 1 bytes @ 0x9
  2556                           
  2557  0029                     ___fttol@lval:	
  2558                           ; 2 bytes @ 0x9
  2559                           
  2560                           
  2561                           ; 4 bytes @ 0x9
  2562  0029                     	ds	1
  2563  002A                     LCDWriteString@cc:	
  2564  002A                     ___lwmod@dividend:	
  2565                           ; 1 bytes @ 0xA
  2566                           
  2567                           
  2568                           ; 2 bytes @ 0xA
  2569  002A                     	ds	1
  2570  002B                     ??___awtoft:	
  2571  002B                     ??___lwtoft:	
  2572                           ; 1 bytes @ 0xB
  2573                           
  2574  002B                     LCDWriteInt@field_length:	
  2575                           ; 1 bytes @ 0xB
  2576                           
  2577                           
  2578                           ; 1 bytes @ 0xB
  2579  002B                     	ds	1
  2580  002C                     ??_LCDWriteInt:	
  2581  002C                     ??___lwmod:	
  2582                           ; 1 bytes @ 0xC
  2583                           
  2584                           
  2585                           ; 1 bytes @ 0xC
  2586  002C                     	ds	1
  2587  002D                     ___awtoft@sign:	
  2588  002D                     ___fttol@exp1:	
  2589                           ; 1 bytes @ 0xD
  2590                           
  2591  002D                     ___lwmod@counter:	
  2592                           ; 1 bytes @ 0xD
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0xD
  2596  002D                     	ds	1
  2597  002E                     ?___ftge:	
  2598  002E                     ?__doprnt:	
  2599                           ; 1 bit 
  2600                           
  2601  002E                     ?___ftmul:	
  2602                           ; 2 bytes @ 0xE
  2603                           
  2604  002E                     __doprnt@f:	
  2605                           ; 3 bytes @ 0xE
  2606                           
  2607  002E                     ___ftge@ff1:	
  2608                           ; 2 bytes @ 0xE
  2609                           
  2610  002E                     ___ftmul@f1:	
  2611                           ; 3 bytes @ 0xE
  2612                           
  2613  002E                     LCDWriteInt@str:	
  2614                           ; 3 bytes @ 0xE
  2615                           
  2616                           
  2617                           ; 5 bytes @ 0xE
  2618  002E                     	ds	2
  2619  0030                     __doprnt@ap:	
  2620                           
  2621                           ; 1 bytes @ 0x10
  2622  0030                     	ds	1
  2623  0031                     ??__doprnt:	
  2624  0031                     ___ftge@ff2:	
  2625                           ; 1 bytes @ 0x11
  2626                           
  2627  0031                     ___ftmul@f2:	
  2628                           ; 3 bytes @ 0x11
  2629                           
  2630                           
  2631                           ; 3 bytes @ 0x11
  2632  0031                     	ds	2
  2633  0033                     LCDWriteInt@j:	
  2634                           
  2635                           ; 2 bytes @ 0x13
  2636  0033                     	ds	1
  2637  0034                     ??___ftge:	
  2638  0034                     ??___ftmul:	
  2639                           ; 1 bytes @ 0x14
  2640                           
  2641                           
  2642                           ; 1 bytes @ 0x14
  2643  0034                     	ds	1
  2644  0035                     __doprnt@flag:	
  2645  0035                     LCDWriteInt@i:	
  2646                           ; 1 bytes @ 0x15
  2647                           
  2648                           
  2649                           ; 2 bytes @ 0x15
  2650  0035                     	ds	1
  2651  0036                     __doprnt@prec:	
  2652                           
  2653                           ; 1 bytes @ 0x16
  2654  0036                     	ds	1
  2655  0037                     __doprnt@val:	
  2656                           
  2657                           ; 2 bytes @ 0x17
  2658  0037                     	ds	1
  2659  0038                     ___ftmul@exp:	
  2660                           
  2661                           ; 1 bytes @ 0x18
  2662  0038                     	ds	1
  2663  0039                     __doprnt@c:	
  2664  0039                     ___ftmul@f3_as_product:	
  2665                           ; 1 bytes @ 0x19
  2666                           
  2667                           
  2668                           ; 3 bytes @ 0x19
  2669  0039                     	ds	1
  2670  003A                     __doprnt@pb:	
  2671                           
  2672                           ; 1 bytes @ 0x1A
  2673  003A                     	ds	1
  2674  003B                     ?_printf:	
  2675  003B                     ?_sprintf:	
  2676                           ; 2 bytes @ 0x1B
  2677                           
  2678  003B                     printf@f:	
  2679                           ; 2 bytes @ 0x1B
  2680                           
  2681  003B                     sprintf@wh:	
  2682                           ; 2 bytes @ 0x1B
  2683                           
  2684                           
  2685                           ; 2 bytes @ 0x1B
  2686  003B                     	ds	1
  2687  003C                     ___ftmul@cntr:	
  2688                           
  2689                           ; 1 bytes @ 0x1C
  2690  003C                     	ds	1
  2691  003D                     ??_printf:	
  2692  003D                     ___ftmul@sign:	
  2693                           ; 1 bytes @ 0x1D
  2694                           
  2695  003D                     sprintf@f:	
  2696                           ; 1 bytes @ 0x1D
  2697                           
  2698                           
  2699                           ; 2 bytes @ 0x1D
  2700  003D                     	ds	1
  2701  003E                     ?___ftdiv:	
  2702  003E                     ?___ftneg:	
  2703                           ; 3 bytes @ 0x1E
  2704                           
  2705  003E                     printf@ap:	
  2706                           ; 3 bytes @ 0x1E
  2707                           
  2708  003E                     ___ftdiv@f2:	
  2709                           ; 1 bytes @ 0x1E
  2710                           
  2711  003E                     ___ftneg@f1:	
  2712                           ; 3 bytes @ 0x1E
  2713                           
  2714                           
  2715                           ; 3 bytes @ 0x1E
  2716  003E                     	ds	1
  2717  003F                     printf@pb:	
  2718                           
  2719                           ; 4 bytes @ 0x1F
  2720  003F                     	ds	2
  2721  0041                     ??_sprintf:	
  2722  0041                     ??___ftneg:	
  2723                           ; 1 bytes @ 0x21
  2724                           
  2725  0041                     ?___ftadd:	
  2726                           ; 1 bytes @ 0x21
  2727                           
  2728  0041                     ___ftadd@f1:	
  2729                           ; 3 bytes @ 0x21
  2730                           
  2731  0041                     ___ftdiv@f1:	
  2732                           ; 3 bytes @ 0x21
  2733                           
  2734                           
  2735                           ; 3 bytes @ 0x21
  2736  0041                     	ds	1
  2737  0042                     sprintf@ap:	
  2738                           
  2739                           ; 1 bytes @ 0x22
  2740  0042                     	ds	1
  2741  0043                     ??_int_gsm:	
  2742  0043                     sprintf@pb:	
  2743                           ; 1 bytes @ 0x23
  2744                           
  2745                           
  2746                           ; 4 bytes @ 0x23
  2747  0043                     	ds	1
  2748  0044                     ??___ftdiv:	
  2749  0044                     ___ftadd@f2:	
  2750                           ; 1 bytes @ 0x24
  2751                           
  2752                           
  2753                           ; 3 bytes @ 0x24
  2754  0044                     	ds	3
  2755  0047                     ??_sms_text:	
  2756  0047                     ??_DHT_result:	
  2757                           ; 1 bytes @ 0x27
  2758                           
  2759  0047                     ??___ftadd:	
  2760                           ; 1 bytes @ 0x27
  2761                           
  2762                           
  2763                           ; 1 bytes @ 0x27
  2764  0047                     	ds	1
  2765  0048                     ___ftdiv@cntr:	
  2766                           
  2767                           ; 1 bytes @ 0x28
  2768  0048                     	ds	1
  2769  0049                     sms_text@smstext:	
  2770  0049                     ___ftdiv@f3:	
  2771                           ; 1 bytes @ 0x29
  2772                           
  2773                           
  2774                           ; 3 bytes @ 0x29
  2775  0049                     	ds	1
  2776  004A                     sms_text@umid:	
  2777                           
  2778                           ; 1 bytes @ 0x2A
  2779  004A                     	ds	1
  2780  004B                     ___ftadd@sign:	
  2781                           
  2782                           ; 1 bytes @ 0x2B
  2783  004B                     	ds	1
  2784  004C                     ___ftadd@exp2:	
  2785  004C                     ___ftdiv@exp:	
  2786                           ; 1 bytes @ 0x2C
  2787                           
  2788                           
  2789                           ; 1 bytes @ 0x2C
  2790  004C                     	ds	1
  2791  004D                     ___ftadd@exp1:	
  2792  004D                     ___ftdiv@sign:	
  2793                           ; 1 bytes @ 0x2D
  2794                           
  2795                           
  2796                           ; 1 bytes @ 0x2D
  2797  004D                     	ds	1
  2798  004E                     ?_comparare:	
  2799  004E                     comparare@resistor_value:	
  2800                           ; 2 bytes @ 0x2E
  2801                           
  2802                           
  2803                           ; 2 bytes @ 0x2E
  2804  004E                     	ds	2
  2805  0050                     ??_comparare:	
  2806                           
  2807                           ; 1 bytes @ 0x30
  2808  0050                     	ds	2
  2809  0052                     comparare@dif:	
  2810                           
  2811                           ; 3 bytes @ 0x32
  2812  0052                     	ds	3
  2813  0055                     DHT_result@x:	
  2814  0055                     comparare@step:	
  2815                           ; 2 bytes @ 0x35
  2816                           
  2817                           
  2818                           ; 3 bytes @ 0x35
  2819  0055                     	ds	3
  2820  0058                     comparare@result:	
  2821                           
  2822                           ; 2 bytes @ 0x38
  2823  0058                     	ds	2
  2824  005A                     comparare@j:	
  2825                           
  2826                           ; 2 bytes @ 0x3A
  2827  005A                     	ds	2
  2828  005C                     comparare@j_778:	
  2829                           
  2830                           ; 2 bytes @ 0x3C
  2831  005C                     	ds	2
  2832  005E                     ??_main:	
  2833                           
  2834                           ; 1 bytes @ 0x3E
  2835  005E                     	ds	1
  2836  005F                     main@x:	
  2837                           
  2838                           ; 1 bytes @ 0x3F
  2839  005F                     	ds	1
  2840  0060                     main@incubator_state:	
  2841                           
  2842                           ; 1 bytes @ 0x40
  2843  0060                     	ds	1
  2844  0061                     main@volt:	
  2845                           
  2846                           ; 3 bytes @ 0x41
  2847  0061                     	ds	3
  2848                           
  2849                           	psect	maintext
  2850  0382                     __pmaintext:	
  2851 ;;
  2852 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2853 ;;
  2854 ;; *************** function _main *****************
  2855 ;; Defined at:
  2856 ;;		line 401 in file "main.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  volt            3   65[BANK0 ] float 
  2861 ;;  incubator_st    1   64[BANK0 ] unsigned char 
  2862 ;;  x               1   63[BANK0 ] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : B1F/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2872 ;;      Params:         0       0       0       0       0       0       0       0
  2873 ;;      Locals:         0       5       0       0       0       0       0       0
  2874 ;;      Temps:          0       1       0       0       0       0       0       0
  2875 ;;      Totals:         0       6       0       0       0       0       0       0
  2876 ;;Total ram usage:        6 bytes
  2877 ;; Hardware stack levels required when called:    9
  2878 ;; This function calls:
  2879 ;;		_ADC_StartConversion
  2880 ;;		_CheckResponse
  2881 ;;		_DHT_result
  2882 ;;		_LCDByte
  2883 ;;		_LCDInit
  2884 ;;		_LCDWriteInt
  2885 ;;		_LCDWriteString
  2886 ;;		_SYSTEM_Initialize
  2887 ;;		_StartSignal
  2888 ;;		_TMR1_disable
  2889 ;;		_TMR1_enable
  2890 ;;		___ftdiv
  2891 ;;		___ftmul
  2892 ;;		___fttol
  2893 ;;		___lwtoft
  2894 ;;		_comparare
  2895 ;;		_int_gsm
  2896 ;;		_sms_text
  2897 ;;		_turn_egs
  2898 ;; This function is called by:
  2899 ;;		Startup code after reset
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _main
  2905  0382                     _main:	
  2906                           
  2907                           ;main.c: 403: char x=0;
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2911  0382  0020               	movlb	0	; select bank0
  2912  0383  01DF               	clrf	main@x
  2913                           
  2914                           ;main.c: 406: SYSTEM_Initialize();
  2915  0384  3188  207E  3183   	fcall	_SYSTEM_Initialize
  2916                           
  2917                           ;main.c: 407: TRISCbits.TRISC2=0;
  2918  0387  0021               	movlb	1	; select bank1
  2919  0388  110E               	bcf	14,2	;volatile
  2920                           
  2921                           ;main.c: 408: ADC_StartConversion();
  2922  0389  3188  2040  3183   	fcall	_ADC_StartConversion
  2923                           
  2924                           ;main.c: 409: TRISCbits.TRISC0=0;
  2925  038C  0021               	movlb	1	; select bank1
  2926  038D  100E               	bcf	14,0	;volatile
  2927                           
  2928                           ;main.c: 410: TRISCbits.TRISC3=0;
  2929  038E  118E               	bcf	14,3	;volatile
  2930                           
  2931                           ;main.c: 411: TRISCbits.TRISC4=0;
  2932  038F  120E               	bcf	14,4	;volatile
  2933                           
  2934                           ;main.c: 412: TRISCbits.TRISC5=0;
  2935  0390  128E               	bcf	14,5	;volatile
  2936                           
  2937                           ;main.c: 415: ANSELD=ANSELD & 0b11100000;
  2938  0391  0023               	movlb	3	; select bank3
  2939  0392  080F               	movf	15,w	;volatile
  2940  0393  39E0               	andlw	224
  2941  0394  008F               	movwf	15	;volatile
  2942                           
  2943                           ;main.c: 420: (INTCONbits.GIE = 1);
  2944  0395  178B               	bsf	11,7	;volatile
  2945                           
  2946                           ;main.c: 423: (INTCONbits.PEIE = 1);
  2947  0396  170B               	bsf	11,6	;volatile
  2948                           
  2949                           ;main.c: 431: char incubator_state=none;
  2950  0397  3006               	movlw	6
  2951  0398  0020               	movlb	0	; select bank0
  2952  0399  00DE               	movwf	??_main
  2953  039A  085E               	movf	??_main,w
  2954  039B  00E0               	movwf	main@incubator_state
  2955                           
  2956                           ;main.c: 432: TRISDbits.TRISD2 = 1;
  2957  039C  0021               	movlb	1	; select bank1
  2958  039D  150F               	bsf	15,2	;volatile
  2959                           
  2960                           ;main.c: 434: flag_directie=1;
  2961  039E  3001               	movlw	1
  2962  039F  0022               	movlb	2	; select bank2
  2963  03A0  00EB               	movwf	_flag_directie^(0+256)
  2964  03A1  3000               	movlw	0
  2965  03A2  00EC               	movwf	(_flag_directie^(0+256)+1)
  2966                           
  2967                           ;main.c: 435: int_gsm();
  2968  03A3  318C  2480  3183   	fcall	_int_gsm
  2969                           
  2970                           ;main.c: 441: float volt;
  2971                           ;main.c: 442: LCDInit(1);
  2972  03A6  3001               	movlw	1
  2973  03A7  318D  2575  3183   	fcall	_LCDInit
  2974                           
  2975                           ;main.c: 444: (LCDByte(0b00000001,0));
  2976  03AA  0020               	movlb	0	; select bank0
  2977  03AB  01A0               	clrf	LCDByte@isdata
  2978  03AC  3001               	movlw	1
  2979  03AD  318B  236E  3183   	fcall	_LCDByte
  2980  03B0                     l5177:	
  2981                           ;main.c: 446: while (1)
  2982                           
  2983                           
  2984                           ;main.c: 447: {
  2985                           ;main.c: 449: if (flag_1000_ms==1)
  2986  03B0  0022               	movlb	2	; select bank2
  2987  03B1  035A               	decf	_flag_1000_ms^(0+256),w
  2988  03B2  045B               	iorwf	(_flag_1000_ms+1)^(0+256),w
  2989  03B3  1D03               	btfss	3,2
  2990  03B4  2C6C               	goto	l5211
  2991                           
  2992                           ;main.c: 450: {
  2993                           ;main.c: 451: TMR1_disable();
  2994  03B5  3188  2046  3183   	fcall	_TMR1_disable
  2995                           
  2996                           ;main.c: 452: StartSignal();
  2997  03B8  3188  20A2  3183   	fcall	_StartSignal
  2998                           
  2999                           ;main.c: 453: CheckResponse();
  3000  03BB  3188  20CB  3183   	fcall	_CheckResponse
  3001                           
  3002                           ;main.c: 454: if(Check == 1)
  3003  03BE  0020               	movlb	0	; select bank0
  3004  03BF  036A               	decf	_Check,w
  3005  03C0  1D03               	btfss	3,2
  3006  03C1  2BC5               	goto	l5189
  3007                           
  3008                           ;main.c: 455: {
  3009                           ;main.c: 456: DHT_result();
  3010  03C2  318D  25CC  3183   	fcall	_DHT_result
  3011  03C5                     l5189:	
  3012                           ;main.c: 458: ;
  3013                           
  3014                           
  3015                           ;main.c: 459: }
  3016                           ;main.c: 460: ADC_StartConversion();
  3017  03C5  3188  2040  3183   	fcall	_ADC_StartConversion
  3018                           
  3019                           ;main.c: 461: volt=(rez_conversie*4.887)/1.492;
  3020  03C8  30FA               	movlw	250
  3021  03C9  0020               	movlb	0	; select bank0
  3022  03CA  00BE               	movwf	___ftdiv@f2
  3023  03CB  30BE               	movlw	190
  3024  03CC  00BF               	movwf	___ftdiv@f2+1
  3025  03CD  303F               	movlw	63
  3026  03CE  00C0               	movwf	___ftdiv@f2+2
  3027  03CF  3062               	movlw	98
  3028  03D0  00AE               	movwf	___ftmul@f1
  3029  03D1  309C               	movlw	156
  3030  03D2  00AF               	movwf	___ftmul@f1+1
  3031  03D3  3040               	movlw	64
  3032  03D4  00B0               	movwf	___ftmul@f1+2
  3033  03D5  0022               	movlb	2	; select bank2
  3034  03D6  0867               	movf	(_rez_conversie+1)^(0+256),w
  3035  03D7  0020               	movlb	0	; select bank0
  3036  03D8  00A9               	movwf	___lwtoft@c+1
  3037  03D9  0022               	movlb	2	; select bank2
  3038  03DA  0866               	movf	_rez_conversie^(0+256),w
  3039  03DB  0020               	movlb	0	; select bank0
  3040  03DC  00A8               	movwf	___lwtoft@c
  3041  03DD  3188  20B6  3183   	fcall	___lwtoft
  3042  03E0  0020               	movlb	0	; select bank0
  3043  03E1  0828               	movf	?___lwtoft,w
  3044  03E2  00B1               	movwf	___ftmul@f2
  3045  03E3  0829               	movf	?___lwtoft+1,w
  3046  03E4  00B2               	movwf	___ftmul@f2+1
  3047  03E5  082A               	movf	?___lwtoft+2,w
  3048  03E6  00B3               	movwf	___ftmul@f2+2
  3049  03E7  3186  2631  3183   	fcall	___ftmul
  3050  03EA  0020               	movlb	0	; select bank0
  3051  03EB  082E               	movf	?___ftmul,w
  3052  03EC  00C1               	movwf	___ftdiv@f1
  3053  03ED  082F               	movf	?___ftmul+1,w
  3054  03EE  00C2               	movwf	___ftdiv@f1+1
  3055  03EF  0830               	movf	?___ftmul+2,w
  3056  03F0  00C3               	movwf	___ftdiv@f1+2
  3057  03F1  3186  26E5  3183   	fcall	___ftdiv
  3058  03F4  0020               	movlb	0	; select bank0
  3059  03F5  083E               	movf	?___ftdiv,w
  3060  03F6  00E1               	movwf	main@volt
  3061  03F7  083F               	movf	?___ftdiv+1,w
  3062  03F8  00E2               	movwf	main@volt+1
  3063  03F9  0840               	movf	?___ftdiv+2,w
  3064  03FA  00E3               	movwf	main@volt+2
  3065                           
  3066                           ;main.c: 463: temp=comparare(volt);
  3067  03FB  0861               	movf	main@volt,w
  3068  03FC  00A0               	movwf	___fttol@f1
  3069  03FD  0862               	movf	main@volt+1,w
  3070  03FE  00A1               	movwf	___fttol@f1+1
  3071  03FF  0863               	movf	main@volt+2,w
  3072  0400  00A2               	movwf	___fttol@f1+2
  3073  0401  318E  2648  3183   	fcall	___fttol
  3074  0404  0020               	movlb	0	; select bank0
  3075  0405  0821               	movf	?___fttol+1,w
  3076  0406  00CF               	movwf	comparare@resistor_value+1
  3077  0407  0820               	movf	?___fttol,w
  3078  0408  00CE               	movwf	comparare@resistor_value
  3079  0409  3180  208A  3183   	fcall	_comparare
  3080  040C  0020               	movlb	0	; select bank0
  3081  040D  084F               	movf	?_comparare+1,w
  3082  040E  0022               	movlb	2	; select bank2
  3083  040F  00CD               	movwf	(_temp+1)^(0+256)
  3084  0410  0020               	movlb	0	; select bank0
  3085  0411  084E               	movf	?_comparare,w
  3086  0412  0022               	movlb	2	; select bank2
  3087  0413  00CC               	movwf	_temp^(0+256)
  3088                           
  3089                           ;main.c: 464: if (temp<300)
  3090  0414  084D               	movf	(_temp+1)^(0+256),w
  3091  0415  3A80               	xorlw	128
  3092  0416  0020               	movlb	0	; select bank0
  3093  0417  00DE               	movwf	??_main
  3094  0418  3081               	movlw	129
  3095  0419  025E               	subwf	??_main,w
  3096  041A  1D03               	skipz
  3097  041B  2C1F               	goto	u6225
  3098  041C  302C               	movlw	44
  3099  041D  0022               	movlb	2	; select bank2
  3100  041E  024C               	subwf	_temp^(0+256),w
  3101  041F                     u6225:	
  3102  041F  1803               	skipnc
  3103  0420  2C24               	goto	l518
  3104                           
  3105                           ;main.c: 466: LATCbits.LATC2=1;
  3106  0421  0022               	movlb	2	; select bank2
  3107  0422  150E               	bsf	14,2	;volatile
  3108  0423  2C26               	goto	l5197
  3109  0424                     l518:	
  3110                           
  3111                           ;main.c: 467: else
  3112                           ;main.c: 468: LATCbits.LATC2=0;
  3113  0424  0022               	movlb	2	; select bank2
  3114  0425  110E               	bcf	14,2	;volatile
  3115  0426                     l5197:	
  3116                           
  3117                           ;main.c: 469: (LCDByte(0b00000001,0));
  3118  0426  0020               	movlb	0	; select bank0
  3119  0427  01A0               	clrf	LCDByte@isdata
  3120  0428  3001               	movlw	1
  3121  0429  318B  236E  3183   	fcall	_LCDByte
  3122                           
  3123                           ;main.c: 470: (LCDByte(0xB0,0));
  3124  042C  0020               	movlb	0	; select bank0
  3125  042D  01A0               	clrf	LCDByte@isdata
  3126  042E  30B0               	movlw	176
  3127  042F  318B  236E  3183   	fcall	_LCDByte
  3128                           
  3129                           ;main.c: 471: LCDWriteString("Temper=  ");
  3130  0432  3070               	movlw	low (STR_11| (0+32768))
  3131  0433  0020               	movlb	0	; select bank0
  3132  0434  00A7               	movwf	LCDWriteString@msg
  3133  0435  3090               	movlw	high (STR_11| (0+32768))
  3134  0436  00A8               	movwf	LCDWriteString@msg+1
  3135  0437  318B  23AF  3183   	fcall	_LCDWriteString
  3136                           
  3137                           ;main.c: 473: LCDWriteInt(temp,3);
  3138  043A  0022               	movlb	2	; select bank2
  3139  043B  084D               	movf	(_temp+1)^(0+256),w
  3140  043C  0020               	movlb	0	; select bank0
  3141  043D  00AA               	movwf	LCDWriteInt@val+1
  3142  043E  0022               	movlb	2	; select bank2
  3143  043F  084C               	movf	_temp^(0+256),w
  3144  0440  0020               	movlb	0	; select bank0
  3145  0441  00A9               	movwf	LCDWriteInt@val
  3146  0442  3003               	movlw	3
  3147  0443  00DE               	movwf	??_main
  3148  0444  085E               	movf	??_main,w
  3149  0445  00AB               	movwf	LCDWriteInt@field_length
  3150  0446  318E  26CF  3183   	fcall	_LCDWriteInt
  3151                           
  3152                           ;main.c: 474: (LCDByte(0xC0,0));
  3153  0449  0020               	movlb	0	; select bank0
  3154  044A  01A0               	clrf	LCDByte@isdata
  3155  044B  30C0               	movlw	192
  3156  044C  318B  236E  3183   	fcall	_LCDByte
  3157                           
  3158                           ;main.c: 475: LCDWriteString("Umid=  ");
  3159  044F  3084               	movlw	low (STR_12| (0+32768))
  3160  0450  0020               	movlb	0	; select bank0
  3161  0451  00A7               	movwf	LCDWriteString@msg
  3162  0452  3090               	movlw	high (STR_12| (0+32768))
  3163  0453  00A8               	movwf	LCDWriteString@msg+1
  3164  0454  318B  23AF  3183   	fcall	_LCDWriteString
  3165                           
  3166                           ;main.c: 477: LCDWriteInt(umiditate,3);
  3167  0457  0022               	movlb	2	; select bank2
  3168  0458  084B               	movf	(_umiditate+1)^(0+256),w
  3169  0459  0020               	movlb	0	; select bank0
  3170  045A  00AA               	movwf	LCDWriteInt@val+1
  3171  045B  0022               	movlb	2	; select bank2
  3172  045C  084A               	movf	_umiditate^(0+256),w
  3173  045D  0020               	movlb	0	; select bank0
  3174  045E  00A9               	movwf	LCDWriteInt@val
  3175  045F  3003               	movlw	3
  3176  0460  00DE               	movwf	??_main
  3177  0461  085E               	movf	??_main,w
  3178  0462  00AB               	movwf	LCDWriteInt@field_length
  3179  0463  318E  26CF  3183   	fcall	_LCDWriteInt
  3180                           
  3181                           ;main.c: 479: flag_1000_ms=0;
  3182  0466  0022               	movlb	2	; select bank2
  3183  0467  01DA               	clrf	_flag_1000_ms^(0+256)
  3184  0468  01DB               	clrf	(_flag_1000_ms+1)^(0+256)
  3185                           
  3186                           ;main.c: 480: TMR1_enable();
  3187  0469  3187  27FD  3183   	fcall	_TMR1_enable
  3188  046C                     l5211:	
  3189                           
  3190                           ;main.c: 482: }
  3191                           ;main.c: 486: if (flag_G==1)
  3192  046C  0022               	movlb	2	; select bank2
  3193  046D  0362               	decf	_flag_G^(0+256),w
  3194  046E  0463               	iorwf	(_flag_G+1)^(0+256),w
  3195  046F  1D03               	btfss	3,2
  3196  0470  2C78               	goto	l5217
  3197                           
  3198                           ;main.c: 487: {
  3199                           ;main.c: 488: if (flag_N==1)
  3200  0471  0364               	decf	_flag_N^(0+256),w
  3201  0472  0465               	iorwf	(_flag_N+1)^(0+256),w
  3202  0473  1D03               	btfss	3,2
  3203  0474  2C78               	goto	l5217
  3204                           
  3205                           ;main.c: 489: {
  3206                           ;main.c: 491: turn_egs();
  3207  0475  3185  257B  3183   	fcall	_turn_egs
  3208  0478                     l5217:	
  3209                           
  3210                           ;main.c: 493: }
  3211                           ;main.c: 495: }
  3212                           ;main.c: 497: if (flag_A==1)
  3213  0478  0022               	movlb	2	; select bank2
  3214  0479  0360               	decf	_flag_A^(0+256),w
  3215  047A  0461               	iorwf	(_flag_A+1)^(0+256),w
  3216  047B  1D03               	btfss	3,2
  3217  047C  2BB0               	goto	l5177
  3218                           
  3219                           ;main.c: 498: {
  3220                           ;main.c: 499: if (flag_B==1)
  3221  047D  035E               	decf	_flag_B^(0+256),w
  3222  047E  045F               	iorwf	(_flag_B+1)^(0+256),w
  3223  047F  1D03               	btfss	3,2
  3224  0480  2BB0               	goto	l5177
  3225                           
  3226                           ;main.c: 500: {
  3227                           ;main.c: 502: sms_text();
  3228  0481  318F  2760  3183   	fcall	_sms_text
  3229  0484  2BB0               	goto	l5177
  3230  0485                     __end_of_main:	
  3231                           ;main.c: 505: }
  3232                           ;main.c: 507: }
  3233                           ;main.c: 515: }
  3234                           ;main.c: 518: return;
  3235                           
  3236                           
  3237                           	psect	text1
  3238  057B                     __ptext1:	
  3239 ;; *************** function _turn_egs *****************
  3240 ;; Defined at:
  3241 ;;		line 86 in file "main.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3255 ;;      Params:         0       0       0       0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0       0
  3257 ;;      Temps:          0       1       0       0       0       0       0       0
  3258 ;;      Totals:         0       1       0       0       0       0       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    4
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _turn_egs
  3271  057B                     _turn_egs:	
  3272                           
  3273                           ;main.c: 88: static unsigned char step_index;
  3274                           ;main.c: 89: static unsigned int step_nr=1;
  3275                           ;main.c: 96: if((step_nr<1000)&&(flag_10_ms==1))
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _turn_egs: [wreg+status,2+status,0]
  3279  057B  3003               	movlw	3
  3280  057C  0022               	movlb	2	; select bank2
  3281  057D  026F               	subwf	(turn_egs@step_nr+1)^(0+256),w
  3282  057E  30E8               	movlw	232
  3283  057F  1903               	skipnz
  3284  0580  026E               	subwf	turn_egs@step_nr^(0+256),w
  3285  0581  1803               	skipnc
  3286  0582  2E13               	goto	l3445
  3287  0583  035C               	decf	_flag_10_ms^(0+256),w
  3288  0584  045D               	iorwf	(_flag_10_ms+1)^(0+256),w
  3289  0585  1D03               	btfss	3,2
  3290  0586  2E13               	goto	l3445
  3291                           
  3292                           ;main.c: 97: {
  3293                           ;main.c: 98: if(flag_directie==1)
  3294  0587  036B               	decf	_flag_directie^(0+256),w
  3295  0588  046C               	iorwf	(_flag_directie+1)^(0+256),w
  3296  0589  1D03               	btfss	3,2
  3297  058A  2DCD               	goto	l3389
  3298                           
  3299                           ;main.c: 99: {
  3300                           ;main.c: 100: step_nr++;
  3301  058B  3001               	movlw	1
  3302  058C  07EE               	addwf	turn_egs@step_nr^(0+256),f
  3303  058D  3000               	movlw	0
  3304  058E  3DEF               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  3305                           
  3306                           ;main.c: 101: if(step_index==0)
  3307  058F  087A               	movf	turn_egs@step_index,w
  3308  0590  1D03               	btfss	3,2
  3309  0591  2D9B               	goto	l3349
  3310                           
  3311                           ;main.c: 102: {
  3312                           ;main.c: 103: step_index++;
  3313  0592  3001               	movlw	1
  3314  0593  0020               	movlb	0	; select bank0
  3315  0594  00A0               	movwf	??_turn_egs
  3316  0595  0820               	movf	??_turn_egs,w
  3317  0596  07FA               	addwf	turn_egs@step_index,f
  3318                           
  3319                           ;main.c: 104: LATCbits.LATC0=1;
  3320  0597  0022               	movlb	2	; select bank2
  3321  0598  140E               	bsf	14,0	;volatile
  3322                           
  3323                           ;main.c: 105: LATCbits.LATC3=0;
  3324  0599  118E               	bcf	14,3	;volatile
  3325  059A  2DA6               	goto	L1
  3326  059B                     l3349:	
  3327                           ;main.c: 108: }
  3328                           
  3329                           ;main.c: 107: LATCbits.LATC5=0;
  3330                           
  3331                           ;main.c: 106: LATCbits.LATC4=0;
  3332                           
  3333                           
  3334                           ;main.c: 109: else if(step_index==1)
  3335  059B  037A               	decf	turn_egs@step_index,w
  3336  059C  1D03               	btfss	3,2
  3337  059D  2DA8               	goto	l3361
  3338                           
  3339                           ;main.c: 110: {
  3340                           ;main.c: 111: step_index++;
  3341  059E  3001               	movlw	1
  3342  059F  0020               	movlb	0	; select bank0
  3343  05A0  00A0               	movwf	??_turn_egs
  3344  05A1  0820               	movf	??_turn_egs,w
  3345  05A2  07FA               	addwf	turn_egs@step_index,f
  3346                           
  3347                           ;main.c: 112: LATCbits.LATC0=0;
  3348  05A3  0022               	movlb	2	; select bank2
  3349  05A4  100E               	bcf	14,0	;volatile
  3350                           
  3351                           ;main.c: 113: LATCbits.LATC3=1;
  3352  05A5  158E               	bsf	14,3	;volatile
  3353  05A6                     L1:	
  3354                           
  3355                           ;main.c: 114: LATCbits.LATC4=0;
  3356  05A6  120E               	bcf	14,4	;volatile
  3357  05A7  2DB5               	goto	l3371
  3358  05A8                     l3361:	
  3359                           ;main.c: 116: }
  3360                           
  3361                           ;main.c: 115: LATCbits.LATC5=0;
  3362                           
  3363                           
  3364                           ;main.c: 117: else if(step_index==2)
  3365  05A8  3002               	movlw	2
  3366  05A9  067A               	xorwf	turn_egs@step_index,w
  3367  05AA  1D03               	btfss	3,2
  3368  05AB  2DB7               	goto	l3373
  3369                           
  3370                           ;main.c: 118: {
  3371                           ;main.c: 119: step_index++;
  3372  05AC  3001               	movlw	1
  3373  05AD  0020               	movlb	0	; select bank0
  3374  05AE  00A0               	movwf	??_turn_egs
  3375  05AF  0820               	movf	??_turn_egs,w
  3376  05B0  07FA               	addwf	turn_egs@step_index,f
  3377                           
  3378                           ;main.c: 120: LATCbits.LATC0=0;
  3379  05B1  0022               	movlb	2	; select bank2
  3380  05B2  100E               	bcf	14,0	;volatile
  3381                           
  3382                           ;main.c: 121: LATCbits.LATC3=0;
  3383  05B3  118E               	bcf	14,3	;volatile
  3384                           
  3385                           ;main.c: 122: LATCbits.LATC4=1;
  3386  05B4  160E               	bsf	14,4	;volatile
  3387  05B5                     l3371:	
  3388                           
  3389                           ;main.c: 123: LATCbits.LATC5=0;
  3390  05B5  128E               	bcf	14,5	;volatile
  3391                           
  3392                           ;main.c: 124: }
  3393  05B6  2DCA               	goto	l419
  3394  05B7                     l3373:	
  3395                           
  3396                           ;main.c: 125: else if(step_index==3)
  3397  05B7  3003               	movlw	3
  3398  05B8  067A               	xorwf	turn_egs@step_index,w
  3399  05B9  1D03               	btfss	3,2
  3400  05BA  2DC6               	goto	l3385
  3401                           
  3402                           ;main.c: 126: {
  3403                           ;main.c: 127: step_index++;
  3404  05BB  3001               	movlw	1
  3405  05BC  0020               	movlb	0	; select bank0
  3406  05BD  00A0               	movwf	??_turn_egs
  3407  05BE  0820               	movf	??_turn_egs,w
  3408  05BF  07FA               	addwf	turn_egs@step_index,f
  3409                           
  3410                           ;main.c: 128: LATCbits.LATC0=0;
  3411  05C0  0022               	movlb	2	; select bank2
  3412  05C1  100E               	bcf	14,0	;volatile
  3413                           
  3414                           ;main.c: 129: LATCbits.LATC3=0;
  3415  05C2  118E               	bcf	14,3	;volatile
  3416                           
  3417                           ;main.c: 130: LATCbits.LATC4=0;
  3418  05C3  120E               	bcf	14,4	;volatile
  3419                           
  3420                           ;main.c: 131: LATCbits.LATC5=1;
  3421  05C4  168E               	bsf	14,5	;volatile
  3422                           
  3423                           ;main.c: 132: }
  3424  05C5  2DCA               	goto	l419
  3425  05C6                     l3385:	
  3426                           
  3427                           ;main.c: 133: else if(step_index==4)
  3428  05C6  3004               	movlw	4
  3429  05C7  067A               	xorwf	turn_egs@step_index,w
  3430  05C8  1903               	btfsc	3,2
  3431                           
  3432                           ;main.c: 134: {
  3433                           ;main.c: 135: step_index=0;
  3434  05C9  01FA               	clrf	turn_egs@step_index
  3435  05CA                     l419:	
  3436                           
  3437                           ;main.c: 136: }
  3438                           ;main.c: 138: flag_10_ms=0;
  3439  05CA  01DC               	clrf	_flag_10_ms^(0+256)
  3440  05CB  01DD               	clrf	(_flag_10_ms+1)^(0+256)
  3441                           
  3442                           ;main.c: 139: }
  3443  05CC  0008               	return
  3444  05CD                     l3389:	
  3445                           
  3446                           ;main.c: 140: else if(flag_directie==0)
  3447  05CD  086B               	movf	_flag_directie^(0+256),w
  3448  05CE  046C               	iorwf	(_flag_directie+1)^(0+256),w
  3449  05CF  1D03               	btfss	3,2
  3450  05D0  0008               	return
  3451                           
  3452                           ;main.c: 141: {
  3453                           ;main.c: 142: step_nr++;
  3454  05D1  3001               	movlw	1
  3455  05D2  07EE               	addwf	turn_egs@step_nr^(0+256),f
  3456  05D3  3000               	movlw	0
  3457  05D4  3DEF               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  3458                           
  3459                           ;main.c: 143: if(step_index==0)
  3460  05D5  087A               	movf	turn_egs@step_index,w
  3461  05D6  1D03               	btfss	3,2
  3462  05D7  2DE1               	goto	l3405
  3463                           
  3464                           ;main.c: 144: {
  3465                           ;main.c: 145: step_index++;
  3466  05D8  3001               	movlw	1
  3467  05D9  0020               	movlb	0	; select bank0
  3468  05DA  00A0               	movwf	??_turn_egs
  3469  05DB  0820               	movf	??_turn_egs,w
  3470  05DC  07FA               	addwf	turn_egs@step_index,f
  3471                           
  3472                           ;main.c: 146: LATCbits.LATC5=1;
  3473  05DD  0022               	movlb	2	; select bank2
  3474  05DE  168E               	bsf	14,5	;volatile
  3475                           
  3476                           ;main.c: 147: LATCbits.LATC4=0;
  3477  05DF  120E               	bcf	14,4	;volatile
  3478  05E0  2DEC               	goto	L2
  3479  05E1                     l3405:	
  3480                           ;main.c: 150: }
  3481                           
  3482                           ;main.c: 149: LATCbits.LATC0=0;
  3483                           
  3484                           ;main.c: 148: LATCbits.LATC3=0;
  3485                           
  3486                           
  3487                           ;main.c: 151: else if(step_index==1)
  3488  05E1  037A               	decf	turn_egs@step_index,w
  3489  05E2  1D03               	btfss	3,2
  3490  05E3  2DEE               	goto	l3417
  3491                           
  3492                           ;main.c: 152: {
  3493                           ;main.c: 153: step_index++;
  3494  05E4  3001               	movlw	1
  3495  05E5  0020               	movlb	0	; select bank0
  3496  05E6  00A0               	movwf	??_turn_egs
  3497  05E7  0820               	movf	??_turn_egs,w
  3498  05E8  07FA               	addwf	turn_egs@step_index,f
  3499                           
  3500                           ;main.c: 154: LATCbits.LATC5=0;
  3501  05E9  0022               	movlb	2	; select bank2
  3502  05EA  128E               	bcf	14,5	;volatile
  3503                           
  3504                           ;main.c: 155: LATCbits.LATC4=1;
  3505  05EB  160E               	bsf	14,4	;volatile
  3506  05EC                     L2:	
  3507                           
  3508                           ;main.c: 156: LATCbits.LATC3=0;
  3509  05EC  118E               	bcf	14,3	;volatile
  3510  05ED  2DFB               	goto	l3427
  3511  05EE                     l3417:	
  3512                           ;main.c: 158: }
  3513                           
  3514                           ;main.c: 157: LATCbits.LATC0=0;
  3515                           
  3516                           
  3517                           ;main.c: 159: else if(step_index==2)
  3518  05EE  3002               	movlw	2
  3519  05EF  067A               	xorwf	turn_egs@step_index,w
  3520  05F0  1D03               	btfss	3,2
  3521  05F1  2DFD               	goto	l3429
  3522                           
  3523                           ;main.c: 160: {
  3524                           ;main.c: 161: step_index++;
  3525  05F2  3001               	movlw	1
  3526  05F3  0020               	movlb	0	; select bank0
  3527  05F4  00A0               	movwf	??_turn_egs
  3528  05F5  0820               	movf	??_turn_egs,w
  3529  05F6  07FA               	addwf	turn_egs@step_index,f
  3530                           
  3531                           ;main.c: 162: LATCbits.LATC5=0;
  3532  05F7  0022               	movlb	2	; select bank2
  3533  05F8  128E               	bcf	14,5	;volatile
  3534                           
  3535                           ;main.c: 163: LATCbits.LATC4=0;
  3536  05F9  120E               	bcf	14,4	;volatile
  3537                           
  3538                           ;main.c: 164: LATCbits.LATC3=1;
  3539  05FA  158E               	bsf	14,3	;volatile
  3540  05FB                     l3427:	
  3541                           
  3542                           ;main.c: 165: LATCbits.LATC0=0;
  3543  05FB  100E               	bcf	14,0	;volatile
  3544                           
  3545                           ;main.c: 166: }
  3546  05FC  2E10               	goto	l430
  3547  05FD                     l3429:	
  3548                           
  3549                           ;main.c: 167: else if(step_index==3)
  3550  05FD  3003               	movlw	3
  3551  05FE  067A               	xorwf	turn_egs@step_index,w
  3552  05FF  1D03               	btfss	3,2
  3553  0600  2E0C               	goto	l3441
  3554                           
  3555                           ;main.c: 168: {
  3556                           ;main.c: 169: step_index++;
  3557  0601  3001               	movlw	1
  3558  0602  0020               	movlb	0	; select bank0
  3559  0603  00A0               	movwf	??_turn_egs
  3560  0604  0820               	movf	??_turn_egs,w
  3561  0605  07FA               	addwf	turn_egs@step_index,f
  3562                           
  3563                           ;main.c: 170: LATCbits.LATC5=0;
  3564  0606  0022               	movlb	2	; select bank2
  3565  0607  128E               	bcf	14,5	;volatile
  3566                           
  3567                           ;main.c: 171: LATCbits.LATC4=0;
  3568  0608  120E               	bcf	14,4	;volatile
  3569                           
  3570                           ;main.c: 172: LATCbits.LATC3=0;
  3571  0609  118E               	bcf	14,3	;volatile
  3572                           
  3573                           ;main.c: 173: LATCbits.LATC0=1;
  3574  060A  140E               	bsf	14,0	;volatile
  3575                           
  3576                           ;main.c: 174: }
  3577  060B  2E10               	goto	l430
  3578  060C                     l3441:	
  3579                           
  3580                           ;main.c: 175: else if(step_index==4)
  3581  060C  3004               	movlw	4
  3582  060D  067A               	xorwf	turn_egs@step_index,w
  3583  060E  1903               	btfsc	3,2
  3584                           
  3585                           ;main.c: 176: {
  3586                           ;main.c: 177: step_index=0;
  3587  060F  01FA               	clrf	turn_egs@step_index
  3588  0610                     l430:	
  3589                           
  3590                           ;main.c: 178: }
  3591                           ;main.c: 180: flag_10_ms=0;
  3592  0610  01DC               	clrf	_flag_10_ms^(0+256)
  3593  0611  01DD               	clrf	(_flag_10_ms+1)^(0+256)
  3594                           
  3595                           ;main.c: 181: }
  3596                           ;main.c: 182: }
  3597  0612  0008               	return
  3598  0613                     l3445:	
  3599                           
  3600                           ;main.c: 183: else if(step_nr==1000)
  3601  0613  30E8               	movlw	232
  3602  0614  066E               	xorwf	turn_egs@step_nr^(0+256),w
  3603  0615  3003               	movlw	3
  3604  0616  1903               	skipnz
  3605  0617  066F               	xorwf	(turn_egs@step_nr+1)^(0+256),w
  3606  0618  1D03               	btfss	3,2
  3607  0619  0008               	return
  3608                           
  3609                           ;main.c: 184: {
  3610                           ;main.c: 185: flag_N=0;
  3611  061A  01E4               	clrf	_flag_N^(0+256)
  3612  061B  01E5               	clrf	(_flag_N+1)^(0+256)
  3613                           
  3614                           ;main.c: 186: flag_G=0;
  3615  061C  01E2               	clrf	_flag_G^(0+256)
  3616  061D  01E3               	clrf	(_flag_G+1)^(0+256)
  3617                           
  3618                           ;main.c: 187: step_nr=0;
  3619  061E  01EE               	clrf	turn_egs@step_nr^(0+256)
  3620  061F  01EF               	clrf	(turn_egs@step_nr+1)^(0+256)
  3621                           
  3622                           ;main.c: 188: if(flag_directie==1)
  3623  0620  036B               	decf	_flag_directie^(0+256),w
  3624  0621  046C               	iorwf	(_flag_directie+1)^(0+256),w
  3625  0622  1D03               	btfss	3,2
  3626  0623  2E27               	goto	l3453
  3627                           
  3628                           ;main.c: 189: {
  3629                           ;main.c: 190: flag_directie=0;
  3630  0624  01EB               	clrf	_flag_directie^(0+256)
  3631  0625  01EC               	clrf	(_flag_directie+1)^(0+256)
  3632                           
  3633                           ;main.c: 191: }
  3634  0626  2E2F               	goto	l3457
  3635  0627                     l3453:	
  3636                           
  3637                           ;main.c: 192: else if(flag_directie==0)
  3638  0627  086B               	movf	_flag_directie^(0+256),w
  3639  0628  046C               	iorwf	(_flag_directie+1)^(0+256),w
  3640  0629  1D03               	btfss	3,2
  3641  062A  2E2F               	goto	l3457
  3642                           
  3643                           ;main.c: 193: {
  3644                           ;main.c: 194: flag_directie=1;
  3645  062B  3001               	movlw	1
  3646  062C  00EB               	movwf	_flag_directie^(0+256)
  3647  062D  3000               	movlw	0
  3648  062E  00EC               	movwf	(_flag_directie^(0+256)+1)
  3649  062F                     l3457:	
  3650                           
  3651                           ;main.c: 195: }
  3652                           ;main.c: 196: step_index=0;
  3653  062F  01FA               	clrf	turn_egs@step_index
  3654  0630  0008               	return
  3655  0631                     __end_of_turn_egs:	
  3656                           
  3657                           	psect	text2
  3658  0F60                     __ptext2:	
  3659 ;; *************** function _sms_text *****************
  3660 ;; Defined at:
  3661 ;;		line 201 in file "main.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;		None
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  umid            1   42[BANK0 ] unsigned char 
  3666 ;;  smstext         1   41[BANK0 ] unsigned char 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3676 ;;      Params:         0       0       0       0       0       0       0       0
  3677 ;;      Locals:         0       2       0       0       0       0       0       0
  3678 ;;      Temps:          0       2       0       0       0       0       0       0
  3679 ;;      Totals:         0       4       0       0       0       0       0       0
  3680 ;;Total ram usage:        4 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    8
  3683 ;; This function calls:
  3684 ;;		_printf
  3685 ;;		_putch
  3686 ;;		_sprintf
  3687 ;; This function is called by:
  3688 ;;		_main
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _sms_text
  3694  0F60                     _sms_text:	
  3695                           
  3696                           ;main.c: 203: char smstext[]="";
  3697                           
  3698                           ;incstack = 0
  3699                           ; Regs used in _sms_text: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3700  0F60  0021               	movlb	1	; select bank1
  3701  0F61  086E               	movf	sms_text@F3720^(0+128),w
  3702  0F62  0020               	movlb	0	; select bank0
  3703  0F63  00C7               	movwf	??_sms_text
  3704  0F64  0847               	movf	??_sms_text,w
  3705  0F65  00C9               	movwf	sms_text@smstext
  3706                           
  3707                           ;main.c: 204: char umid[]="";
  3708  0F66  0021               	movlb	1	; select bank1
  3709  0F67  086D               	movf	sms_text@F3722^(0+128),w
  3710  0F68  0020               	movlb	0	; select bank0
  3711  0F69  00C7               	movwf	??_sms_text
  3712  0F6A  0847               	movf	??_sms_text,w
  3713  0F6B  00CA               	movwf	sms_text@umid
  3714                           
  3715                           ;main.c: 205: static int sms_index=0;
  3716                           ;main.c: 207: printf("AT+CSCS=\"GSM\"");
  3717  0F6C  3058               	movlw	low (STR_1| (0+32768))
  3718  0F6D  00BB               	movwf	printf@f
  3719  0F6E  3090               	movlw	high (STR_1| (0+32768))
  3720  0F6F  00BC               	movwf	printf@f+1
  3721  0F70  3188  20E2  318F   	fcall	_printf
  3722                           
  3723                           ;main.c: 208: putch(0x0d);
  3724  0F73  300D               	movlw	13
  3725  0F74  0020               	movlb	0	; select bank0
  3726  0F75  00C7               	movwf	??_sms_text
  3727  0F76  0847               	movf	??_sms_text,w
  3728  0F77  00A2               	movwf	putch@txData
  3729  0F78  3188  204D  318F   	fcall	_putch
  3730                           
  3731                           ;main.c: 209: _delay((unsigned long)((200)*(18432000/4000.0)));
  3732  0F7B  3005               	movlw	5
  3733  0F7C  0020               	movlb	0	; select bank0
  3734  0F7D  00C8               	movwf	??_sms_text+1
  3735  0F7E  30AD               	movlw	173
  3736  0F7F  00C7               	movwf	??_sms_text
  3737  0F80  30DD               	movlw	221
  3738  0F81                     u6277:	
  3739  0F81  0B89               	decfsz	9,f
  3740  0F82  2F81               	goto	u6277
  3741  0F83  0BC7               	decfsz	??_sms_text,f
  3742  0F84  2F81               	goto	u6277
  3743  0F85  0BC8               	decfsz	??_sms_text+1,f
  3744  0F86  2F81               	goto	u6277
  3745                           
  3746                           ;main.c: 210: printf("AT+CMGS=\"0757494823\"");
  3747  0F87  3000               	movlw	low (STR_2| (0+32768))
  3748  0F88  0020               	movlb	0	; select bank0
  3749  0F89  00BB               	movwf	printf@f
  3750  0F8A  3090               	movlw	high (STR_2| (0+32768))
  3751  0F8B  00BC               	movwf	printf@f+1
  3752  0F8C  3188  20E2  318F   	fcall	_printf
  3753                           
  3754                           ;main.c: 211: putch(0x0d);
  3755  0F8F  300D               	movlw	13
  3756  0F90  0020               	movlb	0	; select bank0
  3757  0F91  00C7               	movwf	??_sms_text
  3758  0F92  0847               	movf	??_sms_text,w
  3759  0F93  00A2               	movwf	putch@txData
  3760  0F94  3188  204D  318F   	fcall	_putch
  3761                           
  3762                           ;main.c: 212: _delay((unsigned long)((600)*(18432000/4000.0)));
  3763  0F97  300F               	movlw	15
  3764  0F98  0020               	movlb	0	; select bank0
  3765  0F99  00C8               	movwf	??_sms_text+1
  3766  0F9A  3007               	movlw	7
  3767  0F9B  00C7               	movwf	??_sms_text
  3768  0F9C  309A               	movlw	154
  3769  0F9D                     u6287:	
  3770  0F9D  0B89               	decfsz	9,f
  3771  0F9E  2F9D               	goto	u6287
  3772  0F9F  0BC7               	decfsz	??_sms_text,f
  3773  0FA0  2F9D               	goto	u6287
  3774  0FA1  0BC8               	decfsz	??_sms_text+1,f
  3775  0FA2  2F9D               	goto	u6287
  3776  0FA3  0000               	nop
  3777                           
  3778                           ;main.c: 214: sprintf(smstext," Temper=%d      ", temp);
  3779  0FA4  3049               	movlw	low sms_text@smstext
  3780  0FA5  0020               	movlb	0	; select bank0
  3781  0FA6  00BB               	movwf	sprintf@wh
  3782  0FA7  3000               	movlw	high sms_text@smstext
  3783  0FA8  00BC               	movwf	sprintf@wh+1
  3784  0FA9  3038               	movlw	low (STR_3| (0+32768))
  3785  0FAA  00BD               	movwf	sprintf@f
  3786  0FAB  3090               	movlw	high (STR_3| (0+32768))
  3787  0FAC  00BE               	movwf	sprintf@f+1
  3788  0FAD  0022               	movlb	2	; select bank2
  3789  0FAE  084D               	movf	(_temp+1)^(0+256),w
  3790  0FAF  0020               	movlb	0	; select bank0
  3791  0FB0  00C0               	movwf	?_sprintf+5
  3792  0FB1  0022               	movlb	2	; select bank2
  3793  0FB2  084C               	movf	_temp^(0+256),w
  3794  0FB3  0020               	movlb	0	; select bank0
  3795  0FB4  00BF               	movwf	?_sprintf+4
  3796  0FB5  3189  2166  318F   	fcall	_sprintf
  3797                           
  3798                           ;main.c: 215: printf(smstext);
  3799  0FB8  3049               	movlw	low sms_text@smstext
  3800  0FB9  0020               	movlb	0	; select bank0
  3801  0FBA  00BB               	movwf	printf@f
  3802  0FBB  3000               	movlw	high sms_text@smstext
  3803  0FBC  00BC               	movwf	printf@f+1
  3804  0FBD  3188  20E2  318F   	fcall	_printf
  3805                           
  3806                           ;main.c: 217: sprintf(umid," Umid=%d        ",RH_byte1);
  3807  0FC0  304A               	movlw	low sms_text@umid
  3808  0FC1  0020               	movlb	0	; select bank0
  3809  0FC2  00BB               	movwf	sprintf@wh
  3810  0FC3  3000               	movlw	high sms_text@umid
  3811  0FC4  00BC               	movwf	sprintf@wh+1
  3812  0FC5  3027               	movlw	low (STR_4| (0+32768))
  3813  0FC6  00BD               	movwf	sprintf@f
  3814  0FC7  3090               	movlw	high (STR_4| (0+32768))
  3815  0FC8  00BE               	movwf	sprintf@f+1
  3816  0FC9  0867               	movf	_RH_byte1,w
  3817  0FCA  00C7               	movwf	??_sms_text
  3818  0FCB  01C8               	clrf	??_sms_text+1
  3819  0FCC  0847               	movf	??_sms_text,w
  3820  0FCD  00BF               	movwf	?_sprintf+4
  3821  0FCE  0848               	movf	??_sms_text+1,w
  3822  0FCF  00C0               	movwf	?_sprintf+5
  3823  0FD0  3189  2166  318F   	fcall	_sprintf
  3824                           
  3825                           ;main.c: 218: printf(umid);
  3826  0FD3  304A               	movlw	low sms_text@umid
  3827  0FD4  0020               	movlb	0	; select bank0
  3828  0FD5  00BB               	movwf	printf@f
  3829  0FD6  3000               	movlw	high sms_text@umid
  3830  0FD7  00BC               	movwf	printf@f+1
  3831  0FD8  3188  20E2  318F   	fcall	_printf
  3832                           
  3833                           ;main.c: 219: _delay((unsigned long)((400)*(18432000/4000.0)));
  3834  0FDB  300A               	movlw	10
  3835  0FDC  0020               	movlb	0	; select bank0
  3836  0FDD  00C8               	movwf	??_sms_text+1
  3837  0FDE  305A               	movlw	90
  3838  0FDF  00C7               	movwf	??_sms_text
  3839  0FE0  30BB               	movlw	187
  3840  0FE1                     u6297:	
  3841  0FE1  0B89               	decfsz	9,f
  3842  0FE2  2FE1               	goto	u6297
  3843  0FE3  0BC7               	decfsz	??_sms_text,f
  3844  0FE4  2FE1               	goto	u6297
  3845  0FE5  0BC8               	decfsz	??_sms_text+1,f
  3846  0FE6  2FE1               	goto	u6297
  3847  0FE7  3200               	nop2
  3848                           
  3849                           ;main.c: 220: putch(26);
  3850  0FE8  301A               	movlw	26
  3851  0FE9  0020               	movlb	0	; select bank0
  3852  0FEA  00C7               	movwf	??_sms_text
  3853  0FEB  0847               	movf	??_sms_text,w
  3854  0FEC  00A2               	movwf	putch@txData
  3855  0FED  3188  204D  318F   	fcall	_putch
  3856                           
  3857                           ;main.c: 221: putch(0x0d);
  3858  0FF0  300D               	movlw	13
  3859  0FF1  0020               	movlb	0	; select bank0
  3860  0FF2  00C7               	movwf	??_sms_text
  3861  0FF3  0847               	movf	??_sms_text,w
  3862  0FF4  00A2               	movwf	putch@txData
  3863  0FF5  3188  204D         	fcall	_putch
  3864                           
  3865                           ;main.c: 223: sms_index=0;
  3866  0FF7  0023               	movlb	3	; select bank3
  3867  0FF8  01E3               	clrf	sms_text@sms_index^(0+384)
  3868  0FF9  01E4               	clrf	(sms_text@sms_index+1)^(0+384)
  3869                           
  3870                           ;main.c: 224: flag_A=0;
  3871  0FFA  0022               	movlb	2	; select bank2
  3872  0FFB  01E0               	clrf	_flag_A^(0+256)
  3873  0FFC  01E1               	clrf	(_flag_A+1)^(0+256)
  3874                           
  3875                           ;main.c: 225: flag_B=0;
  3876  0FFD  01DE               	clrf	_flag_B^(0+256)
  3877  0FFE  01DF               	clrf	(_flag_B+1)^(0+256)
  3878  0FFF  0008               	return
  3879  1000                     __end_of_sms_text:	
  3880                           
  3881                           	psect	text3
  3882  0C80                     __ptext3:	
  3883 ;; *************** function _int_gsm *****************
  3884 ;; Defined at:
  3885 ;;		line 270 in file "main.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3899 ;;      Params:         0       0       0       0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0
  3901 ;;      Temps:          0       1       0       0       0       0       0       0
  3902 ;;      Totals:         0       1       0       0       0       0       0       0
  3903 ;;Total ram usage:        1 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    8
  3906 ;; This function calls:
  3907 ;;		_printf
  3908 ;;		_putch
  3909 ;; This function is called by:
  3910 ;;		_main
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _int_gsm
  3916  0C80                     _int_gsm:	
  3917  0C80                     l5109:	
  3918                           ;main.c: 273: static int sms1_index;
  3919                           ;main.c: 274: while(sms1_index<5)
  3920                           
  3921                           ;incstack = 0
  3922                           ; Regs used in _int_gsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3923                           
  3924  0C80  0020               	movlb	0	; select bank0
  3925  0C81  0865               	movf	int_gsm@sms1_index+1,w
  3926  0C82  3A80               	xorlw	128
  3927  0C83  00C3               	movwf	??_int_gsm
  3928  0C84  3080               	movlw	128
  3929  0C85  0243               	subwf	??_int_gsm,w
  3930  0C86  1D03               	skipz
  3931  0C87  2C8A               	goto	u6065
  3932  0C88  3005               	movlw	5
  3933  0C89  0264               	subwf	int_gsm@sms1_index,w
  3934  0C8A                     u6065:	
  3935  0C8A  1803               	btfsc	3,0
  3936  0C8B  0008               	return
  3937                           
  3938                           ;main.c: 275: {
  3939                           ;main.c: 276: if (flag_4000_ms==1)
  3940  0C8C  0022               	movlb	2	; select bank2
  3941  0C8D  0358               	decf	_flag_4000_ms^(0+256),w
  3942  0C8E  0459               	iorwf	(_flag_4000_ms+1)^(0+256),w
  3943  0C8F  1D03               	btfss	3,2
  3944  0C90  2C80               	goto	l5109
  3945                           
  3946                           ;main.c: 277: {
  3947                           ;main.c: 278: if (sms1_index==0)
  3948  0C91  0020               	movlb	0	; select bank0
  3949  0C92  0864               	movf	int_gsm@sms1_index,w
  3950  0C93  0465               	iorwf	int_gsm@sms1_index+1,w
  3951  0C94  1D03               	btfss	3,2
  3952  0C95  2C9A               	goto	l5075
  3953                           
  3954                           ;main.c: 279: {
  3955                           ;main.c: 280: printf("AT");
  3956  0C96  3092               	movlw	low (STR_5| (0+32768))
  3957  0C97  00BB               	movwf	printf@f
  3958  0C98  3090               	movlw	high (STR_5| (0+32768))
  3959  0C99  2CBC               	goto	L3
  3960  0C9A                     l5075:	
  3961                           ;main.c: 283: }
  3962                           
  3963                           ;main.c: 282: sms1_index++;
  3964                           
  3965                           ;main.c: 281: putch(0x0d);
  3966                           
  3967                           
  3968                           ;main.c: 284: else if (sms1_index==1)
  3969  0C9A  0364               	decf	int_gsm@sms1_index,w
  3970  0C9B  0465               	iorwf	int_gsm@sms1_index+1,w
  3971  0C9C  1D03               	btfss	3,2
  3972  0C9D  2CA2               	goto	l5083
  3973                           
  3974                           ;main.c: 285: {
  3975                           ;main.c: 286: printf("AT+CPIN=\"1234\"");
  3976  0C9E  3049               	movlw	low (STR_6| (0+32768))
  3977  0C9F  00BB               	movwf	printf@f
  3978  0CA0  3090               	movlw	high (STR_6| (0+32768))
  3979  0CA1  2CBC               	goto	L3
  3980  0CA2                     l5083:	
  3981                           ;main.c: 289: }
  3982                           
  3983                           ;main.c: 288: sms1_index++;
  3984                           
  3985                           ;main.c: 287: putch(0x0d);
  3986                           
  3987                           
  3988                           ;main.c: 290: else if (sms1_index==2)
  3989  0CA2  3002               	movlw	2
  3990  0CA3  0664               	xorwf	int_gsm@sms1_index,w
  3991  0CA4  0465               	iorwf	int_gsm@sms1_index+1,w
  3992  0CA5  1D03               	btfss	3,2
  3993  0CA6  2CAB               	goto	l5091
  3994                           
  3995                           ;main.c: 291: {
  3996                           ;main.c: 292: printf("AT+CMGF=1");
  3997  0CA7  307A               	movlw	low (STR_7| (0+32768))
  3998  0CA8  00BB               	movwf	printf@f
  3999  0CA9  3090               	movlw	high (STR_7| (0+32768))
  4000  0CAA  2CBC               	goto	L3
  4001  0CAB                     l5091:	
  4002                           ;main.c: 295: }
  4003                           
  4004                           ;main.c: 294: sms1_index++;
  4005                           
  4006                           ;main.c: 293: putch(0x0d);
  4007                           
  4008                           
  4009                           ;main.c: 296: else if (sms1_index==3)
  4010  0CAB  3003               	movlw	3
  4011  0CAC  0664               	xorwf	int_gsm@sms1_index,w
  4012  0CAD  0465               	iorwf	int_gsm@sms1_index+1,w
  4013  0CAE  1D03               	btfss	3,2
  4014  0CAF  2CB4               	goto	l5099
  4015                           
  4016                           ;main.c: 297: {
  4017                           ;main.c: 298: printf("AT+CNMI=1,2,0,0,0");
  4018  0CB0  3015               	movlw	low (STR_8| (0+32768))
  4019  0CB1  00BB               	movwf	printf@f
  4020  0CB2  3090               	movlw	high (STR_8| (0+32768))
  4021  0CB3  2CBC               	goto	L3
  4022  0CB4                     l5099:	
  4023                           ;main.c: 301: }
  4024                           
  4025                           ;main.c: 300: sms1_index++;
  4026                           
  4027                           ;main.c: 299: putch(0x0d);
  4028                           
  4029                           
  4030                           ;main.c: 302: else if (sms1_index==4)
  4031  0CB4  3004               	movlw	4
  4032  0CB5  0664               	xorwf	int_gsm@sms1_index,w
  4033  0CB6  0465               	iorwf	int_gsm@sms1_index+1,w
  4034  0CB7  1D03               	btfss	3,2
  4035  0CB8  2CCD               	goto	l5107
  4036                           
  4037                           ;main.c: 303: {
  4038                           ;main.c: 304: printf("AT+CSCS=\"GSM\"");
  4039  0CB9  3058               	movlw	low (STR_1| (0+32768))
  4040  0CBA  00BB               	movwf	printf@f
  4041  0CBB  3090               	movlw	high (STR_1| (0+32768))
  4042  0CBC                     L3:	
  4043  0CBC  00BC               	movwf	printf@f+1
  4044  0CBD  3188  20E2  318C   	fcall	_printf
  4045                           
  4046                           ;main.c: 305: putch(0x0d);
  4047  0CC0  300D               	movlw	13
  4048  0CC1  0020               	movlb	0	; select bank0
  4049  0CC2  00C3               	movwf	??_int_gsm
  4050  0CC3  0843               	movf	??_int_gsm,w
  4051  0CC4  00A2               	movwf	putch@txData
  4052  0CC5  3188  204D  318C   	fcall	_putch
  4053                           
  4054                           ;main.c: 306: sms1_index++;
  4055  0CC8  3001               	movlw	1
  4056  0CC9  0020               	movlb	0	; select bank0
  4057  0CCA  07E4               	addwf	int_gsm@sms1_index,f
  4058  0CCB  3000               	movlw	0
  4059  0CCC  3DE5               	addwfc	int_gsm@sms1_index+1,f
  4060  0CCD                     l5107:	
  4061                           
  4062                           ;main.c: 307: }
  4063                           ;main.c: 308: flag_4000_ms=0;
  4064  0CCD  0022               	movlb	2	; select bank2
  4065  0CCE  01D8               	clrf	_flag_4000_ms^(0+256)
  4066  0CCF  01D9               	clrf	(_flag_4000_ms+1)^(0+256)
  4067  0CD0  2C80               	goto	l5109
  4068  0CD1                     __end_of_int_gsm:	
  4069                           
  4070                           	psect	text4
  4071  08E2                     __ptext4:	
  4072 ;; *************** function _printf *****************
  4073 ;; Defined at:
  4074 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\printf.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  4077 ;;		 -> STR_9(14), STR_8(18), STR_7(10), STR_6(15), 
  4078 ;;		 -> STR_5(3), STR_2(21), STR_1(14), sms_text@umid(1), 
  4079 ;;		 -> sms_text@smstext(1), 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  pb              4   31[BANK0 ] struct __prbuf
  4082 ;;  ap              1   30[BANK0 ] PTR void [1]
  4083 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  2   27[BANK0 ] int 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4093 ;;      Params:         0       2       0       0       0       0       0       0
  4094 ;;      Locals:         0       5       0       0       0       0       0       0
  4095 ;;      Temps:          0       1       0       0       0       0       0       0
  4096 ;;      Totals:         0       8       0       0       0       0       0       0
  4097 ;;Total ram usage:        8 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    7
  4100 ;; This function calls:
  4101 ;;		__doprnt
  4102 ;; This function is called by:
  4103 ;;		_sms_text
  4104 ;;		_int_gsm
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _printf
  4110  08E2                     _printf:	
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4114  08E2  0020               	movlb	0	; select bank0
  4115  08E3  01BF               	clrf	printf@pb
  4116  08E4  01C0               	clrf	printf@pb+1
  4117  08E5  304D               	movlw	low _putch
  4118  08E6  00C1               	movwf	low ((printf@pb| 0+2))
  4119  08E7  3008               	movlw	high _putch
  4120  08E8  00C2               	movwf	(low ((printf@pb| 0+2))+1)
  4121  08E9  303D               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4122  08EA  00BD               	movwf	??_printf
  4123  08EB  083D               	movf	??_printf,w
  4124  08EC  00BE               	movwf	printf@ap
  4125                           
  4126                           ;	Return value of _printf is never used
  4127  08ED  083C               	movf	printf@f+1,w
  4128  08EE  00AF               	movwf	__doprnt@f+1
  4129  08EF  083B               	movf	printf@f,w
  4130  08F0  00AE               	movwf	__doprnt@f
  4131  08F1  303E               	movlw	(low (printf@ap| 0))& (0+255)
  4132  08F2  00BD               	movwf	??_printf
  4133  08F3  083D               	movf	??_printf,w
  4134  08F4  00B0               	movwf	__doprnt@ap
  4135  08F5  303F               	movlw	(low (printf@pb| 0))& (0+255)
  4136  08F6  3182  2234         	fcall	__doprnt
  4137  08F8  0008               	return
  4138  08F9                     __end_of_printf:	
  4139                           
  4140                           	psect	text5
  4141  008A                     __ptext5:	
  4142 ;; *************** function _comparare *****************
  4143 ;; Defined at:
  4144 ;;		line 315 in file "main.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  resistor_val    2   46[BANK0 ] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  j               2   60[BANK0 ] int 
  4149 ;;  j               2   58[BANK0 ] int 
  4150 ;;  i               2   75[BANK1 ] int 
  4151 ;;  table          75    0[BANK1 ] float [25]
  4152 ;;  res            42    0[BANK2 ] unsigned int [21]
  4153 ;;  step            3   53[BANK0 ] float 
  4154 ;;  dif             3   50[BANK0 ] float 
  4155 ;;  result          2   56[BANK0 ] int 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  2   46[BANK0 ] int 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4165 ;;      Params:         0       2       0       0       0       0       0       0
  4166 ;;      Locals:         0      12      77      42       0       0       0       0
  4167 ;;      Temps:          0       2       0       0       0       0       0       0
  4168 ;;      Totals:         0      16      77      42       0       0       0       0
  4169 ;;Total ram usage:      135 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    6
  4172 ;; This function calls:
  4173 ;;		___awtoft
  4174 ;;		___bmul
  4175 ;;		___ftadd
  4176 ;;		___ftdiv
  4177 ;;		___ftge
  4178 ;;		___ftmul
  4179 ;;		___ftneg
  4180 ;;		___lwtoft
  4181 ;;		___wmul
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _comparare
  4189  008A                     _comparare:	
  4190                           
  4191                           ;main.c: 317: unsigned int res[]={3002,2689,2377,2136,1895,1707,1520,1374,1228,1114,1000
      +                          ,908,817,745,673,615,557,510,463,423,383};
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _comparare: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4195  008A  30A0               	movlw	low comparare@F3732
  4196  008B  0086               	movwf	6
  4197  008C  3001               	movlw	high comparare@F3732
  4198  008D  0087               	movwf	7
  4199  008E  3020               	movlw	low comparare@res
  4200  008F  0084               	movwf	4
  4201  0090  3001               	movlw	high comparare@res
  4202  0091  0085               	movwf	5
  4203  0092  302A               	movlw	42
  4204  0093  0020               	movlb	0	; select bank0
  4205  0094  00D0               	movwf	??_comparare
  4206  0095                     u3890:	
  4207  0095  0016               	moviw fsr1++
  4208  0096  001A               	movwi fsr0++
  4209  0097  0BD0               	decfsz	??_comparare,f
  4210  0098  2895               	goto	u3890
  4211                           
  4212                           ;main.c: 318: int result=1000;
  4213  0099  30E8               	movlw	232
  4214  009A  00D8               	movwf	comparare@result
  4215  009B  3003               	movlw	3
  4216  009C  00D9               	movwf	comparare@result+1
  4217                           
  4218                           ;main.c: 319: float dif=0,step=0;
  4219  009D  3000               	movlw	0
  4220  009E  00D2               	movwf	comparare@dif
  4221  009F  3000               	movlw	0
  4222  00A0  00D3               	movwf	comparare@dif+1
  4223  00A1  3000               	movlw	0
  4224  00A2  00D4               	movwf	comparare@dif+2
  4225  00A3  3000               	movlw	0
  4226  00A4  00D5               	movwf	comparare@step
  4227  00A5  3000               	movlw	0
  4228  00A6  00D6               	movwf	comparare@step+1
  4229  00A7  3000               	movlw	0
  4230  00A8  00D7               	movwf	comparare@step+2
  4231                           
  4232                           ;main.c: 320: float table[25]={};
  4233  00A9  3020               	movlw	low comparare@F3737
  4234  00AA  0086               	movwf	6
  4235  00AB  3002               	movlw	high comparare@F3737
  4236  00AC  0087               	movwf	7
  4237  00AD  30A0               	movlw	low comparare@table
  4238  00AE  0084               	movwf	4
  4239  00AF  3000               	movlw	high comparare@table
  4240  00B0  0085               	movwf	5
  4241  00B1  304B               	movlw	75
  4242  00B2  00D0               	movwf	??_comparare
  4243  00B3                     u3900:	
  4244  00B3  0016               	moviw fsr1++
  4245  00B4  001A               	movwi fsr0++
  4246  00B5  0BD0               	decfsz	??_comparare,f
  4247  00B6  28B3               	goto	u3900
  4248                           
  4249                           ;main.c: 321: for(int i=0;i<21;i++)
  4250  00B7  0021               	movlb	1	; select bank1
  4251  00B8  01EB               	clrf	comparare@i^(0+128)
  4252  00B9  01EC               	clrf	(comparare@i+1)^(0+128)
  4253  00BA  086C               	movf	(comparare@i+1)^(0+128),w
  4254  00BB  3A80               	xorlw	128
  4255  00BC  0020               	movlb	0	; select bank0
  4256  00BD  00D0               	movwf	??_comparare
  4257  00BE  3080               	movlw	128
  4258  00BF  0250               	subwf	??_comparare,w
  4259  00C0  1D03               	skipz
  4260  00C1  28C5               	goto	u3915
  4261  00C2  3015               	movlw	21
  4262  00C3  0021               	movlb	1	; select bank1
  4263  00C4  026B               	subwf	comparare@i^(0+128),w
  4264  00C5                     u3915:	
  4265  00C5  1803               	btfsc	3,0
  4266  00C6  2A2E               	goto	l3587
  4267  00C7                     l3551:	
  4268                           
  4269                           ;main.c: 322: {
  4270                           ;main.c: 323: if((resistor_value<=res[i])&(resistor_value>=res[i+1]))
  4271  00C7  0021               	movlb	1	; select bank1
  4272  00C8  356B               	lslf	comparare@i^(0+128),w
  4273  00C9  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4274  00CA  0086               	movwf	6
  4275  00CB  3001               	movlw	1	; select bank2/3
  4276  00CC  0087               	movwf	7
  4277  00CD  3F40               	moviw [0]fsr1
  4278  00CE  0020               	movlb	0	; select bank0
  4279  00CF  00D0               	movwf	??_comparare
  4280  00D0  3F41               	moviw [1]fsr1
  4281  00D1  00D1               	movwf	??_comparare+1
  4282  00D2  084F               	movf	comparare@resistor_value+1,w
  4283  00D3  0251               	subwf	??_comparare+1,w
  4284  00D4  1D03               	skipz
  4285  00D5  28D8               	goto	u3925
  4286  00D6  084E               	movf	comparare@resistor_value,w
  4287  00D7  0250               	subwf	??_comparare,w
  4288  00D8                     u3925:	
  4289  00D8  1C03               	skipc
  4290  00D9  2A1C               	goto	l3585
  4291  00DA  0021               	movlb	1	; select bank1
  4292  00DB  356B               	lslf	comparare@i^(0+128),w
  4293  00DC  3E02               	addlw	2
  4294  00DD  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4295  00DE  0086               	movwf	6
  4296  00DF  3001               	movlw	1	; select bank2/3
  4297  00E0  0087               	movwf	7
  4298  00E1  3F40               	moviw [0]fsr1
  4299  00E2  0020               	movlb	0	; select bank0
  4300  00E3  00D0               	movwf	??_comparare
  4301  00E4  3F41               	moviw [1]fsr1
  4302  00E5  00D1               	movwf	??_comparare+1
  4303  00E6  0851               	movf	??_comparare+1,w
  4304  00E7  024F               	subwf	comparare@resistor_value+1,w
  4305  00E8  1D03               	skipz
  4306  00E9  28EC               	goto	u3935
  4307  00EA  0850               	movf	??_comparare,w
  4308  00EB  024E               	subwf	comparare@resistor_value,w
  4309  00EC                     u3935:	
  4310  00EC  1C03               	skipc
  4311  00ED  2A1C               	goto	l3585
  4312                           
  4313                           ;main.c: 324: {
  4314                           ;main.c: 325: dif=res[i]-res[i+1];
  4315  00EE  0021               	movlb	1	; select bank1
  4316  00EF  356B               	lslf	comparare@i^(0+128),w
  4317  00F0  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4318  00F1  0086               	movwf	6
  4319  00F2  3001               	movlw	1	; select bank2/3
  4320  00F3  0087               	movwf	7
  4321  00F4  356B               	lslf	comparare@i^(0+128),w
  4322  00F5  3E02               	addlw	2
  4323  00F6  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4324  00F7  0084               	movwf	4
  4325  00F8  3001               	movlw	1	; select bank2/3
  4326  00F9  0085               	movwf	5
  4327  00FA  3F00               	moviw [0]fsr0
  4328  00FB  0020               	movlb	0	; select bank0
  4329  00FC  00D0               	movwf	??_comparare
  4330  00FD  3F01               	moviw [1]fsr0
  4331  00FE  00D1               	movwf	??_comparare+1
  4332  00FF  09D0               	comf	??_comparare,f
  4333  0100  09D1               	comf	??_comparare+1,f
  4334  0101  0AD0               	incf	??_comparare,f
  4335  0102  1903               	skipnz
  4336  0103  0AD1               	incf	??_comparare+1,f
  4337  0104  3F40               	moviw [0]fsr1
  4338  0105  0750               	addwf	??_comparare,w
  4339  0106  00A8               	movwf	___lwtoft@c
  4340  0107  3F41               	moviw [1]fsr1
  4341  0108  3D51               	addwfc	??_comparare+1,w
  4342  0109  00A9               	movwf	___lwtoft@c+1
  4343  010A  3188  20B6  3180   	fcall	___lwtoft
  4344  010D  0020               	movlb	0	; select bank0
  4345  010E  0828               	movf	?___lwtoft,w
  4346  010F  00D2               	movwf	comparare@dif
  4347  0110  0829               	movf	?___lwtoft+1,w
  4348  0111  00D3               	movwf	comparare@dif+1
  4349  0112  082A               	movf	?___lwtoft+2,w
  4350  0113  00D4               	movwf	comparare@dif+2
  4351                           
  4352                           ;main.c: 326: step=dif/25;
  4353  0114  3000               	movlw	0
  4354  0115  00BE               	movwf	___ftdiv@f2
  4355  0116  30C8               	movlw	200
  4356  0117  00BF               	movwf	___ftdiv@f2+1
  4357  0118  3041               	movlw	65
  4358  0119  00C0               	movwf	___ftdiv@f2+2
  4359  011A  0852               	movf	comparare@dif,w
  4360  011B  00C1               	movwf	___ftdiv@f1
  4361  011C  0853               	movf	comparare@dif+1,w
  4362  011D  00C2               	movwf	___ftdiv@f1+1
  4363  011E  0854               	movf	comparare@dif+2,w
  4364  011F  00C3               	movwf	___ftdiv@f1+2
  4365  0120  3186  26E5  3180   	fcall	___ftdiv
  4366  0123  0020               	movlb	0	; select bank0
  4367  0124  083E               	movf	?___ftdiv,w
  4368  0125  00D5               	movwf	comparare@step
  4369  0126  083F               	movf	?___ftdiv+1,w
  4370  0127  00D6               	movwf	comparare@step+1
  4371  0128  0840               	movf	?___ftdiv+2,w
  4372  0129  00D7               	movwf	comparare@step+2
  4373                           
  4374                           ;main.c: 327: for(int j=0;j<25;j++)
  4375  012A  01DA               	clrf	comparare@j
  4376  012B  01DB               	clrf	comparare@j+1
  4377  012C  085B               	movf	comparare@j+1,w
  4378  012D  3A80               	xorlw	128
  4379  012E  00D0               	movwf	??_comparare
  4380  012F  3080               	movlw	128
  4381  0130  0250               	subwf	??_comparare,w
  4382  0131  1D03               	skipz
  4383  0132  2935               	goto	u3945
  4384  0133  3019               	movlw	25
  4385  0134  025A               	subwf	comparare@j,w
  4386  0135                     u3945:	
  4387  0135  1803               	btfsc	3,0
  4388  0136  299A               	goto	l3571
  4389  0137                     l3565:	
  4390                           
  4391                           ;main.c: 328: {
  4392                           ;main.c: 330: table[j]=res[i]-j*step;
  4393  0137  3003               	movlw	3
  4394  0138  0020               	movlb	0	; select bank0
  4395  0139  00D0               	movwf	??_comparare
  4396  013A  0850               	movf	??_comparare,w
  4397  013B  00A0               	movwf	___bmul@multiplicand
  4398  013C  085A               	movf	comparare@j,w
  4399  013D  3188  2090  3180   	fcall	___bmul
  4400  0140  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4401  0141  0086               	movwf	6
  4402  0142  0187               	clrf	7
  4403  0143  0020               	movlb	0	; select bank0
  4404  0144  085B               	movf	comparare@j+1,w
  4405  0145  00A9               	movwf	___awtoft@c+1
  4406  0146  085A               	movf	comparare@j,w
  4407  0147  00A8               	movwf	___awtoft@c
  4408  0148  3189  21BE  3180   	fcall	___awtoft
  4409  014B  0020               	movlb	0	; select bank0
  4410  014C  0828               	movf	?___awtoft,w
  4411  014D  00B1               	movwf	___ftmul@f2
  4412  014E  0829               	movf	?___awtoft+1,w
  4413  014F  00B2               	movwf	___ftmul@f2+1
  4414  0150  082A               	movf	?___awtoft+2,w
  4415  0151  00B3               	movwf	___ftmul@f2+2
  4416  0152  0855               	movf	comparare@step,w
  4417  0153  00AE               	movwf	___ftmul@f1
  4418  0154  0856               	movf	comparare@step+1,w
  4419  0155  00AF               	movwf	___ftmul@f1+1
  4420  0156  0857               	movf	comparare@step+2,w
  4421  0157  00B0               	movwf	___ftmul@f1+2
  4422  0158  3186  2631  3180   	fcall	___ftmul
  4423  015B  0020               	movlb	0	; select bank0
  4424  015C  082E               	movf	?___ftmul,w
  4425  015D  00BE               	movwf	___ftneg@f1
  4426  015E  082F               	movf	?___ftmul+1,w
  4427  015F  00BF               	movwf	___ftneg@f1+1
  4428  0160  0830               	movf	?___ftmul+2,w
  4429  0161  00C0               	movwf	___ftneg@f1+2
  4430  0162  3188  2075  3180   	fcall	___ftneg
  4431  0165  0020               	movlb	0	; select bank0
  4432  0166  083E               	movf	?___ftneg,w
  4433  0167  00C1               	movwf	___ftadd@f1
  4434  0168  083F               	movf	?___ftneg+1,w
  4435  0169  00C2               	movwf	___ftadd@f1+1
  4436  016A  0840               	movf	?___ftneg+2,w
  4437  016B  00C3               	movwf	___ftadd@f1+2
  4438  016C  0021               	movlb	1	; select bank1
  4439  016D  356B               	lslf	comparare@i^(0+128),w
  4440  016E  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4441  016F  0084               	movwf	4
  4442  0170  3001               	movlw	1	; select bank2/3
  4443  0171  0085               	movwf	5
  4444  0172  3F00               	moviw [0]fsr0
  4445  0173  0020               	movlb	0	; select bank0
  4446  0174  00A8               	movwf	___lwtoft@c
  4447  0175  3F01               	moviw [1]fsr0
  4448  0176  00A9               	movwf	___lwtoft@c+1
  4449  0177  3188  20B6  3180   	fcall	___lwtoft
  4450  017A  0020               	movlb	0	; select bank0
  4451  017B  0828               	movf	?___lwtoft,w
  4452  017C  00C4               	movwf	___ftadd@f2
  4453  017D  0829               	movf	?___lwtoft+1,w
  4454  017E  00C5               	movwf	___ftadd@f2+1
  4455  017F  082A               	movf	?___lwtoft+2,w
  4456  0180  00C6               	movwf	___ftadd@f2+2
  4457  0181  3184  2485  3180   	fcall	___ftadd
  4458  0184  0020               	movlb	0	; select bank0
  4459  0185  0841               	movf	?___ftadd,w
  4460  0186  3FC0               	movwi [0]fsr1
  4461  0187  0842               	movf	?___ftadd+1,w
  4462  0188  3FC1               	movwi [1]fsr1
  4463  0189  0843               	movf	?___ftadd+2,w
  4464  018A  3FC2               	movwi [2]fsr1
  4465  018B  3001               	movlw	1
  4466  018C  07DA               	addwf	comparare@j,f
  4467  018D  3000               	movlw	0
  4468  018E  3DDB               	addwfc	comparare@j+1,f
  4469  018F  085B               	movf	comparare@j+1,w
  4470  0190  3A80               	xorlw	128
  4471  0191  00D0               	movwf	??_comparare
  4472  0192  3080               	movlw	128
  4473  0193  0250               	subwf	??_comparare,w
  4474  0194  1D03               	skipz
  4475  0195  2998               	goto	u3955
  4476  0196  3019               	movlw	25
  4477  0197  025A               	subwf	comparare@j,w
  4478  0198                     u3955:	
  4479  0198  1C03               	skipc
  4480  0199  2937               	goto	l3565
  4481  019A                     l3571:	
  4482                           
  4483                           ;main.c: 332: }
  4484                           ;main.c: 333: for(int j=0;j<25;j++)
  4485  019A  0020               	movlb	0	; select bank0
  4486  019B  01DC               	clrf	comparare@j_778
  4487  019C  01DD               	clrf	comparare@j_778+1
  4488  019D  085D               	movf	comparare@j_778+1,w
  4489  019E  3A80               	xorlw	128
  4490  019F  00D0               	movwf	??_comparare
  4491  01A0  3080               	movlw	128
  4492  01A1  0250               	subwf	??_comparare,w
  4493  01A2  1D03               	skipz
  4494  01A3  29A6               	goto	u3965
  4495  01A4  3019               	movlw	25
  4496  01A5  025C               	subwf	comparare@j_778,w
  4497  01A6                     u3965:	
  4498  01A6  1803               	btfsc	3,0
  4499  01A7  2A1C               	goto	l3585
  4500  01A8                     l3577:	
  4501                           
  4502                           ;main.c: 334: {
  4503                           ;main.c: 335: if((resistor_value<=table[j])&(resistor_value>=table[j+1]))
  4504  01A8  3003               	movlw	3
  4505  01A9  0020               	movlb	0	; select bank0
  4506  01AA  00D0               	movwf	??_comparare
  4507  01AB  0850               	movf	??_comparare,w
  4508  01AC  00A0               	movwf	___bmul@multiplicand
  4509  01AD  085C               	movf	comparare@j_778,w
  4510  01AE  3188  2090  3180   	fcall	___bmul
  4511  01B1  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4512  01B2  0086               	movwf	6
  4513  01B3  0187               	clrf	7
  4514  01B4  3F40               	moviw [0]fsr1
  4515  01B5  0020               	movlb	0	; select bank0
  4516  01B6  00AE               	movwf	___ftge@ff1
  4517  01B7  3F41               	moviw [1]fsr1
  4518  01B8  00AF               	movwf	___ftge@ff1+1
  4519  01B9  3F42               	moviw [2]fsr1
  4520  01BA  00B0               	movwf	___ftge@ff1+2
  4521  01BB  084F               	movf	comparare@resistor_value+1,w
  4522  01BC  00A9               	movwf	___awtoft@c+1
  4523  01BD  084E               	movf	comparare@resistor_value,w
  4524  01BE  00A8               	movwf	___awtoft@c
  4525  01BF  3189  21BE  3180   	fcall	___awtoft
  4526  01C2  0020               	movlb	0	; select bank0
  4527  01C3  0828               	movf	?___awtoft,w
  4528  01C4  00B1               	movwf	___ftge@ff2
  4529  01C5  0829               	movf	?___awtoft+1,w
  4530  01C6  00B2               	movwf	___ftge@ff2+1
  4531  01C7  082A               	movf	?___awtoft+2,w
  4532  01C8  00B3               	movwf	___ftge@ff2+2
  4533  01C9  318A  22F2  3180   	fcall	___ftge
  4534  01CC  1C03               	btfss	3,0
  4535  01CD  2A0C               	goto	l3583
  4536  01CE  0020               	movlb	0	; select bank0
  4537  01CF  084F               	movf	comparare@resistor_value+1,w
  4538  01D0  00A9               	movwf	___awtoft@c+1
  4539  01D1  084E               	movf	comparare@resistor_value,w
  4540  01D2  00A8               	movwf	___awtoft@c
  4541  01D3  3189  21BE  3180   	fcall	___awtoft
  4542  01D6  0020               	movlb	0	; select bank0
  4543  01D7  0828               	movf	?___awtoft,w
  4544  01D8  00AE               	movwf	___ftge@ff1
  4545  01D9  0829               	movf	?___awtoft+1,w
  4546  01DA  00AF               	movwf	___ftge@ff1+1
  4547  01DB  082A               	movf	?___awtoft+2,w
  4548  01DC  00B0               	movwf	___ftge@ff1+2
  4549  01DD  3003               	movlw	3
  4550  01DE  00D0               	movwf	??_comparare
  4551  01DF  0850               	movf	??_comparare,w
  4552  01E0  00A0               	movwf	___bmul@multiplicand
  4553  01E1  085C               	movf	comparare@j_778,w
  4554  01E2  3E01               	addlw	1
  4555  01E3  3188  2090  3180   	fcall	___bmul
  4556  01E6  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4557  01E7  0086               	movwf	6
  4558  01E8  0187               	clrf	7
  4559  01E9  3F40               	moviw [0]fsr1
  4560  01EA  0020               	movlb	0	; select bank0
  4561  01EB  00B1               	movwf	___ftge@ff2
  4562  01EC  3F41               	moviw [1]fsr1
  4563  01ED  00B2               	movwf	___ftge@ff2+1
  4564  01EE  3F42               	moviw [2]fsr1
  4565  01EF  00B3               	movwf	___ftge@ff2+2
  4566  01F0  318A  22F2  3180   	fcall	___ftge
  4567  01F3  1C03               	btfss	3,0
  4568  01F4  2A0C               	goto	l3583
  4569                           
  4570                           ;main.c: 336: {
  4571                           ;main.c: 337: result=(i*25+1*j);
  4572  01F5  0021               	movlb	1	; select bank1
  4573  01F6  086C               	movf	(comparare@i+1)^(0+128),w
  4574  01F7  0020               	movlb	0	; select bank0
  4575  01F8  00A1               	movwf	___wmul@multiplier+1
  4576  01F9  0021               	movlb	1	; select bank1
  4577  01FA  086B               	movf	comparare@i^(0+128),w
  4578  01FB  0020               	movlb	0	; select bank0
  4579  01FC  00A0               	movwf	___wmul@multiplier
  4580  01FD  3019               	movlw	25
  4581  01FE  00A2               	movwf	___wmul@multiplicand
  4582  01FF  3000               	movlw	0
  4583  0200  00A3               	movwf	___wmul@multiplicand+1
  4584  0201  3189  212D  3180   	fcall	___wmul
  4585  0204  0020               	movlb	0	; select bank0
  4586  0205  085C               	movf	comparare@j_778,w
  4587  0206  0720               	addwf	?___wmul,w
  4588  0207  00D8               	movwf	comparare@result
  4589  0208  085D               	movf	comparare@j_778+1,w
  4590  0209  3D21               	addwfc	?___wmul+1,w
  4591  020A  00D9               	movwf	comparare@result+1
  4592                           
  4593                           ;main.c: 338: break;
  4594  020B  2A1C               	goto	l3585
  4595  020C                     l3583:	
  4596  020C  3001               	movlw	1
  4597  020D  0020               	movlb	0	; select bank0
  4598  020E  07DC               	addwf	comparare@j_778,f
  4599  020F  3000               	movlw	0
  4600  0210  3DDD               	addwfc	comparare@j_778+1,f
  4601  0211  085D               	movf	comparare@j_778+1,w
  4602  0212  3A80               	xorlw	128
  4603  0213  00D0               	movwf	??_comparare
  4604  0214  3080               	movlw	128
  4605  0215  0250               	subwf	??_comparare,w
  4606  0216  1D03               	skipz
  4607  0217  2A1A               	goto	u3995
  4608  0218  3019               	movlw	25
  4609  0219  025C               	subwf	comparare@j_778,w
  4610  021A                     u3995:	
  4611  021A  1C03               	skipc
  4612  021B  29A8               	goto	l3577
  4613  021C                     l3585:	
  4614  021C  3001               	movlw	1
  4615  021D  0021               	movlb	1	; select bank1
  4616  021E  07EB               	addwf	comparare@i^(0+128),f
  4617  021F  3000               	movlw	0
  4618  0220  3DEC               	addwfc	(comparare@i+1)^(0+128),f
  4619  0221  086C               	movf	(comparare@i+1)^(0+128),w
  4620  0222  3A80               	xorlw	128
  4621  0223  0020               	movlb	0	; select bank0
  4622  0224  00D0               	movwf	??_comparare
  4623  0225  3080               	movlw	128
  4624  0226  0250               	subwf	??_comparare,w
  4625  0227  1D03               	skipz
  4626  0228  2A2C               	goto	u4005
  4627  0229  3015               	movlw	21
  4628  022A  0021               	movlb	1	; select bank1
  4629  022B  026B               	subwf	comparare@i^(0+128),w
  4630  022C                     u4005:	
  4631  022C  1C03               	skipc
  4632  022D  28C7               	goto	l3551
  4633  022E                     l3587:	
  4634                           
  4635                           ;main.c: 339: }
  4636                           ;main.c: 340: }
  4637                           ;main.c: 341: }
  4638                           ;main.c: 342: }
  4639                           ;main.c: 343: return result;
  4640  022E  0020               	movlb	0	; select bank0
  4641  022F  0859               	movf	comparare@result+1,w
  4642  0230  00CF               	movwf	?_comparare+1
  4643  0231  0858               	movf	comparare@result,w
  4644  0232  00CE               	movwf	?_comparare
  4645  0233  0008               	return
  4646  0234                     __end_of_comparare:	
  4647                           
  4648                           	psect	text6
  4649  092D                     __ptext6:	
  4650 ;; *************** function ___wmul *****************
  4651 ;; Defined at:
  4652 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4655 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  product         2    4[BANK0 ] unsigned int 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  2    0[BANK0 ] unsigned int 
  4660 ;; Registers used:
  4661 ;;		wreg, status,2, status,0
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4667 ;;      Params:         0       4       0       0       0       0       0       0
  4668 ;;      Locals:         0       2       0       0       0       0       0       0
  4669 ;;      Temps:          0       0       0       0       0       0       0       0
  4670 ;;      Totals:         0       6       0       0       0       0       0       0
  4671 ;;Total ram usage:        6 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    4
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_comparare
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function ___wmul
  4683  092D                     ___wmul:	
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4687  092D  0020               	movlb	0	; select bank0
  4688  092E  01A4               	clrf	___wmul@product
  4689  092F  01A5               	clrf	___wmul@product+1
  4690  0930                     l2915:	
  4691  0930  1C20               	btfss	___wmul@multiplier,0
  4692  0931  2936               	goto	l713
  4693  0932  0822               	movf	___wmul@multiplicand,w
  4694  0933  07A4               	addwf	___wmul@product,f
  4695  0934  0823               	movf	___wmul@multiplicand+1,w
  4696  0935  3DA5               	addwfc	___wmul@product+1,f
  4697  0936                     l713:	
  4698  0936  3001               	movlw	1
  4699  0937                     u2825:	
  4700  0937  35A2               	lslf	___wmul@multiplicand,f
  4701  0938  0DA3               	rlf	___wmul@multiplicand+1,f
  4702  0939  0B89               	decfsz	9,f
  4703  093A  2937               	goto	u2825
  4704  093B  3001               	movlw	1
  4705  093C                     u2835:	
  4706  093C  36A1               	lsrf	___wmul@multiplier+1,f
  4707  093D  0CA0               	rrf	___wmul@multiplier,f
  4708  093E  0B89               	decfsz	9,f
  4709  093F  293C               	goto	u2835
  4710  0940  0820               	movf	___wmul@multiplier,w
  4711  0941  0421               	iorwf	___wmul@multiplier+1,w
  4712  0942  1D03               	btfss	3,2
  4713  0943  2930               	goto	l2915
  4714  0944  0825               	movf	___wmul@product+1,w
  4715  0945  00A1               	movwf	?___wmul+1
  4716  0946  0824               	movf	___wmul@product,w
  4717  0947  00A0               	movwf	?___wmul
  4718  0948  0008               	return
  4719  0949                     __end_of___wmul:	
  4720                           
  4721                           	psect	text7
  4722  08B6                     __ptext7:	
  4723 ;; *************** function ___lwtoft *****************
  4724 ;; Defined at:
  4725 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  c               2    8[BANK0 ] unsigned int 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;		None
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  3    8[BANK0 ] float 
  4732 ;; Registers used:
  4733 ;;		wreg, status,2, status,0, pclath, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4739 ;;      Params:         0       3       0       0       0       0       0       0
  4740 ;;      Locals:         0       0       0       0       0       0       0       0
  4741 ;;      Temps:          0       1       0       0       0       0       0       0
  4742 ;;      Totals:         0       4       0       0       0       0       0       0
  4743 ;;Total ram usage:        4 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    5
  4746 ;; This function calls:
  4747 ;;		___ftpack
  4748 ;; This function is called by:
  4749 ;;		_comparare
  4750 ;;		_main
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           
  4755                           ;psect for function ___lwtoft
  4756  08B6                     ___lwtoft:	
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4760  08B6  0020               	movlb	0	; select bank0
  4761  08B7  0828               	movf	___lwtoft@c,w
  4762  08B8  00A0               	movwf	___ftpack@arg
  4763  08B9  0829               	movf	___lwtoft@c+1,w
  4764  08BA  00A1               	movwf	___ftpack@arg+1
  4765  08BB  01A2               	clrf	___ftpack@arg+2
  4766  08BC  308E               	movlw	142
  4767  08BD  00AB               	movwf	??___lwtoft
  4768  08BE  082B               	movf	??___lwtoft,w
  4769  08BF  00A3               	movwf	___ftpack@exp
  4770  08C0  01A4               	clrf	___ftpack@sign
  4771  08C1  3187  278E         	fcall	___ftpack
  4772  08C3  0020               	movlb	0	; select bank0
  4773  08C4  0820               	movf	?___ftpack,w
  4774  08C5  00A8               	movwf	?___lwtoft
  4775  08C6  0821               	movf	?___ftpack+1,w
  4776  08C7  00A9               	movwf	?___lwtoft+1
  4777  08C8  0822               	movf	?___ftpack+2,w
  4778  08C9  00AA               	movwf	?___lwtoft+2
  4779  08CA  0008               	return
  4780  08CB                     __end_of___lwtoft:	
  4781                           
  4782                           	psect	text8
  4783  0875                     __ptext8:	
  4784 ;; *************** function ___ftneg *****************
  4785 ;; Defined at:
  4786 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  f1              3   30[BANK0 ] float 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  3   30[BANK0 ] float 
  4793 ;; Registers used:
  4794 ;;		wreg
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4800 ;;      Params:         0       3       0       0       0       0       0       0
  4801 ;;      Locals:         0       0       0       0       0       0       0       0
  4802 ;;      Temps:          0       0       0       0       0       0       0       0
  4803 ;;      Totals:         0       3       0       0       0       0       0       0
  4804 ;;Total ram usage:        3 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    4
  4807 ;; This function calls:
  4808 ;;		Nothing
  4809 ;; This function is called by:
  4810 ;;		_comparare
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           
  4815                           ;psect for function ___ftneg
  4816  0875                     ___ftneg:	
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in ___ftneg: [wreg]
  4820  0875  0020               	movlb	0	; select bank0
  4821  0876  0840               	movf	___ftneg@f1+2,w
  4822  0877  043F               	iorwf	___ftneg@f1+1,w
  4823  0878  043E               	iorwf	___ftneg@f1,w
  4824  0879  1903               	skipnz
  4825  087A  0008               	return
  4826  087B  3080               	movlw	128
  4827  087C  06C0               	xorwf	___ftneg@f1+2,f
  4828  087D  0008               	return
  4829  087E                     __end_of___ftneg:	
  4830                           
  4831                           	psect	text9
  4832  0631                     __ptext9:	
  4833 ;; *************** function ___ftmul *****************
  4834 ;; Defined at:
  4835 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  f1              3   14[BANK0 ] float 
  4838 ;;  f2              3   17[BANK0 ] float 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  4841 ;;  sign            1   29[BANK0 ] unsigned char 
  4842 ;;  cntr            1   28[BANK0 ] unsigned char 
  4843 ;;  exp             1   24[BANK0 ] unsigned char 
  4844 ;; Return value:  Size  Location     Type
  4845 ;;                  3   14[BANK0 ] float 
  4846 ;; Registers used:
  4847 ;;		wreg, status,2, status,0, pclath, cstack
  4848 ;; Tracked objects:
  4849 ;;		On entry : 0/0
  4850 ;;		On exit  : 0/0
  4851 ;;		Unchanged: 0/0
  4852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4853 ;;      Params:         0       6       0       0       0       0       0       0
  4854 ;;      Locals:         0       6       0       0       0       0       0       0
  4855 ;;      Temps:          0       4       0       0       0       0       0       0
  4856 ;;      Totals:         0      16       0       0       0       0       0       0
  4857 ;;Total ram usage:       16 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    5
  4860 ;; This function calls:
  4861 ;;		___ftpack
  4862 ;; This function is called by:
  4863 ;;		_comparare
  4864 ;;		_main
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function ___ftmul
  4870  0631                     ___ftmul:	
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4874  0631  0020               	movlb	0	; select bank0
  4875  0632  082E               	movf	___ftmul@f1,w
  4876  0633  00B4               	movwf	??___ftmul
  4877  0634  082F               	movf	___ftmul@f1+1,w
  4878  0635  00B5               	movwf	??___ftmul+1
  4879  0636  0830               	movf	___ftmul@f1+2,w
  4880  0637  00B6               	movwf	??___ftmul+2
  4881  0638  1003               	clrc
  4882  0639  0D35               	rlf	??___ftmul+1,w
  4883  063A  0D36               	rlf	??___ftmul+2,w
  4884  063B  00B7               	movwf	??___ftmul+3
  4885  063C  0837               	movf	??___ftmul+3,w
  4886  063D  00B8               	movwf	___ftmul@exp
  4887  063E  0838               	movf	___ftmul@exp,w
  4888  063F  1D03               	btfss	3,2
  4889  0640  2E48               	goto	l3173
  4890  0641  3000               	movlw	0
  4891  0642  00AE               	movwf	?___ftmul
  4892  0643  3000               	movlw	0
  4893  0644  00AF               	movwf	?___ftmul+1
  4894  0645  3000               	movlw	0
  4895  0646  00B0               	movwf	?___ftmul+2
  4896  0647  0008               	return
  4897  0648                     l3173:	
  4898  0648  0831               	movf	___ftmul@f2,w
  4899  0649  00B4               	movwf	??___ftmul
  4900  064A  0832               	movf	___ftmul@f2+1,w
  4901  064B  00B5               	movwf	??___ftmul+1
  4902  064C  0833               	movf	___ftmul@f2+2,w
  4903  064D  00B6               	movwf	??___ftmul+2
  4904  064E  1003               	clrc
  4905  064F  0D35               	rlf	??___ftmul+1,w
  4906  0650  0D36               	rlf	??___ftmul+2,w
  4907  0651  00B7               	movwf	??___ftmul+3
  4908  0652  0837               	movf	??___ftmul+3,w
  4909  0653  00BD               	movwf	___ftmul@sign
  4910  0654  083D               	movf	___ftmul@sign,w
  4911  0655  1D03               	btfss	3,2
  4912  0656  2E5E               	goto	l3179
  4913  0657  3000               	movlw	0
  4914  0658  00AE               	movwf	?___ftmul
  4915  0659  3000               	movlw	0
  4916  065A  00AF               	movwf	?___ftmul+1
  4917  065B  3000               	movlw	0
  4918  065C  00B0               	movwf	?___ftmul+2
  4919  065D  0008               	return
  4920  065E                     l3179:	
  4921  065E  083D               	movf	___ftmul@sign,w
  4922  065F  3E7B               	addlw	123
  4923  0660  00B4               	movwf	??___ftmul
  4924  0661  0834               	movf	??___ftmul,w
  4925  0662  07B8               	addwf	___ftmul@exp,f
  4926  0663  082E               	movf	___ftmul@f1,w
  4927  0664  00B4               	movwf	??___ftmul
  4928  0665  082F               	movf	___ftmul@f1+1,w
  4929  0666  00B5               	movwf	??___ftmul+1
  4930  0667  0830               	movf	___ftmul@f1+2,w
  4931  0668  00B6               	movwf	??___ftmul+2
  4932  0669  3010               	movlw	16
  4933  066A                     u3435:	
  4934  066A  36B6               	lsrf	??___ftmul+2,f
  4935  066B  0CB5               	rrf	??___ftmul+1,f
  4936  066C  0CB4               	rrf	??___ftmul,f
  4937  066D  0B89               	decfsz	9,f
  4938  066E  2E6A               	goto	u3435
  4939  066F  0834               	movf	??___ftmul,w
  4940  0670  00B7               	movwf	??___ftmul+3
  4941  0671  0837               	movf	??___ftmul+3,w
  4942  0672  00BD               	movwf	___ftmul@sign
  4943  0673  0831               	movf	___ftmul@f2,w
  4944  0674  00B4               	movwf	??___ftmul
  4945  0675  0832               	movf	___ftmul@f2+1,w
  4946  0676  00B5               	movwf	??___ftmul+1
  4947  0677  0833               	movf	___ftmul@f2+2,w
  4948  0678  00B6               	movwf	??___ftmul+2
  4949  0679  3010               	movlw	16
  4950  067A                     u3445:	
  4951  067A  36B6               	lsrf	??___ftmul+2,f
  4952  067B  0CB5               	rrf	??___ftmul+1,f
  4953  067C  0CB4               	rrf	??___ftmul,f
  4954  067D  0B89               	decfsz	9,f
  4955  067E  2E7A               	goto	u3445
  4956  067F  0834               	movf	??___ftmul,w
  4957  0680  00B7               	movwf	??___ftmul+3
  4958  0681  0837               	movf	??___ftmul+3,w
  4959  0682  06BD               	xorwf	___ftmul@sign,f
  4960  0683  3080               	movlw	128
  4961  0684  00B4               	movwf	??___ftmul
  4962  0685  0834               	movf	??___ftmul,w
  4963  0686  05BD               	andwf	___ftmul@sign,f
  4964  0687  17AF               	bsf	___ftmul@f1+1,7
  4965  0688  17B2               	bsf	___ftmul@f2+1,7
  4966  0689  30FF               	movlw	255
  4967  068A  05B1               	andwf	___ftmul@f2,f
  4968  068B  30FF               	movlw	255
  4969  068C  05B2               	andwf	___ftmul@f2+1,f
  4970  068D  3000               	movlw	0
  4971  068E  05B3               	andwf	___ftmul@f2+2,f
  4972  068F  3000               	movlw	0
  4973  0690  00B9               	movwf	___ftmul@f3_as_product
  4974  0691  3000               	movlw	0
  4975  0692  00BA               	movwf	___ftmul@f3_as_product+1
  4976  0693  3000               	movlw	0
  4977  0694  00BB               	movwf	___ftmul@f3_as_product+2
  4978  0695  3007               	movlw	7
  4979  0696  00B4               	movwf	??___ftmul
  4980  0697  0834               	movf	??___ftmul,w
  4981  0698  00BC               	movwf	___ftmul@cntr
  4982  0699                     l3191:	
  4983  0699  1C2E               	btfss	___ftmul@f1,0
  4984  069A  2EA1               	goto	l3195
  4985  069B  0831               	movf	___ftmul@f2,w
  4986  069C  07B9               	addwf	___ftmul@f3_as_product,f
  4987  069D  0832               	movf	___ftmul@f2+1,w
  4988  069E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  4989  069F  0833               	movf	___ftmul@f2+2,w
  4990  06A0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  4991  06A1                     l3195:	
  4992  06A1  3001               	movlw	1
  4993  06A2                     u3465:	
  4994  06A2  36B0               	lsrf	___ftmul@f1+2,f
  4995  06A3  0CAF               	rrf	___ftmul@f1+1,f
  4996  06A4  0CAE               	rrf	___ftmul@f1,f
  4997  06A5  0B89               	decfsz	9,f
  4998  06A6  2EA2               	goto	u3465
  4999  06A7  3001               	movlw	1
  5000  06A8                     u3475:	
  5001  06A8  35B1               	lslf	___ftmul@f2,f
  5002  06A9  0DB2               	rlf	___ftmul@f2+1,f
  5003  06AA  0DB3               	rlf	___ftmul@f2+2,f
  5004  06AB  0B89               	decfsz	9,f
  5005  06AC  2EA8               	goto	u3475
  5006  06AD  3001               	movlw	1
  5007  06AE  02BC               	subwf	___ftmul@cntr,f
  5008  06AF  1D03               	btfss	3,2
  5009  06B0  2E99               	goto	l3191
  5010  06B1  3009               	movlw	9
  5011  06B2  00B4               	movwf	??___ftmul
  5012  06B3  0834               	movf	??___ftmul,w
  5013  06B4  00BC               	movwf	___ftmul@cntr
  5014  06B5                     l3203:	
  5015  06B5  1C2E               	btfss	___ftmul@f1,0
  5016  06B6  2EBD               	goto	l3207
  5017  06B7  0831               	movf	___ftmul@f2,w
  5018  06B8  07B9               	addwf	___ftmul@f3_as_product,f
  5019  06B9  0832               	movf	___ftmul@f2+1,w
  5020  06BA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  5021  06BB  0833               	movf	___ftmul@f2+2,w
  5022  06BC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  5023  06BD                     l3207:	
  5024  06BD  3001               	movlw	1
  5025  06BE                     u3505:	
  5026  06BE  36B0               	lsrf	___ftmul@f1+2,f
  5027  06BF  0CAF               	rrf	___ftmul@f1+1,f
  5028  06C0  0CAE               	rrf	___ftmul@f1,f
  5029  06C1  0B89               	decfsz	9,f
  5030  06C2  2EBE               	goto	u3505
  5031  06C3  3001               	movlw	1
  5032  06C4                     u3515:	
  5033  06C4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  5034  06C5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  5035  06C6  0CB9               	rrf	___ftmul@f3_as_product,f
  5036  06C7  0B89               	decfsz	9,f
  5037  06C8  2EC4               	goto	u3515
  5038  06C9  3001               	movlw	1
  5039  06CA  02BC               	subwf	___ftmul@cntr,f
  5040  06CB  1D03               	btfss	3,2
  5041  06CC  2EB5               	goto	l3203
  5042  06CD  0839               	movf	___ftmul@f3_as_product,w
  5043  06CE  00A0               	movwf	___ftpack@arg
  5044  06CF  083A               	movf	___ftmul@f3_as_product+1,w
  5045  06D0  00A1               	movwf	___ftpack@arg+1
  5046  06D1  083B               	movf	___ftmul@f3_as_product+2,w
  5047  06D2  00A2               	movwf	___ftpack@arg+2
  5048  06D3  0838               	movf	___ftmul@exp,w
  5049  06D4  00B4               	movwf	??___ftmul
  5050  06D5  0834               	movf	??___ftmul,w
  5051  06D6  00A3               	movwf	___ftpack@exp
  5052  06D7  083D               	movf	___ftmul@sign,w
  5053  06D8  00B5               	movwf	??___ftmul+1
  5054  06D9  0835               	movf	??___ftmul+1,w
  5055  06DA  00A4               	movwf	___ftpack@sign
  5056  06DB  3187  278E         	fcall	___ftpack
  5057  06DD  0020               	movlb	0	; select bank0
  5058  06DE  0820               	movf	?___ftpack,w
  5059  06DF  00AE               	movwf	?___ftmul
  5060  06E0  0821               	movf	?___ftpack+1,w
  5061  06E1  00AF               	movwf	?___ftmul+1
  5062  06E2  0822               	movf	?___ftpack+2,w
  5063  06E3  00B0               	movwf	?___ftmul+2
  5064  06E4  0008               	return
  5065  06E5                     __end_of___ftmul:	
  5066                           
  5067                           	psect	text10
  5068  0AF2                     __ptext10:	
  5069 ;; *************** function ___ftge *****************
  5070 ;; Defined at:
  5071 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  ff1             3   14[BANK0 ] float 
  5074 ;;  ff2             3   17[BANK0 ] float 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;		None
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5086 ;;      Params:         0       6       0       0       0       0       0       0
  5087 ;;      Locals:         0       0       0       0       0       0       0       0
  5088 ;;      Temps:          0       3       0       0       0       0       0       0
  5089 ;;      Totals:         0       9       0       0       0       0       0       0
  5090 ;;Total ram usage:        9 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    4
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_comparare
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           
  5101                           ;psect for function ___ftge
  5102  0AF2                     ___ftge:	
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5106  0AF2  0020               	movlb	0	; select bank0
  5107  0AF3  1FB0               	btfss	___ftge@ff1+2,7
  5108  0AF4  2B09               	goto	l3151
  5109  0AF5  092E               	comf	___ftge@ff1,w
  5110  0AF6  00B4               	movwf	??___ftge
  5111  0AF7  092F               	comf	___ftge@ff1+1,w
  5112  0AF8  00B5               	movwf	??___ftge+1
  5113  0AF9  0930               	comf	___ftge@ff1+2,w
  5114  0AFA  00B6               	movwf	??___ftge+2
  5115  0AFB  0AB4               	incf	??___ftge,f
  5116  0AFC  1903               	skipnz
  5117  0AFD  0AB5               	incf	??___ftge+1,f
  5118  0AFE  1903               	skipnz
  5119  0AFF  0AB6               	incf	??___ftge+2,f
  5120  0B00  3000               	movlw	0
  5121  0B01  0734               	addwf	??___ftge,w
  5122  0B02  00AE               	movwf	___ftge@ff1
  5123  0B03  3000               	movlw	0
  5124  0B04  3D35               	addwfc	??___ftge+1,w
  5125  0B05  00AF               	movwf	___ftge@ff1+1
  5126  0B06  3080               	movlw	128
  5127  0B07  3D36               	addwfc	??___ftge+2,w
  5128  0B08  00B0               	movwf	___ftge@ff1+2
  5129  0B09                     l3151:	
  5130  0B09  1FB3               	btfss	___ftge@ff2+2,7
  5131  0B0A  2B1F               	goto	l3155
  5132  0B0B  0931               	comf	___ftge@ff2,w
  5133  0B0C  00B4               	movwf	??___ftge
  5134  0B0D  0932               	comf	___ftge@ff2+1,w
  5135  0B0E  00B5               	movwf	??___ftge+1
  5136  0B0F  0933               	comf	___ftge@ff2+2,w
  5137  0B10  00B6               	movwf	??___ftge+2
  5138  0B11  0AB4               	incf	??___ftge,f
  5139  0B12  1903               	skipnz
  5140  0B13  0AB5               	incf	??___ftge+1,f
  5141  0B14  1903               	skipnz
  5142  0B15  0AB6               	incf	??___ftge+2,f
  5143  0B16  3000               	movlw	0
  5144  0B17  0734               	addwf	??___ftge,w
  5145  0B18  00B1               	movwf	___ftge@ff2
  5146  0B19  3000               	movlw	0
  5147  0B1A  3D35               	addwfc	??___ftge+1,w
  5148  0B1B  00B2               	movwf	___ftge@ff2+1
  5149  0B1C  3080               	movlw	128
  5150  0B1D  3D36               	addwfc	??___ftge+2,w
  5151  0B1E  00B3               	movwf	___ftge@ff2+2
  5152  0B1F                     l3155:	
  5153  0B1F  3080               	movlw	128
  5154  0B20  06B0               	xorwf	___ftge@ff1+2,f
  5155  0B21  3080               	movlw	128
  5156  0B22  06B3               	xorwf	___ftge@ff2+2,f
  5157  0B23  0833               	movf	___ftge@ff2+2,w
  5158  0B24  0230               	subwf	___ftge@ff1+2,w
  5159  0B25  1D03               	skipz
  5160  0B26  0008               	return
  5161  0B27  0832               	movf	___ftge@ff2+1,w
  5162  0B28  022F               	subwf	___ftge@ff1+1,w
  5163  0B29  1D03               	skipz
  5164  0B2A  0008               	return
  5165  0B2B  0831               	movf	___ftge@ff2,w
  5166  0B2C  022E               	subwf	___ftge@ff1,w
  5167  0B2D  0008               	return
  5168  0B2E                     __end_of___ftge:	
  5169                           
  5170                           	psect	text11
  5171  06E5                     __ptext11:	
  5172 ;; *************** function ___ftdiv *****************
  5173 ;; Defined at:
  5174 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  f2              3   30[BANK0 ] float 
  5177 ;;  f1              3   33[BANK0 ] float 
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  f3              3   41[BANK0 ] float 
  5180 ;;  sign            1   45[BANK0 ] unsigned char 
  5181 ;;  exp             1   44[BANK0 ] unsigned char 
  5182 ;;  cntr            1   40[BANK0 ] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  3   30[BANK0 ] float 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0, pclath, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5192 ;;      Params:         0       6       0       0       0       0       0       0
  5193 ;;      Locals:         0       6       0       0       0       0       0       0
  5194 ;;      Temps:          0       4       0       0       0       0       0       0
  5195 ;;      Totals:         0      16       0       0       0       0       0       0
  5196 ;;Total ram usage:       16 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    5
  5199 ;; This function calls:
  5200 ;;		___ftpack
  5201 ;; This function is called by:
  5202 ;;		_comparare
  5203 ;;		_main
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function ___ftdiv
  5209  06E5                     ___ftdiv:	
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5213  06E5  0020               	movlb	0	; select bank0
  5214  06E6  0841               	movf	___ftdiv@f1,w
  5215  06E7  00C4               	movwf	??___ftdiv
  5216  06E8  0842               	movf	___ftdiv@f1+1,w
  5217  06E9  00C5               	movwf	??___ftdiv+1
  5218  06EA  0843               	movf	___ftdiv@f1+2,w
  5219  06EB  00C6               	movwf	??___ftdiv+2
  5220  06EC  1003               	clrc
  5221  06ED  0D45               	rlf	??___ftdiv+1,w
  5222  06EE  0D46               	rlf	??___ftdiv+2,w
  5223  06EF  00C7               	movwf	??___ftdiv+3
  5224  06F0  0847               	movf	??___ftdiv+3,w
  5225  06F1  00CC               	movwf	___ftdiv@exp
  5226  06F2  084C               	movf	___ftdiv@exp,w
  5227  06F3  1D03               	btfss	3,2
  5228  06F4  2EFC               	goto	l3111
  5229  06F5  3000               	movlw	0
  5230  06F6  00BE               	movwf	?___ftdiv
  5231  06F7  3000               	movlw	0
  5232  06F8  00BF               	movwf	?___ftdiv+1
  5233  06F9  3000               	movlw	0
  5234  06FA  00C0               	movwf	?___ftdiv+2
  5235  06FB  0008               	return
  5236  06FC                     l3111:	
  5237  06FC  083E               	movf	___ftdiv@f2,w
  5238  06FD  00C4               	movwf	??___ftdiv
  5239  06FE  083F               	movf	___ftdiv@f2+1,w
  5240  06FF  00C5               	movwf	??___ftdiv+1
  5241  0700  0840               	movf	___ftdiv@f2+2,w
  5242  0701  00C6               	movwf	??___ftdiv+2
  5243  0702  1003               	clrc
  5244  0703  0D45               	rlf	??___ftdiv+1,w
  5245  0704  0D46               	rlf	??___ftdiv+2,w
  5246  0705  00C7               	movwf	??___ftdiv+3
  5247  0706  0847               	movf	??___ftdiv+3,w
  5248  0707  00CD               	movwf	___ftdiv@sign
  5249  0708  084D               	movf	___ftdiv@sign,w
  5250  0709  1D03               	btfss	3,2
  5251  070A  2F12               	goto	l3117
  5252  070B  3000               	movlw	0
  5253  070C  00BE               	movwf	?___ftdiv
  5254  070D  3000               	movlw	0
  5255  070E  00BF               	movwf	?___ftdiv+1
  5256  070F  3000               	movlw	0
  5257  0710  00C0               	movwf	?___ftdiv+2
  5258  0711  0008               	return
  5259  0712                     l3117:	
  5260  0712  3000               	movlw	0
  5261  0713  00C9               	movwf	___ftdiv@f3
  5262  0714  3000               	movlw	0
  5263  0715  00CA               	movwf	___ftdiv@f3+1
  5264  0716  3000               	movlw	0
  5265  0717  00CB               	movwf	___ftdiv@f3+2
  5266  0718  3089               	movlw	137
  5267  0719  074D               	addwf	___ftdiv@sign,w
  5268  071A  00C4               	movwf	??___ftdiv
  5269  071B  0844               	movf	??___ftdiv,w
  5270  071C  02CC               	subwf	___ftdiv@exp,f
  5271  071D  0841               	movf	___ftdiv@f1,w
  5272  071E  00C4               	movwf	??___ftdiv
  5273  071F  0842               	movf	___ftdiv@f1+1,w
  5274  0720  00C5               	movwf	??___ftdiv+1
  5275  0721  0843               	movf	___ftdiv@f1+2,w
  5276  0722  00C6               	movwf	??___ftdiv+2
  5277  0723  3010               	movlw	16
  5278  0724                     u3325:	
  5279  0724  36C6               	lsrf	??___ftdiv+2,f
  5280  0725  0CC5               	rrf	??___ftdiv+1,f
  5281  0726  0CC4               	rrf	??___ftdiv,f
  5282  0727  0B89               	decfsz	9,f
  5283  0728  2F24               	goto	u3325
  5284  0729  0844               	movf	??___ftdiv,w
  5285  072A  00C7               	movwf	??___ftdiv+3
  5286  072B  0847               	movf	??___ftdiv+3,w
  5287  072C  00CD               	movwf	___ftdiv@sign
  5288  072D  083E               	movf	___ftdiv@f2,w
  5289  072E  00C4               	movwf	??___ftdiv
  5290  072F  083F               	movf	___ftdiv@f2+1,w
  5291  0730  00C5               	movwf	??___ftdiv+1
  5292  0731  0840               	movf	___ftdiv@f2+2,w
  5293  0732  00C6               	movwf	??___ftdiv+2
  5294  0733  3010               	movlw	16
  5295  0734                     u3335:	
  5296  0734  36C6               	lsrf	??___ftdiv+2,f
  5297  0735  0CC5               	rrf	??___ftdiv+1,f
  5298  0736  0CC4               	rrf	??___ftdiv,f
  5299  0737  0B89               	decfsz	9,f
  5300  0738  2F34               	goto	u3335
  5301  0739  0844               	movf	??___ftdiv,w
  5302  073A  00C7               	movwf	??___ftdiv+3
  5303  073B  0847               	movf	??___ftdiv+3,w
  5304  073C  06CD               	xorwf	___ftdiv@sign,f
  5305  073D  3080               	movlw	128
  5306  073E  00C4               	movwf	??___ftdiv
  5307  073F  0844               	movf	??___ftdiv,w
  5308  0740  05CD               	andwf	___ftdiv@sign,f
  5309  0741  17C2               	bsf	___ftdiv@f1+1,7
  5310  0742  30FF               	movlw	255
  5311  0743  05C1               	andwf	___ftdiv@f1,f
  5312  0744  30FF               	movlw	255
  5313  0745  05C2               	andwf	___ftdiv@f1+1,f
  5314  0746  3000               	movlw	0
  5315  0747  05C3               	andwf	___ftdiv@f1+2,f
  5316  0748  17BF               	bsf	___ftdiv@f2+1,7
  5317  0749  30FF               	movlw	255
  5318  074A  05BE               	andwf	___ftdiv@f2,f
  5319  074B  30FF               	movlw	255
  5320  074C  05BF               	andwf	___ftdiv@f2+1,f
  5321  074D  3000               	movlw	0
  5322  074E  05C0               	andwf	___ftdiv@f2+2,f
  5323  074F  3018               	movlw	24
  5324  0750  00C4               	movwf	??___ftdiv
  5325  0751  0844               	movf	??___ftdiv,w
  5326  0752  00C8               	movwf	___ftdiv@cntr
  5327  0753                     l3131:	
  5328  0753  3001               	movlw	1
  5329  0754                     u3345:	
  5330  0754  35C9               	lslf	___ftdiv@f3,f
  5331  0755  0DCA               	rlf	___ftdiv@f3+1,f
  5332  0756  0DCB               	rlf	___ftdiv@f3+2,f
  5333  0757  0B89               	decfsz	9,f
  5334  0758  2F54               	goto	u3345
  5335  0759  0840               	movf	___ftdiv@f2+2,w
  5336  075A  0243               	subwf	___ftdiv@f1+2,w
  5337  075B  1D03               	skipz
  5338  075C  2F63               	goto	u3355
  5339  075D  083F               	movf	___ftdiv@f2+1,w
  5340  075E  0242               	subwf	___ftdiv@f1+1,w
  5341  075F  1D03               	skipz
  5342  0760  2F63               	goto	u3355
  5343  0761  083E               	movf	___ftdiv@f2,w
  5344  0762  0241               	subwf	___ftdiv@f1,w
  5345  0763                     u3355:	
  5346  0763  1C03               	skipc
  5347  0764  2F6C               	goto	l3139
  5348  0765  083E               	movf	___ftdiv@f2,w
  5349  0766  02C1               	subwf	___ftdiv@f1,f
  5350  0767  083F               	movf	___ftdiv@f2+1,w
  5351  0768  3BC2               	subwfb	___ftdiv@f1+1,f
  5352  0769  0840               	movf	___ftdiv@f2+2,w
  5353  076A  3BC3               	subwfb	___ftdiv@f1+2,f
  5354  076B  1449               	bsf	___ftdiv@f3,0
  5355  076C                     l3139:	
  5356  076C  3001               	movlw	1
  5357  076D                     u3365:	
  5358  076D  35C1               	lslf	___ftdiv@f1,f
  5359  076E  0DC2               	rlf	___ftdiv@f1+1,f
  5360  076F  0DC3               	rlf	___ftdiv@f1+2,f
  5361  0770  0B89               	decfsz	9,f
  5362  0771  2F6D               	goto	u3365
  5363  0772  3001               	movlw	1
  5364  0773  02C8               	subwf	___ftdiv@cntr,f
  5365  0774  1D03               	btfss	3,2
  5366  0775  2F53               	goto	l3131
  5367  0776  0849               	movf	___ftdiv@f3,w
  5368  0777  00A0               	movwf	___ftpack@arg
  5369  0778  084A               	movf	___ftdiv@f3+1,w
  5370  0779  00A1               	movwf	___ftpack@arg+1
  5371  077A  084B               	movf	___ftdiv@f3+2,w
  5372  077B  00A2               	movwf	___ftpack@arg+2
  5373  077C  084C               	movf	___ftdiv@exp,w
  5374  077D  00C4               	movwf	??___ftdiv
  5375  077E  0844               	movf	??___ftdiv,w
  5376  077F  00A3               	movwf	___ftpack@exp
  5377  0780  084D               	movf	___ftdiv@sign,w
  5378  0781  00C5               	movwf	??___ftdiv+1
  5379  0782  0845               	movf	??___ftdiv+1,w
  5380  0783  00A4               	movwf	___ftpack@sign
  5381  0784  3187  278E         	fcall	___ftpack
  5382  0786  0020               	movlb	0	; select bank0
  5383  0787  0820               	movf	?___ftpack,w
  5384  0788  00BE               	movwf	?___ftdiv
  5385  0789  0821               	movf	?___ftpack+1,w
  5386  078A  00BF               	movwf	?___ftdiv+1
  5387  078B  0822               	movf	?___ftpack+2,w
  5388  078C  00C0               	movwf	?___ftdiv+2
  5389  078D  0008               	return
  5390  078E                     __end_of___ftdiv:	
  5391                           
  5392                           	psect	text12
  5393  0485                     __ptext12:	
  5394 ;; *************** function ___ftadd *****************
  5395 ;; Defined at:
  5396 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  f1              3   33[BANK0 ] float 
  5399 ;;  f2              3   36[BANK0 ] float 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  exp1            1   45[BANK0 ] unsigned char 
  5402 ;;  exp2            1   44[BANK0 ] unsigned char 
  5403 ;;  sign            1   43[BANK0 ] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  3   33[BANK0 ] float 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0, pclath, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5413 ;;      Params:         0       6       0       0       0       0       0       0
  5414 ;;      Locals:         0       3       0       0       0       0       0       0
  5415 ;;      Temps:          0       4       0       0       0       0       0       0
  5416 ;;      Totals:         0      13       0       0       0       0       0       0
  5417 ;;Total ram usage:       13 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    5
  5420 ;; This function calls:
  5421 ;;		___ftpack
  5422 ;; This function is called by:
  5423 ;;		_comparare
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function ___ftadd
  5429  0485                     ___ftadd:	
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5433  0485  0020               	movlb	0	; select bank0
  5434  0486  0841               	movf	___ftadd@f1,w
  5435  0487  00C7               	movwf	??___ftadd
  5436  0488  0842               	movf	___ftadd@f1+1,w
  5437  0489  00C8               	movwf	??___ftadd+1
  5438  048A  0843               	movf	___ftadd@f1+2,w
  5439  048B  00C9               	movwf	??___ftadd+2
  5440  048C  1003               	clrc
  5441  048D  0D48               	rlf	??___ftadd+1,w
  5442  048E  0D49               	rlf	??___ftadd+2,w
  5443  048F  00CA               	movwf	??___ftadd+3
  5444  0490  084A               	movf	??___ftadd+3,w
  5445  0491  00CD               	movwf	___ftadd@exp1
  5446  0492  0844               	movf	___ftadd@f2,w
  5447  0493  00C7               	movwf	??___ftadd
  5448  0494  0845               	movf	___ftadd@f2+1,w
  5449  0495  00C8               	movwf	??___ftadd+1
  5450  0496  0846               	movf	___ftadd@f2+2,w
  5451  0497  00C9               	movwf	??___ftadd+2
  5452  0498  1003               	clrc
  5453  0499  0D48               	rlf	??___ftadd+1,w
  5454  049A  0D49               	rlf	??___ftadd+2,w
  5455  049B  00CA               	movwf	??___ftadd+3
  5456  049C  084A               	movf	??___ftadd+3,w
  5457  049D  00CC               	movwf	___ftadd@exp2
  5458  049E  084D               	movf	___ftadd@exp1,w
  5459  049F  1903               	btfsc	3,2
  5460  04A0  2CAD               	goto	l3041
  5461  04A1  084C               	movf	___ftadd@exp2,w
  5462  04A2  024D               	subwf	___ftadd@exp1,w
  5463  04A3  1803               	skipnc
  5464  04A4  2CB4               	goto	l3045
  5465  04A5  034D               	decf	___ftadd@exp1,w
  5466  04A6  3AFF               	xorlw	255
  5467  04A7  074C               	addwf	___ftadd@exp2,w
  5468  04A8  00C7               	movwf	??___ftadd
  5469  04A9  3019               	movlw	25
  5470  04AA  0247               	subwf	??___ftadd,w
  5471  04AB  1C03               	skipc
  5472  04AC  2CB4               	goto	l3045
  5473  04AD                     l3041:	
  5474  04AD  0844               	movf	___ftadd@f2,w
  5475  04AE  00C1               	movwf	?___ftadd
  5476  04AF  0845               	movf	___ftadd@f2+1,w
  5477  04B0  00C2               	movwf	?___ftadd+1
  5478  04B1  0846               	movf	___ftadd@f2+2,w
  5479  04B2  00C3               	movwf	?___ftadd+2
  5480  04B3  0008               	return
  5481  04B4                     l3045:	
  5482  04B4  084C               	movf	___ftadd@exp2,w
  5483  04B5  1903               	btfsc	3,2
  5484  04B6  0008               	return
  5485  04B7  084D               	movf	___ftadd@exp1,w
  5486  04B8  024C               	subwf	___ftadd@exp2,w
  5487  04B9  1803               	skipnc
  5488  04BA  2CC3               	goto	l3051
  5489  04BB  034C               	decf	___ftadd@exp2,w
  5490  04BC  3AFF               	xorlw	255
  5491  04BD  074D               	addwf	___ftadd@exp1,w
  5492  04BE  00C7               	movwf	??___ftadd
  5493  04BF  3019               	movlw	25
  5494  04C0  0247               	subwf	??___ftadd,w
  5495  04C1  1803               	btfsc	3,0
  5496  04C2  0008               	return
  5497  04C3                     l3051:	
  5498  04C3  3006               	movlw	6
  5499  04C4  00C7               	movwf	??___ftadd
  5500  04C5  0847               	movf	??___ftadd,w
  5501  04C6  00CB               	movwf	___ftadd@sign
  5502  04C7  1BC3               	btfsc	___ftadd@f1+2,7
  5503  04C8  17CB               	bsf	___ftadd@sign,7
  5504  04C9  1BC6               	btfsc	___ftadd@f2+2,7
  5505  04CA  174B               	bsf	___ftadd@sign,6
  5506  04CB  17C2               	bsf	___ftadd@f1+1,7
  5507  04CC  30FF               	movlw	255
  5508  04CD  05C1               	andwf	___ftadd@f1,f
  5509  04CE  30FF               	movlw	255
  5510  04CF  05C2               	andwf	___ftadd@f1+1,f
  5511  04D0  3000               	movlw	0
  5512  04D1  05C3               	andwf	___ftadd@f1+2,f
  5513  04D2  17C5               	bsf	___ftadd@f2+1,7
  5514  04D3  30FF               	movlw	255
  5515  04D4  05C4               	andwf	___ftadd@f2,f
  5516  04D5  30FF               	movlw	255
  5517  04D6  05C5               	andwf	___ftadd@f2+1,f
  5518  04D7  3000               	movlw	0
  5519  04D8  05C6               	andwf	___ftadd@f2+2,f
  5520  04D9  084C               	movf	___ftadd@exp2,w
  5521  04DA  024D               	subwf	___ftadd@exp1,w
  5522  04DB  1803               	skipnc
  5523  04DC  2CFF               	goto	l3073
  5524  04DD                     l3063:	
  5525  04DD  3001               	movlw	1
  5526  04DE                     u3165:	
  5527  04DE  35C4               	lslf	___ftadd@f2,f
  5528  04DF  0DC5               	rlf	___ftadd@f2+1,f
  5529  04E0  0DC6               	rlf	___ftadd@f2+2,f
  5530  04E1  0B89               	decfsz	9,f
  5531  04E2  2CDE               	goto	u3165
  5532  04E3  3001               	movlw	1
  5533  04E4  02CC               	subwf	___ftadd@exp2,f
  5534  04E5  084C               	movf	___ftadd@exp2,w
  5535  04E6  064D               	xorwf	___ftadd@exp1,w
  5536  04E7  1903               	skipnz
  5537  04E8  2CFA               	goto	l3071
  5538  04E9  3001               	movlw	1
  5539  04EA  02CB               	subwf	___ftadd@sign,f
  5540  04EB  084B               	movf	___ftadd@sign,w
  5541  04EC  3907               	andlw	7
  5542  04ED  1903               	btfsc	3,2
  5543  04EE  2CFA               	goto	l3071
  5544  04EF  2CDD               	goto	l3063
  5545  04F0                     l3069:	
  5546  04F0  3001               	movlw	1
  5547  04F1                     u3195:	
  5548  04F1  36C3               	lsrf	___ftadd@f1+2,f
  5549  04F2  0CC2               	rrf	___ftadd@f1+1,f
  5550  04F3  0CC1               	rrf	___ftadd@f1,f
  5551  04F4  0B89               	decfsz	9,f
  5552  04F5  2CF1               	goto	u3195
  5553  04F6  3001               	movlw	1
  5554  04F7  00C7               	movwf	??___ftadd
  5555  04F8  0847               	movf	??___ftadd,w
  5556  04F9  07CD               	addwf	___ftadd@exp1,f
  5557  04FA                     l3071:	
  5558  04FA  084D               	movf	___ftadd@exp1,w
  5559  04FB  064C               	xorwf	___ftadd@exp2,w
  5560  04FC  1903               	btfsc	3,2
  5561  04FD  2D24               	goto	l905
  5562  04FE  2CF0               	goto	l3069
  5563  04FF                     l3073:	
  5564  04FF  084D               	movf	___ftadd@exp1,w
  5565  0500  024C               	subwf	___ftadd@exp2,w
  5566  0501  1803               	skipnc
  5567  0502  2D24               	goto	l905
  5568  0503                     l3075:	
  5569  0503  3001               	movlw	1
  5570  0504                     u3225:	
  5571  0504  35C1               	lslf	___ftadd@f1,f
  5572  0505  0DC2               	rlf	___ftadd@f1+1,f
  5573  0506  0DC3               	rlf	___ftadd@f1+2,f
  5574  0507  0B89               	decfsz	9,f
  5575  0508  2D04               	goto	u3225
  5576  0509  3001               	movlw	1
  5577  050A  02CD               	subwf	___ftadd@exp1,f
  5578  050B  084C               	movf	___ftadd@exp2,w
  5579  050C  064D               	xorwf	___ftadd@exp1,w
  5580  050D  1903               	skipnz
  5581  050E  2D20               	goto	l3083
  5582  050F  3001               	movlw	1
  5583  0510  02CB               	subwf	___ftadd@sign,f
  5584  0511  084B               	movf	___ftadd@sign,w
  5585  0512  3907               	andlw	7
  5586  0513  1903               	btfsc	3,2
  5587  0514  2D20               	goto	l3083
  5588  0515  2D03               	goto	l3075
  5589  0516                     l3081:	
  5590  0516  3001               	movlw	1
  5591  0517                     u3255:	
  5592  0517  36C6               	lsrf	___ftadd@f2+2,f
  5593  0518  0CC5               	rrf	___ftadd@f2+1,f
  5594  0519  0CC4               	rrf	___ftadd@f2,f
  5595  051A  0B89               	decfsz	9,f
  5596  051B  2D17               	goto	u3255
  5597  051C  3001               	movlw	1
  5598  051D  00C7               	movwf	??___ftadd
  5599  051E  0847               	movf	??___ftadd,w
  5600  051F  07CC               	addwf	___ftadd@exp2,f
  5601  0520                     l3083:	
  5602  0520  084D               	movf	___ftadd@exp1,w
  5603  0521  064C               	xorwf	___ftadd@exp2,w
  5604  0522  1D03               	skipz
  5605  0523  2D16               	goto	l3081
  5606  0524                     l905:	
  5607  0524  1FCB               	btfss	___ftadd@sign,7
  5608  0525  2D36               	goto	l3087
  5609  0526  30FF               	movlw	255
  5610  0527  06C1               	xorwf	___ftadd@f1,f
  5611  0528  30FF               	movlw	255
  5612  0529  06C2               	xorwf	___ftadd@f1+1,f
  5613  052A  30FF               	movlw	255
  5614  052B  06C3               	xorwf	___ftadd@f1+2,f
  5615  052C  3001               	movlw	1
  5616  052D  07C1               	addwf	___ftadd@f1,f
  5617  052E  3000               	movlw	0
  5618  052F  1803               	skipnc
  5619  0530  3001               	movlw	1
  5620  0531  07C2               	addwf	___ftadd@f1+1,f
  5621  0532  3000               	movlw	0
  5622  0533  1803               	skipnc
  5623  0534  3001               	movlw	1
  5624  0535  07C3               	addwf	___ftadd@f1+2,f
  5625  0536                     l3087:	
  5626  0536  1F4B               	btfss	___ftadd@sign,6
  5627  0537  2D48               	goto	l3091
  5628  0538  30FF               	movlw	255
  5629  0539  06C4               	xorwf	___ftadd@f2,f
  5630  053A  30FF               	movlw	255
  5631  053B  06C5               	xorwf	___ftadd@f2+1,f
  5632  053C  30FF               	movlw	255
  5633  053D  06C6               	xorwf	___ftadd@f2+2,f
  5634  053E  3001               	movlw	1
  5635  053F  07C4               	addwf	___ftadd@f2,f
  5636  0540  3000               	movlw	0
  5637  0541  1803               	skipnc
  5638  0542  3001               	movlw	1
  5639  0543  07C5               	addwf	___ftadd@f2+1,f
  5640  0544  3000               	movlw	0
  5641  0545  1803               	skipnc
  5642  0546  3001               	movlw	1
  5643  0547  07C6               	addwf	___ftadd@f2+2,f
  5644  0548                     l3091:	
  5645  0548  01CB               	clrf	___ftadd@sign
  5646  0549  0841               	movf	___ftadd@f1,w
  5647  054A  07C4               	addwf	___ftadd@f2,f
  5648  054B  0842               	movf	___ftadd@f1+1,w
  5649  054C  3DC5               	addwfc	___ftadd@f2+1,f
  5650  054D  0843               	movf	___ftadd@f1+2,w
  5651  054E  3DC6               	addwfc	___ftadd@f2+2,f
  5652  054F  1FC6               	btfss	___ftadd@f2+2,7
  5653  0550  2D63               	goto	l3101
  5654  0551  30FF               	movlw	255
  5655  0552  06C4               	xorwf	___ftadd@f2,f
  5656  0553  30FF               	movlw	255
  5657  0554  06C5               	xorwf	___ftadd@f2+1,f
  5658  0555  30FF               	movlw	255
  5659  0556  06C6               	xorwf	___ftadd@f2+2,f
  5660  0557  3001               	movlw	1
  5661  0558  07C4               	addwf	___ftadd@f2,f
  5662  0559  3000               	movlw	0
  5663  055A  1803               	skipnc
  5664  055B  3001               	movlw	1
  5665  055C  07C5               	addwf	___ftadd@f2+1,f
  5666  055D  3000               	movlw	0
  5667  055E  1803               	skipnc
  5668  055F  3001               	movlw	1
  5669  0560  07C6               	addwf	___ftadd@f2+2,f
  5670  0561  01CB               	clrf	___ftadd@sign
  5671  0562  0ACB               	incf	___ftadd@sign,f
  5672  0563                     l3101:	
  5673  0563  0844               	movf	___ftadd@f2,w
  5674  0564  00A0               	movwf	___ftpack@arg
  5675  0565  0845               	movf	___ftadd@f2+1,w
  5676  0566  00A1               	movwf	___ftpack@arg+1
  5677  0567  0846               	movf	___ftadd@f2+2,w
  5678  0568  00A2               	movwf	___ftpack@arg+2
  5679  0569  084D               	movf	___ftadd@exp1,w
  5680  056A  00C7               	movwf	??___ftadd
  5681  056B  0847               	movf	??___ftadd,w
  5682  056C  00A3               	movwf	___ftpack@exp
  5683  056D  084B               	movf	___ftadd@sign,w
  5684  056E  00C8               	movwf	??___ftadd+1
  5685  056F  0848               	movf	??___ftadd+1,w
  5686  0570  00A4               	movwf	___ftpack@sign
  5687  0571  3187  278E         	fcall	___ftpack
  5688  0573  0020               	movlb	0	; select bank0
  5689  0574  0820               	movf	?___ftpack,w
  5690  0575  00C1               	movwf	?___ftadd
  5691  0576  0821               	movf	?___ftpack+1,w
  5692  0577  00C2               	movwf	?___ftadd+1
  5693  0578  0822               	movf	?___ftpack+2,w
  5694  0579  00C3               	movwf	?___ftadd+2
  5695  057A  0008               	return
  5696  057B                     __end_of___ftadd:	
  5697                           
  5698                           	psect	text13
  5699  0890                     __ptext13:	
  5700 ;; *************** function ___bmul *****************
  5701 ;; Defined at:
  5702 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  multiplier      1    wreg     unsigned char 
  5705 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5708 ;;  product         1    2[BANK0 ] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      unsigned char 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5718 ;;      Params:         0       1       0       0       0       0       0       0
  5719 ;;      Locals:         0       2       0       0       0       0       0       0
  5720 ;;      Temps:          0       1       0       0       0       0       0       0
  5721 ;;      Totals:         0       4       0       0       0       0       0       0
  5722 ;;Total ram usage:        4 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    4
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_comparare
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function ___bmul
  5734  0890                     ___bmul:	
  5735                           
  5736                           ;incstack = 0
  5737                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5738                           ;___bmul@multiplier stored from wreg
  5739  0890  0020               	movlb	0	; select bank0
  5740  0891  00A3               	movwf	___bmul@multiplier
  5741  0892  01A2               	clrf	___bmul@product
  5742  0893                     l2929:	
  5743  0893  1C23               	btfss	___bmul@multiplier,0
  5744  0894  2899               	goto	l2933
  5745  0895  0820               	movf	___bmul@multiplicand,w
  5746  0896  00A1               	movwf	??___bmul
  5747  0897  0821               	movf	??___bmul,w
  5748  0898  07A2               	addwf	___bmul@product,f
  5749  0899                     l2933:	
  5750  0899  1003               	clrc
  5751  089A  0DA0               	rlf	___bmul@multiplicand,f
  5752  089B  1003               	clrc
  5753  089C  0CA3               	rrf	___bmul@multiplier,f
  5754  089D  0823               	movf	___bmul@multiplier,w
  5755  089E  1D03               	btfss	3,2
  5756  089F  2893               	goto	l2929
  5757  08A0  0822               	movf	___bmul@product,w
  5758  08A1  0008               	return
  5759  08A2                     __end_of___bmul:	
  5760                           
  5761                           	psect	text14
  5762  09BE                     __ptext14:	
  5763 ;; *************** function ___awtoft *****************
  5764 ;; Defined at:
  5765 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  c               2    8[BANK0 ] int 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  sign            1   13[BANK0 ] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  3    8[BANK0 ] float 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, pclath, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5779 ;;      Params:         0       3       0       0       0       0       0       0
  5780 ;;      Locals:         0       1       0       0       0       0       0       0
  5781 ;;      Temps:          0       2       0       0       0       0       0       0
  5782 ;;      Totals:         0       6       0       0       0       0       0       0
  5783 ;;Total ram usage:        6 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    5
  5786 ;; This function calls:
  5787 ;;		___ftpack
  5788 ;; This function is called by:
  5789 ;;		_comparare
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function ___awtoft
  5795  09BE                     ___awtoft:	
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5799  09BE  0020               	movlb	0	; select bank0
  5800  09BF  01AD               	clrf	___awtoft@sign
  5801  09C0  1FA9               	btfss	___awtoft@c+1,7
  5802  09C1  29C9               	goto	l3031
  5803  09C2  09A8               	comf	___awtoft@c,f
  5804  09C3  09A9               	comf	___awtoft@c+1,f
  5805  09C4  0AA8               	incf	___awtoft@c,f
  5806  09C5  1903               	skipnz
  5807  09C6  0AA9               	incf	___awtoft@c+1,f
  5808  09C7  01AD               	clrf	___awtoft@sign
  5809  09C8  0AAD               	incf	___awtoft@sign,f
  5810  09C9                     l3031:	
  5811  09C9  0828               	movf	___awtoft@c,w
  5812  09CA  00A0               	movwf	___ftpack@arg
  5813  09CB  0829               	movf	___awtoft@c+1,w
  5814  09CC  00A1               	movwf	___ftpack@arg+1
  5815  09CD  01A2               	clrf	___ftpack@arg+2
  5816  09CE  308E               	movlw	142
  5817  09CF  00AB               	movwf	??___awtoft
  5818  09D0  082B               	movf	??___awtoft,w
  5819  09D1  00A3               	movwf	___ftpack@exp
  5820  09D2  082D               	movf	___awtoft@sign,w
  5821  09D3  00AC               	movwf	??___awtoft+1
  5822  09D4  082C               	movf	??___awtoft+1,w
  5823  09D5  00A4               	movwf	___ftpack@sign
  5824  09D6  3187  278E         	fcall	___ftpack
  5825  09D8  0020               	movlb	0	; select bank0
  5826  09D9  0820               	movf	?___ftpack,w
  5827  09DA  00A8               	movwf	?___awtoft
  5828  09DB  0821               	movf	?___ftpack+1,w
  5829  09DC  00A9               	movwf	?___awtoft+1
  5830  09DD  0822               	movf	?___ftpack+2,w
  5831  09DE  00AA               	movwf	?___awtoft+2
  5832  09DF  0008               	return
  5833  09E0                     __end_of___awtoft:	
  5834                           
  5835                           	psect	text15
  5836  078E                     __ptext15:	
  5837 ;; *************** function ___ftpack *****************
  5838 ;; Defined at:
  5839 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;  arg             3    0[BANK0 ] unsigned um
  5842 ;;  exp             1    3[BANK0 ] unsigned char 
  5843 ;;  sign            1    4[BANK0 ] unsigned char 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  3    0[BANK0 ] float 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5855 ;;      Params:         0       5       0       0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0
  5857 ;;      Temps:          0       3       0       0       0       0       0       0
  5858 ;;      Totals:         0       8       0       0       0       0       0       0
  5859 ;;Total ram usage:        8 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    4
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		___awtoft
  5866 ;;		___ftadd
  5867 ;;		___ftdiv
  5868 ;;		___ftmul
  5869 ;;		___lwtoft
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           
  5874                           ;psect for function ___ftpack
  5875  078E                     ___ftpack:	
  5876                           
  5877                           ;incstack = 0
  5878                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5879  078E  0020               	movlb	0	; select bank0
  5880  078F  0823               	movf	___ftpack@exp,w
  5881  0790  1903               	btfsc	3,2
  5882  0791  2F97               	goto	l2713
  5883  0792  0822               	movf	___ftpack@arg+2,w
  5884  0793  0421               	iorwf	___ftpack@arg+1,w
  5885  0794  0420               	iorwf	___ftpack@arg,w
  5886  0795  1D03               	skipz
  5887  0796  2FA8               	goto	l2719
  5888  0797                     l2713:	
  5889  0797  3000               	movlw	0
  5890  0798  00A0               	movwf	?___ftpack
  5891  0799  3000               	movlw	0
  5892  079A  00A1               	movwf	?___ftpack+1
  5893  079B  3000               	movlw	0
  5894  079C  00A2               	movwf	?___ftpack+2
  5895  079D  0008               	return
  5896  079E                     l2717:	
  5897  079E  3001               	movlw	1
  5898  079F  00A5               	movwf	??___ftpack
  5899  07A0  0825               	movf	??___ftpack,w
  5900  07A1  07A3               	addwf	___ftpack@exp,f
  5901  07A2  3001               	movlw	1
  5902  07A3                     u2565:	
  5903  07A3  36A2               	lsrf	___ftpack@arg+2,f
  5904  07A4  0CA1               	rrf	___ftpack@arg+1,f
  5905  07A5  0CA0               	rrf	___ftpack@arg,f
  5906  07A6  0B89               	decfsz	9,f
  5907  07A7  2FA3               	goto	u2565
  5908  07A8                     l2719:	
  5909  07A8  30FE               	movlw	254
  5910  07A9  0522               	andwf	___ftpack@arg+2,w
  5911  07AA  1903               	btfsc	3,2
  5912  07AB  2FC1               	goto	l874
  5913  07AC  2F9E               	goto	l2717
  5914  07AD                     l2721:	
  5915  07AD  3001               	movlw	1
  5916  07AE  00A5               	movwf	??___ftpack
  5917  07AF  0825               	movf	??___ftpack,w
  5918  07B0  07A3               	addwf	___ftpack@exp,f
  5919  07B1  3001               	movlw	1
  5920  07B2  07A0               	addwf	___ftpack@arg,f
  5921  07B3  3000               	movlw	0
  5922  07B4  1803               	skipnc
  5923  07B5  3001               	movlw	1
  5924  07B6  07A1               	addwf	___ftpack@arg+1,f
  5925  07B7  3000               	movlw	0
  5926  07B8  1803               	skipnc
  5927  07B9  3001               	movlw	1
  5928  07BA  07A2               	addwf	___ftpack@arg+2,f
  5929  07BB  3001               	movlw	1
  5930  07BC                     u2585:	
  5931  07BC  36A2               	lsrf	___ftpack@arg+2,f
  5932  07BD  0CA1               	rrf	___ftpack@arg+1,f
  5933  07BE  0CA0               	rrf	___ftpack@arg,f
  5934  07BF  0B89               	decfsz	9,f
  5935  07C0  2FBC               	goto	u2585
  5936  07C1                     l874:	
  5937  07C1  30FF               	movlw	255
  5938  07C2  0522               	andwf	___ftpack@arg+2,w
  5939  07C3  1903               	btfsc	3,2
  5940  07C4  2FCE               	goto	l2729
  5941  07C5  2FAD               	goto	l2721
  5942  07C6                     l2727:	
  5943  07C6  3001               	movlw	1
  5944  07C7  02A3               	subwf	___ftpack@exp,f
  5945  07C8  3001               	movlw	1
  5946  07C9                     u2605:	
  5947  07C9  35A0               	lslf	___ftpack@arg,f
  5948  07CA  0DA1               	rlf	___ftpack@arg+1,f
  5949  07CB  0DA2               	rlf	___ftpack@arg+2,f
  5950  07CC  0B89               	decfsz	9,f
  5951  07CD  2FC9               	goto	u2605
  5952  07CE                     l2729:	
  5953  07CE  1BA1               	btfsc	___ftpack@arg+1,7
  5954  07CF  2FD4               	goto	l881
  5955  07D0  3002               	movlw	2
  5956  07D1  0223               	subwf	___ftpack@exp,w
  5957  07D2  1803               	skipnc
  5958  07D3  2FC6               	goto	l2727
  5959  07D4                     l881:	
  5960  07D4  1823               	btfsc	___ftpack@exp,0
  5961  07D5  2FDC               	goto	l882
  5962  07D6  30FF               	movlw	255
  5963  07D7  05A0               	andwf	___ftpack@arg,f
  5964  07D8  307F               	movlw	127
  5965  07D9  05A1               	andwf	___ftpack@arg+1,f
  5966  07DA  30FF               	movlw	255
  5967  07DB  05A2               	andwf	___ftpack@arg+2,f
  5968  07DC                     l882:	
  5969  07DC  1003               	clrc
  5970  07DD  0CA3               	rrf	___ftpack@exp,f
  5971  07DE  0823               	movf	___ftpack@exp,w
  5972  07DF  00A5               	movwf	??___ftpack
  5973  07E0  01A6               	clrf	??___ftpack+1
  5974  07E1  01A7               	clrf	??___ftpack+2
  5975  07E2  3010               	movlw	16
  5976  07E3                     u2645:	
  5977  07E3  35A5               	lslf	??___ftpack,f
  5978  07E4  0DA6               	rlf	??___ftpack+1,f
  5979  07E5  0DA7               	rlf	??___ftpack+2,f
  5980  07E6  0B89               	decfsz	9,f
  5981  07E7  2FE3               	goto	u2645
  5982  07E8  0825               	movf	??___ftpack,w
  5983  07E9  04A0               	iorwf	___ftpack@arg,f
  5984  07EA  0826               	movf	??___ftpack+1,w
  5985  07EB  04A1               	iorwf	___ftpack@arg+1,f
  5986  07EC  0827               	movf	??___ftpack+2,w
  5987  07ED  04A2               	iorwf	___ftpack@arg+2,f
  5988  07EE  0824               	movf	___ftpack@sign,w
  5989  07EF  1903               	btfsc	3,2
  5990  07F0  0008               	return
  5991  07F1  17A2               	bsf	___ftpack@arg+2,7
  5992  07F2  0008               	return
  5993  07F3                     __end_of___ftpack:	
  5994                           
  5995                           	psect	text16
  5996  0E48                     __ptext16:	
  5997 ;; *************** function ___fttol *****************
  5998 ;; Defined at:
  5999 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  f1              3    0[BANK0 ] float 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  lval            4    9[BANK0 ] unsigned long 
  6004 ;;  exp1            1   13[BANK0 ] unsigned char 
  6005 ;;  sign1           1    8[BANK0 ] unsigned char 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  4    0[BANK0 ] long 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6015 ;;      Params:         0       4       0       0       0       0       0       0
  6016 ;;      Locals:         0       6       0       0       0       0       0       0
  6017 ;;      Temps:          0       4       0       0       0       0       0       0
  6018 ;;      Totals:         0      14       0       0       0       0       0       0
  6019 ;;Total ram usage:       14 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    4
  6022 ;; This function calls:
  6023 ;;		Nothing
  6024 ;; This function is called by:
  6025 ;;		_main
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function ___fttol
  6031  0E48                     ___fttol:	
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6035  0E48  0020               	movlb	0	; select bank0
  6036  0E49  0820               	movf	___fttol@f1,w
  6037  0E4A  00A4               	movwf	??___fttol
  6038  0E4B  0821               	movf	___fttol@f1+1,w
  6039  0E4C  00A5               	movwf	??___fttol+1
  6040  0E4D  0822               	movf	___fttol@f1+2,w
  6041  0E4E  00A6               	movwf	??___fttol+2
  6042  0E4F  1003               	clrc
  6043  0E50  0D25               	rlf	??___fttol+1,w
  6044  0E51  0D26               	rlf	??___fttol+2,w
  6045  0E52  00A7               	movwf	??___fttol+3
  6046  0E53  0827               	movf	??___fttol+3,w
  6047  0E54  00AD               	movwf	___fttol@exp1
  6048  0E55  082D               	movf	___fttol@exp1,w
  6049  0E56  1D03               	btfss	3,2
  6050  0E57  2E61               	goto	l3741
  6051  0E58  3000               	movlw	0
  6052  0E59  00A3               	movwf	?___fttol+3
  6053  0E5A  3000               	movlw	0
  6054  0E5B  00A2               	movwf	?___fttol+2
  6055  0E5C  3000               	movlw	0
  6056  0E5D  00A1               	movwf	?___fttol+1
  6057  0E5E  3000               	movlw	0
  6058  0E5F  00A0               	movwf	?___fttol
  6059  0E60  0008               	return
  6060  0E61                     l3741:	
  6061  0E61  0820               	movf	___fttol@f1,w
  6062  0E62  00A4               	movwf	??___fttol
  6063  0E63  0821               	movf	___fttol@f1+1,w
  6064  0E64  00A5               	movwf	??___fttol+1
  6065  0E65  0822               	movf	___fttol@f1+2,w
  6066  0E66  00A6               	movwf	??___fttol+2
  6067  0E67  3017               	movlw	23
  6068  0E68                     u4185:	
  6069  0E68  36A6               	lsrf	??___fttol+2,f
  6070  0E69  0CA5               	rrf	??___fttol+1,f
  6071  0E6A  0CA4               	rrf	??___fttol,f
  6072  0E6B  0B89               	decfsz	9,f
  6073  0E6C  2E68               	goto	u4185
  6074  0E6D  0824               	movf	??___fttol,w
  6075  0E6E  00A7               	movwf	??___fttol+3
  6076  0E6F  0827               	movf	??___fttol+3,w
  6077  0E70  00A8               	movwf	___fttol@sign1
  6078  0E71  17A1               	bsf	___fttol@f1+1,7
  6079  0E72  30FF               	movlw	255
  6080  0E73  05A0               	andwf	___fttol@f1,f
  6081  0E74  30FF               	movlw	255
  6082  0E75  05A1               	andwf	___fttol@f1+1,f
  6083  0E76  3000               	movlw	0
  6084  0E77  05A2               	andwf	___fttol@f1+2,f
  6085  0E78  0820               	movf	___fttol@f1,w
  6086  0E79  00A9               	movwf	___fttol@lval
  6087  0E7A  0821               	movf	___fttol@f1+1,w
  6088  0E7B  00AA               	movwf	___fttol@lval+1
  6089  0E7C  0822               	movf	___fttol@f1+2,w
  6090  0E7D  00AB               	movwf	___fttol@lval+2
  6091  0E7E  01AC               	clrf	___fttol@lval+3
  6092  0E7F  308E               	movlw	142
  6093  0E80  02AD               	subwf	___fttol@exp1,f
  6094  0E81  1FAD               	btfss	___fttol@exp1,7
  6095  0E82  2E9F               	goto	l3761
  6096  0E83  082D               	movf	___fttol@exp1,w
  6097  0E84  3A80               	xorlw	128
  6098  0E85  3E8F               	addlw	143
  6099  0E86  1803               	skipnc
  6100  0E87  2E91               	goto	l3759
  6101  0E88  3000               	movlw	0
  6102  0E89  00A3               	movwf	?___fttol+3
  6103  0E8A  3000               	movlw	0
  6104  0E8B  00A2               	movwf	?___fttol+2
  6105  0E8C  3000               	movlw	0
  6106  0E8D  00A1               	movwf	?___fttol+1
  6107  0E8E  3000               	movlw	0
  6108  0E8F  00A0               	movwf	?___fttol
  6109  0E90  0008               	return
  6110  0E91                     l3759:	
  6111  0E91  3001               	movlw	1
  6112  0E92                     u4215:	
  6113  0E92  36AC               	lsrf	___fttol@lval+3,f
  6114  0E93  0CAB               	rrf	___fttol@lval+2,f
  6115  0E94  0CAA               	rrf	___fttol@lval+1,f
  6116  0E95  0CA9               	rrf	___fttol@lval,f
  6117  0E96  0B89               	decfsz	9,f
  6118  0E97  2E92               	goto	u4215
  6119  0E98  3001               	movlw	1
  6120  0E99  00A4               	movwf	??___fttol
  6121  0E9A  0824               	movf	??___fttol,w
  6122  0E9B  07AD               	addwf	___fttol@exp1,f
  6123  0E9C  1903               	btfsc	3,2
  6124  0E9D  2EB8               	goto	l3769
  6125  0E9E  2E91               	goto	l3759
  6126  0E9F                     l3761:	
  6127  0E9F  3018               	movlw	24
  6128  0EA0  022D               	subwf	___fttol@exp1,w
  6129  0EA1  1C03               	skipc
  6130  0EA2  2EB5               	goto	l965
  6131  0EA3  3000               	movlw	0
  6132  0EA4  00A3               	movwf	?___fttol+3
  6133  0EA5  3000               	movlw	0
  6134  0EA6  00A2               	movwf	?___fttol+2
  6135  0EA7  3000               	movlw	0
  6136  0EA8  00A1               	movwf	?___fttol+1
  6137  0EA9  3000               	movlw	0
  6138  0EAA  00A0               	movwf	?___fttol
  6139  0EAB  0008               	return
  6140  0EAC                     l3767:	
  6141  0EAC  3001               	movlw	1
  6142  0EAD                     u4245:	
  6143  0EAD  35A9               	lslf	___fttol@lval,f
  6144  0EAE  0DAA               	rlf	___fttol@lval+1,f
  6145  0EAF  0DAB               	rlf	___fttol@lval+2,f
  6146  0EB0  0DAC               	rlf	___fttol@lval+3,f
  6147  0EB1  0B89               	decfsz	9,f
  6148  0EB2  2EAD               	goto	u4245
  6149  0EB3  3001               	movlw	1
  6150  0EB4  02AD               	subwf	___fttol@exp1,f
  6151  0EB5                     l965:	
  6152  0EB5  082D               	movf	___fttol@exp1,w
  6153  0EB6  1D03               	btfss	3,2
  6154  0EB7  2EAC               	goto	l3767
  6155  0EB8                     l3769:	
  6156  0EB8  0828               	movf	___fttol@sign1,w
  6157  0EB9  1903               	btfsc	3,2
  6158  0EBA  2EC6               	goto	l3773
  6159  0EBB  09A9               	comf	___fttol@lval,f
  6160  0EBC  09AA               	comf	___fttol@lval+1,f
  6161  0EBD  09AB               	comf	___fttol@lval+2,f
  6162  0EBE  09AC               	comf	___fttol@lval+3,f
  6163  0EBF  0AA9               	incf	___fttol@lval,f
  6164  0EC0  1903               	skipnz
  6165  0EC1  0AAA               	incf	___fttol@lval+1,f
  6166  0EC2  1903               	skipnz
  6167  0EC3  0AAB               	incf	___fttol@lval+2,f
  6168  0EC4  1903               	skipnz
  6169  0EC5  0AAC               	incf	___fttol@lval+3,f
  6170  0EC6                     l3773:	
  6171  0EC6  082C               	movf	___fttol@lval+3,w
  6172  0EC7  00A3               	movwf	?___fttol+3
  6173  0EC8  082B               	movf	___fttol@lval+2,w
  6174  0EC9  00A2               	movwf	?___fttol+2
  6175  0ECA  082A               	movf	___fttol@lval+1,w
  6176  0ECB  00A1               	movwf	?___fttol+1
  6177  0ECC  0829               	movf	___fttol@lval,w
  6178  0ECD  00A0               	movwf	?___fttol
  6179  0ECE  0008               	return
  6180  0ECF                     __end_of___fttol:	
  6181                           
  6182                           	psect	text17
  6183  07FD                     __ptext17:	
  6184 ;; *************** function _TMR1_enable *****************
  6185 ;; Defined at:
  6186 ;;		line 69 in file "mcc_generated_files/tmr1.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;		None
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;		None
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  1    wreg      void 
  6193 ;; Registers used:
  6194 ;;		None
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6200 ;;      Params:         0       0       0       0       0       0       0       0
  6201 ;;      Locals:         0       0       0       0       0       0       0       0
  6202 ;;      Temps:          0       0       0       0       0       0       0       0
  6203 ;;      Totals:         0       0       0       0       0       0       0       0
  6204 ;;Total ram usage:        0 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    4
  6207 ;; This function calls:
  6208 ;;		Nothing
  6209 ;; This function is called by:
  6210 ;;		_main
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           
  6215                           ;psect for function _TMR1_enable
  6216  07FD                     _TMR1_enable:	
  6217                           
  6218                           ;tmr1.c: 71: PIE1bits.TMR1IE = 1;
  6219                           
  6220                           ;incstack = 0
  6221                           ; Regs used in _TMR1_enable: []
  6222  07FD  0021               	movlb	1	; select bank1
  6223  07FE  1411               	bsf	17,0	;volatile
  6224  07FF  0008               	return
  6225  0800                     __end_of_TMR1_enable:	
  6226                           
  6227                           	psect	text18
  6228  0846                     __ptext18:	
  6229 ;; *************** function _TMR1_disable *****************
  6230 ;; Defined at:
  6231 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;		None
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		None
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6245 ;;      Params:         0       0       0       0       0       0       0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0       0
  6248 ;;      Totals:         0       0       0       0       0       0       0       0
  6249 ;;Total ram usage:        0 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    4
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_main
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _TMR1_disable
  6261  0846                     _TMR1_disable:	
  6262                           
  6263                           ;tmr1.c: 66: PIE1bits.TMR1IE = 0;
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _TMR1_disable: []
  6267  0846  0021               	movlb	1	; select bank1
  6268  0847  1011               	bcf	17,0	;volatile
  6269  0848  0008               	return
  6270  0849                     __end_of_TMR1_disable:	
  6271                           
  6272                           	psect	text19
  6273  08A2                     __ptext19:	
  6274 ;; *************** function _StartSignal *****************
  6275 ;; Defined at:
  6276 ;;		line 347 in file "main.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;		None
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;		None
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6290 ;;      Params:         0       0       0       0       0       0       0       0
  6291 ;;      Locals:         0       0       0       0       0       0       0       0
  6292 ;;      Temps:          0       1       0       0       0       0       0       0
  6293 ;;      Totals:         0       1       0       0       0       0       0       0
  6294 ;;Total ram usage:        1 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    4
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_main
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _StartSignal
  6306  08A2                     _StartSignal:	
  6307                           
  6308                           ;main.c: 349: TRISDbits.TRISD2 = 0;
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _StartSignal: [wreg]
  6312  08A2  0021               	movlb	1	; select bank1
  6313  08A3  110F               	bcf	15,2	;volatile
  6314                           
  6315                           ;main.c: 350: PORTDbits.RD2 = 0;
  6316  08A4  0020               	movlb	0	; select bank0
  6317  08A5  110F               	bcf	15,2	;volatile
  6318                           
  6319                           ;main.c: 351: _delay((unsigned long)((18)*(18432000/4000.0)));
  6320  08A6  306C               	movlw	108
  6321  08A7  0020               	movlb	0	; select bank0
  6322  08A8  00A0               	movwf	??_StartSignal
  6323  08A9  30B7               	movlw	183
  6324  08AA                     u6307:	
  6325  08AA  0B89               	decfsz	9,f
  6326  08AB  28AA               	goto	u6307
  6327  08AC  0BA0               	decfsz	??_StartSignal,f
  6328  08AD  28AA               	goto	u6307
  6329                           
  6330                           ;main.c: 352: PORTDbits.RD2 = 1;
  6331  08AE  0020               	movlb	0	; select bank0
  6332  08AF  150F               	bsf	15,2	;volatile
  6333                           
  6334                           ;main.c: 353: _delay((unsigned long)((30)*(18432000/4000000.0)));
  6335  08B0  302E               	movlw	46
  6336  08B1                     u6317:	
  6337  08B1  0B89               	decfsz	9,f
  6338  08B2  28B1               	goto	u6317
  6339                           
  6340                           ;main.c: 354: TRISDbits.TRISD2 = 1;
  6341  08B3  0021               	movlb	1	; select bank1
  6342  08B4  150F               	bsf	15,2	;volatile
  6343  08B5  0008               	return
  6344  08B6                     __end_of_StartSignal:	
  6345                           
  6346                           	psect	text20
  6347  087E                     __ptext20:	
  6348 ;; *************** function _SYSTEM_Initialize *****************
  6349 ;; Defined at:
  6350 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;		None
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;		None
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      void 
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, pclath, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6364 ;;      Params:         0       0       0       0       0       0       0       0
  6365 ;;      Locals:         0       0       0       0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0
  6367 ;;      Totals:         0       0       0       0       0       0       0       0
  6368 ;;Total ram usage:        0 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    6
  6371 ;; This function calls:
  6372 ;;		_ADC_Initialize
  6373 ;;		_EUSART_Initialize
  6374 ;;		_OSCILLATOR_Initialize
  6375 ;;		_PIN_MANAGER_Initialize
  6376 ;;		_TMR1_Initialize
  6377 ;;		_WDT_Initialize
  6378 ;; This function is called by:
  6379 ;;		_main
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function _SYSTEM_Initialize
  6385  087E                     _SYSTEM_Initialize:	
  6386                           
  6387                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6391  087E  3189  21E0  3188   	fcall	_PIN_MANAGER_Initialize
  6392                           
  6393                           ;mcc.c: 74: OSCILLATOR_Initialize();
  6394  0881  3188  2052  3188   	fcall	_OSCILLATOR_Initialize
  6395                           
  6396                           ;mcc.c: 75: WDT_Initialize();
  6397  0884  3188  2049  3188   	fcall	_WDT_Initialize
  6398                           
  6399                           ;mcc.c: 76: TMR1_Initialize();
  6400  0887  3188  20F9  3188   	fcall	_TMR1_Initialize
  6401                           
  6402                           ;mcc.c: 77: ADC_Initialize();
  6403  088A  3188  2063  3188   	fcall	_ADC_Initialize
  6404                           
  6405                           ;mcc.c: 78: EUSART_Initialize();
  6406  088D  3189  2183         	fcall	_EUSART_Initialize
  6407  088F  0008               	return
  6408  0890                     __end_of_SYSTEM_Initialize:	
  6409                           
  6410                           	psect	text21
  6411  0849                     __ptext21:	
  6412 ;; *************** function _WDT_Initialize *****************
  6413 ;; Defined at:
  6414 ;;		line 89 in file "mcc_generated_files/mcc.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6428 ;;      Params:         0       0       0       0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0
  6431 ;;      Totals:         0       0       0       0       0       0       0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    4
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_SYSTEM_Initialize
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           
  6443                           ;psect for function _WDT_Initialize
  6444  0849                     _WDT_Initialize:	
  6445                           
  6446                           ;mcc.c: 92: WDTCON = 0x16;
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _WDT_Initialize: [wreg]
  6450  0849  3016               	movlw	22
  6451  084A  0021               	movlb	1	; select bank1
  6452  084B  0097               	movwf	23	;volatile
  6453  084C  0008               	return
  6454  084D                     __end_of_WDT_Initialize:	
  6455                           
  6456                           	psect	text22
  6457  08F9                     __ptext22:	
  6458 ;; *************** function _TMR1_Initialize *****************
  6459 ;; Defined at:
  6460 ;;		line 74 in file "mcc_generated_files/tmr1.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6474 ;;      Params:         0       0       0       0       0       0       0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0
  6477 ;;      Totals:         0       0       0       0       0       0       0       0
  6478 ;;Total ram usage:        0 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    5
  6481 ;; This function calls:
  6482 ;;		_TMR1_SetInterruptHandler
  6483 ;;		_TMR1_StartTimer
  6484 ;; This function is called by:
  6485 ;;		_SYSTEM_Initialize
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _TMR1_Initialize
  6491  08F9                     _TMR1_Initialize:	
  6492                           
  6493                           ;tmr1.c: 79: T1CON = 0x00;
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6497  08F9  0020               	movlb	0	; select bank0
  6498  08FA  0198               	clrf	24	;volatile
  6499                           
  6500                           ;tmr1.c: 82: T1GCON = 0x00;
  6501  08FB  0199               	clrf	25	;volatile
  6502                           
  6503                           ;tmr1.c: 85: TMR1H = 0xEE;
  6504  08FC  30EE               	movlw	238
  6505  08FD  0097               	movwf	23	;volatile
  6506                           
  6507                           ;tmr1.c: 88: TMR1L = 0x00;
  6508  08FE  0196               	clrf	22	;volatile
  6509                           
  6510                           ;tmr1.c: 91: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6511  08FF  0817               	movf	23,w	;volatile
  6512  0900  00EF               	movwf	_timer1ReloadVal+1	;volatile
  6513  0901  0816               	movf	22,w	;volatile
  6514  0902  00EE               	movwf	_timer1ReloadVal	;volatile
  6515                           
  6516                           ;tmr1.c: 94: PIR1bits.TMR1IF = 0;
  6517  0903  1011               	bcf	17,0	;volatile
  6518                           
  6519                           ;tmr1.c: 97: PIE1bits.TMR1IE = 1;
  6520  0904  0021               	movlb	1	; select bank1
  6521  0905  1411               	bsf	17,0	;volatile
  6522                           
  6523                           ;tmr1.c: 100: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6524  0906  303F               	movlw	low _TMR1_DefaultInterruptHandler
  6525  0907  0020               	movlb	0	; select bank0
  6526  0908  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6527  0909  3008               	movlw	high _TMR1_DefaultInterruptHandler
  6528  090A  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6529  090B  3188  206C  3188   	fcall	_TMR1_SetInterruptHandler
  6530                           
  6531                           ;tmr1.c: 103: TMR1_StartTimer();
  6532  090E  3188  2043         	fcall	_TMR1_StartTimer
  6533  0910  0008               	return
  6534  0911                     __end_of_TMR1_Initialize:	
  6535                           
  6536                           	psect	text23
  6537  0843                     __ptext23:	
  6538 ;; *************** function _TMR1_StartTimer *****************
  6539 ;; Defined at:
  6540 ;;		line 106 in file "mcc_generated_files/tmr1.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;		None
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;		None
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      void 
  6547 ;; Registers used:
  6548 ;;		None
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6554 ;;      Params:         0       0       0       0       0       0       0       0
  6555 ;;      Locals:         0       0       0       0       0       0       0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0
  6557 ;;      Totals:         0       0       0       0       0       0       0       0
  6558 ;;Total ram usage:        0 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:    4
  6561 ;; This function calls:
  6562 ;;		Nothing
  6563 ;; This function is called by:
  6564 ;;		_TMR1_Initialize
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _TMR1_StartTimer
  6570  0843                     _TMR1_StartTimer:	
  6571                           
  6572                           ;tmr1.c: 109: T1CONbits.TMR1ON = 1;
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _TMR1_StartTimer: []
  6576  0843  0020               	movlb	0	; select bank0
  6577  0844  1418               	bsf	24,0	;volatile
  6578  0845  0008               	return
  6579  0846                     __end_of_TMR1_StartTimer:	
  6580                           
  6581                           	psect	text24
  6582  086C                     __ptext24:	
  6583 ;; *************** function _TMR1_SetInterruptHandler *****************
  6584 ;; Defined at:
  6585 ;;		line 227 in file "mcc_generated_files/tmr1.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6588 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6600 ;;      Params:         0       2       0       0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0
  6603 ;;      Totals:         0       2       0       0       0       0       0       0
  6604 ;;Total ram usage:        2 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    4
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_TMR1_Initialize
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           
  6615                           ;psect for function _TMR1_SetInterruptHandler
  6616  086C                     _TMR1_SetInterruptHandler:	
  6617                           
  6618                           ;tmr1.c: 228: TMR1_InterruptHandler = InterruptHandler;
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6622  086C  0020               	movlb	0	; select bank0
  6623  086D  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6624  086E  0023               	movlb	3	; select bank3
  6625  086F  00EC               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
  6626  0870  0020               	movlb	0	; select bank0
  6627  0871  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6628  0872  0023               	movlb	3	; select bank3
  6629  0873  00EB               	movwf	_TMR1_InterruptHandler^(0+384)
  6630  0874  0008               	return
  6631  0875                     __end_of_TMR1_SetInterruptHandler:	
  6632                           
  6633                           	psect	text25
  6634  09E0                     __ptext25:	
  6635 ;; *************** function _PIN_MANAGER_Initialize *****************
  6636 ;; Defined at:
  6637 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6651 ;;      Params:         0       0       0       0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0
  6654 ;;      Totals:         0       0       0       0       0       0       0       0
  6655 ;;Total ram usage:        0 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    4
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_SYSTEM_Initialize
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _PIN_MANAGER_Initialize
  6667  09E0                     _PIN_MANAGER_Initialize:	
  6668                           
  6669                           ;pin_manager.c: 57: LATE = 0x00;
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6673  09E0  0022               	movlb	2	; select bank2
  6674  09E1  0190               	clrf	16	;volatile
  6675                           
  6676                           ;pin_manager.c: 58: LATD = 0x00;
  6677  09E2  018F               	clrf	15	;volatile
  6678                           
  6679                           ;pin_manager.c: 59: LATA = 0x00;
  6680  09E3  018C               	clrf	12	;volatile
  6681                           
  6682                           ;pin_manager.c: 60: LATB = 0x00;
  6683  09E4  018D               	clrf	13	;volatile
  6684                           
  6685                           ;pin_manager.c: 61: LATC = 0x00;
  6686  09E5  018E               	clrf	14	;volatile
  6687                           
  6688                           ;pin_manager.c: 66: TRISE = 0x0F;
  6689  09E6  300F               	movlw	15
  6690  09E7  0021               	movlb	1	; select bank1
  6691  09E8  0090               	movwf	16	;volatile
  6692                           
  6693                           ;pin_manager.c: 67: TRISA = 0xFF;
  6694  09E9  30FF               	movlw	255
  6695  09EA  008C               	movwf	12	;volatile
  6696                           
  6697                           ;pin_manager.c: 68: TRISB = 0x00;
  6698  09EB  018D               	clrf	13	;volatile
  6699                           
  6700                           ;pin_manager.c: 69: TRISC = 0xBF;
  6701  09EC  30BF               	movlw	191
  6702  09ED  008E               	movwf	14	;volatile
  6703                           
  6704                           ;pin_manager.c: 70: TRISD = 0xF4;
  6705  09EE  30F4               	movlw	244
  6706  09EF  008F               	movwf	15	;volatile
  6707                           
  6708                           ;pin_manager.c: 75: ANSELB = 0x0F;
  6709  09F0  300F               	movlw	15
  6710  09F1  0023               	movlb	3	; select bank3
  6711  09F2  008D               	movwf	13	;volatile
  6712                           
  6713                           ;pin_manager.c: 76: ANSELD = 0xF4;
  6714  09F3  30F4               	movlw	244
  6715  09F4  008F               	movwf	15	;volatile
  6716                           
  6717                           ;pin_manager.c: 77: ANSELE = 0x07;
  6718  09F5  3007               	movlw	7
  6719  09F6  0090               	movwf	16	;volatile
  6720                           
  6721                           ;pin_manager.c: 78: ANSELA = 0x3F;
  6722  09F7  303F               	movlw	63
  6723  09F8  008C               	movwf	12	;volatile
  6724                           
  6725                           ;pin_manager.c: 83: WPUE = 0x08;
  6726  09F9  3008               	movlw	8
  6727  09FA  0024               	movlb	4	; select bank4
  6728  09FB  0090               	movwf	16	;volatile
  6729                           
  6730                           ;pin_manager.c: 84: WPUB = 0xFF;
  6731  09FC  30FF               	movlw	255
  6732  09FD  008D               	movwf	13	;volatile
  6733                           
  6734                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
  6735  09FE  0021               	movlb	1	; select bank1
  6736  09FF  1395               	bcf	21,7	;volatile
  6737                           
  6738                           ;pin_manager.c: 91: APFCON = 0x00;
  6739  0A00  0022               	movlb	2	; select bank2
  6740  0A01  019D               	clrf	29	;volatile
  6741  0A02  0008               	return
  6742  0A03                     __end_of_PIN_MANAGER_Initialize:	
  6743                           
  6744                           	psect	text26
  6745  0852                     __ptext26:	
  6746 ;; *************** function _OSCILLATOR_Initialize *****************
  6747 ;; Defined at:
  6748 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;		None
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;		None
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  1    wreg      void 
  6755 ;; Registers used:
  6756 ;;		wreg, status,2
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6762 ;;      Params:         0       0       0       0       0       0       0       0
  6763 ;;      Locals:         0       0       0       0       0       0       0       0
  6764 ;;      Temps:          0       0       0       0       0       0       0       0
  6765 ;;      Totals:         0       0       0       0       0       0       0       0
  6766 ;;Total ram usage:        0 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    4
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_SYSTEM_Initialize
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function _OSCILLATOR_Initialize
  6778  0852                     _OSCILLATOR_Initialize:	
  6779                           
  6780                           ;mcc.c: 84: OSCCON = 0x78;
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6784  0852  3078               	movlw	120
  6785  0853  0021               	movlb	1	; select bank1
  6786  0854  0099               	movwf	25	;volatile
  6787                           
  6788                           ;mcc.c: 86: OSCTUNE = 0x00;
  6789  0855  0198               	clrf	24	;volatile
  6790  0856  0008               	return
  6791  0857                     __end_of_OSCILLATOR_Initialize:	
  6792                           
  6793                           	psect	text27
  6794  0983                     __ptext27:	
  6795 ;; *************** function _EUSART_Initialize *****************
  6796 ;; Defined at:
  6797 ;;		line 76 in file "mcc_generated_files/eusart.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6811 ;;      Params:         0       0       0       0       0       0       0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0
  6813 ;;      Temps:          0       1       0       0       0       0       0       0
  6814 ;;      Totals:         0       1       0       0       0       0       0       0
  6815 ;;Total ram usage:        1 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    4
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_SYSTEM_Initialize
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           
  6826                           ;psect for function _EUSART_Initialize
  6827  0983                     _EUSART_Initialize:	
  6828                           
  6829                           ;eusart.c: 79: PIE1bits.RCIE = 0;
  6830                           
  6831                           ;incstack = 0
  6832                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6833  0983  0021               	movlb	1	; select bank1
  6834  0984  1291               	bcf	17,5	;volatile
  6835                           
  6836                           ;eusart.c: 80: PIE1bits.TXIE = 0;
  6837  0985  1211               	bcf	17,4	;volatile
  6838                           
  6839                           ;eusart.c: 85: BAUDCON = 0x08;
  6840  0986  3008               	movlw	8
  6841  0987  0023               	movlb	3	; select bank3
  6842  0988  009F               	movwf	31	;volatile
  6843                           
  6844                           ;eusart.c: 88: RCSTA = 0x90;
  6845  0989  3090               	movlw	144
  6846  098A  009D               	movwf	29	;volatile
  6847                           
  6848                           ;eusart.c: 91: TXSTA = 0x24;
  6849  098B  3024               	movlw	36
  6850  098C  009E               	movwf	30	;volatile
  6851                           
  6852                           ;eusart.c: 94: SPBRGL = 0xDF;
  6853  098D  30DF               	movlw	223
  6854  098E  009B               	movwf	27	;volatile
  6855                           
  6856                           ;eusart.c: 97: SPBRGH = 0x01;
  6857  098F  3001               	movlw	1
  6858  0990  009C               	movwf	28	;volatile
  6859                           
  6860                           ;eusart.c: 101: eusartTxHead = 0;
  6861  0991  01FD               	clrf	_eusartTxHead	;volatile
  6862                           
  6863                           ;eusart.c: 102: eusartTxTail = 0;
  6864  0992  01FC               	clrf	_eusartTxTail	;volatile
  6865                           
  6866                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  6867  0993  3008               	movlw	8
  6868  0994  0020               	movlb	0	; select bank0
  6869  0995  00A0               	movwf	??_EUSART_Initialize
  6870  0996  0820               	movf	??_EUSART_Initialize,w
  6871  0997  0022               	movlb	2	; select bank2
  6872  0998  00ED               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  6873                           
  6874                           ;eusart.c: 105: eusartRxHead = 0;
  6875  0999  0020               	movlb	0	; select bank0
  6876  099A  01ED               	clrf	_eusartRxHead	;volatile
  6877                           
  6878                           ;eusart.c: 106: eusartRxTail = 0;
  6879  099B  01EC               	clrf	_eusartRxTail	;volatile
  6880                           
  6881                           ;eusart.c: 107: eusartRxCount = 0;
  6882  099C  01EB               	clrf	_eusartRxCount	;volatile
  6883                           
  6884                           ;eusart.c: 110: PIE1bits.RCIE = 1;
  6885  099D  0021               	movlb	1	; select bank1
  6886  099E  1691               	bsf	17,5	;volatile
  6887  099F  0008               	return
  6888  09A0                     __end_of_EUSART_Initialize:	
  6889                           
  6890                           	psect	text28
  6891  0863                     __ptext28:	
  6892 ;; *************** function _ADC_Initialize *****************
  6893 ;; Defined at:
  6894 ;;		line 64 in file "mcc_generated_files/adc.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6908 ;;      Params:         0       0       0       0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    4
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_SYSTEM_Initialize
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _ADC_Initialize
  6924  0863                     _ADC_Initialize:	
  6925                           
  6926                           ;adc.c: 69: ADCON0 = 0x01;
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  6930  0863  3001               	movlw	1
  6931  0864  0021               	movlb	1	; select bank1
  6932  0865  009D               	movwf	29	;volatile
  6933                           
  6934                           ;adc.c: 72: ADCON1 = 0x60;
  6935  0866  3060               	movlw	96
  6936  0867  009E               	movwf	30	;volatile
  6937                           
  6938                           ;adc.c: 75: ADRESL = 0x00;
  6939  0868  019B               	clrf	27	;volatile
  6940                           
  6941                           ;adc.c: 78: ADRESH = 0x00;
  6942  0869  019C               	clrf	28	;volatile
  6943                           
  6944                           ;adc.c: 81: PIE1bits.ADIE = 1;
  6945  086A  1711               	bsf	17,6	;volatile
  6946  086B  0008               	return
  6947  086C                     __end_of_ADC_Initialize:	
  6948                           
  6949                           	psect	text29
  6950  0BAF                     __ptext29:	
  6951 ;; *************** function _LCDWriteString *****************
  6952 ;; Defined at:
  6953 ;;		line 251 in file "lcd_hd44780_pic16.c"
  6954 ;; Parameters:    Size  Location     Type
  6955 ;;  msg             2    7[BANK0 ] PTR const unsigned char 
  6956 ;;		 -> STR_12(8), STR_11(10), 
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  cc              1   10[BANK0 ] char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6968 ;;      Params:         0       2       0       0       0       0       0       0
  6969 ;;      Locals:         0       1       0       0       0       0       0       0
  6970 ;;      Temps:          0       1       0       0       0       0       0       0
  6971 ;;      Totals:         0       4       0       0       0       0       0       0
  6972 ;;Total ram usage:        4 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    5
  6975 ;; This function calls:
  6976 ;;		_LCDByte
  6977 ;; This function is called by:
  6978 ;;		_main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           
  6983                           ;psect for function _LCDWriteString
  6984  0BAF                     _LCDWriteString:	
  6985  0BAF                     l3691:	
  6986                           ;lcd_hd44780_pic16.c: 281: while(*msg!='\0')
  6987                           
  6988                           ;incstack = 0
  6989                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6990                           
  6991  0BAF  0020               	movlb	0	; select bank0
  6992  0BB0  0827               	movf	LCDWriteString@msg,w
  6993  0BB1  0084               	movwf	4
  6994  0BB2  0828               	movf	LCDWriteString@msg+1,w
  6995  0BB3  0085               	movwf	5
  6996  0BB4  0012               	moviw fsr0++
  6997  0BB5  1903               	btfsc	3,2
  6998  0BB6  0008               	return
  6999                           
  7000                           ;lcd_hd44780_pic16.c: 282: {
  7001                           ;lcd_hd44780_pic16.c: 284: if(*msg=='%')
  7002  0BB7  0020               	movlb	0	; select bank0
  7003  0BB8  0827               	movf	LCDWriteString@msg,w
  7004  0BB9  0084               	movwf	4
  7005  0BBA  0828               	movf	LCDWriteString@msg+1,w
  7006  0BBB  0085               	movwf	5
  7007  0BBC  0012               	moviw fsr0++
  7008  0BBD  3A25               	xorlw	37
  7009  0BBE  1D03               	btfss	3,2
  7010  0BBF  2BDF               	goto	l3687
  7011                           
  7012                           ;lcd_hd44780_pic16.c: 285: {
  7013                           ;lcd_hd44780_pic16.c: 286: msg++;
  7014  0BC0  3001               	movlw	1
  7015  0BC1  07A7               	addwf	LCDWriteString@msg,f
  7016  0BC2  3000               	movlw	0
  7017  0BC3  3DA8               	addwfc	LCDWriteString@msg+1,f
  7018                           
  7019                           ;lcd_hd44780_pic16.c: 287: int8_t cc=*msg-'0';
  7020  0BC4  0827               	movf	LCDWriteString@msg,w
  7021  0BC5  0084               	movwf	4
  7022  0BC6  0828               	movf	LCDWriteString@msg+1,w
  7023  0BC7  0085               	movwf	5
  7024  0BC8  0800               	movf	0,w	;code access
  7025  0BC9  3ED0               	addlw	-48
  7026  0BCA  00A9               	movwf	??_LCDWriteString
  7027  0BCB  0829               	movf	??_LCDWriteString,w
  7028  0BCC  00AA               	movwf	LCDWriteString@cc
  7029                           
  7030                           ;lcd_hd44780_pic16.c: 289: if(cc>=0 && cc<=7)
  7031  0BCD  1BAA               	btfsc	LCDWriteString@cc,7
  7032  0BCE  2BD8               	goto	l3683
  7033  0BCF  082A               	movf	LCDWriteString@cc,w
  7034  0BD0  3A80               	xorlw	128
  7035  0BD1  3E78               	addlw	-136
  7036  0BD2  1803               	skipnc
  7037  0BD3  2BD8               	goto	l3683
  7038                           
  7039                           ;lcd_hd44780_pic16.c: 290: {
  7040                           ;lcd_hd44780_pic16.c: 291: (LCDByte(cc,1));
  7041  0BD4  01A0               	clrf	LCDByte@isdata
  7042  0BD5  0AA0               	incf	LCDByte@isdata,f
  7043  0BD6  082A               	movf	LCDWriteString@cc,w
  7044  0BD7  2BE7               	goto	L5
  7045  0BD8                     l3683:	
  7046                           ;lcd_hd44780_pic16.c: 292: }
  7047                           
  7048                           
  7049                           ;lcd_hd44780_pic16.c: 293: else
  7050                           ;lcd_hd44780_pic16.c: 294: {
  7051                           ;lcd_hd44780_pic16.c: 295: (LCDByte('%',1));
  7052  0BD8  0020               	movlb	0	; select bank0
  7053  0BD9  01A0               	clrf	LCDByte@isdata
  7054  0BDA  0AA0               	incf	LCDByte@isdata,f
  7055  0BDB  3025               	movlw	37
  7056  0BDC  318B  236E  318B   	fcall	_LCDByte
  7057  0BDF                     l3687:	
  7058                           ;lcd_hd44780_pic16.c: 297: }
  7059                           ;lcd_hd44780_pic16.c: 298: }
  7060                           
  7061                           ;lcd_hd44780_pic16.c: 296: (LCDByte(*msg,1));
  7062                           
  7063                           
  7064                           ;lcd_hd44780_pic16.c: 299: else
  7065                           ;lcd_hd44780_pic16.c: 300: {
  7066                           ;lcd_hd44780_pic16.c: 301: (LCDByte(*msg,1));
  7067  0BDF  0020               	movlb	0	; select bank0
  7068  0BE0  01A0               	clrf	LCDByte@isdata
  7069  0BE1  0AA0               	incf	LCDByte@isdata,f
  7070  0BE2  0827               	movf	LCDWriteString@msg,w
  7071  0BE3  0084               	movwf	4
  7072  0BE4  0828               	movf	LCDWriteString@msg+1,w
  7073  0BE5  0085               	movwf	5
  7074  0BE6  0800               	movf	0,w	;code access
  7075  0BE7                     L5:	
  7076  0BE7  318B  236E  318B   	fcall	_LCDByte
  7077                           
  7078                           ;lcd_hd44780_pic16.c: 302: }
  7079                           ;lcd_hd44780_pic16.c: 303: msg++;
  7080  0BEA  3001               	movlw	1
  7081  0BEB  0020               	movlb	0	; select bank0
  7082  0BEC  07A7               	addwf	LCDWriteString@msg,f
  7083  0BED  3000               	movlw	0
  7084  0BEE  3DA8               	addwfc	LCDWriteString@msg+1,f
  7085  0BEF  2BAF               	goto	l3691
  7086  0BF0                     __end_of_LCDWriteString:	
  7087                           
  7088                           	psect	text30
  7089  0ECF                     __ptext30:	
  7090 ;; *************** function _LCDWriteInt *****************
  7091 ;; Defined at:
  7092 ;;		line 307 in file "lcd_hd44780_pic16.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;  val             2    9[BANK0 ] int 
  7095 ;;  field_length    1   11[BANK0 ] char 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  str             5   14[BANK0 ] unsigned char [5]
  7098 ;;  i               2   21[BANK0 ] int 
  7099 ;;  j               2   19[BANK0 ] int 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7109 ;;      Params:         0       3       0       0       0       0       0       0
  7110 ;;      Locals:         0       9       0       0       0       0       0       0
  7111 ;;      Temps:          0       2       0       0       0       0       0       0
  7112 ;;      Totals:         0      14       0       0       0       0       0       0
  7113 ;;Total ram usage:       14 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    5
  7116 ;; This function calls:
  7117 ;;		_LCDByte
  7118 ;;		___awdiv
  7119 ;;		___awmod
  7120 ;; This function is called by:
  7121 ;;		_main
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _LCDWriteInt
  7127  0ECF                     _LCDWriteInt:	
  7128                           
  7129                           ;lcd_hd44780_pic16.c: 320: char str[5]={0,0,0,0,0};
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7133  0ECF  30DE               	movlw	low LCDWriteInt@F3726
  7134  0ED0  0086               	movwf	6
  7135  0ED1  3001               	movlw	high LCDWriteInt@F3726
  7136  0ED2  0087               	movwf	7
  7137  0ED3  302E               	movlw	low LCDWriteInt@str
  7138  0ED4  0084               	movwf	4
  7139  0ED5  3000               	movlw	high LCDWriteInt@str
  7140  0ED6  0085               	movwf	5
  7141  0ED7  3005               	movlw	5
  7142  0ED8  0020               	movlb	0	; select bank0
  7143  0ED9  00AC               	movwf	??_LCDWriteInt
  7144  0EDA                     u4100:	
  7145  0EDA  0016               	moviw fsr1++
  7146  0EDB  001A               	movwi fsr0++
  7147  0EDC  0BAC               	decfsz	??_LCDWriteInt,f
  7148  0EDD  2EDA               	goto	u4100
  7149                           
  7150                           ;lcd_hd44780_pic16.c: 321: int i=4,j=0;
  7151  0EDE  3004               	movlw	4
  7152  0EDF  00B5               	movwf	LCDWriteInt@i
  7153  0EE0  3000               	movlw	0
  7154  0EE1  00B6               	movwf	LCDWriteInt@i+1
  7155  0EE2  01B3               	clrf	LCDWriteInt@j
  7156  0EE3  01B4               	clrf	LCDWriteInt@j+1
  7157                           
  7158                           ;lcd_hd44780_pic16.c: 324: if(val<0)
  7159  0EE4  1FAA               	btfss	LCDWriteInt@val+1,7
  7160  0EE5  2EF2               	goto	l3711
  7161                           
  7162                           ;lcd_hd44780_pic16.c: 325: {
  7163                           ;lcd_hd44780_pic16.c: 326: (LCDByte('-',1));
  7164  0EE6  01A0               	clrf	LCDByte@isdata
  7165  0EE7  0AA0               	incf	LCDByte@isdata,f
  7166  0EE8  302D               	movlw	45
  7167  0EE9  318B  236E  318E   	fcall	_LCDByte
  7168                           
  7169                           ;lcd_hd44780_pic16.c: 327: val=val*-1;
  7170  0EEC  0020               	movlb	0	; select bank0
  7171  0EED  09A9               	comf	LCDWriteInt@val,f
  7172  0EEE  09AA               	comf	LCDWriteInt@val+1,f
  7173  0EEF  0AA9               	incf	LCDWriteInt@val,f
  7174  0EF0  1903               	skipnz
  7175  0EF1  0AAA               	incf	LCDWriteInt@val+1,f
  7176  0EF2                     l3711:	
  7177                           ;lcd_hd44780_pic16.c: 328: }
  7178                           ;lcd_hd44780_pic16.c: 330: while(val)
  7179                           
  7180  0EF2  0829               	movf	LCDWriteInt@val,w
  7181  0EF3  042A               	iorwf	LCDWriteInt@val+1,w
  7182  0EF4  1903               	btfsc	3,2
  7183  0EF5  2F1F               	goto	l3713
  7184                           
  7185                           ;lcd_hd44780_pic16.c: 331: {
  7186                           ;lcd_hd44780_pic16.c: 332: str[i]=val%10;
  7187  0EF6  300A               	movlw	10
  7188  0EF7  00A0               	movwf	___awmod@divisor
  7189  0EF8  3000               	movlw	0
  7190  0EF9  00A1               	movwf	___awmod@divisor+1
  7191  0EFA  082A               	movf	LCDWriteInt@val+1,w
  7192  0EFB  00A3               	movwf	___awmod@dividend+1
  7193  0EFC  0829               	movf	LCDWriteInt@val,w
  7194  0EFD  00A2               	movwf	___awmod@dividend
  7195  0EFE  318B  23F0  318E   	fcall	___awmod
  7196  0F01  0020               	movlb	0	; select bank0
  7197  0F02  0820               	movf	?___awmod,w
  7198  0F03  00AC               	movwf	??_LCDWriteInt
  7199  0F04  0835               	movf	LCDWriteInt@i,w
  7200  0F05  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  7201  0F06  0086               	movwf	6
  7202  0F07  0187               	clrf	7
  7203  0F08  082C               	movf	??_LCDWriteInt,w
  7204  0F09  0081               	movwf	1
  7205                           
  7206                           ;lcd_hd44780_pic16.c: 333: val=val/10;
  7207  0F0A  300A               	movlw	10
  7208  0F0B  00A0               	movwf	___awdiv@divisor
  7209  0F0C  3000               	movlw	0
  7210  0F0D  00A1               	movwf	___awdiv@divisor+1
  7211  0F0E  082A               	movf	LCDWriteInt@val+1,w
  7212  0F0F  00A3               	movwf	___awdiv@dividend+1
  7213  0F10  0829               	movf	LCDWriteInt@val,w
  7214  0F11  00A2               	movwf	___awdiv@dividend
  7215  0F12  318D  2523  318E   	fcall	___awdiv
  7216  0F15  0020               	movlb	0	; select bank0
  7217  0F16  0821               	movf	?___awdiv+1,w
  7218  0F17  00AA               	movwf	LCDWriteInt@val+1
  7219  0F18  0820               	movf	?___awdiv,w
  7220  0F19  00A9               	movwf	LCDWriteInt@val
  7221                           
  7222                           ;lcd_hd44780_pic16.c: 334: i--;
  7223  0F1A  30FF               	movlw	255
  7224  0F1B  07B5               	addwf	LCDWriteInt@i,f
  7225  0F1C  30FF               	movlw	255
  7226  0F1D  3DB6               	addwfc	LCDWriteInt@i+1,f
  7227  0F1E  2EF2               	goto	l3711
  7228  0F1F                     l3713:	
  7229                           
  7230                           ;lcd_hd44780_pic16.c: 335: }
  7231                           ;lcd_hd44780_pic16.c: 336: if(field_length==-1)
  7232  0F1F  0A2B               	incf	LCDWriteInt@field_length,w
  7233  0F20  1903               	btfsc	3,2
  7234  0F21  2F27               	goto	l3719
  7235  0F22  2F2F               	goto	l3721
  7236  0F23                     l3717:	
  7237                           ;lcd_hd44780_pic16.c: 337: while(str[j]==0) j++;
  7238                           
  7239  0F23  3001               	movlw	1
  7240  0F24  07B3               	addwf	LCDWriteInt@j,f
  7241  0F25  3000               	movlw	0
  7242  0F26  3DB4               	addwfc	LCDWriteInt@j+1,f
  7243  0F27                     l3719:	
  7244  0F27  0833               	movf	LCDWriteInt@j,w
  7245  0F28  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  7246  0F29  0086               	movwf	6
  7247  0F2A  0187               	clrf	7
  7248  0F2B  0801               	movf	1,w
  7249  0F2C  1D03               	btfss	3,2
  7250  0F2D  2F3F               	goto	l3723
  7251  0F2E  2F23               	goto	l3717
  7252  0F2F                     l3721:	
  7253                           
  7254                           ;lcd_hd44780_pic16.c: 338: else
  7255                           ;lcd_hd44780_pic16.c: 339: j=5-field_length;
  7256  0F2F  082B               	movf	LCDWriteInt@field_length,w
  7257  0F30  00AC               	movwf	??_LCDWriteInt
  7258  0F31  01AD               	clrf	??_LCDWriteInt+1
  7259  0F32  1BAC               	btfsc	??_LCDWriteInt,7
  7260  0F33  03AD               	decf	??_LCDWriteInt+1,f
  7261  0F34  09AC               	comf	??_LCDWriteInt,f
  7262  0F35  09AD               	comf	??_LCDWriteInt+1,f
  7263  0F36  0AAC               	incf	??_LCDWriteInt,f
  7264  0F37  1903               	skipnz
  7265  0F38  0AAD               	incf	??_LCDWriteInt+1,f
  7266  0F39  082C               	movf	??_LCDWriteInt,w
  7267  0F3A  3E05               	addlw	5
  7268  0F3B  00B3               	movwf	LCDWriteInt@j
  7269  0F3C  3000               	movlw	0
  7270  0F3D  3D2D               	addwfc	??_LCDWriteInt+1,w
  7271  0F3E  00B4               	movwf	LCDWriteInt@j+1
  7272  0F3F                     l3723:	
  7273                           
  7274                           ;lcd_hd44780_pic16.c: 342: for(i=j;i<5;i++)
  7275  0F3F  0834               	movf	LCDWriteInt@j+1,w
  7276  0F40  00B6               	movwf	LCDWriteInt@i+1
  7277  0F41  0833               	movf	LCDWriteInt@j,w
  7278  0F42  00B5               	movwf	LCDWriteInt@i
  7279  0F43                     L6:	
  7280  0F43  0836               	movf	LCDWriteInt@i+1,w
  7281  0F44  3A80               	xorlw	128
  7282  0F45  00AC               	movwf	??_LCDWriteInt
  7283  0F46  3080               	movlw	128
  7284  0F47  022C               	subwf	??_LCDWriteInt,w
  7285  0F48  1D03               	skipz
  7286  0F49  2F4C               	goto	u4155
  7287  0F4A  3005               	movlw	5
  7288  0F4B  0235               	subwf	LCDWriteInt@i,w
  7289  0F4C                     u4155:	
  7290  0F4C  1803               	btfsc	3,0
  7291  0F4D  0008               	return
  7292                           
  7293                           ;lcd_hd44780_pic16.c: 343: {
  7294                           ;lcd_hd44780_pic16.c: 344: (LCDByte(48+str[i],1));
  7295  0F4E  0020               	movlb	0	; select bank0
  7296  0F4F  01A0               	clrf	LCDByte@isdata
  7297  0F50  0AA0               	incf	LCDByte@isdata,f
  7298  0F51  0835               	movf	LCDWriteInt@i,w
  7299  0F52  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  7300  0F53  0086               	movwf	6
  7301  0F54  0187               	clrf	7
  7302  0F55  0801               	movf	1,w
  7303  0F56  3E30               	addlw	48
  7304  0F57  318B  236E  318E   	fcall	_LCDByte
  7305  0F5A  3001               	movlw	1
  7306  0F5B  0020               	movlb	0	; select bank0
  7307  0F5C  07B5               	addwf	LCDWriteInt@i,f
  7308  0F5D  3000               	movlw	0
  7309  0F5E  3DB6               	addwfc	LCDWriteInt@i+1,f
  7310  0F5F  2F43               	goto	L6
  7311  0F60                     __end_of_LCDWriteInt:	
  7312                           
  7313                           	psect	text31
  7314  0BF0                     __ptext31:	
  7315 ;; *************** function ___awmod *****************
  7316 ;; Defined at:
  7317 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  divisor         2    0[BANK0 ] int 
  7320 ;;  dividend        2    2[BANK0 ] int 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  sign            1    6[BANK0 ] unsigned char 
  7323 ;;  counter         1    5[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  2    0[BANK0 ] int 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7333 ;;      Params:         0       4       0       0       0       0       0       0
  7334 ;;      Locals:         0       2       0       0       0       0       0       0
  7335 ;;      Temps:          0       1       0       0       0       0       0       0
  7336 ;;      Totals:         0       7       0       0       0       0       0       0
  7337 ;;Total ram usage:        7 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    4
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_LCDWriteInt
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function ___awmod
  7349  0BF0                     ___awmod:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7353  0BF0  0020               	movlb	0	; select bank0
  7354  0BF1  01A6               	clrf	___awmod@sign
  7355  0BF2  1FA3               	btfss	___awmod@dividend+1,7
  7356  0BF3  2BFB               	goto	l2993
  7357  0BF4  09A2               	comf	___awmod@dividend,f
  7358  0BF5  09A3               	comf	___awmod@dividend+1,f
  7359  0BF6  0AA2               	incf	___awmod@dividend,f
  7360  0BF7  1903               	skipnz
  7361  0BF8  0AA3               	incf	___awmod@dividend+1,f
  7362  0BF9  01A6               	clrf	___awmod@sign
  7363  0BFA  0AA6               	incf	___awmod@sign,f
  7364  0BFB                     l2993:	
  7365  0BFB  1FA1               	btfss	___awmod@divisor+1,7
  7366  0BFC  2C02               	goto	l2997
  7367  0BFD  09A0               	comf	___awmod@divisor,f
  7368  0BFE  09A1               	comf	___awmod@divisor+1,f
  7369  0BFF  0AA0               	incf	___awmod@divisor,f
  7370  0C00  1903               	skipnz
  7371  0C01  0AA1               	incf	___awmod@divisor+1,f
  7372  0C02                     l2997:	
  7373  0C02  0820               	movf	___awmod@divisor,w
  7374  0C03  0421               	iorwf	___awmod@divisor+1,w
  7375  0C04  1903               	btfsc	3,2
  7376  0C05  2C29               	goto	l3015
  7377  0C06  01A5               	clrf	___awmod@counter
  7378  0C07  0AA5               	incf	___awmod@counter,f
  7379  0C08                     l3005:	
  7380  0C08  1BA1               	btfsc	___awmod@divisor+1,7
  7381  0C09  2C14               	goto	l3007
  7382  0C0A  3001               	movlw	1
  7383  0C0B                     u3005:	
  7384  0C0B  35A0               	lslf	___awmod@divisor,f
  7385  0C0C  0DA1               	rlf	___awmod@divisor+1,f
  7386  0C0D  0B89               	decfsz	9,f
  7387  0C0E  2C0B               	goto	u3005
  7388  0C0F  3001               	movlw	1
  7389  0C10  00A4               	movwf	??___awmod
  7390  0C11  0824               	movf	??___awmod,w
  7391  0C12  07A5               	addwf	___awmod@counter,f
  7392  0C13  2C08               	goto	l3005
  7393  0C14                     l3007:	
  7394  0C14  0821               	movf	___awmod@divisor+1,w
  7395  0C15  0223               	subwf	___awmod@dividend+1,w
  7396  0C16  1D03               	skipz
  7397  0C17  2C1A               	goto	u3025
  7398  0C18  0820               	movf	___awmod@divisor,w
  7399  0C19  0222               	subwf	___awmod@dividend,w
  7400  0C1A                     u3025:	
  7401  0C1A  1C03               	skipc
  7402  0C1B  2C20               	goto	l3011
  7403  0C1C  0820               	movf	___awmod@divisor,w
  7404  0C1D  02A2               	subwf	___awmod@dividend,f
  7405  0C1E  0821               	movf	___awmod@divisor+1,w
  7406  0C1F  3BA3               	subwfb	___awmod@dividend+1,f
  7407  0C20                     l3011:	
  7408  0C20  3001               	movlw	1
  7409  0C21                     u3035:	
  7410  0C21  36A1               	lsrf	___awmod@divisor+1,f
  7411  0C22  0CA0               	rrf	___awmod@divisor,f
  7412  0C23  0B89               	decfsz	9,f
  7413  0C24  2C21               	goto	u3035
  7414  0C25  3001               	movlw	1
  7415  0C26  02A5               	subwf	___awmod@counter,f
  7416  0C27  1D03               	btfss	3,2
  7417  0C28  2C14               	goto	l3007
  7418  0C29                     l3015:	
  7419  0C29  0826               	movf	___awmod@sign,w
  7420  0C2A  1903               	btfsc	3,2
  7421  0C2B  2C31               	goto	l3019
  7422  0C2C  09A2               	comf	___awmod@dividend,f
  7423  0C2D  09A3               	comf	___awmod@dividend+1,f
  7424  0C2E  0AA2               	incf	___awmod@dividend,f
  7425  0C2F  1903               	skipnz
  7426  0C30  0AA3               	incf	___awmod@dividend+1,f
  7427  0C31                     l3019:	
  7428  0C31  0823               	movf	___awmod@dividend+1,w
  7429  0C32  00A1               	movwf	?___awmod+1
  7430  0C33  0822               	movf	___awmod@dividend,w
  7431  0C34  00A0               	movwf	?___awmod
  7432  0C35  0008               	return
  7433  0C36                     __end_of___awmod:	
  7434                           
  7435                           	psect	text32
  7436  0D23                     __ptext32:	
  7437 ;; *************** function ___awdiv *****************
  7438 ;; Defined at:
  7439 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  divisor         2    0[BANK0 ] int 
  7442 ;;  dividend        2    2[BANK0 ] int 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  quotient        2    7[BANK0 ] int 
  7445 ;;  sign            1    6[BANK0 ] unsigned char 
  7446 ;;  counter         1    5[BANK0 ] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  2    0[BANK0 ] int 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7456 ;;      Params:         0       4       0       0       0       0       0       0
  7457 ;;      Locals:         0       4       0       0       0       0       0       0
  7458 ;;      Temps:          0       1       0       0       0       0       0       0
  7459 ;;      Totals:         0       9       0       0       0       0       0       0
  7460 ;;Total ram usage:        9 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    4
  7463 ;; This function calls:
  7464 ;;		Nothing
  7465 ;; This function is called by:
  7466 ;;		_LCDWriteInt
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function ___awdiv
  7472  0D23                     ___awdiv:	
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7476  0D23  0020               	movlb	0	; select bank0
  7477  0D24  01A6               	clrf	___awdiv@sign
  7478  0D25  1FA1               	btfss	___awdiv@divisor+1,7
  7479  0D26  2D2E               	goto	l2949
  7480  0D27  09A0               	comf	___awdiv@divisor,f
  7481  0D28  09A1               	comf	___awdiv@divisor+1,f
  7482  0D29  0AA0               	incf	___awdiv@divisor,f
  7483  0D2A  1903               	skipnz
  7484  0D2B  0AA1               	incf	___awdiv@divisor+1,f
  7485  0D2C  01A6               	clrf	___awdiv@sign
  7486  0D2D  0AA6               	incf	___awdiv@sign,f
  7487  0D2E                     l2949:	
  7488  0D2E  1FA3               	btfss	___awdiv@dividend+1,7
  7489  0D2F  2D39               	goto	l2955
  7490  0D30  09A2               	comf	___awdiv@dividend,f
  7491  0D31  09A3               	comf	___awdiv@dividend+1,f
  7492  0D32  0AA2               	incf	___awdiv@dividend,f
  7493  0D33  1903               	skipnz
  7494  0D34  0AA3               	incf	___awdiv@dividend+1,f
  7495  0D35  3001               	movlw	1
  7496  0D36  00A4               	movwf	??___awdiv
  7497  0D37  0824               	movf	??___awdiv,w
  7498  0D38  06A6               	xorwf	___awdiv@sign,f
  7499  0D39                     l2955:	
  7500  0D39  01A7               	clrf	___awdiv@quotient
  7501  0D3A  01A8               	clrf	___awdiv@quotient+1
  7502  0D3B  0820               	movf	___awdiv@divisor,w
  7503  0D3C  0421               	iorwf	___awdiv@divisor+1,w
  7504  0D3D  1903               	btfsc	3,2
  7505  0D3E  2D68               	goto	l2977
  7506  0D3F  01A5               	clrf	___awdiv@counter
  7507  0D40  0AA5               	incf	___awdiv@counter,f
  7508  0D41                     l2965:	
  7509  0D41  1BA1               	btfsc	___awdiv@divisor+1,7
  7510  0D42  2D4D               	goto	l2967
  7511  0D43  3001               	movlw	1
  7512  0D44                     u2905:	
  7513  0D44  35A0               	lslf	___awdiv@divisor,f
  7514  0D45  0DA1               	rlf	___awdiv@divisor+1,f
  7515  0D46  0B89               	decfsz	9,f
  7516  0D47  2D44               	goto	u2905
  7517  0D48  3001               	movlw	1
  7518  0D49  00A4               	movwf	??___awdiv
  7519  0D4A  0824               	movf	??___awdiv,w
  7520  0D4B  07A5               	addwf	___awdiv@counter,f
  7521  0D4C  2D41               	goto	l2965
  7522  0D4D                     l2967:	
  7523  0D4D  3001               	movlw	1
  7524  0D4E                     u2925:	
  7525  0D4E  35A7               	lslf	___awdiv@quotient,f
  7526  0D4F  0DA8               	rlf	___awdiv@quotient+1,f
  7527  0D50  0B89               	decfsz	9,f
  7528  0D51  2D4E               	goto	u2925
  7529  0D52  0821               	movf	___awdiv@divisor+1,w
  7530  0D53  0223               	subwf	___awdiv@dividend+1,w
  7531  0D54  1D03               	skipz
  7532  0D55  2D58               	goto	u2935
  7533  0D56  0820               	movf	___awdiv@divisor,w
  7534  0D57  0222               	subwf	___awdiv@dividend,w
  7535  0D58                     u2935:	
  7536  0D58  1C03               	skipc
  7537  0D59  2D5F               	goto	l2973
  7538  0D5A  0820               	movf	___awdiv@divisor,w
  7539  0D5B  02A2               	subwf	___awdiv@dividend,f
  7540  0D5C  0821               	movf	___awdiv@divisor+1,w
  7541  0D5D  3BA3               	subwfb	___awdiv@dividend+1,f
  7542  0D5E  1427               	bsf	___awdiv@quotient,0
  7543  0D5F                     l2973:	
  7544  0D5F  3001               	movlw	1
  7545  0D60                     u2945:	
  7546  0D60  36A1               	lsrf	___awdiv@divisor+1,f
  7547  0D61  0CA0               	rrf	___awdiv@divisor,f
  7548  0D62  0B89               	decfsz	9,f
  7549  0D63  2D60               	goto	u2945
  7550  0D64  3001               	movlw	1
  7551  0D65  02A5               	subwf	___awdiv@counter,f
  7552  0D66  1D03               	btfss	3,2
  7553  0D67  2D4D               	goto	l2967
  7554  0D68                     l2977:	
  7555  0D68  0826               	movf	___awdiv@sign,w
  7556  0D69  1903               	btfsc	3,2
  7557  0D6A  2D70               	goto	l2981
  7558  0D6B  09A7               	comf	___awdiv@quotient,f
  7559  0D6C  09A8               	comf	___awdiv@quotient+1,f
  7560  0D6D  0AA7               	incf	___awdiv@quotient,f
  7561  0D6E  1903               	skipnz
  7562  0D6F  0AA8               	incf	___awdiv@quotient+1,f
  7563  0D70                     l2981:	
  7564  0D70  0828               	movf	___awdiv@quotient+1,w
  7565  0D71  00A1               	movwf	?___awdiv+1
  7566  0D72  0827               	movf	___awdiv@quotient,w
  7567  0D73  00A0               	movwf	?___awdiv
  7568  0D74  0008               	return
  7569  0D75                     __end_of___awdiv:	
  7570                           
  7571                           	psect	text33
  7572  0D75                     __ptext33:	
  7573 ;; *************** function _LCDInit *****************
  7574 ;; Defined at:
  7575 ;;		line 193 in file "lcd_hd44780_pic16.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  style           1    wreg     unsigned char 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  style           1    8[BANK0 ] unsigned char 
  7580 ;;  __i             1    9[BANK0 ] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      void 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7590 ;;      Params:         0       0       0       0       0       0       0       0
  7591 ;;      Locals:         0       2       0       0       0       0       0       0
  7592 ;;      Temps:          0       1       0       0       0       0       0       0
  7593 ;;      Totals:         0       3       0       0       0       0       0       0
  7594 ;;Total ram usage:        3 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    5
  7597 ;; This function calls:
  7598 ;;		_LCDByte
  7599 ;; This function is called by:
  7600 ;;		_main
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function _LCDInit
  7606  0D75                     _LCDInit:	
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _LCDInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7610                           ;LCDInit@style stored from wreg
  7611  0D75  0020               	movlb	0	; select bank0
  7612  0D76  00A8               	movwf	LCDInit@style
  7613                           
  7614                           ;lcd_hd44780_pic16.c: 209: _delay((unsigned long)((30)*(18432000/4000.0)));
  7615  0D77  30B4               	movlw	180
  7616  0D78  0020               	movlb	0	; select bank0
  7617  0D79  00A7               	movwf	??_LCDInit
  7618  0D7A  3087               	movlw	135
  7619  0D7B                     u6327:	
  7620  0D7B  0B89               	decfsz	9,f
  7621  0D7C  2D7B               	goto	u6327
  7622  0D7D  0BA7               	decfsz	??_LCDInit,f
  7623  0D7E  2D7B               	goto	u6327
  7624                           
  7625                           ;lcd_hd44780_pic16.c: 212: TRISB&=(~(0x0F<<0));
  7626  0D7F  30F0               	movlw	240
  7627  0D80  0020               	movlb	0	; select bank0
  7628  0D81  00A7               	movwf	??_LCDInit
  7629  0D82  0827               	movf	??_LCDInit,w
  7630  0D83  0021               	movlb	1	; select bank1
  7631  0D84  058D               	andwf	13,f	;volatile
  7632                           
  7633                           ;lcd_hd44780_pic16.c: 214: TRISDbits.TRISD0=0;
  7634  0D85  100F               	bcf	15,0	;volatile
  7635                           
  7636                           ;lcd_hd44780_pic16.c: 215: TRISDbits.TRISD3=0;
  7637  0D86  118F               	bcf	15,3	;volatile
  7638                           
  7639                           ;lcd_hd44780_pic16.c: 216: TRISDbits.TRISD1=0;
  7640  0D87  108F               	bcf	15,1	;volatile
  7641                           
  7642                           ;lcd_hd44780_pic16.c: 218: PORTB&=(~(0x0F<<0));
  7643  0D88  30F0               	movlw	240
  7644  0D89  0020               	movlb	0	; select bank0
  7645  0D8A  00A7               	movwf	??_LCDInit
  7646  0D8B  0827               	movf	??_LCDInit,w
  7647  0D8C  058D               	andwf	13,f	;volatile
  7648                           
  7649                           ;lcd_hd44780_pic16.c: 220: (RD0=0);
  7650  0D8D  100F               	bcf	15,0	;volatile
  7651                           
  7652                           ;lcd_hd44780_pic16.c: 221: (RD1=0);
  7653  0D8E  108F               	bcf	15,1	;volatile
  7654                           
  7655                           ;lcd_hd44780_pic16.c: 222: (RD3=0);
  7656  0D8F  118F               	bcf	15,3	;volatile
  7657                           
  7658                           ;lcd_hd44780_pic16.c: 225: _delay((unsigned long)((0.5)*(18432000/4000000.0)));
  7659  0D90  3200               	nop2	;2 cycle nop
  7660                           
  7661                           ;lcd_hd44780_pic16.c: 227: (RD0=1);
  7662  0D91  0020               	movlb	0	; select bank0
  7663  0D92  140F               	bsf	15,0	;volatile
  7664                           
  7665                           ;lcd_hd44780_pic16.c: 228: PORTB|=((0b00000010)<<0);
  7666  0D93  148D               	bsf	13,1	;volatile
  7667                           
  7668                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7669  0D94  3200               	nop2	;2 cycle nop
  7670  0D95  3200               	nop2	;2 cycle nop
  7671                           
  7672                           ;lcd_hd44780_pic16.c: 230: (RD0=0);
  7673  0D96  0020               	movlb	0	; select bank0
  7674  0D97  100F               	bcf	15,0	;volatile
  7675                           
  7676                           ;lcd_hd44780_pic16.c: 231: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7677  0D98  3200               	nop2	;2 cycle nop
  7678  0D99  3200               	nop2	;2 cycle nop
  7679                           
  7680                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(18432000/4000.0)));
  7681  0D9A  3006               	movlw	6
  7682  0D9B  0020               	movlb	0	; select bank0
  7683  0D9C  00A7               	movwf	??_LCDInit
  7684  0D9D  30FB               	movlw	251
  7685  0D9E                     u6337:	
  7686  0D9E  0B89               	decfsz	9,f
  7687  0D9F  2D9E               	goto	u6337
  7688  0DA0  0BA7               	decfsz	??_LCDInit,f
  7689  0DA1  2D9E               	goto	u6337
  7690                           
  7691                           ;lcd_hd44780_pic16.c: 239: (LCDByte(0b00101000,0));
  7692  0DA2  0020               	movlb	0	; select bank0
  7693  0DA3  01A0               	clrf	LCDByte@isdata
  7694  0DA4  3028               	movlw	40
  7695  0DA5  318B  236E  318D   	fcall	_LCDByte
  7696                           
  7697                           ;lcd_hd44780_pic16.c: 240: (LCDByte(0b00001100|style,0));
  7698  0DA8  0020               	movlb	0	; select bank0
  7699  0DA9  01A0               	clrf	LCDByte@isdata
  7700  0DAA  0828               	movf	LCDInit@style,w
  7701  0DAB  380C               	iorlw	12
  7702  0DAC  318B  236E  318D   	fcall	_LCDByte
  7703                           
  7704                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b01000000,0));
  7705  0DAF  0020               	movlb	0	; select bank0
  7706  0DB0  01A0               	clrf	LCDByte@isdata
  7707  0DB1  3040               	movlw	64
  7708  0DB2  318B  236E  318D   	fcall	_LCDByte
  7709                           
  7710                           ;lcd_hd44780_pic16.c: 245: uint8_t __i;
  7711                           ;lcd_hd44780_pic16.c: 246: for(__i=0;__i<sizeof(__cgram);__i++)
  7712  0DB5  0020               	movlb	0	; select bank0
  7713  0DB6  01A9               	clrf	LCDInit@__i
  7714  0DB7                     L7:	
  7715  0DB7  3040               	movlw	64
  7716  0DB8  0229               	subwf	LCDInit@__i,w
  7717  0DB9  1803               	btfsc	3,0
  7718  0DBA  0008               	return
  7719                           
  7720                           ;lcd_hd44780_pic16.c: 247: (LCDByte(__cgram[__i],1));
  7721  0DBB  01A0               	clrf	LCDByte@isdata
  7722  0DBC  0AA0               	incf	LCDByte@isdata,f
  7723  0DBD  0829               	movf	LCDInit@__i,w
  7724  0DBE  3EA0               	addlw	(low (___cgram| (0+512)))& (0+255)
  7725  0DBF  0086               	movwf	6
  7726  0DC0  3002               	movlw	2	; select bank5/6
  7727  0DC1  0087               	movwf	7
  7728  0DC2  0801               	movf	1,w
  7729  0DC3  318B  236E  318D   	fcall	_LCDByte
  7730  0DC6  3001               	movlw	1
  7731  0DC7  0020               	movlb	0	; select bank0
  7732  0DC8  00A7               	movwf	??_LCDInit
  7733  0DC9  0827               	movf	??_LCDInit,w
  7734  0DCA  07A9               	addwf	LCDInit@__i,f
  7735  0DCB  2DB7               	goto	L7
  7736  0DCC                     __end_of_LCDInit:	
  7737                           
  7738                           	psect	text34
  7739  0B6E                     __ptext34:	
  7740 ;; *************** function _LCDByte *****************
  7741 ;; Defined at:
  7742 ;;		line 80 in file "lcd_hd44780_pic16.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  c               1    wreg     unsigned char 
  7745 ;;  isdata          1    0[BANK0 ] unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  c               1    5[BANK0 ] unsigned char 
  7748 ;;  temp            1    6[BANK0 ] unsigned char 
  7749 ;;  ln              1    4[BANK0 ] unsigned char 
  7750 ;;  hn              1    3[BANK0 ] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7760 ;;      Params:         0       1       0       0       0       0       0       0
  7761 ;;      Locals:         0       4       0       0       0       0       0       0
  7762 ;;      Temps:          0       2       0       0       0       0       0       0
  7763 ;;      Totals:         0       7       0       0       0       0       0       0
  7764 ;;Total ram usage:        7 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    4
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_main
  7771 ;;		_LCDInit
  7772 ;;		_LCDWriteString
  7773 ;;		_LCDWriteInt
  7774 ;;		_LCDGotoXY
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           
  7779                           ;psect for function _LCDByte
  7780  0B6E                     _LCDByte:	
  7781                           
  7782                           ;incstack = 0
  7783                           ; Regs used in _LCDByte: [wreg+status,2+status,0]
  7784                           ;LCDByte@c stored from wreg
  7785  0B6E  0020               	movlb	0	; select bank0
  7786  0B6F  00A5               	movwf	LCDByte@c
  7787                           
  7788                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  7789                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  7790                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  7791  0B70  0825               	movf	LCDByte@c,w
  7792  0B71  00A1               	movwf	??_LCDByte
  7793  0B72  3004               	movlw	4
  7794  0B73                     u2795:	
  7795  0B73  36A1               	lsrf	??_LCDByte,f
  7796  0B74  0B89               	decfsz	9,f
  7797  0B75  2B73               	goto	u2795
  7798  0B76  0821               	movf	??_LCDByte,w
  7799  0B77  00A2               	movwf	??_LCDByte+1
  7800  0B78  0822               	movf	??_LCDByte+1,w
  7801  0B79  00A3               	movwf	LCDByte@hn
  7802                           
  7803                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  7804  0B7A  0825               	movf	LCDByte@c,w
  7805  0B7B  390F               	andlw	15
  7806  0B7C  00A1               	movwf	??_LCDByte
  7807  0B7D  0821               	movf	??_LCDByte,w
  7808  0B7E  00A4               	movwf	LCDByte@ln
  7809                           
  7810                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  7811  0B7F  0820               	movf	LCDByte@isdata,w
  7812  0B80  1D03               	btfss	3,2
  7813  0B81  2B84               	goto	l547
  7814                           
  7815                           ;lcd_hd44780_pic16.c: 96: (RD3=0);
  7816  0B82  118F               	bcf	15,3	;volatile
  7817  0B83  2B85               	goto	l548
  7818  0B84                     l547:	
  7819                           
  7820                           ;lcd_hd44780_pic16.c: 97: else
  7821                           ;lcd_hd44780_pic16.c: 98: (RD3=1);
  7822  0B84  158F               	bsf	15,3	;volatile
  7823  0B85                     l548:	
  7824                           
  7825                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(18432000/4000000.0)));
  7826  0B85  3200               	nop2	;2 cycle nop
  7827                           
  7828                           ;lcd_hd44780_pic16.c: 102: (RD0=1);
  7829  0B86  0020               	movlb	0	; select bank0
  7830  0B87  140F               	bsf	15,0	;volatile
  7831                           
  7832                           ;lcd_hd44780_pic16.c: 106: temp=(PORTB & (~(0X0F<<0)))|((hn<<0));
  7833  0B88  080D               	movf	13,w	;volatile
  7834  0B89  39F0               	andlw	240
  7835  0B8A  0423               	iorwf	LCDByte@hn,w
  7836  0B8B  00A1               	movwf	??_LCDByte
  7837  0B8C  0821               	movf	??_LCDByte,w
  7838  0B8D  00A6               	movwf	LCDByte@temp
  7839                           
  7840                           ;lcd_hd44780_pic16.c: 107: PORTB=temp;
  7841  0B8E  0826               	movf	LCDByte@temp,w
  7842  0B8F  008D               	movwf	13	;volatile
  7843                           
  7844                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7845  0B90  3200               	nop2	;2 cycle nop
  7846  0B91  3200               	nop2	;2 cycle nop
  7847                           
  7848                           ;lcd_hd44780_pic16.c: 113: (RD0=0);
  7849  0B92  0020               	movlb	0	; select bank0
  7850  0B93  100F               	bcf	15,0	;volatile
  7851                           
  7852                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7853  0B94  3200               	nop2	;2 cycle nop
  7854  0B95  3200               	nop2	;2 cycle nop
  7855                           
  7856                           ;lcd_hd44780_pic16.c: 118: (RD0=1);
  7857  0B96  0020               	movlb	0	; select bank0
  7858  0B97  140F               	bsf	15,0	;volatile
  7859                           
  7860                           ;lcd_hd44780_pic16.c: 120: temp=(PORTB & (~(0X0F<<0)))|((ln<<0));
  7861  0B98  080D               	movf	13,w	;volatile
  7862  0B99  39F0               	andlw	240
  7863  0B9A  0424               	iorwf	LCDByte@ln,w
  7864  0B9B  00A1               	movwf	??_LCDByte
  7865  0B9C  0821               	movf	??_LCDByte,w
  7866  0B9D  00A6               	movwf	LCDByte@temp
  7867                           
  7868                           ;lcd_hd44780_pic16.c: 122: PORTB=temp;
  7869  0B9E  0826               	movf	LCDByte@temp,w
  7870  0B9F  008D               	movwf	13	;volatile
  7871                           
  7872                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7873  0BA0  3200               	nop2	;2 cycle nop
  7874  0BA1  3200               	nop2	;2 cycle nop
  7875                           
  7876                           ;lcd_hd44780_pic16.c: 128: (RD0=0);
  7877  0BA2  0020               	movlb	0	; select bank0
  7878  0BA3  100F               	bcf	15,0	;volatile
  7879                           
  7880                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(18432000/4000000.0)));
  7881  0BA4  3200               	nop2	;2 cycle nop
  7882  0BA5  3200               	nop2	;2 cycle nop
  7883                           
  7884                           ;lcd_hd44780_pic16.c: 131: _delay((unsigned long)((1)*(18432000/4000.0)));
  7885  0BA6  3006               	movlw	6
  7886  0BA7  0020               	movlb	0	; select bank0
  7887  0BA8  00A1               	movwf	??_LCDByte
  7888  0BA9  30FB               	movlw	251
  7889  0BAA                     u6347:	
  7890  0BAA  0B89               	decfsz	9,f
  7891  0BAB  2BAA               	goto	u6347
  7892  0BAC  0BA1               	decfsz	??_LCDByte,f
  7893  0BAD  2BAA               	goto	u6347
  7894  0BAE  0008               	return
  7895  0BAF                     __end_of_LCDByte:	
  7896                           
  7897                           	psect	text35
  7898  0DCC                     __ptext35:	
  7899 ;; *************** function _DHT_result *****************
  7900 ;; Defined at:
  7901 ;;		line 381 in file "main.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  x               2   53[BANK0 ] int 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7915 ;;      Params:         0       0       0       0       0       0       0       0
  7916 ;;      Locals:         0       2       0       0       0       0       0       0
  7917 ;;      Temps:          0      14       0       0       0       0       0       0
  7918 ;;      Totals:         0      16       0       0       0       0       0       0
  7919 ;;Total ram usage:       16 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    8
  7922 ;; This function calls:
  7923 ;;		_ReadData
  7924 ;;		_sprintf
  7925 ;; This function is called by:
  7926 ;;		_main
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           
  7931                           ;psect for function _DHT_result
  7932  0DCC                     _DHT_result:	
  7933                           
  7934                           ;main.c: 383: RH_byte1 = ReadData();
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _DHT_result: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7938  0DCC  318A  22BA  318D   	fcall	_ReadData
  7939  0DCF  0020               	movlb	0	; select bank0
  7940  0DD0  00C7               	movwf	??_DHT_result
  7941  0DD1  0847               	movf	??_DHT_result,w
  7942  0DD2  00E7               	movwf	_RH_byte1
  7943                           
  7944                           ;main.c: 384: RH_byte2 = ReadData();
  7945  0DD3  318A  22BA  318D   	fcall	_ReadData
  7946  0DD6  0020               	movlb	0	; select bank0
  7947  0DD7  00C7               	movwf	??_DHT_result
  7948  0DD8  0847               	movf	??_DHT_result,w
  7949  0DD9  00E6               	movwf	_RH_byte2
  7950                           
  7951                           ;main.c: 385: T_byte1 = ReadData();
  7952  0DDA  318A  22BA  318D   	fcall	_ReadData
  7953  0DDD  0020               	movlb	0	; select bank0
  7954  0DDE  00C7               	movwf	??_DHT_result
  7955  0DDF  0847               	movf	??_DHT_result,w
  7956  0DE0  00E9               	movwf	_T_byte1
  7957                           
  7958                           ;main.c: 386: T_byte2 = ReadData();
  7959  0DE1  318A  22BA  318D   	fcall	_ReadData
  7960  0DE4  0020               	movlb	0	; select bank0
  7961  0DE5  00C7               	movwf	??_DHT_result
  7962  0DE6  0847               	movf	??_DHT_result,w
  7963  0DE7  00E8               	movwf	_T_byte2
  7964                           
  7965                           ;main.c: 387: Sum = ReadData();
  7966  0DE8  318A  22BA  318D   	fcall	_ReadData
  7967  0DEB  0020               	movlb	0	; select bank0
  7968  0DEC  00C7               	movwf	??_DHT_result
  7969  0DED  0847               	movf	??_DHT_result,w
  7970  0DEE  0021               	movlb	1	; select bank1
  7971  0DEF  00EF               	movwf	_Sum^(0+128)
  7972                           
  7973                           ;main.c: 389: if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF))
  7974  0DF0  0020               	movlb	0	; select bank0
  7975  0DF1  0868               	movf	_T_byte2,w
  7976  0DF2  00C7               	movwf	??_DHT_result
  7977  0DF3  01C8               	clrf	??_DHT_result+1
  7978  0DF4  0869               	movf	_T_byte1,w
  7979  0DF5  00C9               	movwf	??_DHT_result+2
  7980  0DF6  01CA               	clrf	??_DHT_result+3
  7981  0DF7  0867               	movf	_RH_byte1,w
  7982  0DF8  0766               	addwf	_RH_byte2,w
  7983  0DF9  00CB               	movwf	??_DHT_result+4
  7984  0DFA  01CC               	clrf	??_DHT_result+5
  7985  0DFB  0DCC               	rlf	??_DHT_result+5,f
  7986  0DFC  0849               	movf	??_DHT_result+2,w
  7987  0DFD  074B               	addwf	??_DHT_result+4,w
  7988  0DFE  00CD               	movwf	??_DHT_result+6
  7989  0DFF  084A               	movf	??_DHT_result+3,w
  7990  0E00  3D4C               	addwfc	??_DHT_result+5,w
  7991  0E01  00CE               	movwf	??_DHT_result+7
  7992  0E02  0847               	movf	??_DHT_result,w
  7993  0E03  074D               	addwf	??_DHT_result+6,w
  7994  0E04  00CF               	movwf	??_DHT_result+8
  7995  0E05  0848               	movf	??_DHT_result+1,w
  7996  0E06  3D4E               	addwfc	??_DHT_result+7,w
  7997  0E07  00D0               	movwf	??_DHT_result+9
  7998  0E08  30FF               	movlw	255
  7999  0E09  054F               	andwf	??_DHT_result+8,w
  8000  0E0A  00D1               	movwf	??_DHT_result+10
  8001  0E0B  3000               	movlw	0
  8002  0E0C  0550               	andwf	??_DHT_result+9,w
  8003  0E0D  00D2               	movwf	??_DHT_result+11
  8004  0E0E  0021               	movlb	1	; select bank1
  8005  0E0F  086F               	movf	_Sum^(0+128),w
  8006  0E10  0020               	movlb	0	; select bank0
  8007  0E11  00D3               	movwf	??_DHT_result+12
  8008  0E12  01D4               	clrf	??_DHT_result+13
  8009  0E13  0852               	movf	??_DHT_result+11,w
  8010  0E14  0654               	xorwf	??_DHT_result+13,w
  8011  0E15  1D03               	skipz
  8012  0E16  2E19               	goto	u6075
  8013  0E17  0851               	movf	??_DHT_result+10,w
  8014  0E18  0653               	xorwf	??_DHT_result+12,w
  8015  0E19                     u6075:	
  8016  0E19  1D03               	skipz
  8017  0E1A  2E26               	goto	l509
  8018                           
  8019                           ;main.c: 390: {
  8020                           ;main.c: 391: Temp = T_byte1;
  8021  0E1B  0869               	movf	_T_byte1,w
  8022  0E1C  00C7               	movwf	??_DHT_result
  8023  0E1D  0847               	movf	??_DHT_result,w
  8024  0E1E  0022               	movlb	2	; select bank2
  8025  0E1F  00E9               	movwf	_Temp^(0+256)
  8026                           
  8027                           ;main.c: 392: RH = RH_byte1;
  8028  0E20  0020               	movlb	0	; select bank0
  8029  0E21  0867               	movf	_RH_byte1,w
  8030  0E22  00C7               	movwf	??_DHT_result
  8031  0E23  0847               	movf	??_DHT_result,w
  8032  0E24  0022               	movlb	2	; select bank2
  8033  0E25  00E8               	movwf	_RH^(0+256)
  8034  0E26                     l509:	
  8035                           
  8036                           ;main.c: 393: }
  8037                           ;main.c: 394: int x=RH_byte1;
  8038  0E26  0020               	movlb	0	; select bank0
  8039  0E27  0867               	movf	_RH_byte1,w
  8040  0E28  00C7               	movwf	??_DHT_result
  8041  0E29  01C8               	clrf	??_DHT_result+1
  8042  0E2A  0847               	movf	??_DHT_result,w
  8043  0E2B  00D5               	movwf	DHT_result@x
  8044  0E2C  0848               	movf	??_DHT_result+1,w
  8045  0E2D  00D6               	movwf	DHT_result@x+1
  8046                           
  8047                           ;main.c: 395: umiditate=RH_byte1;
  8048  0E2E  0867               	movf	_RH_byte1,w
  8049  0E2F  00C7               	movwf	??_DHT_result
  8050  0E30  01C8               	clrf	??_DHT_result+1
  8051  0E31  0847               	movf	??_DHT_result,w
  8052  0E32  0022               	movlb	2	; select bank2
  8053  0E33  00CA               	movwf	_umiditate^(0+256)
  8054  0E34  0020               	movlb	0	; select bank0
  8055  0E35  0848               	movf	??_DHT_result+1,w
  8056  0E36  0022               	movlb	2	; select bank2
  8057  0E37  00CB               	movwf	(_umiditate+1)^(0+256)
  8058                           
  8059                           ;main.c: 396: sprintf(line2,"Um=%d",x);
  8060  0E38  30CC               	movlw	low _line2
  8061  0E39  0020               	movlb	0	; select bank0
  8062  0E3A  00BB               	movwf	sprintf@wh
  8063  0E3B  3001               	movlw	high _line2
  8064  0E3C  00BC               	movwf	sprintf@wh+1
  8065  0E3D  308C               	movlw	low (STR_10| (0+32768))
  8066  0E3E  00BD               	movwf	sprintf@f
  8067  0E3F  3090               	movlw	high (STR_10| (0+32768))
  8068  0E40  00BE               	movwf	sprintf@f+1
  8069  0E41  0856               	movf	DHT_result@x+1,w
  8070  0E42  00C0               	movwf	?_sprintf+5
  8071  0E43  0855               	movf	DHT_result@x,w
  8072  0E44  00BF               	movwf	?_sprintf+4
  8073  0E45  3189  2166         	fcall	_sprintf
  8074  0E47  0008               	return
  8075  0E48                     __end_of_DHT_result:	
  8076                           
  8077                           	psect	text36
  8078  0966                     __ptext36:	
  8079 ;; *************** function _sprintf *****************
  8080 ;; Defined at:
  8081 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprintf.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  wh              2   27[BANK0 ] PTR unsigned char 
  8084 ;;		 -> line2(2), sms_text@umid(1), sms_text@smstext(1), 
  8085 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  8086 ;;		 -> STR_10(6), STR_4(17), STR_3(17), 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  pb              4   35[BANK0 ] struct __prbuf
  8089 ;;  ap              1   34[BANK0 ] PTR void [1]
  8090 ;;		 -> ?_sprintf(2), ?_printf(2), 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  2   27[BANK0 ] int 
  8093 ;; Registers used:
  8094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8100 ;;      Params:         0       6       0       0       0       0       0       0
  8101 ;;      Locals:         0       5       0       0       0       0       0       0
  8102 ;;      Temps:          0       1       0       0       0       0       0       0
  8103 ;;      Totals:         0      12       0       0       0       0       0       0
  8104 ;;Total ram usage:       12 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    7
  8107 ;; This function calls:
  8108 ;;		__doprnt
  8109 ;; This function is called by:
  8110 ;;		_sms_text
  8111 ;;		_DHT_result
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _sprintf
  8117  0966                     _sprintf:	
  8118                           
  8119                           ;incstack = 0
  8120                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8121  0966  0020               	movlb	0	; select bank0
  8122  0967  083C               	movf	sprintf@wh+1,w
  8123  0968  00C4               	movwf	sprintf@pb+1
  8124  0969  083B               	movf	sprintf@wh,w
  8125  096A  00C3               	movwf	sprintf@pb
  8126  096B  01C5               	clrf	low ((sprintf@pb| 0+2))
  8127  096C  01C6               	clrf	(low ((sprintf@pb| 0+2))+1)
  8128  096D  303F               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
  8129  096E  00C1               	movwf	??_sprintf
  8130  096F  0841               	movf	??_sprintf,w
  8131  0970  00C2               	movwf	sprintf@ap
  8132  0971  083E               	movf	sprintf@f+1,w
  8133  0972  00AF               	movwf	__doprnt@f+1
  8134  0973  083D               	movf	sprintf@f,w
  8135  0974  00AE               	movwf	__doprnt@f
  8136  0975  3042               	movlw	(low (sprintf@ap| 0))& (0+255)
  8137  0976  00C1               	movwf	??_sprintf
  8138  0977  0841               	movf	??_sprintf,w
  8139  0978  00B0               	movwf	__doprnt@ap
  8140  0979  3043               	movlw	(low (sprintf@pb| 0))& (0+255)
  8141  097A  3182  2234         	fcall	__doprnt
  8142  097C  0020               	movlb	0	; select bank0
  8143  097D  0843               	movf	sprintf@pb,w
  8144  097E  0086               	movwf	6
  8145  097F  0844               	movf	sprintf@pb+1,w
  8146  0980  0087               	movwf	7
  8147  0981  0181               	clrf	1
  8148  0982  0008               	return
  8149  0983                     __end_of_sprintf:	
  8150                           ;	Return value of _sprintf is never used
  8151                           
  8152                           
  8153                           	psect	text37
  8154  0234                     __ptext37:	
  8155 ;; *************** function __doprnt *****************
  8156 ;; Defined at:
  8157 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  pb              1    wreg     PTR struct __prbuf
  8160 ;;		 -> sprintf@pb(4), printf@pb(4), 
  8161 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8162 ;;		 -> STR_10(6), STR_9(14), STR_8(18), STR_7(10), 
  8163 ;;		 -> STR_6(15), STR_5(3), STR_4(17), STR_3(17), 
  8164 ;;		 -> STR_2(21), STR_1(14), sms_text@umid(1), sms_text@smstext(1), 
  8165 ;;  ap              1   16[BANK0 ] PTR PTR void 
  8166 ;;		 -> sprintf@ap(1), printf@ap(1), 
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  pb              1   26[BANK0 ] PTR struct __prbuf
  8169 ;;		 -> sprintf@pb(4), printf@pb(4), 
  8170 ;;  tmpval          4    0        struct .
  8171 ;;  val             2   23[BANK0 ] unsigned int 
  8172 ;;  cp              2    0        PTR const unsigned char 
  8173 ;;  len             2    0        unsigned int 
  8174 ;;  c               1   25[BANK0 ] char 
  8175 ;;  prec            1   22[BANK0 ] char 
  8176 ;;  flag            1   21[BANK0 ] unsigned char 
  8177 ;; Return value:  Size  Location     Type
  8178 ;;                  2   14[BANK0 ] int 
  8179 ;; Registers used:
  8180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8186 ;;      Params:         0       3       0       0       0       0       0       0
  8187 ;;      Locals:         0       6       0       0       0       0       0       0
  8188 ;;      Temps:          0       4       0       0       0       0       0       0
  8189 ;;      Totals:         0      13       0       0       0       0       0       0
  8190 ;;Total ram usage:       13 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    6
  8193 ;; This function calls:
  8194 ;;		Absolute function
  8195 ;;		___lwdiv
  8196 ;;		___lwmod
  8197 ;;		_putch
  8198 ;; This function is called by:
  8199 ;;		_printf
  8200 ;;		_sprintf
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function __doprnt
  8206  0234                     __doprnt:	
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8210                           ;__doprnt@pb stored from wreg
  8211  0234  0020               	movlb	0	; select bank0
  8212  0235  00BA               	movwf	__doprnt@pb
  8213  0236                     l4963:	
  8214                           ;doprnt.c: 499: signed char c;
  8215                           ;doprnt.c: 506: signed char prec;
  8216                           ;doprnt.c: 508: unsigned char flag;
  8217                           ;doprnt.c: 523: union {
  8218                           ;doprnt.c: 524: unsigned long vd;
  8219                           ;doprnt.c: 525: double integ;
  8220                           ;doprnt.c: 526: } tmpval;
  8221                           ;doprnt.c: 528: unsigned int val;
  8222                           ;doprnt.c: 529: unsigned len;
  8223                           ;doprnt.c: 530: const char * cp;
  8224                           ;doprnt.c: 536: while(c = *f++) {
  8225                           
  8226  0236  0020               	movlb	0	; select bank0
  8227  0237  082F               	movf	__doprnt@f+1,w
  8228  0238  00B2               	movwf	??__doprnt+1
  8229  0239  082E               	movf	__doprnt@f,w
  8230  023A  00B1               	movwf	??__doprnt
  8231  023B  0AAE               	incf	__doprnt@f,f
  8232  023C  1903               	skipnz
  8233  023D  0AAF               	incf	__doprnt@f+1,f
  8234  023E  0831               	movf	??__doprnt,w
  8235  023F  0084               	movwf	4
  8236  0240  0832               	movf	??__doprnt+1,w
  8237  0241  0085               	movwf	5
  8238  0242  0800               	movf	0,w	;code access
  8239  0243  00B3               	movwf	??__doprnt+2
  8240  0244  0833               	movf	??__doprnt+2,w
  8241  0245  00B9               	movwf	__doprnt@c
  8242  0246  0839               	movf	__doprnt@c,w
  8243  0247  1903               	btfsc	3,2
  8244  0248  2B7F               	goto	l4965
  8245                           
  8246                           ;doprnt.c: 538: if(c != '%')
  8247  0249  3025               	movlw	37
  8248  024A  0639               	xorwf	__doprnt@c,w
  8249  024B  1903               	btfsc	3,2
  8250  024C  2A6B               	goto	l4905
  8251                           
  8252                           ;doprnt.c: 540: {
  8253                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  8254  024D  083A               	movf	__doprnt@pb,w
  8255  024E  3E02               	addlw	2
  8256  024F  0086               	movwf	6
  8257  0250  0187               	clrf	7
  8258  0251  0016               	moviw fsr1++
  8259  0252  0401               	iorwf	1,w
  8260  0253  1903               	btfsc	3,2
  8261  0254  2A63               	goto	l4901
  8262  0255  0839               	movf	__doprnt@c,w
  8263  0256  00B1               	movwf	??__doprnt
  8264  0257  0831               	movf	??__doprnt,w
  8265  0258  00A2               	movwf	putch@txData
  8266  0259  083A               	movf	__doprnt@pb,w
  8267  025A  3E02               	addlw	2
  8268  025B  0086               	movwf	6
  8269  025C  0187               	clrf	7
  8270  025D  3F41               	moviw [1]fsr1
  8271  025E  008A               	movwf	10
  8272  025F  3F40               	moviw [0]fsr1
  8273  0260  000A               	callw
  8274  0261  3182               	pagesel	$
  8275  0262  2A36               	goto	l4963
  8276  0263                     l4901:	
  8277  0263  0020               	movlb	0	; select bank0
  8278  0264  083A               	movf	__doprnt@pb,w
  8279  0265  0086               	movwf	6
  8280  0266  0187               	clrf	7
  8281  0267  3F40               	moviw [0]fsr1
  8282  0268  00B1               	movwf	??__doprnt
  8283  0269  3F41               	moviw [1]fsr1
  8284  026A  2A8A               	goto	L8
  8285  026B                     l4905:	
  8286                           ;doprnt.c: 542: continue;
  8287                           
  8288                           
  8289                           ;doprnt.c: 543: }
  8290                           ;doprnt.c: 548: flag = 0;
  8291  026B  01B5               	clrf	__doprnt@flag
  8292                           
  8293                           ;doprnt.c: 635: switch(c = *f++) {
  8294  026C  2A9A               	goto	l4917
  8295  026D                     l4907:	
  8296                           ;doprnt.c: 802: default:
  8297                           
  8298                           ;doprnt.c: 698: case 'i':
  8299                           ;doprnt.c: 699: break;
  8300                           
  8301                           ;doprnt.c: 697: case 'd':
  8302                           
  8303                           ;doprnt.c: 638: goto alldone;
  8304                           
  8305                           ;doprnt.c: 637: case 0:
  8306                           
  8307                           
  8308                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  8309  026D  083A               	movf	__doprnt@pb,w
  8310  026E  3E02               	addlw	2
  8311  026F  0086               	movwf	6
  8312  0270  0187               	clrf	7
  8313  0271  0016               	moviw fsr1++
  8314  0272  0401               	iorwf	1,w
  8315  0273  1903               	btfsc	3,2
  8316  0274  2A83               	goto	l4911
  8317  0275  0839               	movf	__doprnt@c,w
  8318  0276  00B1               	movwf	??__doprnt
  8319  0277  0831               	movf	??__doprnt,w
  8320  0278  00A2               	movwf	putch@txData
  8321  0279  083A               	movf	__doprnt@pb,w
  8322  027A  3E02               	addlw	2
  8323  027B  0086               	movwf	6
  8324  027C  0187               	clrf	7
  8325  027D  3F41               	moviw [1]fsr1
  8326  027E  008A               	movwf	10
  8327  027F  3F40               	moviw [0]fsr1
  8328  0280  000A               	callw
  8329  0281  3182               	pagesel	$
  8330  0282  2A36               	goto	l4963
  8331  0283                     l4911:	
  8332  0283  0020               	movlb	0	; select bank0
  8333  0284  083A               	movf	__doprnt@pb,w
  8334  0285  0086               	movwf	6
  8335  0286  0187               	clrf	7
  8336  0287  3F40               	moviw [0]fsr1
  8337  0288  00B1               	movwf	??__doprnt
  8338  0289  3F41               	moviw [1]fsr1
  8339  028A                     L8:	
  8340  028A  00B2               	movwf	??__doprnt+1
  8341  028B  0831               	movf	??__doprnt,w
  8342  028C  0086               	movwf	6
  8343  028D  0832               	movf	??__doprnt+1,w
  8344  028E  0087               	movwf	7
  8345  028F  0839               	movf	__doprnt@c,w
  8346  0290  0081               	movwf	1
  8347  0291  083A               	movf	__doprnt@pb,w
  8348  0292  0086               	movwf	6
  8349  0293  0187               	clrf	7
  8350  0294  3001               	movlw	1
  8351  0295  0781               	addwf	1,f
  8352  0296  3141               	addfsr 1,1
  8353  0297  1803               	skipnc
  8354  0298  0A81               	incf	1,f
  8355                           
  8356                           ;doprnt.c: 810: continue;
  8357  0299  2A36               	goto	l4963
  8358  029A                     l4917:	
  8359                           ;doprnt.c: 822: }
  8360                           
  8361  029A  082F               	movf	__doprnt@f+1,w
  8362  029B  00B2               	movwf	??__doprnt+1
  8363  029C  082E               	movf	__doprnt@f,w
  8364  029D  00B1               	movwf	??__doprnt
  8365  029E  0AAE               	incf	__doprnt@f,f
  8366  029F  1903               	skipnz
  8367  02A0  0AAF               	incf	__doprnt@f+1,f
  8368  02A1  0831               	movf	??__doprnt,w
  8369  02A2  0084               	movwf	4
  8370  02A3  0832               	movf	??__doprnt+1,w
  8371  02A4  0085               	movwf	5
  8372  02A5  0800               	movf	0,w	;code access
  8373  02A6  00B9               	movwf	__doprnt@c
  8374                           
  8375                           ; Switch size 1, requested type "space"
  8376                           ; Number of cases is 3, Range of values is 0 to 105
  8377                           ; switch strategies available:
  8378                           ; Name         Instructions Cycles
  8379                           ; simple_byte           10     6 (average)
  8380                           ; direct_byte          218     6 (fixed)
  8381                           ; jumptable            260     6 (fixed)
  8382                           ;	Chosen strategy is simple_byte
  8383  02A7  3A00               	xorlw	0	; case 0
  8384  02A8  1903               	skipnz
  8385  02A9  2B7F               	goto	l4965
  8386  02AA  3A64               	xorlw	100	; case 100
  8387  02AB  1903               	skipnz
  8388  02AC  2AB1               	goto	l4919
  8389  02AD  3A0D               	xorlw	13	; case 105
  8390  02AE  1903               	skipnz
  8391  02AF  2AB1               	goto	l4919
  8392  02B0  2A6D               	goto	l4907
  8393  02B1                     l4919:	
  8394                           
  8395                           ;doprnt.c: 1253: {
  8396                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8397  02B1  0830               	movf	__doprnt@ap,w
  8398  02B2  0086               	movwf	6
  8399  02B3  0187               	clrf	7
  8400  02B4  0801               	movf	1,w
  8401  02B5  0084               	movwf	4
  8402  02B6  0185               	clrf	5
  8403  02B7  3002               	movlw	2
  8404  02B8  0781               	addwf	1,f
  8405  02B9  3F00               	moviw [0]fsr0
  8406  02BA  00B7               	movwf	__doprnt@val
  8407  02BB  3F01               	moviw [1]fsr0
  8408  02BC  00B8               	movwf	__doprnt@val+1
  8409                           
  8410                           ;doprnt.c: 1261: if((int)val < 0) {
  8411  02BD  1FB8               	btfss	__doprnt@val+1,7
  8412  02BE  2AC8               	goto	l4927
  8413                           
  8414                           ;doprnt.c: 1262: flag |= 0x03;
  8415  02BF  3003               	movlw	3
  8416  02C0  00B1               	movwf	??__doprnt
  8417  02C1  0831               	movf	??__doprnt,w
  8418  02C2  04B5               	iorwf	__doprnt@flag,f
  8419                           
  8420                           ;doprnt.c: 1263: val = -val;
  8421  02C3  09B7               	comf	__doprnt@val,f
  8422  02C4  09B8               	comf	__doprnt@val+1,f
  8423  02C5  0AB7               	incf	__doprnt@val,f
  8424  02C6  1903               	skipnz
  8425  02C7  0AB8               	incf	__doprnt@val+1,f
  8426  02C8                     l4927:	
  8427                           
  8428                           ;doprnt.c: 1264: }
  8429                           ;doprnt.c: 1266: }
  8430                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8431  02C8  01B9               	clrf	__doprnt@c
  8432  02C9  0AB9               	incf	__doprnt@c,f
  8433  02CA  3005               	movlw	5
  8434  02CB  0639               	xorwf	__doprnt@c,w
  8435  02CC  1903               	btfsc	3,2
  8436  02CD  2AED               	goto	l4939
  8437  02CE                     l4933:	
  8438                           
  8439                           ;doprnt.c: 1306: if(val < dpowers[c])
  8440  02CE  0839               	movf	__doprnt@c,w
  8441  02CF  00B1               	movwf	??__doprnt
  8442  02D0  01B2               	clrf	??__doprnt+1
  8443  02D1  35B1               	lslf	??__doprnt,f
  8444  02D2  0DB2               	rlf	??__doprnt+1,f
  8445  02D3  3066               	movlw	low (_dpowers| (0+32768))
  8446  02D4  0731               	addwf	??__doprnt,w
  8447  02D5  0084               	movwf	4
  8448  02D6  3090               	movlw	high (_dpowers| (0+32768))
  8449  02D7  3D32               	addwfc	??__doprnt+1,w
  8450  02D8  0085               	movwf	5
  8451  02D9  3F00               	moviw [0]fsr0
  8452  02DA  00B3               	movwf	??__doprnt+2
  8453  02DB  3F01               	moviw [1]fsr0
  8454  02DC  00B4               	movwf	??__doprnt+3
  8455  02DD  0834               	movf	??__doprnt+3,w
  8456  02DE  0238               	subwf	__doprnt@val+1,w
  8457  02DF  1D03               	skipz
  8458  02E0  2AE3               	goto	u5875
  8459  02E1  0833               	movf	??__doprnt+2,w
  8460  02E2  0237               	subwf	__doprnt@val,w
  8461  02E3                     u5875:	
  8462  02E3  1C03               	btfss	3,0
  8463  02E4  2AED               	goto	l4939
  8464                           
  8465                           ;doprnt.c: 1307: break;
  8466  02E5  3001               	movlw	1
  8467  02E6  00B1               	movwf	??__doprnt
  8468  02E7  0831               	movf	??__doprnt,w
  8469  02E8  07B9               	addwf	__doprnt@c,f
  8470  02E9  3005               	movlw	5
  8471  02EA  0639               	xorwf	__doprnt@c,w
  8472  02EB  1D03               	btfss	3,2
  8473  02EC  2ACE               	goto	l4933
  8474  02ED                     l4939:	
  8475                           
  8476                           ;doprnt.c: 1422: {
  8477                           ;doprnt.c: 1438: if(flag & 0x03)
  8478  02ED  0835               	movf	__doprnt@flag,w
  8479  02EE  3903               	andlw	3
  8480  02EF  1903               	btfsc	3,2
  8481  02F0  2B1D               	goto	l4949
  8482                           
  8483                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  8484  02F1  083A               	movf	__doprnt@pb,w
  8485  02F2  3E02               	addlw	2
  8486  02F3  0086               	movwf	6
  8487  02F4  0187               	clrf	7
  8488  02F5  0016               	moviw fsr1++
  8489  02F6  0401               	iorwf	1,w
  8490  02F7  1903               	btfsc	3,2
  8491  02F8  2B07               	goto	l4945
  8492  02F9  302D               	movlw	45
  8493  02FA  00B1               	movwf	??__doprnt
  8494  02FB  0831               	movf	??__doprnt,w
  8495  02FC  00A2               	movwf	putch@txData
  8496  02FD  083A               	movf	__doprnt@pb,w
  8497  02FE  3E02               	addlw	2
  8498  02FF  0086               	movwf	6
  8499  0300  0187               	clrf	7
  8500  0301  3F41               	moviw [1]fsr1
  8501  0302  008A               	movwf	10
  8502  0303  3F40               	moviw [0]fsr1
  8503  0304  000A               	callw
  8504  0305  3182               	pagesel	$
  8505  0306  2B1D               	goto	l4949
  8506  0307                     l4945:	
  8507  0307  0020               	movlb	0	; select bank0
  8508  0308  083A               	movf	__doprnt@pb,w
  8509  0309  0086               	movwf	6
  8510  030A  0187               	clrf	7
  8511  030B  3F40               	moviw [0]fsr1
  8512  030C  00B1               	movwf	??__doprnt
  8513  030D  3F41               	moviw [1]fsr1
  8514  030E  00B2               	movwf	??__doprnt+1
  8515  030F  0831               	movf	??__doprnt,w
  8516  0310  0086               	movwf	6
  8517  0311  0832               	movf	??__doprnt+1,w
  8518  0312  0087               	movwf	7
  8519  0313  302D               	movlw	45
  8520  0314  0081               	movwf	1
  8521  0315  083A               	movf	__doprnt@pb,w
  8522  0316  0086               	movwf	6
  8523  0317  0187               	clrf	7
  8524  0318  3001               	movlw	1
  8525  0319  0781               	addwf	1,f
  8526  031A  3141               	addfsr 1,1
  8527  031B  1803               	skipnc
  8528  031C  0A81               	incf	1,f
  8529  031D                     l4949:	
  8530                           
  8531                           ;doprnt.c: 1469: }
  8532                           ;doprnt.c: 1472: prec = c;
  8533  031D  0020               	movlb	0	; select bank0
  8534  031E  0839               	movf	__doprnt@c,w
  8535  031F  00B1               	movwf	??__doprnt
  8536  0320  0831               	movf	??__doprnt,w
  8537  0321  00B6               	movwf	__doprnt@prec
  8538  0322                     l4961:	
  8539                           ;doprnt.c: 1474: while(prec--) {
  8540                           
  8541  0322  30FF               	movlw	255
  8542  0323  0020               	movlb	0	; select bank0
  8543  0324  00B1               	movwf	??__doprnt
  8544  0325  0831               	movf	??__doprnt,w
  8545  0326  07B6               	addwf	__doprnt@prec,f
  8546  0327  0A36               	incf	__doprnt@prec,w
  8547  0328  1903               	btfsc	3,2
  8548  0329  2A36               	goto	l4963
  8549                           
  8550                           ;doprnt.c: 1478: {
  8551                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8552  032A  300A               	movlw	10
  8553  032B  00A8               	movwf	___lwmod@divisor
  8554  032C  3000               	movlw	0
  8555  032D  00A9               	movwf	___lwmod@divisor+1
  8556  032E  0836               	movf	__doprnt@prec,w
  8557  032F  00B1               	movwf	??__doprnt
  8558  0330  01B2               	clrf	??__doprnt+1
  8559  0331  35B1               	lslf	??__doprnt,f
  8560  0332  0DB2               	rlf	??__doprnt+1,f
  8561  0333  3066               	movlw	low (_dpowers| (0+32768))
  8562  0334  0731               	addwf	??__doprnt,w
  8563  0335  0084               	movwf	4
  8564  0336  3090               	movlw	high (_dpowers| (0+32768))
  8565  0337  3D32               	addwfc	??__doprnt+1,w
  8566  0338  0085               	movwf	5
  8567  0339  3F00               	moviw [0]fsr0
  8568  033A  00A0               	movwf	___lwdiv@divisor
  8569  033B  3F01               	moviw [1]fsr0
  8570  033C  00A1               	movwf	___lwdiv@divisor+1
  8571  033D  0838               	movf	__doprnt@val+1,w
  8572  033E  00A3               	movwf	___lwdiv@dividend+1
  8573  033F  0837               	movf	__doprnt@val,w
  8574  0340  00A2               	movwf	___lwdiv@dividend
  8575  0341  318A  2285  3182   	fcall	___lwdiv
  8576  0344  0020               	movlb	0	; select bank0
  8577  0345  0821               	movf	?___lwdiv+1,w
  8578  0346  00AB               	movwf	___lwmod@dividend+1
  8579  0347  0820               	movf	?___lwdiv,w
  8580  0348  00AA               	movwf	___lwmod@dividend
  8581  0349  318A  222A  3182   	fcall	___lwmod
  8582  034C  0020               	movlb	0	; select bank0
  8583  034D  0828               	movf	?___lwmod,w
  8584  034E  3E30               	addlw	48
  8585  034F  00B3               	movwf	??__doprnt+2
  8586  0350  0833               	movf	??__doprnt+2,w
  8587  0351  00B9               	movwf	__doprnt@c
  8588                           
  8589                           ;doprnt.c: 1523: }
  8590                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  8591  0352  083A               	movf	__doprnt@pb,w
  8592  0353  3E02               	addlw	2
  8593  0354  0086               	movwf	6
  8594  0355  0187               	clrf	7
  8595  0356  0016               	moviw fsr1++
  8596  0357  0401               	iorwf	1,w
  8597  0358  1903               	btfsc	3,2
  8598  0359  2B68               	goto	l4957
  8599  035A  0839               	movf	__doprnt@c,w
  8600  035B  00B1               	movwf	??__doprnt
  8601  035C  0831               	movf	??__doprnt,w
  8602  035D  00A2               	movwf	putch@txData
  8603  035E  083A               	movf	__doprnt@pb,w
  8604  035F  3E02               	addlw	2
  8605  0360  0086               	movwf	6
  8606  0361  0187               	clrf	7
  8607  0362  3F41               	moviw [1]fsr1
  8608  0363  008A               	movwf	10
  8609  0364  3F40               	moviw [0]fsr1
  8610  0365  000A               	callw
  8611  0366  3182               	pagesel	$
  8612  0367  2B22               	goto	l4961
  8613  0368                     l4957:	
  8614  0368  0020               	movlb	0	; select bank0
  8615  0369  083A               	movf	__doprnt@pb,w
  8616  036A  0086               	movwf	6
  8617  036B  0187               	clrf	7
  8618  036C  3F40               	moviw [0]fsr1
  8619  036D  00B1               	movwf	??__doprnt
  8620  036E  3F41               	moviw [1]fsr1
  8621  036F  00B2               	movwf	??__doprnt+1
  8622  0370  0831               	movf	??__doprnt,w
  8623  0371  0086               	movwf	6
  8624  0372  0832               	movf	??__doprnt+1,w
  8625  0373  0087               	movwf	7
  8626  0374  0839               	movf	__doprnt@c,w
  8627  0375  0081               	movwf	1
  8628  0376  083A               	movf	__doprnt@pb,w
  8629  0377  0086               	movwf	6
  8630  0378  0187               	clrf	7
  8631  0379  3001               	movlw	1
  8632  037A  0781               	addwf	1,f
  8633  037B  3141               	addfsr 1,1
  8634  037C  1803               	skipnc
  8635  037D  0A81               	incf	1,f
  8636  037E  2B22               	goto	l4961
  8637  037F                     l4965:	
  8638                           ;doprnt.c: 1525: }
  8639                           ;doprnt.c: 1533: }
  8640                           ;doprnt.c: 1535: alldone:
  8641                           
  8642                           
  8643                           ;doprnt.c: 1540: return 0;
  8644  037F  01AE               	clrf	?__doprnt
  8645  0380  01AF               	clrf	?__doprnt+1
  8646  0381  0008               	return
  8647  0382                     __end_of__doprnt:	
  8648                           
  8649                           	psect	text38
  8650  084D                     __ptext38:	
  8651 ;; *************** function _putch *****************
  8652 ;; Defined at:
  8653 ;;		line 161 in file "mcc_generated_files/eusart.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;  txData          1    2[BANK0 ] unsigned char 
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;		None
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8667 ;;      Params:         0       1       0       0       0       0       0       0
  8668 ;;      Locals:         0       0       0       0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0       0
  8670 ;;      Totals:         0       1       0       0       0       0       0       0
  8671 ;;Total ram usage:        1 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    5
  8674 ;; This function calls:
  8675 ;;		_EUSART_Write
  8676 ;; This function is called by:
  8677 ;;		_sms_text
  8678 ;;		_int_gsm
  8679 ;;		_printf
  8680 ;;		__doprnt
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function _putch
  8686  084D                     _putch:	
  8687                           
  8688                           ;eusart.c: 163: EUSART_Write(txData);
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8692  084D  0020               	movlb	0	; select bank0
  8693  084E  0822               	movf	putch@txData,w
  8694  084F  318A  2203         	fcall	_EUSART_Write
  8695  0851  0008               	return
  8696  0852                     __end_of_putch:	
  8697                           
  8698                           	psect	text39
  8699  0A03                     __ptext39:	
  8700 ;; *************** function _EUSART_Write *****************
  8701 ;; Defined at:
  8702 ;;		line 133 in file "mcc_generated_files/eusart.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  txData          1    wreg     unsigned char 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  txData          1    1[BANK0 ] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8716 ;;      Params:         0       0       0       0       0       0       0       0
  8717 ;;      Locals:         0       1       0       0       0       0       0       0
  8718 ;;      Temps:          0       1       0       0       0       0       0       0
  8719 ;;      Totals:         0       2       0       0       0       0       0       0
  8720 ;;Total ram usage:        2 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    4
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_putch
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function _EUSART_Write
  8732  0A03                     _EUSART_Write:	
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8736                           ;EUSART_Write@txData stored from wreg
  8737  0A03  0020               	movlb	0	; select bank0
  8738  0A04  00A1               	movwf	EUSART_Write@txData
  8739  0A05                     l2563:	
  8740                           ;eusart.c: 136: {
  8741                           
  8742                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  8743                           
  8744  0A05  0022               	movlb	2	; select bank2
  8745  0A06  086D               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  8746  0A07  1903               	btfsc	3,2
  8747  0A08  2A05               	goto	l2563
  8748                           
  8749                           ;eusart.c: 137: }
  8750                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  8751  0A09  0021               	movlb	1	; select bank1
  8752  0A0A  1A11               	btfsc	17,4	;volatile
  8753  0A0B  2A11               	goto	l131
  8754                           
  8755                           ;eusart.c: 140: {
  8756                           ;eusart.c: 141: TXREG = txData;
  8757  0A0C  0020               	movlb	0	; select bank0
  8758  0A0D  0821               	movf	EUSART_Write@txData,w
  8759  0A0E  0023               	movlb	3	; select bank3
  8760  0A0F  009A               	movwf	26	;volatile
  8761                           
  8762                           ;eusart.c: 142: }
  8763  0A10  2A27               	goto	l2577
  8764  0A11                     l131:	
  8765                           
  8766                           ;eusart.c: 143: else
  8767                           ;eusart.c: 144: {
  8768                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  8769  0A11  1211               	bcf	17,4	;volatile
  8770                           
  8771                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  8772  0A12  0020               	movlb	0	; select bank0
  8773  0A13  0821               	movf	EUSART_Write@txData,w
  8774  0A14  00A0               	movwf	??_EUSART_Write
  8775  0A15  087D               	movf	_eusartTxHead,w
  8776  0A16  3ED6               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8777  0A17  0086               	movwf	6
  8778  0A18  3001               	movlw	1	; select bank3/4
  8779  0A19  0087               	movwf	7
  8780  0A1A  0820               	movf	??_EUSART_Write,w
  8781  0A1B  0081               	movwf	1
  8782  0A1C  3001               	movlw	1
  8783  0A1D  00A0               	movwf	??_EUSART_Write
  8784  0A1E  0820               	movf	??_EUSART_Write,w
  8785  0A1F  07FD               	addwf	_eusartTxHead,f	;volatile
  8786                           
  8787                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8788  0A20  3008               	movlw	8
  8789  0A21  027D               	subwf	_eusartTxHead,w	;volatile
  8790  0A22  1803               	btfsc	3,0
  8791                           
  8792                           ;eusart.c: 148: {
  8793                           ;eusart.c: 149: eusartTxHead = 0;
  8794  0A23  01FD               	clrf	_eusartTxHead	;volatile
  8795                           
  8796                           ;eusart.c: 150: }
  8797                           ;eusart.c: 151: eusartTxBufferRemaining--;
  8798  0A24  3001               	movlw	1
  8799  0A25  0022               	movlb	2	; select bank2
  8800  0A26  02ED               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  8801  0A27                     l2577:	
  8802                           
  8803                           ;eusart.c: 152: }
  8804                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  8805  0A27  0021               	movlb	1	; select bank1
  8806  0A28  1611               	bsf	17,4	;volatile
  8807  0A29  0008               	return
  8808  0A2A                     __end_of_EUSART_Write:	
  8809                           
  8810                           	psect	text40
  8811  0A2A                     __ptext40:	
  8812 ;; *************** function ___lwmod *****************
  8813 ;; Defined at:
  8814 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;  divisor         2    8[BANK0 ] unsigned int 
  8817 ;;  dividend        2   10[BANK0 ] unsigned int 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  counter         1   13[BANK0 ] unsigned char 
  8820 ;; Return value:  Size  Location     Type
  8821 ;;                  2    8[BANK0 ] unsigned int 
  8822 ;; Registers used:
  8823 ;;		wreg, status,2, status,0
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8829 ;;      Params:         0       4       0       0       0       0       0       0
  8830 ;;      Locals:         0       1       0       0       0       0       0       0
  8831 ;;      Temps:          0       1       0       0       0       0       0       0
  8832 ;;      Totals:         0       6       0       0       0       0       0       0
  8833 ;;Total ram usage:        6 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    4
  8836 ;; This function calls:
  8837 ;;		Nothing
  8838 ;; This function is called by:
  8839 ;;		__doprnt
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function ___lwmod
  8845  0A2A                     ___lwmod:	
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8849  0A2A  0020               	movlb	0	; select bank0
  8850  0A2B  0828               	movf	___lwmod@divisor,w
  8851  0A2C  0429               	iorwf	___lwmod@divisor+1,w
  8852  0A2D  1903               	btfsc	3,2
  8853  0A2E  2A52               	goto	l2625
  8854  0A2F  01AD               	clrf	___lwmod@counter
  8855  0A30  0AAD               	incf	___lwmod@counter,f
  8856  0A31                     l2615:	
  8857  0A31  1BA9               	btfsc	___lwmod@divisor+1,7
  8858  0A32  2A3D               	goto	l2617
  8859  0A33  3001               	movlw	1
  8860  0A34                     u2375:	
  8861  0A34  35A8               	lslf	___lwmod@divisor,f
  8862  0A35  0DA9               	rlf	___lwmod@divisor+1,f
  8863  0A36  0B89               	decfsz	9,f
  8864  0A37  2A34               	goto	u2375
  8865  0A38  3001               	movlw	1
  8866  0A39  00AC               	movwf	??___lwmod
  8867  0A3A  082C               	movf	??___lwmod,w
  8868  0A3B  07AD               	addwf	___lwmod@counter,f
  8869  0A3C  2A31               	goto	l2615
  8870  0A3D                     l2617:	
  8871  0A3D  0829               	movf	___lwmod@divisor+1,w
  8872  0A3E  022B               	subwf	___lwmod@dividend+1,w
  8873  0A3F  1D03               	skipz
  8874  0A40  2A43               	goto	u2395
  8875  0A41  0828               	movf	___lwmod@divisor,w
  8876  0A42  022A               	subwf	___lwmod@dividend,w
  8877  0A43                     u2395:	
  8878  0A43  1C03               	skipc
  8879  0A44  2A49               	goto	l2621
  8880  0A45  0828               	movf	___lwmod@divisor,w
  8881  0A46  02AA               	subwf	___lwmod@dividend,f
  8882  0A47  0829               	movf	___lwmod@divisor+1,w
  8883  0A48  3BAB               	subwfb	___lwmod@dividend+1,f
  8884  0A49                     l2621:	
  8885  0A49  3001               	movlw	1
  8886  0A4A                     u2405:	
  8887  0A4A  36A9               	lsrf	___lwmod@divisor+1,f
  8888  0A4B  0CA8               	rrf	___lwmod@divisor,f
  8889  0A4C  0B89               	decfsz	9,f
  8890  0A4D  2A4A               	goto	u2405
  8891  0A4E  3001               	movlw	1
  8892  0A4F  02AD               	subwf	___lwmod@counter,f
  8893  0A50  1D03               	btfss	3,2
  8894  0A51  2A3D               	goto	l2617
  8895  0A52                     l2625:	
  8896  0A52  082B               	movf	___lwmod@dividend+1,w
  8897  0A53  00A9               	movwf	?___lwmod+1
  8898  0A54  082A               	movf	___lwmod@dividend,w
  8899  0A55  00A8               	movwf	?___lwmod
  8900  0A56  0008               	return
  8901  0A57                     __end_of___lwmod:	
  8902                           
  8903                           	psect	text41
  8904  0A85                     __ptext41:	
  8905 ;; *************** function ___lwdiv *****************
  8906 ;; Defined at:
  8907 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  divisor         2    0[BANK0 ] unsigned int 
  8910 ;;  dividend        2    2[BANK0 ] unsigned int 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  quotient        2    5[BANK0 ] unsigned int 
  8913 ;;  counter         1    7[BANK0 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  2    0[BANK0 ] unsigned int 
  8916 ;; Registers used:
  8917 ;;		wreg, status,2, status,0
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8923 ;;      Params:         0       4       0       0       0       0       0       0
  8924 ;;      Locals:         0       3       0       0       0       0       0       0
  8925 ;;      Temps:          0       1       0       0       0       0       0       0
  8926 ;;      Totals:         0       8       0       0       0       0       0       0
  8927 ;;Total ram usage:        8 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    4
  8930 ;; This function calls:
  8931 ;;		Nothing
  8932 ;; This function is called by:
  8933 ;;		__doprnt
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function ___lwdiv
  8939  0A85                     ___lwdiv:	
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8943  0A85  0020               	movlb	0	; select bank0
  8944  0A86  01A5               	clrf	___lwdiv@quotient
  8945  0A87  01A6               	clrf	___lwdiv@quotient+1
  8946  0A88  0820               	movf	___lwdiv@divisor,w
  8947  0A89  0421               	iorwf	___lwdiv@divisor+1,w
  8948  0A8A  1903               	btfsc	3,2
  8949  0A8B  2AB5               	goto	l2603
  8950  0A8C  01A7               	clrf	___lwdiv@counter
  8951  0A8D  0AA7               	incf	___lwdiv@counter,f
  8952  0A8E                     l2591:	
  8953  0A8E  1BA1               	btfsc	___lwdiv@divisor+1,7
  8954  0A8F  2A9A               	goto	l2593
  8955  0A90  3001               	movlw	1
  8956  0A91                     u2305:	
  8957  0A91  35A0               	lslf	___lwdiv@divisor,f
  8958  0A92  0DA1               	rlf	___lwdiv@divisor+1,f
  8959  0A93  0B89               	decfsz	9,f
  8960  0A94  2A91               	goto	u2305
  8961  0A95  3001               	movlw	1
  8962  0A96  00A4               	movwf	??___lwdiv
  8963  0A97  0824               	movf	??___lwdiv,w
  8964  0A98  07A7               	addwf	___lwdiv@counter,f
  8965  0A99  2A8E               	goto	l2591
  8966  0A9A                     l2593:	
  8967  0A9A  3001               	movlw	1
  8968  0A9B                     u2325:	
  8969  0A9B  35A5               	lslf	___lwdiv@quotient,f
  8970  0A9C  0DA6               	rlf	___lwdiv@quotient+1,f
  8971  0A9D  0B89               	decfsz	9,f
  8972  0A9E  2A9B               	goto	u2325
  8973  0A9F  0821               	movf	___lwdiv@divisor+1,w
  8974  0AA0  0223               	subwf	___lwdiv@dividend+1,w
  8975  0AA1  1D03               	skipz
  8976  0AA2  2AA5               	goto	u2335
  8977  0AA3  0820               	movf	___lwdiv@divisor,w
  8978  0AA4  0222               	subwf	___lwdiv@dividend,w
  8979  0AA5                     u2335:	
  8980  0AA5  1C03               	skipc
  8981  0AA6  2AAC               	goto	l2599
  8982  0AA7  0820               	movf	___lwdiv@divisor,w
  8983  0AA8  02A2               	subwf	___lwdiv@dividend,f
  8984  0AA9  0821               	movf	___lwdiv@divisor+1,w
  8985  0AAA  3BA3               	subwfb	___lwdiv@dividend+1,f
  8986  0AAB  1425               	bsf	___lwdiv@quotient,0
  8987  0AAC                     l2599:	
  8988  0AAC  3001               	movlw	1
  8989  0AAD                     u2345:	
  8990  0AAD  36A1               	lsrf	___lwdiv@divisor+1,f
  8991  0AAE  0CA0               	rrf	___lwdiv@divisor,f
  8992  0AAF  0B89               	decfsz	9,f
  8993  0AB0  2AAD               	goto	u2345
  8994  0AB1  3001               	movlw	1
  8995  0AB2  02A7               	subwf	___lwdiv@counter,f
  8996  0AB3  1D03               	btfss	3,2
  8997  0AB4  2A9A               	goto	l2593
  8998  0AB5                     l2603:	
  8999  0AB5  0826               	movf	___lwdiv@quotient+1,w
  9000  0AB6  00A1               	movwf	?___lwdiv+1
  9001  0AB7  0825               	movf	___lwdiv@quotient,w
  9002  0AB8  00A0               	movwf	?___lwdiv
  9003  0AB9  0008               	return
  9004  0ABA                     __end_of___lwdiv:	
  9005                           
  9006                           	psect	text42
  9007  0ABA                     __ptext42:	
  9008 ;; *************** function _ReadData *****************
  9009 ;; Defined at:
  9010 ;;		line 367 in file "main.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  j               1    3[BANK0 ] unsigned char 
  9015 ;;  i               1    2[BANK0 ] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  1    wreg      unsigned char 
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9025 ;;      Params:         0       0       0       0       0       0       0       0
  9026 ;;      Locals:         0       2       0       0       0       0       0       0
  9027 ;;      Temps:          0       2       0       0       0       0       0       0
  9028 ;;      Totals:         0       4       0       0       0       0       0       0
  9029 ;;Total ram usage:        4 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    4
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_DHT_result
  9036 ;; This function uses a non-reentrant model
  9037 ;;
  9038                           
  9039                           
  9040                           ;psect for function _ReadData
  9041  0ABA                     _ReadData:	
  9042                           
  9043                           ;main.c: 369: char i, j;
  9044                           ;main.c: 370: for(j = 0; j < 8; j++){
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _ReadData: [wreg+status,2+status,0]
  9048  0ABA  0020               	movlb	0	; select bank0
  9049  0ABB  01A3               	clrf	ReadData@j
  9050  0ABC  3008               	movlw	8
  9051  0ABD  0223               	subwf	ReadData@j,w
  9052  0ABE  1803               	btfsc	3,0
  9053  0ABF  2AF0               	goto	l2881
  9054  0AC0                     l498:	
  9055                           ;main.c: 371: while(!PORTDbits.RD2 );
  9056                           
  9057  0AC0  1D0F               	btfss	15,2	;volatile
  9058  0AC1  2AC0               	goto	l498
  9059                           
  9060                           ;main.c: 372: _delay((unsigned long)((30)*(18432000/4000000.0)));
  9061  0AC2  302E               	movlw	46
  9062  0AC3                     u6357:	
  9063  0AC3  0B89               	decfsz	9,f
  9064  0AC4  2AC3               	goto	u6357
  9065                           
  9066                           ;main.c: 373: if(PORTDbits.RD2 == 0)
  9067  0AC5  0020               	movlb	0	; select bank0
  9068  0AC6  190F               	btfsc	15,2	;volatile
  9069  0AC7  2AD8               	goto	l2875
  9070                           
  9071                           ;main.c: 374: i&= ~(1<<(7 - j));
  9072  0AC8  3001               	movlw	1
  9073  0AC9  00A0               	movwf	??_ReadData
  9074  0ACA  0323               	decf	ReadData@j,w
  9075  0ACB  3AFF               	xorlw	255
  9076  0ACC  3E07               	addlw	7
  9077  0ACD  0A89               	incf	9,f
  9078  0ACE  2AD0               	goto	u2754
  9079  0ACF                     u2755:	
  9080  0ACF  35A0               	lslf	??_ReadData,f
  9081  0AD0                     u2754:	
  9082  0AD0  0B89               	decfsz	9,f
  9083  0AD1  2ACF               	goto	u2755
  9084  0AD2  0820               	movf	??_ReadData,w
  9085  0AD3  3AFF               	xorlw	255
  9086  0AD4  00A1               	movwf	??_ReadData+1
  9087  0AD5  0821               	movf	??_ReadData+1,w
  9088  0AD6  05A2               	andwf	ReadData@i,f
  9089  0AD7  2AE8               	goto	l2877
  9090  0AD8                     l2875:	
  9091                           
  9092                           ;main.c: 375: else {i|= (1 << (7 - j));
  9093  0AD8  3001               	movlw	1
  9094  0AD9  00A0               	movwf	??_ReadData
  9095  0ADA  0323               	decf	ReadData@j,w
  9096  0ADB  3AFF               	xorlw	255
  9097  0ADC  3E07               	addlw	7
  9098  0ADD  0A89               	incf	9,f
  9099  0ADE  2AE0               	goto	u2764
  9100  0ADF                     u2765:	
  9101  0ADF  35A0               	lslf	??_ReadData,f
  9102  0AE0                     u2764:	
  9103  0AE0  0B89               	decfsz	9,f
  9104  0AE1  2ADF               	goto	u2765
  9105  0AE2  0820               	movf	??_ReadData,w
  9106  0AE3  00A1               	movwf	??_ReadData+1
  9107  0AE4  0821               	movf	??_ReadData+1,w
  9108  0AE5  04A2               	iorwf	ReadData@i,f
  9109  0AE6                     l503:	
  9110                           ;main.c: 376: while(PORTDbits.RD2 );}
  9111                           
  9112  0AE6  190F               	btfsc	15,2	;volatile
  9113  0AE7  2AE6               	goto	l503
  9114  0AE8                     l2877:	
  9115  0AE8  3001               	movlw	1
  9116  0AE9  00A0               	movwf	??_ReadData
  9117  0AEA  0820               	movf	??_ReadData,w
  9118  0AEB  07A3               	addwf	ReadData@j,f
  9119  0AEC  3008               	movlw	8
  9120  0AED  0223               	subwf	ReadData@j,w
  9121  0AEE  1C03               	skipc
  9122  0AEF  2AC0               	goto	l498
  9123  0AF0                     l2881:	
  9124                           
  9125                           ;main.c: 377: }
  9126                           ;main.c: 378: return i;
  9127  0AF0  0822               	movf	ReadData@i,w
  9128  0AF1  0008               	return
  9129  0AF2                     __end_of_ReadData:	
  9130                           
  9131                           	psect	text43
  9132  08CB                     __ptext43:	
  9133 ;; *************** function _CheckResponse *****************
  9134 ;; Defined at:
  9135 ;;		line 357 in file "main.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9149 ;;      Params:         0       0       0       0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    4
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_main
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function _CheckResponse
  9165  08CB                     _CheckResponse:	
  9166                           
  9167                           ;main.c: 359: Check = 0;
  9168                           
  9169                           ;incstack = 0
  9170                           ; Regs used in _CheckResponse: [wreg+status,2]
  9171  08CB  0020               	movlb	0	; select bank0
  9172  08CC  01EA               	clrf	_Check
  9173                           
  9174                           ;main.c: 360: _delay((unsigned long)((40)*(18432000/4000000.0)));
  9175  08CD  303D               	movlw	61
  9176  08CE                     u6367:	
  9177  08CE  0B89               	decfsz	9,f
  9178  08CF  28CE               	goto	u6367
  9179  08D0  0000               	nop
  9180                           
  9181                           ;main.c: 361: if (PORTDbits.RD2 == 0){
  9182  08D1  0020               	movlb	0	; select bank0
  9183  08D2  190F               	btfsc	15,2	;volatile
  9184  08D3  0008               	return
  9185                           
  9186                           ;main.c: 362: _delay((unsigned long)((80)*(18432000/4000000.0)));
  9187  08D4  307A               	movlw	122
  9188  08D5                     u6377:	
  9189  08D5  0B89               	decfsz	9,f
  9190  08D6  28D5               	goto	u6377
  9191  08D7  3200               	nop2
  9192                           
  9193                           ;main.c: 363: if (PORTDbits.RD2 == 1) Check = 1; _delay((unsigned long)((40)*(18432000/4
      +                          000000.0)));}
  9194  08D8  0020               	movlb	0	; select bank0
  9195  08D9  1D0F               	btfss	15,2	;volatile
  9196  08DA  28DD               	goto	l3611
  9197  08DB  01EA               	clrf	_Check
  9198  08DC  0AEA               	incf	_Check,f
  9199  08DD                     l3611:	
  9200  08DD  303D               	movlw	61
  9201  08DE                     u6387:	
  9202  08DE  0B89               	decfsz	9,f
  9203  08DF  28DE               	goto	u6387
  9204  08E0  0000               	nop
  9205  08E1  0008               	return
  9206  08E2                     __end_of_CheckResponse:	
  9207                           
  9208                           	psect	text44
  9209  0840                     __ptext44:	
  9210 ;; *************** function _ADC_StartConversion *****************
  9211 ;; Defined at:
  9212 ;;		line 92 in file "mcc_generated_files/adc.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      void 
  9219 ;; Registers used:
  9220 ;;		None
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9226 ;;      Params:         0       0       0       0       0       0       0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    4
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		_main
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _ADC_StartConversion
  9242  0840                     _ADC_StartConversion:	
  9243                           
  9244                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _ADC_StartConversion: []
  9248  0840  0021               	movlb	1	; select bank1
  9249  0841  149D               	bsf	29,1	;volatile
  9250  0842  0008               	return
  9251  0843                     __end_of_ADC_StartConversion:	
  9252                           
  9253                           	psect	intentry
  9254  0004                     __pintentry:	
  9255 ;; *************** function _INTERRUPT_InterruptManager *****************
  9256 ;; Defined at:
  9257 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9271 ;;      Params:         0       0       0       0       0       0       0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0
  9273 ;;      Temps:          1       0       0       0       0       0       0       0
  9274 ;;      Totals:         1       0       0       0       0       0       0       0
  9275 ;;Total ram usage:        1 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    3
  9278 ;; This function calls:
  9279 ;;		_ADC_ISR
  9280 ;;		_EUSART_Receive_ISR
  9281 ;;		_EUSART_Transmit_ISR
  9282 ;;		_TMR1_ISR
  9283 ;; This function is called by:
  9284 ;;		Interrupt level 1
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288  0004                     _INTERRUPT_InterruptManager:	
  9289                           
  9290                           ;incstack = 0
  9291  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9292                           
  9293                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9294  0005  3180               	pagesel	$
  9295  0006  0020               	movlb	0	; select bank0
  9296  0007  087F               	movf	127,w
  9297  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  9298                           
  9299                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  9300  0009  1F0B               	btfss	11,6	;volatile
  9301  000A  2815               	goto	i1l179
  9302  000B  0021               	movlb	1	; select bank1
  9303  000C  1F11               	btfss	17,6	;volatile
  9304  000D  2815               	goto	i1l179
  9305  000E  0020               	movlb	0	; select bank0
  9306  000F  1F11               	btfss	17,6	;volatile
  9307  0010  2815               	goto	i1l179
  9308                           
  9309                           ;interrupt_manager.c: 55: {
  9310                           ;interrupt_manager.c: 56: ADC_ISR();
  9311  0011  3187  27F3  3180   	fcall	_ADC_ISR
  9312                           
  9313                           ;interrupt_manager.c: 57: }
  9314  0014  2837               	goto	i1l187
  9315  0015                     i1l179:	
  9316                           
  9317                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  9318  0015  1F0B               	btfss	11,6	;volatile
  9319  0016  2821               	goto	i1l181
  9320  0017  0021               	movlb	1	; select bank1
  9321  0018  1E11               	btfss	17,4	;volatile
  9322  0019  2821               	goto	i1l181
  9323  001A  0020               	movlb	0	; select bank0
  9324  001B  1E11               	btfss	17,4	;volatile
  9325  001C  2821               	goto	i1l181
  9326                           
  9327                           ;interrupt_manager.c: 59: {
  9328                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  9329  001D  3189  21A0  3180   	fcall	_EUSART_Transmit_ISR
  9330                           
  9331                           ;interrupt_manager.c: 61: }
  9332  0020  2837               	goto	i1l187
  9333  0021                     i1l181:	
  9334                           
  9335                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9336  0021  1F0B               	btfss	11,6	;volatile
  9337  0022  282D               	goto	i1l183
  9338  0023  0021               	movlb	1	; select bank1
  9339  0024  1E91               	btfss	17,5	;volatile
  9340  0025  282D               	goto	i1l183
  9341  0026  0020               	movlb	0	; select bank0
  9342  0027  1E91               	btfss	17,5	;volatile
  9343  0028  282D               	goto	i1l183
  9344                           
  9345                           ;interrupt_manager.c: 63: {
  9346                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  9347  0029  318C  2436  3180   	fcall	_EUSART_Receive_ISR
  9348                           
  9349                           ;interrupt_manager.c: 65: }
  9350  002C  2837               	goto	i1l187
  9351  002D                     i1l183:	
  9352                           
  9353                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  9354  002D  1F0B               	btfss	11,6	;volatile
  9355  002E  2837               	goto	i1l187
  9356  002F  0021               	movlb	1	; select bank1
  9357  0030  1C11               	btfss	17,0	;volatile
  9358  0031  2837               	goto	i1l187
  9359  0032  0020               	movlb	0	; select bank0
  9360  0033  1C11               	btfss	17,0	;volatile
  9361  0034  2837               	goto	i1l187
  9362                           
  9363                           ;interrupt_manager.c: 67: {
  9364                           ;interrupt_manager.c: 68: TMR1_ISR();
  9365  0035  3189  2149         	fcall	_TMR1_ISR
  9366  0037                     i1l187:	
  9367                           ;interrupt_manager.c: 70: else
  9368                           ;interrupt_manager.c: 71: {
  9369                           
  9370                           ;interrupt_manager.c: 69: }
  9371                           
  9372  0037  0879               	movf	??_INTERRUPT_InterruptManager,w
  9373  0038  0020               	movlb	0	; select bank0
  9374  0039  00FF               	movwf	127
  9375  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9376  003B  0009               	retfie
  9377  003C                     __end_of_INTERRUPT_InterruptManager:	
  9378                           
  9379                           	psect	text46
  9380  0949                     __ptext46:	
  9381 ;; *************** function _TMR1_ISR *****************
  9382 ;; Defined at:
  9383 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;		None
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      void 
  9390 ;; Registers used:
  9391 ;;		wreg, status,2, status,0, pclath, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9397 ;;      Params:         0       0       0       0       0       0       0       0
  9398 ;;      Locals:         0       0       0       0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0       0
  9400 ;;      Totals:         0       0       0       0       0       0       0       0
  9401 ;;Total ram usage:        0 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    2
  9404 ;; This function calls:
  9405 ;;		_TMR1_CallBack
  9406 ;; This function is called by:
  9407 ;;		_INTERRUPT_InterruptManager
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           
  9412                           ;psect for function _TMR1_ISR
  9413  0949                     _TMR1_ISR:	
  9414                           
  9415                           ;tmr1.c: 173: static volatile unsigned int CountCallBack = 0;
  9416                           ;tmr1.c: 176: PIR1bits.TMR1IF = 0;
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  9420  0949  0020               	movlb	0	; select bank0
  9421  094A  1011               	bcf	17,0	;volatile
  9422                           
  9423                           ;tmr1.c: 178: TMR1H = (timer1ReloadVal >> 8);
  9424  094B  086F               	movf	_timer1ReloadVal+1,w	;volatile
  9425  094C  0097               	movwf	23	;volatile
  9426                           
  9427                           ;tmr1.c: 179: TMR1L = timer1ReloadVal;
  9428  094D  086E               	movf	_timer1ReloadVal,w	;volatile
  9429  094E  0096               	movwf	22	;volatile
  9430                           
  9431                           ;tmr1.c: 180: flag_1_ms=1;
  9432  094F  3001               	movlw	1
  9433  0950  0023               	movlb	3	; select bank3
  9434  0951  00E9               	movwf	_flag_1_ms^(0+384)
  9435  0952  3000               	movlw	0
  9436  0953  00EA               	movwf	(_flag_1_ms^(0+384)+1)
  9437                           
  9438                           ;tmr1.c: 182: if (++CountCallBack >= 10)
  9439  0954  3001               	movlw	1
  9440  0955  0022               	movlb	2	; select bank2
  9441  0956  07CE               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
  9442  0957  3000               	movlw	0
  9443  0958  3DCF               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
  9444  0959  3000               	movlw	0
  9445  095A  024F               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
  9446  095B  300A               	movlw	10
  9447  095C  1903               	skipnz
  9448  095D  024E               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
  9449  095E  1C03               	skipc
  9450  095F  0008               	return
  9451                           
  9452                           ;tmr1.c: 183: {
  9453                           ;tmr1.c: 185: TMR1_CallBack();
  9454  0960  318C  24D1         	fcall	_TMR1_CallBack
  9455                           
  9456                           ;tmr1.c: 188: CountCallBack = 0;
  9457  0962  0022               	movlb	2	; select bank2
  9458  0963  01CE               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
  9459  0964  01CF               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
  9460  0965  0008               	return
  9461  0966                     __end_of_TMR1_ISR:	
  9462                           
  9463                           	psect	text47
  9464  0CD1                     __ptext47:	
  9465 ;; *************** function _TMR1_CallBack *****************
  9466 ;; Defined at:
  9467 ;;		line 192 in file "mcc_generated_files/tmr1.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9481 ;;      Params:         0       0       0       0       0       0       0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    1
  9488 ;; This function calls:
  9489 ;;		Absolute function
  9490 ;;		_TMR1_DefaultInterruptHandler
  9491 ;; This function is called by:
  9492 ;;		_TMR1_ISR
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           
  9497                           ;psect for function _TMR1_CallBack
  9498  0CD1                     _TMR1_CallBack:	
  9499                           
  9500                           ;tmr1.c: 194: flag_10_ms=1;
  9501                           
  9502                           ;incstack = 0
  9503                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  9504  0CD1  3001               	movlw	1
  9505  0CD2  0022               	movlb	2	; select bank2
  9506  0CD3  00DC               	movwf	_flag_10_ms^(0+256)
  9507  0CD4  3000               	movlw	0
  9508  0CD5  00DD               	movwf	(_flag_10_ms^(0+256)+1)
  9509                           
  9510                           ;tmr1.c: 195: count_100_ms++;
  9511  0CD6  3001               	movlw	1
  9512  0CD7  07D6               	addwf	_count_100_ms^(0+256),f
  9513  0CD8  3000               	movlw	0
  9514  0CD9  3DD7               	addwfc	(_count_100_ms+1)^(0+256),f
  9515                           
  9516                           ;tmr1.c: 196: count_500_ms++;
  9517  0CDA  3001               	movlw	1
  9518  0CDB  07D4               	addwf	_count_500_ms^(0+256),f
  9519  0CDC  3000               	movlw	0
  9520  0CDD  3DD5               	addwfc	(_count_500_ms+1)^(0+256),f
  9521                           
  9522                           ;tmr1.c: 197: count_1000_ms++;
  9523  0CDE  3001               	movlw	1
  9524  0CDF  07D2               	addwf	_count_1000_ms^(0+256),f
  9525  0CE0  3000               	movlw	0
  9526  0CE1  3DD3               	addwfc	(_count_1000_ms+1)^(0+256),f
  9527                           
  9528                           ;tmr1.c: 198: count_4000_ms++;
  9529  0CE2  3001               	movlw	1
  9530  0CE3  07D0               	addwf	_count_4000_ms^(0+256),f
  9531  0CE4  3000               	movlw	0
  9532  0CE5  3DD1               	addwfc	(_count_4000_ms+1)^(0+256),f
  9533                           
  9534                           ;tmr1.c: 200: if (count_100_ms==10)
  9535  0CE6  300A               	movlw	10
  9536  0CE7  0656               	xorwf	_count_100_ms^(0+256),w
  9537  0CE8  0457               	iorwf	(_count_100_ms+1)^(0+256),w
  9538  0CE9  1D03               	btfss	3,2
  9539  0CEA  2CF3               	goto	i1l4977
  9540                           
  9541                           ;tmr1.c: 201: {
  9542                           ;tmr1.c: 202: flag_100_ms=1;
  9543  0CEB  3001               	movlw	1
  9544  0CEC  0023               	movlb	3	; select bank3
  9545  0CED  00E7               	movwf	_flag_100_ms^(0+384)
  9546  0CEE  3000               	movlw	0
  9547  0CEF  00E8               	movwf	(_flag_100_ms^(0+384)+1)
  9548                           
  9549                           ;tmr1.c: 203: count_100_ms=0;
  9550  0CF0  0022               	movlb	2	; select bank2
  9551  0CF1  01D6               	clrf	_count_100_ms^(0+256)
  9552  0CF2  01D7               	clrf	(_count_100_ms+1)^(0+256)
  9553  0CF3                     i1l4977:	
  9554                           
  9555                           ;tmr1.c: 204: }
  9556                           ;tmr1.c: 205: if(count_500_ms==50)
  9557  0CF3  3032               	movlw	50
  9558  0CF4  0654               	xorwf	_count_500_ms^(0+256),w
  9559  0CF5  0455               	iorwf	(_count_500_ms+1)^(0+256),w
  9560  0CF6  1D03               	btfss	3,2
  9561  0CF7  2D00               	goto	i1l4983
  9562                           
  9563                           ;tmr1.c: 206: {
  9564                           ;tmr1.c: 207: flag_500_ms=1;
  9565  0CF8  3001               	movlw	1
  9566  0CF9  0023               	movlb	3	; select bank3
  9567  0CFA  00E5               	movwf	_flag_500_ms^(0+384)
  9568  0CFB  3000               	movlw	0
  9569  0CFC  00E6               	movwf	(_flag_500_ms^(0+384)+1)
  9570                           
  9571                           ;tmr1.c: 208: count_500_ms=0;
  9572  0CFD  0022               	movlb	2	; select bank2
  9573  0CFE  01D4               	clrf	_count_500_ms^(0+256)
  9574  0CFF  01D5               	clrf	(_count_500_ms+1)^(0+256)
  9575  0D00                     i1l4983:	
  9576                           
  9577                           ;tmr1.c: 209: }
  9578                           ;tmr1.c: 210: if (count_1000_ms==100)
  9579  0D00  3064               	movlw	100
  9580  0D01  0652               	xorwf	_count_1000_ms^(0+256),w
  9581  0D02  0453               	iorwf	(_count_1000_ms+1)^(0+256),w
  9582  0D03  1D03               	btfss	3,2
  9583  0D04  2D0B               	goto	i1l4989
  9584                           
  9585                           ;tmr1.c: 211: {
  9586                           ;tmr1.c: 212: flag_1000_ms=1;
  9587  0D05  3001               	movlw	1
  9588  0D06  00DA               	movwf	_flag_1000_ms^(0+256)
  9589  0D07  3000               	movlw	0
  9590  0D08  00DB               	movwf	(_flag_1000_ms^(0+256)+1)
  9591                           
  9592                           ;tmr1.c: 213: count_1000_ms=0;
  9593  0D09  01D2               	clrf	_count_1000_ms^(0+256)
  9594  0D0A  01D3               	clrf	(_count_1000_ms+1)^(0+256)
  9595  0D0B                     i1l4989:	
  9596                           
  9597                           ;tmr1.c: 214: }
  9598                           ;tmr1.c: 215: if (count_4000_ms==400)
  9599  0D0B  3090               	movlw	144
  9600  0D0C  0650               	xorwf	_count_4000_ms^(0+256),w
  9601  0D0D  1D03               	skipz
  9602  0D0E  2D18               	goto	i1l4995
  9603  0D0F  0351               	decf	(_count_4000_ms+1)^(0+256),w
  9604  0D10  1D03               	btfss	3,2
  9605  0D11  2D18               	goto	i1l4995
  9606                           
  9607                           ;tmr1.c: 216: {
  9608                           ;tmr1.c: 217: flag_4000_ms=1;
  9609  0D12  3001               	movlw	1
  9610  0D13  00D8               	movwf	_flag_4000_ms^(0+256)
  9611  0D14  3000               	movlw	0
  9612  0D15  00D9               	movwf	(_flag_4000_ms^(0+256)+1)
  9613                           
  9614                           ;tmr1.c: 218: count_4000_ms=0;
  9615  0D16  01D0               	clrf	_count_4000_ms^(0+256)
  9616  0D17  01D1               	clrf	(_count_4000_ms+1)^(0+256)
  9617  0D18                     i1l4995:	
  9618                           
  9619                           ;tmr1.c: 219: }
  9620                           ;tmr1.c: 220: if(TMR1_InterruptHandler)
  9621  0D18  0023               	movlb	3	; select bank3
  9622  0D19  086B               	movf	_TMR1_InterruptHandler^(0+384),w
  9623  0D1A  046C               	iorwf	(_TMR1_InterruptHandler+1)^(0+384),w
  9624  0D1B  1903               	btfsc	3,2
  9625  0D1C  0008               	return
  9626                           
  9627                           ;tmr1.c: 221: {
  9628                           ;tmr1.c: 223: TMR1_InterruptHandler();
  9629  0D1D  086C               	movf	(_TMR1_InterruptHandler+1)^(0+384),w
  9630  0D1E  008A               	movwf	10
  9631  0D1F  086B               	movf	_TMR1_InterruptHandler^(0+384),w
  9632  0D20  000A               	callw
  9633  0D21  318C               	pagesel	$
  9634  0D22  0008               	return
  9635  0D23                     __end_of_TMR1_CallBack:	
  9636                           
  9637                           	psect	text48
  9638  083F                     __ptext48:	
  9639 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  9640 ;; Defined at:
  9641 ;;		line 231 in file "mcc_generated_files/tmr1.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      void 
  9648 ;; Registers used:
  9649 ;;		None
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9655 ;;      Params:         0       0       0       0       0       0       0       0
  9656 ;;      Locals:         0       0       0       0       0       0       0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0
  9658 ;;      Totals:         0       0       0       0       0       0       0       0
  9659 ;;Total ram usage:        0 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; This function calls:
  9662 ;;		Nothing
  9663 ;; This function is called by:
  9664 ;;		_TMR1_Initialize
  9665 ;;		_TMR1_CallBack
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function _TMR1_DefaultInterruptHandler
  9671  083F                     _TMR1_DefaultInterruptHandler:	
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  9675  083F  0008               	return
  9676  0840                     __end_of_TMR1_DefaultInterruptHandler:	
  9677                           
  9678                           	psect	text49
  9679  09A0                     __ptext49:	
  9680 ;; *************** function _EUSART_Transmit_ISR *****************
  9681 ;; Defined at:
  9682 ;;		line 166 in file "mcc_generated_files/eusart.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9696 ;;      Params:         0       0       0       0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0       0
  9698 ;;      Temps:          1       0       0       0       0       0       0       0
  9699 ;;      Totals:         1       0       0       0       0       0       0       0
  9700 ;;Total ram usage:        1 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_INTERRUPT_InterruptManager
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _EUSART_Transmit_ISR
  9711  09A0                     _EUSART_Transmit_ISR:	
  9712                           
  9713                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9714                           
  9715                           ;incstack = 0
  9716                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9717  09A0  3008               	movlw	8
  9718  09A1  0022               	movlb	2	; select bank2
  9719  09A2  026D               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
  9720  09A3  1803               	skipnc
  9721  09A4  29BB               	goto	i1l143
  9722                           
  9723                           ;eusart.c: 171: {
  9724                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  9725  09A5  087C               	movf	_eusartTxTail,w
  9726  09A6  3ED6               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  9727  09A7  0086               	movwf	6
  9728  09A8  3001               	movlw	1	; select bank3/4
  9729  09A9  0087               	movwf	7
  9730  09AA  0801               	movf	1,w
  9731  09AB  0023               	movlb	3	; select bank3
  9732  09AC  009A               	movwf	26	;volatile
  9733  09AD  3001               	movlw	1
  9734  09AE  00F0               	movwf	??_EUSART_Transmit_ISR
  9735  09AF  0870               	movf	??_EUSART_Transmit_ISR,w
  9736  09B0  07FC               	addwf	_eusartTxTail,f	;volatile
  9737                           
  9738                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9739  09B1  3008               	movlw	8
  9740  09B2  027C               	subwf	_eusartTxTail,w	;volatile
  9741  09B3  1803               	btfsc	3,0
  9742                           
  9743                           ;eusart.c: 174: {
  9744                           ;eusart.c: 175: eusartTxTail = 0;
  9745  09B4  01FC               	clrf	_eusartTxTail	;volatile
  9746                           
  9747                           ;eusart.c: 176: }
  9748                           ;eusart.c: 177: eusartTxBufferRemaining++;
  9749  09B5  3001               	movlw	1
  9750  09B6  00F0               	movwf	??_EUSART_Transmit_ISR
  9751  09B7  0870               	movf	??_EUSART_Transmit_ISR,w
  9752  09B8  0022               	movlb	2	; select bank2
  9753  09B9  07ED               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  9754                           
  9755                           ;eusart.c: 178: }
  9756  09BA  0008               	return
  9757  09BB                     i1l143:	
  9758                           
  9759                           ;eusart.c: 179: else
  9760                           ;eusart.c: 180: {
  9761                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  9762  09BB  0021               	movlb	1	; select bank1
  9763  09BC  1211               	bcf	17,4	;volatile
  9764  09BD  0008               	return
  9765  09BE                     __end_of_EUSART_Transmit_ISR:	
  9766                           
  9767                           	psect	text50
  9768  0C36                     __ptext50:	
  9769 ;; *************** function _EUSART_Receive_ISR *****************
  9770 ;; Defined at:
  9771 ;;		line 185 in file "mcc_generated_files/eusart.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;		None
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9785 ;;      Params:         0       0       0       0       0       0       0       0
  9786 ;;      Locals:         0       0       0       0       0       0       0       0
  9787 ;;      Temps:          1       0       0       0       0       0       0       0
  9788 ;;      Totals:         1       0       0       0       0       0       0       0
  9789 ;;Total ram usage:        1 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; This function calls:
  9792 ;;		Nothing
  9793 ;; This function is called by:
  9794 ;;		_INTERRUPT_InterruptManager
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           
  9799                           ;psect for function _EUSART_Receive_ISR
  9800  0C36                     _EUSART_Receive_ISR:	
  9801                           
  9802                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9806  0C36  0023               	movlb	3	; select bank3
  9807  0C37  1C9D               	btfss	29,1	;volatile
  9808  0C38  2C3B               	goto	i1l3269
  9809                           
  9810                           ;eusart.c: 189: {
  9811                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  9812  0C39  121D               	bcf	29,4	;volatile
  9813                           
  9814                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  9815  0C3A  161D               	bsf	29,4	;volatile
  9816  0C3B                     i1l3269:	
  9817                           
  9818                           ;eusart.c: 194: }
  9819                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  9820  0C3B  0819               	movf	25,w	;volatile
  9821  0C3C  00F0               	movwf	??_EUSART_Receive_ISR
  9822  0C3D  0020               	movlb	0	; select bank0
  9823  0C3E  086D               	movf	_eusartRxHead,w
  9824  0C3F  3ECE               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  9825  0C40  0086               	movwf	6
  9826  0C41  3001               	movlw	1	; select bank3/4
  9827  0C42  0087               	movwf	7
  9828  0C43  0870               	movf	??_EUSART_Receive_ISR,w
  9829  0C44  0081               	movwf	1
  9830  0C45  3001               	movlw	1
  9831  0C46  00F0               	movwf	??_EUSART_Receive_ISR
  9832  0C47  0870               	movf	??_EUSART_Receive_ISR,w
  9833  0C48  07ED               	addwf	_eusartRxHead,f	;volatile
  9834                           
  9835                           ;eusart.c: 198: rcreg=RCREG;
  9836  0C49  0023               	movlb	3	; select bank3
  9837  0C4A  0819               	movf	25,w	;volatile
  9838  0C4B  00F0               	movwf	??_EUSART_Receive_ISR
  9839  0C4C  0870               	movf	??_EUSART_Receive_ISR,w
  9840  0C4D  00FB               	movwf	_rcreg	;volatile
  9841                           
  9842                           ;eusart.c: 200: if(rcreg=='X')
  9843  0C4E  3058               	movlw	88
  9844  0C4F  067B               	xorwf	_rcreg,w	;volatile
  9845  0C50  1D03               	btfss	3,2
  9846  0C51  2C58               	goto	i1l3281
  9847                           
  9848                           ;eusart.c: 201: {
  9849                           ;eusart.c: 203: flag_G=1;
  9850  0C52  3001               	movlw	1
  9851  0C53  0022               	movlb	2	; select bank2
  9852  0C54  00E2               	movwf	_flag_G^(0+256)
  9853  0C55  3000               	movlw	0
  9854  0C56  00E3               	movwf	(_flag_G^(0+256)+1)
  9855  0C57  2C75               	goto	i1l3297
  9856  0C58                     i1l3281:	
  9857                           ;eusart.c: 205: }
  9858                           
  9859                           ;eusart.c: 204: rcreg=0;
  9860                           
  9861                           
  9862                           ;eusart.c: 206: else if(rcreg=='Y')
  9863  0C58  3059               	movlw	89
  9864  0C59  067B               	xorwf	_rcreg,w	;volatile
  9865  0C5A  1D03               	btfss	3,2
  9866  0C5B  2C62               	goto	i1l3287
  9867                           
  9868                           ;eusart.c: 207: {
  9869                           ;eusart.c: 208: flag_N=1;
  9870  0C5C  3001               	movlw	1
  9871  0C5D  0022               	movlb	2	; select bank2
  9872  0C5E  00E4               	movwf	_flag_N^(0+256)
  9873  0C5F  3000               	movlw	0
  9874  0C60  00E5               	movwf	(_flag_N^(0+256)+1)
  9875  0C61  2C75               	goto	i1l3297
  9876  0C62                     i1l3287:	
  9877                           ;eusart.c: 210: }
  9878                           
  9879                           ;eusart.c: 209: rcreg=0;
  9880                           
  9881                           
  9882                           ;eusart.c: 211: else if(rcreg=='A')
  9883  0C62  3041               	movlw	65
  9884  0C63  067B               	xorwf	_rcreg,w	;volatile
  9885  0C64  1D03               	btfss	3,2
  9886  0C65  2C6C               	goto	i1l3293
  9887                           
  9888                           ;eusart.c: 212: {
  9889                           ;eusart.c: 213: flag_A=1;
  9890  0C66  3001               	movlw	1
  9891  0C67  0022               	movlb	2	; select bank2
  9892  0C68  00E0               	movwf	_flag_A^(0+256)
  9893  0C69  3000               	movlw	0
  9894  0C6A  00E1               	movwf	(_flag_A^(0+256)+1)
  9895  0C6B  2C75               	goto	i1l3297
  9896  0C6C                     i1l3293:	
  9897                           ;eusart.c: 215: }
  9898                           
  9899                           ;eusart.c: 214: rcreg=0;
  9900                           
  9901                           
  9902                           ;eusart.c: 216: else if(rcreg=='B')
  9903  0C6C  3042               	movlw	66
  9904  0C6D  067B               	xorwf	_rcreg,w	;volatile
  9905  0C6E  1D03               	btfss	3,2
  9906  0C6F  2C76               	goto	i1l3299
  9907                           
  9908                           ;eusart.c: 217: {
  9909                           ;eusart.c: 218: flag_B=1;
  9910  0C70  3001               	movlw	1
  9911  0C71  0022               	movlb	2	; select bank2
  9912  0C72  00DE               	movwf	_flag_B^(0+256)
  9913  0C73  3000               	movlw	0
  9914  0C74  00DF               	movwf	(_flag_B^(0+256)+1)
  9915  0C75                     i1l3297:	
  9916                           
  9917                           ;eusart.c: 219: rcreg=0;
  9918  0C75  01FB               	clrf	_rcreg	;volatile
  9919  0C76                     i1l3299:	
  9920                           
  9921                           ;eusart.c: 220: }
  9922                           ;eusart.c: 226: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9923  0C76  3008               	movlw	8
  9924  0C77  0020               	movlb	0	; select bank0
  9925  0C78  026D               	subwf	_eusartRxHead,w	;volatile
  9926  0C79  1803               	btfsc	3,0
  9927                           
  9928                           ;eusart.c: 227: {
  9929                           ;eusart.c: 228: eusartRxHead = 0;
  9930  0C7A  01ED               	clrf	_eusartRxHead	;volatile
  9931                           
  9932                           ;eusart.c: 229: }
  9933                           ;eusart.c: 230: eusartRxCount++;
  9934  0C7B  3001               	movlw	1
  9935  0C7C  00F0               	movwf	??_EUSART_Receive_ISR
  9936  0C7D  0870               	movf	??_EUSART_Receive_ISR,w
  9937  0C7E  07EB               	addwf	_eusartRxCount,f	;volatile
  9938  0C7F  0008               	return
  9939  0C80                     __end_of_EUSART_Receive_ISR:	
  9940                           
  9941                           	psect	text51
  9942  07F3                     __ptext51:	
  9943 ;; *************** function _ADC_ISR *****************
  9944 ;; Defined at:
  9945 ;;		line 136 in file "mcc_generated_files/adc.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;		None
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;		None
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  1    wreg      void 
  9952 ;; Registers used:
  9953 ;;		wreg, status,2, status,0, pclath, cstack
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9959 ;;      Params:         0       0       0       0       0       0       0       0
  9960 ;;      Locals:         0       0       0       0       0       0       0       0
  9961 ;;      Temps:          0       0       0       0       0       0       0       0
  9962 ;;      Totals:         0       0       0       0       0       0       0       0
  9963 ;;Total ram usage:        0 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    1
  9966 ;; This function calls:
  9967 ;;		_ADC_GetConversionResult
  9968 ;; This function is called by:
  9969 ;;		_INTERRUPT_InterruptManager
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           
  9974                           ;psect for function _ADC_ISR
  9975  07F3                     _ADC_ISR:	
  9976                           
  9977                           ;adc.c: 139: PIR1bits.ADIF = 0;
  9978                           
  9979                           ;incstack = 0
  9980                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
  9981  07F3  0020               	movlb	0	; select bank0
  9982  07F4  1311               	bcf	17,6	;volatile
  9983                           
  9984                           ;adc.c: 140: rez_conversie=ADC_GetConversionResult();
  9985  07F5  3189  2111         	fcall	_ADC_GetConversionResult
  9986  07F7  0871               	movf	?_ADC_GetConversionResult+1,w
  9987  07F8  0022               	movlb	2	; select bank2
  9988  07F9  00E7               	movwf	(_rez_conversie+1)^(0+256)
  9989  07FA  0870               	movf	?_ADC_GetConversionResult,w
  9990  07FB  00E6               	movwf	_rez_conversie^(0+256)
  9991  07FC  0008               	return
  9992  07FD                     __end_of_ADC_ISR:	
  9993                           
  9994                           	psect	text52
  9995  0911                     __ptext52:	
  9996 ;; *************** function _ADC_GetConversionResult *****************
  9997 ;; Defined at:
  9998 ;;		line 105 in file "mcc_generated_files/adc.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;		None
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;		None
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  2    0[COMMON] unsigned int 
 10005 ;; Registers used:
 10006 ;;		wreg, status,2, status,0
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10012 ;;      Params:         2       0       0       0       0       0       0       0
 10013 ;;      Locals:         0       0       0       0       0       0       0       0
 10014 ;;      Temps:          7       0       0       0       0       0       0       0
 10015 ;;      Totals:         9       0       0       0       0       0       0       0
 10016 ;;Total ram usage:        9 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; This function calls:
 10019 ;;		Nothing
 10020 ;; This function is called by:
 10021 ;;		_ADC_ISR
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           
 10026                           ;psect for function _ADC_GetConversionResult
 10027  0911                     _ADC_GetConversionResult:	
 10028                           
 10029                           ;adc.c: 109: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
 10030                           
 10031                           ;incstack = 0
 10032                           ; Regs used in _ADC_GetConversionResult: [wreg+status,2+status,0]
 10033  0911  0021               	movlb	1	; select bank1
 10034  0912  081B               	movf	27,w	;volatile
 10035  0913  00F2               	movwf	??_ADC_GetConversionResult
 10036  0914  3006               	movlw	6
 10037  0915                     u271_25:	
 10038  0915  36F2               	lsrf	??_ADC_GetConversionResult,f
 10039  0916  0B89               	decfsz	9,f
 10040  0917  2915               	goto	u271_25
 10041  0918  0872               	movf	??_ADC_GetConversionResult,w
 10042  0919  00F3               	movwf	??_ADC_GetConversionResult+1
 10043  091A  01F4               	clrf	??_ADC_GetConversionResult+2
 10044  091B  081C               	movf	28,w	;volatile
 10045  091C  00F5               	movwf	??_ADC_GetConversionResult+3
 10046  091D  01F6               	clrf	??_ADC_GetConversionResult+4
 10047  091E  35F5               	lslf	??_ADC_GetConversionResult+3,f
 10048  091F  0DF6               	rlf	??_ADC_GetConversionResult+4,f
 10049  0920  35F5               	lslf	??_ADC_GetConversionResult+3,f
 10050  0921  0DF6               	rlf	??_ADC_GetConversionResult+4,f
 10051  0922  0873               	movf	??_ADC_GetConversionResult+1,w
 10052  0923  0775               	addwf	??_ADC_GetConversionResult+3,w
 10053  0924  00F7               	movwf	??_ADC_GetConversionResult+5
 10054  0925  0874               	movf	??_ADC_GetConversionResult+2,w
 10055  0926  3D76               	addwfc	??_ADC_GetConversionResult+4,w
 10056  0927  00F8               	movwf	??_ADC_GetConversionResult+6
 10057  0928  0877               	movf	??_ADC_GetConversionResult+5,w
 10058  0929  00F0               	movwf	?_ADC_GetConversionResult
 10059  092A  0878               	movf	??_ADC_GetConversionResult+6,w
 10060  092B  00F1               	movwf	?_ADC_GetConversionResult+1
 10061  092C  0008               	return
 10062  092D                     __end_of_ADC_GetConversionResult:	
 10063  007E                     btemp	set	126	;btemp
 10064  007E                     int$flags	set	126
 10065  007E                     wtemp0	set	126


Data Sizes:
    Strings     139
    Constant    10
    Data        112
    BSS         154
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     68      80
    BANK1            80     77      80
    BANK2            80     42      80
    BANK3            80      0      77
    BANK4            80      0      75
    BANK5            80      0      64
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[6]), STR_4(CODE[17]), STR_3(CODE[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> line2(BANK3[2]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), line2(BANK3[2]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[14]), STR_8(CODE[18]), STR_7(CODE[10]), STR_6(CODE[15]), 
		 -> STR_5(CODE[3]), STR_2(CODE[21]), STR_1(CODE[14]), sms_text@umid(BANK0[1]), 
		 -> sms_text@smstext(BANK0[1]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), line2(BANK3[2]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[6]), STR_9(CODE[14]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[15]), STR_5(CODE[3]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[21]), STR_1(CODE[14]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    S881__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S881__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), line2(BANK3[2]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), line2(BANK3[2]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_12(CODE[8]), STR_11(CODE[10]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_comparare
    _sms_text->_sprintf
    _int_gsm->_printf
    _printf->__doprnt
    _comparare->___ftadd
    _comparare->___ftdiv
    ___lwtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftge->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _LCDWriteString->_LCDByte
    _LCDWriteInt->___awdiv
    _LCDInit->_LCDByte
    _DHT_result->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   57310
                                             62 BANK0      6     6      0
                _ADC_StartConversion
                      _CheckResponse
                         _DHT_result
                            _LCDByte
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                  _SYSTEM_Initialize
                        _StartSignal
                       _TMR1_disable
                        _TMR1_enable
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                          _comparare
                            _int_gsm
                           _sms_text
                           _turn_egs
 ---------------------------------------------------------------------------------
 (1) _turn_egs                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sms_text                                             4     4      0   14061
                                             39 BANK0      4     4      0
                             _printf
                              _putch
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _int_gsm                                              1     1      0    7165
                                             35 BANK0      1     1      0
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2    6450
                                             27 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _comparare                                          135   133      2   15140
                                             46 BANK0     16    14      2
                                              0 BANK1     77    77      0
                                              0 BANK2     42    42      0
                           ___awtoft
                             ___bmul
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol (ARG)
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2323
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2691
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             14 BANK0      9     3      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3179
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2392
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     316
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (1) _TMR1_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       4     2      2    1425
                                              7 BANK0      4     2      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    2592
                                              9 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     424
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1208
                                              7 BANK0      3     3      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              7     6      1    1118
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _DHT_result                                          16    16      0    6425
                                             39 BANK0     16    16      0
                           _ReadData
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             12     6      6    6226
                                             27 BANK0     12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             21    18      3    4628
                                             14 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     0      1     715
                                              2 BANK0      1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _ReadData                                             4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              9 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
            _ADC_GetConversionResult
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              9     7      2       0
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _CheckResponse
   _DHT_result
     _ReadData
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
   _LCDByte
   _LCDInit
     _LCDByte
   _LCDWriteInt
     _LCDByte
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   _StartSignal
   _TMR1_disable
   _TMR1_enable
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _comparare
     ___awtoft
       ___ftpack
     ___bmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
   _int_gsm
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
     _putch
       _EUSART_Write
   _sms_text
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
     _putch
       _EUSART_Write
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
   _turn_egs

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1D6       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     44      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4D      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     2A      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4D      12       96.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4B      14       93.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      40      16       80.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1D6      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Nov 26 17:08:25 2017

                          ___bmul@product 0022                               __CFG_CP$OFF 0000  
                                      _RH 0168                                        _Ch 016A  
                            ___awdiv@sign 0026                       ___wmul@multiplicand 0022  
                             ?_DHT_result 0070                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                               __CFG_LVP$ON 0000  
                            ___ftadd@sign 004B                                       l131 0A11  
                                     l430 0610                                       l503 0AE6  
                                     l419 05CA                                       l509 0E26  
                                     l518 0424                                       l713 0936  
                                     l547 0B84                                       l548 0B85  
                                     l905 0524                                       l498 0AC0  
                                     l881 07D4                                       l882 07DC  
                                     l874 07C1                                       l965 0EB5  
                                     _RD0 0078                                       _RD1 0079  
                                     _RD3 007B                              __CFG_CPD$OFF 0000  
                                     _Sum 00EF                           _timer1ReloadVal 006E  
                         __end_of_ADC_ISR 07FD                              ___awmod@sign 0026  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              __CFG_FOSC$HS 0000  
                 LCDWriteInt@field_length 002B                           __end_of_LCDByte 0BAF  
                         __end_of_LCDInit 0DCC                             _count_1000_ms 0152  
                            ?_LCDWriteInt 0029                               LCDByte@temp 0026  
                            ___ftdiv@cntr 0048                              ___ftdiv@sign 004D  
                           _count_4000_ms 0150                                      l3011 0C20  
                                    l3005 0C08                                      l3101 0563  
                                    l3007 0C14                                      l3015 0C29  
                                    l3031 09C9                                      l3111 06FC  
                                    l3041 04AD                                      l3019 0C31  
                                    l3051 04C3                                      l3131 0753  
                                    l3203 06B5                                      l3045 04B4  
                                    l3117 0712                                      l3071 04FA  
                                    l3063 04DD                                      l3151 0B09  
                                    l3207 06BD                                      l3081 0516  
                                    l3073 04FF                                      l2603 0AB5  
                                    l3091 0548                                      l3083 0520  
                                    l3075 0503                                      l3139 076C  
                                    l3155 0B1F                                      l2621 0A49  
                                    l3069 04F0                                      l3173 0648  
                                    l3405 05E1                                      l2615 0A31  
                                    l3087 0536                                      l3191 0699  
                                    l2617 0A3D                                      l2625 0A52  
                                    l2721 07AD                                      l2713 0797  
                                    l3441 060C                                      l3417 05EE  
                                    l3361 05A8                                      l3611 08DD  
                                    l2563 0A05                                      l3195 06A1  
                                    l3179 065E                                      l5107 0CCD  
                                    l3427 05FB                                      l3371 05B5  
                                    l5211 046C                                      l2717 079E  
                                    l5109 0C80                                      l3453 0627  
                                    l3429 05FD                                      l3373 05B7  
                                    l3349 059B                                      l3445 0613  
                                    l2591 0A8E                                      l3711 0EF2  
                                    l2727 07C6                                      l2719 07A8  
                                    l3551 00C7                                      l2593 0A9A  
                                    l2577 0A27                                      l3721 0F2F  
                                    l3713 0F1F                                      l2729 07CE  
                                    l3457 062F                                      l3385 05C6  
                                    l5217 0478                                      l3723 0F3F  
                                    l2915 0930                                      l3571 019A  
                                    l5091 0CAB                                      l5083 0CA2  
                                    l5075 0C9A                                      l3717 0F23  
                                    l3741 0E61                                      l2933 0899  
                                    l3565 0137                                      l3389 05CD  
                                    l2599 0AAC                                      l3719 0F27  
                                    l3583 020C                                      l2881 0AF0  
                                    l3761 0E9F                                      l2929 0893  
                                    l3577 01A8                                      l3585 021C  
                                    l5177 03B0                                      l2875 0AD8  
                                    l2955 0D39                                      l3683 0BD8  
                                    l3691 0BAF                                      l3587 022E  
                                    l5099 0CB4                                      l2877 0AE8  
                                    l4901 0263                                      l2981 0D70  
                                    l2973 0D5F                                      l2965 0D41  
                                    l2949 0D2E                                      l3773 0EC6  
                                    l5197 0426                                      l5189 03C5  
                                    l4911 0283                                      l2967 0D4D  
                                    l3687 0BDF                                      l3767 0EAC  
                                    l3759 0E91                                      l4905 026B  
                                    l2977 0D68                                      l2993 0BFB  
                                    l3769 0EB8                                      l4907 026D  
                                    l4933 02CE                                      l4917 029A  
                                    l2997 0C02                                      l4927 02C8  
                                    l4919 02B1                                      l4961 0322  
                                    l4945 0307                                      l4939 02ED  
                                    l4963 0236                                      l4957 0368  
                                    l4949 031D                                      l4965 037F  
                                    STR_1 1058                                      STR_2 1000  
                                    STR_3 1038                                      STR_4 1027  
                                    STR_5 1092                                      STR_6 1049  
                                    STR_7 107A                                      STR_8 1015  
                                    STR_9 1058                                      u3005 0C0B  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _LATD 010F  
                                    u2305 0A91                                      u3025 0C1A  
                                    _LATE 0110                                      u3035 0C21  
                                    u4100 0EDA                                      u2325 0A9B  
                                    u2405 0A4A                                      u4005 022C  
                                    u2335 0AA5                                      u2345 0AAD  
                                    u3225 0504                                      u2605 07C9  
                                    u3165 04DE                                      u3325 0724  
                                    u2375 0A34                                      u4215 0E92  
                                    u3255 0517                                      u3335 0734  
                                    u3345 0754                                      u3505 06BE  
                                    u2395 0A43                                      u4155 0F4C  
                                    u3195 04F1                                      u3355 0763  
                                    u3515 06C4                                      u3435 066A  
                                    u4245 0EAD                                      u2645 07E3  
                                    u2565 07A3                                      u3365 076D  
                                    u3445 067A                                      u2905 0D44  
                                    u4185 0E68                                      u2585 07BC  
                                    u3465 06A2                                      u2825 0937  
                                    u2754 0AD0                                      u2755 0ACF  
                                    u3475 06A8                                      u2835 093C  
                                    u2764 0AE0                                      u3900 00B3  
                                    u2765 0ADF                                      u2925 0D4E  
                                    u2935 0D58                                      u2945 0D60  
                                    u6065 0C8A                                      u6225 041F  
                                    u6075 0E19                                      u2795 0B73  
                                    u6307 08AA                                      u3915 00C5  
                                    u6317 08B1                                      u3925 00D8  
                                    u6327 0D7B                                      u3935 00EC  
                                    u6337 0D9E                                      u3945 0135  
                                    u3890 0095                                      u6347 0BAA  
                                    u3955 0198                                      u6357 0AC3  
                                    u3965 01A6                                      u6277 0F81  
                                    u6367 08CE                                      u6287 0F9D  
                                    u6377 08D5                                      u6297 0FE1  
                                    u6387 08DE                                      u3995 021A  
                                    u5875 02E3                                      _WPUB 020D  
                                    _WPUE 0210                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _Temp 0169  
                                    _main 0382                              ___ftpack@arg 0020  
                            ___ftpack@exp 0023                                      _temp 014C  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                                      start 003C  
              ??_TMR1_SetInterruptHandler 0022                         ___bmul@multiplier 0023  
                           __CFG_MCLRE$ON 0000                              ___ftmul@cntr 003C  
                         turn_egs@step_nr 016E                              ___ftmul@sign 003D  
                            ___fttol@exp1 002D                              ___fttol@lval 0029  
                           ?_EUSART_Write 0070            __size_of_OSCILLATOR_Initialize 0005  
           __end_of_OSCILLATOR_Initialize 0857                                     ?_main 0070  
                         __end_of___awdiv 0D75                           __end_of___ftadd 057B  
                                   STR_10 108C                                     STR_11 1070  
                                   STR_12 1084                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0C36                           __end_of___ftdiv 078E  
                         _TMR1_StartTimer 0843                              LCDInit@style 0028  
                         __end_of___ftneg 087E                           __end_of___ftmul 06E5  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0ECF                           __end_of___lwdiv 0ABA  
                                   i1l143 09BB                                     i1l181 0021  
                                   i1l183 002D                           __end_of___lwmod 0A57  
                                   i1l187 0037                                     i1l179 0015  
                         ___awdiv@counter 0025                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTB 000D  
                         __end_of__doprnt 0382                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _TRISD 008F                                     _TRISE 0090  
                                   _TXREG 019A                                     _TXSTA 019E  
                                   _Check 006A                   comparare@resistor_value 004E  
        __size_of_ADC_GetConversionResult 001C                          __end_of_TMR1_ISR 0966  
                             DHT_result@x 0055                             ___awtoft@sign 002D  
                         __end_of_dpowers 1070                                     _line1 01CA  
                                   _line2 01CC                            _WDT_Initialize 0849  
                                   _rcreg 007B                           __end_of_int_gsm 0CD1  
                           ___ftpack@sign 0024                                     _putch 084D  
                                   main@x 005F                   __end_of_TMR1_Initialize 0911  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                            comparare@dif 0052                              comparare@res 0120  
                                   status 0003                                     wtemp0 007E  
                         __end_of_sprintf 0983                       __size_of_DHT_result 007C  
                         __initialization 003E                              __end_of_main 0485  
                        __end_of_ReadData 0AF2                            ??_EUSART_Write 0020  
                               ??_ADC_ISR 0079               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 005E                             ___fttol@sign1 0028  
                           LCDByte@isdata 0020                                 ??_LCDByte 0021  
                               ??_LCDInit 0027                            __CFG_PLLEN$OFF 0000  
                  __end_of_WDT_Initialize 084D                              sms_text@umid 004A  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                                    _APFCON 011D  
                        __end_of___awtoft 09E0                                    _ANSELA 018C  
                                  ?_putch 0022                                    _ANSELB 018D  
                                  _ANSELD 018F                                    _ANSELE 0190  
                        __end_of___ftpack 07F3                                    _T1GCON 0019  
                                  i1l3281 0C58                                    i1l3293 0C6C  
                                  i1l3269 0C3B                                    i1l3287 0C62  
                                  i1l3297 0C75                                    i1l3299 0C76  
                                  i1l4983 0D00                                    i1l4977 0CF3  
                                  i1l4995 0D18                                    i1l4989 0D0B  
                                  u271_25 0915                          __end_of___lwtoft 08CB  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                          __CFG_PWRTE$OFF 0000                            _LCDWriteString 0BAF  
    __end_of_TMR1_DefaultInterruptHandler 0840     __size_of_TMR1_DefaultInterruptHandler 0001  
            _TMR1_DefaultInterruptHandler 083F                                    ___bmul 0890  
                                  ___ftge 0AF2                   __end_of_TMR1_StartTimer 0846  
                                  ___wmul 092D                                 ??___awdiv 0024  
                               ??___ftadd 0047                            __CFG_STVREN$ON 0000  
                               ??___awmod 0024                                 ??___ftdiv 0044  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                                  _flag_A 0160                                    _flag_B 015E  
                                  _flag_G 0162                                 ??___fttol 0024  
                                  _flag_N 0164                                 ??___lwdiv 0024  
                               ??___lwmod 002C                       _EUSART_Transmit_ISR 09A0  
                               ??__doprnt 0031                          ___awdiv@quotient 0027  
                            ?_TMR1_enable 0070                           ___awmod@divisor 0020  
                            __doprnt@flag 0035                           ___awmod@counter 0025  
                                  _printf 08E2                              __doprnt@prec 0036  
                   ___ftmul@f3_as_product 0039                    __size_of_CheckResponse 0017  
                               ??_int_gsm 0043                              LCDWriteInt@i 0035  
                            LCDWriteInt@j 0033                           ?_WDT_Initialize 0070  
                        __end_of_sms_text 1000                             comparare@step 0055  
TMR1_SetInterruptHandler@InterruptHandler 0020                                 ??_sprintf 0041  
                    ?_EUSART_Transmit_ISR 0070                     __end_of_TMR1_CallBack 0D23  
                        __end_of_turn_egs 0631                          ?_TMR1_Initialize 0070  
                       _SYSTEM_Initialize 087E                      __size_of_LCDWriteInt 0091  
                 __end_of__initialization 0086                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                                ___ftge@ff1 002E  
                              ___ftge@ff2 0031                        ?_SYSTEM_Initialize 0070  
                  __end_of_LCDWriteString 0BF0                                ___ftdiv@f1 0041  
                              ___ftdiv@f2 003E                                ___ftdiv@f3 0049  
                               LCDByte@hn 0023                                 LCDByte@ln 0024  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 0020  
            __size_of_ADC_StartConversion 0003                            __pcstackCOMMON 0070  
                            __pidataBANK2 0002                              __pidataBANK3 0A57  
                            __pidataBANK5 0B2E                       ??_SYSTEM_Initialize 0022  
                           ??_StartSignal 0020                                 ?_TMR1_ISR 0070  
           ?_TMR1_DefaultInterruptHandler 0070                             __end_of_putch 0852  
                            _flag_1000_ms 015A                              ??_DHT_result 0047  
                            _flag_4000_ms 0158                                ___lwtoft@c 0028  
                 _ADC_GetConversionResult 0911                            _OPTION_REGbits 0095  
                              __doprnt@ap 0030                                __doprnt@pb 003A  
                      __size_of_comparare 01AA                 __end_of_SYSTEM_Initialize 0890  
                   ??_EUSART_Transmit_ISR 0070                             sms_text@F3720 00EE  
                           sms_text@F3722 00ED                                   ??_putch 0023  
                              __pbssBANK0 0064                                __pbssBANK1 00ED  
                              __pbssBANK2 014A                                __pbssBANK3 01CE  
                              __pbssBANK4 0220                      __end_of_EUSART_Write 0A2A  
                               ?_ReadData 0070                           __CFG_VCAPEN$OFF 0000  
                           _CheckResponse 08CB               __size_of_EUSART_Receive_ISR 004A  
                         ?_LCDWriteString 0027                        __end_of_DHT_result 0E48  
                              _flag_10_ms 015C                                __pmaintext 0382  
                                 ?___bmul 0020                                   ?___ftge 002E  
                         sms_text@smstext 0049                                   ?___wmul 0020  
                        ?_TMR1_StartTimer 0070                                ??_TMR1_ISR 0070  
                              __pintentry 0004                         sms_text@sms_index 01E3  
                                 _ADC_ISR 07F3                                   _BAUDCON 019F  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                                 ?_printf 003B                   __size_of_ADC_Initialize 0009  
                               ?___lwtoft 0028                             _eusartRxCount 006B  
                                 _LCDByte 0B6E                                   _LCDInit 0D75  
                     __end_of_StartSignal 08B6                                   _OSCTUNE 0098  
                              ??_ReadData 0020                            ?_CheckResponse 0070  
                                 _T_byte1 0069                                   _T_byte2 0068  
                         __size_of___bmul 0012                                   ___cgram 02A0  
                         __size_of___ftge 003C                                   ___awdiv 0D23  
                                 ___ftadd 0485                         __end_of_comparare 0234  
                                 ___awmod 0BF0                                   ___ftdiv 06E5  
                                 ___ftneg 0875                           __size_of___wmul 001C  
                                 ___ftmul 0631                                   ___fttol 0E48  
                               ?_sms_text 0070                                   ___lwdiv 0A85  
                                 ___lwmod 0A2A                                   __doprnt 0234  
               ??_ADC_GetConversionResult 0072                                ??___awtoft 002B  
                              ??___ftpack 0025                                   __ptext1 057B  
                                 __ptext2 0F60                                   __ptext3 0C80  
                                 __ptext4 08E2                                   __ptext5 008A  
                                 __ptext6 092D                                   __ptext7 08B6  
                                 __ptext8 0875                                   __ptext9 0631  
                               ?_turn_egs 0070                           __size_of_printf 0017  
                              ??___lwtoft 002B            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                      __size_of_TMR1_enable 0003  
                                 _dpowers 1066                     _OSCILLATOR_Initialize 0852  
                                 _int_gsm 0C80                          ___awmod@dividend 0022  
       __size_of_TMR1_SetInterruptHandler 0009                  ??_PIN_MANAGER_Initialize 0020  
               ?_TMR1_SetInterruptHandler 0020                             ?_TMR1_disable 0070  
              __size_of_SYSTEM_Initialize 0012                                   _sprintf 0966  
                                 clrloop0 0858                      end_of_initialization 0086  
                          comparare@F3732 01A0                            comparare@F3737 0220  
                                 init_ram 085D                                   initloop 085E  
                       _EUSART_Initialize 0983                            comparare@j_778 005C  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@f 003B                            comparare@table 00A0  
                              ??_sms_text 0047                               _StartSignal 08A2  
                     ??_EUSART_Initialize 0020                          ??_WDT_Initialize 0020  
                               _PORTDbits 000F                                ??_turn_egs 0020  
                       LCDWriteString@msg 0027                            ??_TMR1_disable 0020  
                               _TRISCbits 008E                                 _TRISDbits 008F  
                   __size_of_EUSART_Write 0027                       _ADC_StartConversion 0840  
                         ??_CheckResponse 0020                 __end_of_EUSART_Initialize 09A0  
                              LCDInit@__i 0029                               ___ftdiv@exp 004C  
                               ReadData@i 0022                                 ReadData@j 0023  
                            _count_100_ms 0156                              _count_500_ms 0154  
                              comparare@i 00EB                                comparare@j 005A  
                             ___ftmul@exp 0038                      ?_ADC_StartConversion 0070  
                      turn_egs@step_index 007A                            __end_of___bmul 08A2  
                          __end_of___ftge 0B2E                            __end_of___wmul 0949  
                            _EUSART_Write 0A03                         __size_of_TMR1_ISR 001D  
                          _ADC_Initialize 0863                    ?_OSCILLATOR_Initialize 0070  
                          __end_of_printf 08F9                       start_initialization 003E  
         __size_of_PIN_MANAGER_Initialize 0023                             ??_LCDWriteInt 002C  
                             putch@txData 0022                          ??_LCDWriteString 0029  
                       int_gsm@sms1_index 0064                         __size_of_ReadData 0038  
                   ??_ADC_StartConversion 0020                  __size_of_TMR1_Initialize 0018  
                                ??___bmul 0021                                  ??___ftge 0034  
                                ??___wmul 0024                    __end_of_ADC_Initialize 086C  
                             __doprnt@val 0037                               __pdataBANK2 016E  
                             __pdataBANK3 01A0                               __pdataBANK5 02A0  
                                ?_ADC_ISR 0070                    __size_of_TMR1_CallBack 0052  
                                ??_printf 003D                                  ?_LCDByte 0020  
                       __size_of___awtoft 0022                                  ?_LCDInit 0070  
                       __size_of___ftpack 0065               __end_of_EUSART_Transmit_ISR 09BE  
                   TMR1_ISR@CountCallBack 014E                               __pbssCOMMON 007A  
                                LCDByte@c 0025                                 ___latbits 0002  
                       __size_of___lwtoft 0015                             __pcstackBANK0 0020  
                           __pcstackBANK1 00A0                             __pcstackBANK2 0120  
                             _flag_100_ms 01E7                               _flag_500_ms 01E5  
              __end_of_EUSART_Receive_ISR 0C80                __size_of_EUSART_Initialize 001D  
                        LCDWriteInt@F3726 01DE                                 __doprnt@c 0039  
                               __doprnt@f 002E                       __end_of_LCDWriteInt 0F60  
                               __pnvBANK0 006E                                 __pnvBANK2 016B  
                               __pnvBANK3 01EB                          ___lwdiv@dividend 0022  
                  _PIN_MANAGER_Initialize 09E0                      __end_of_TMR1_disable 0849  
                               _flag_1_ms 01E9          __end_of_TMR1_SetInterruptHandler 0875  
                                ?___awdiv 0020                                  ?___ftadd 0041  
                                ?___awmod 0020                                  ?___ftdiv 003E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 0020                                  ?___lwdiv 0020  
                                ?___lwmod 0028                           ?_ADC_Initialize 0070  
                            _eusartRxHead 006D                              _eusartTxHead 007D  
                            _eusartRxTail 006C                                  ?__doprnt 002E  
                            _eusartTxTail 007C              ??_INTERRUPT_InterruptManager 0079  
                       __size_of_sms_text 00A0                                 _comparare 008A  
                 _eusartTxBufferRemaining 016D                  __size_of_TMR1_StartTimer 0003  
                                ?_int_gsm 0070                         __size_of_turn_egs 00B6  
                        ___lwdiv@quotient 0025                                  ?_sprintf 003B  
                          __size_of_putch 0005                            _eusartRxBuffer 01CE  
                           _TMR1_CallBack 0CD1                            _eusartTxBuffer 01D6  
                          ___wmul@product 0024                                  _LATCbits 010E  
                               clear_ram0 0857                                  _PIE1bits 0091  
     __size_of_INTERRUPT_InterruptManager 0038                                  _PIR1bits 0011  
                                _TMR1_ISR 0949                              ?_StartSignal 0070  
                        LCDWriteString@cc 002A                             ??_TMR1_enable 0020  
                               _umiditate 014A                         ??_TMR1_Initialize 0022  
                        __size_of_ADC_ISR 000A                                _ADCON0bits 009D  
                              ?_comparare 004E                         ___wmul@multiplier 0020  
                                _RH_byte1 0067                                  _RH_byte2 0066  
                           _rez_conversie 0166                          __size_of_LCDByte 0041  
                        __size_of_LCDInit 0057                               _LCDWriteInt 0ECF  
                          ?_TMR1_CallBack 0070                             _flag_directie 016B  
                                _ReadData 0ABA                  ?_ADC_GetConversionResult 0070  
                 ??_OSCILLATOR_Initialize 0020                          __size_of___awdiv 0052  
                        __size_of___ftadd 00F6                          __size_of___awmod 0046  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0035                          __size_of___lwmod 002D  
                                ___awtoft 09BE                                  ___ftpack 078E  
                        __size_of__doprnt 014E                  _TMR1_SetInterruptHandler 086C  
                     main@incubator_state 0060                                  ___lwtoft 08B6  
                   _TMR1_InterruptHandler 01EB                       __end_of_TMR1_enable 0800  
                        __size_of_int_gsm 0051                           ___lwdiv@divisor 0020  
                         ___lwdiv@counter 0027                                  __ptext10 0AF2  
                                __ptext11 06E5                                  __ptext20 087E  
                                __ptext12 0485                                  __ptext21 0849  
                                __ptext13 0890                                _T1GCONbits 0019  
                                __ptext30 0ECF                                  __ptext22 08F9  
                                __ptext14 09BE                                  __ptext31 0BF0  
                                __ptext23 0843                                  __ptext15 078E  
                                __ptext40 0A2A                                  __ptext32 0D23  
                                __ptext24 086C                                  __ptext16 0E48  
                                __ptext41 0A85                                  __ptext33 0D75  
                                __ptext25 09E0                                  __ptext17 07FD  
                                __ptext50 0C36                                  __ptext42 0ABA  
                                __ptext34 0B6E                                  __ptext26 0852  
                                __ptext18 0846                                  __ptext51 07F3  
                                __ptext43 08CB                                  __ptext35 0DCC  
                                __ptext27 0983                                  __ptext19 08A2  
                                __ptext52 0911                                  __ptext44 0840  
                                __ptext36 0966                                  __ptext28 0863  
                                __ptext37 0234                                  __ptext29 0BAF  
                                __ptext46 0949                                  __ptext38 084D  
                                __ptext47 0CD1                                  __ptext39 0A03  
                                __ptext48 083F                                  __ptext49 09A0  
                       ??_TMR1_StartTimer 0020                          __size_of_sprintf 001D  
                   __size_of_TMR1_disable 0003                     __end_of_CheckResponse 08E2  
                           __size_of_main 0103                                  int$flags 007E  
                                _sms_text 0F60        __end_of_INTERRUPT_InterruptManager 003C  
              _INTERRUPT_InterruptManager 0004                                  main@volt 0061  
                              _DHT_result 0DCC                               ??_comparare 0050  
                                _turn_egs 057B                                _INTCONbits 000B  
                            _TMR1_disable 0846                            __pstringtext10 1084  
                          __pstringtext11 108C                            __pstringtext12 1092  
                          __pstringtext13 0000                           ??_TMR1_CallBack 0070  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                               sprintf@ap 0042                                 sprintf@pb 0043  
                               sprintf@wh 003B               __end_of_ADC_StartConversion 0843  
                        ___lwmod@dividend 002A                            LCDWriteInt@val 0029  
                          LCDWriteInt@str 002E                   ?_PIN_MANAGER_Initialize 0070  
         __end_of_ADC_GetConversionResult 092D                         __CFG_CLKOUTEN$OFF 0000  
                        ??_ADC_Initialize 0020                                  printf@ap 003E  
                                printf@pb 003F                        _EUSART_Receive_ISR 0C36  
                             _TMR1_enable 07FD                           comparare@result 0058  
                           __pstringtext1 1066                             __pstringtext2 1000  
                           __pstringtext3 1015                             __pstringtext4 1027  
                           __pstringtext5 1038                             __pstringtext6 1049  
                           __pstringtext7 1058                             __pstringtext8 1070  
                           __pstringtext9 107A                      __size_of_StartSignal 0014  
                                sprintf@f 003D                       ?_EUSART_Receive_ISR 0070  
                         ___lwmod@divisor 0028                           ___lwmod@counter 002D  
                      EUSART_Write@txData 0021              __size_of_EUSART_Transmit_ISR 001E  
          __end_of_PIN_MANAGER_Initialize 0A03                      ??_EUSART_Receive_ISR 0070  
                         _TMR1_Initialize 08F9                   __size_of_LCDWriteString 0041  
