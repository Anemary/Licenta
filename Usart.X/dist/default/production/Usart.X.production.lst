

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Jun 29 13:00:42 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	stringtext15,global,class=STRCODE,delta=2
    24                           	psect	stringtext16,global,class=STRCODE,delta=2
    25                           	psect	stringtext17,global,class=STRCODE,delta=2
    26                           	psect	stringtext18,global,class=STRCODE,delta=2
    27                           	psect	stringtext19,global,class=STRCODE,delta=2
    28                           	psect	stringtext20,global,class=STRCODE,delta=2
    29                           	psect	cinit,global,class=CODE,merge=1,delta=2
    30                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    35                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    36                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    37                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    38                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    42                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    43                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    44                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    45                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    46                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    47                           	psect	text1,local,class=CODE,merge=1,delta=2
    48                           	psect	text2,local,class=CODE,merge=1,delta=2
    49                           	psect	text3,local,class=CODE,merge=1,delta=2
    50                           	psect	text4,local,class=CODE,merge=1,delta=2
    51                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text7,local,class=CODE,merge=1,delta=2
    54                           	psect	text8,local,class=CODE,merge=1,delta=2
    55                           	psect	text9,local,class=CODE,merge=1,delta=2
    56                           	psect	text10,local,class=CODE,merge=1,delta=2
    57                           	psect	text11,local,class=CODE,merge=1,delta=2
    58                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text22,local,class=CODE,merge=1,delta=2
    69                           	psect	text23,local,class=CODE,merge=1,delta=2
    70                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text26,local,class=CODE,merge=1,delta=2
    73                           	psect	text27,local,class=CODE,merge=1,delta=2
    74                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text30,local,class=CODE,merge=1,delta=2
    77                           	psect	text31,local,class=CODE,merge=1,delta=2
    78                           	psect	text32,local,class=CODE,merge=1,delta=2
    79                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text34,local,class=CODE,merge=1,delta=2
    81                           	psect	text35,local,class=CODE,merge=1,delta=2
    82                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    83                           	psect	text37,local,class=CODE,merge=1,delta=2
    84                           	psect	text38,local,class=CODE,merge=1,delta=2
    85                           	psect	text39,local,class=CODE,merge=1,delta=2
    86                           	psect	text40,local,class=CODE,merge=1,delta=2
    87                           	psect	text41,local,class=CODE,merge=1,delta=2
    88                           	psect	text42,local,class=CODE,merge=1,delta=2
    89                           	psect	text43,local,class=CODE,merge=1,delta=2
    90                           	psect	text44,local,class=CODE,merge=1,delta=2
    91                           	psect	text45,local,class=CODE,merge=1,delta=2
    92                           	psect	text46,local,class=CODE,merge=1,delta=2
    93                           	psect	text47,local,class=CODE,merge=1,delta=2
    94                           	psect	text48,local,class=CODE,merge=1,delta=2
    95                           	psect	text49,local,class=CODE,merge=1,delta=2
    96                           	psect	text50,local,class=CODE,merge=1,delta=2
    97                           	psect	text51,local,class=CODE,merge=1,delta=2
    98                           	psect	text52,local,class=CODE,merge=1,delta=2
    99                           	psect	text53,local,class=CODE,merge=1,delta=2
   100                           	psect	text54,local,class=CODE,merge=1,delta=2
   101                           	psect	text55,local,class=CODE,merge=1,delta=2
   102                           	psect	text56,local,class=CODE,merge=1,delta=2
   103                           	psect	text57,local,class=CODE,merge=1,delta=2
   104                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text59,local,class=CODE,merge=1,delta=2
   106                           	psect	text60,local,class=CODE,merge=1,delta=2
   107                           	psect	intentry,global,class=CODE,delta=2
   108                           	psect	text62,local,class=CODE,merge=1,delta=2
   109                           	psect	text63,local,class=CODE,merge=1,delta=2
   110                           	psect	text64,local,class=CODE,merge=1,delta=2
   111                           	psect	text65,local,class=CODE,merge=1,delta=2
   112                           	psect	text66,local,class=CODE,merge=1,delta=2
   113                           	psect	text67,local,class=CODE,merge=1,delta=2
   114                           	dabs	1,0x7E,2
   115  0000                     
   116                           ; Version 1.44
   117                           ; Generated 14/09/2017 GMT
   118                           ; 
   119                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   120                           ; All rights reserved.
   121                           ; 
   122                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   123                           ; 
   124                           ; Redistribution and use in source and binary forms, with or without modification, are
   125                           ; permitted provided that the following conditions are met:
   126                           ; 
   127                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   128                           ;        conditions and the following disclaimer.
   129                           ; 
   130                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   131                           ;        of conditions and the following disclaimer in the documentation and/or other
   132                           ;        materials provided with the distribution.
   133                           ; 
   134                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   135                           ;        software without specific prior written permission.
   136                           ; 
   137                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   138                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   139                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   140                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   141                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   142                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   143                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   144                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   145                           ; 
   146                           ; 
   147                           ; Code-generator required, PIC16F1937 Definitions
   148                           ; 
   149                           ; SFR Addresses
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  008F                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0110                     	;# 
   205  0111                     	;# 
   206  0112                     	;# 
   207  0113                     	;# 
   208  0114                     	;# 
   209  0115                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  0118                     	;# 
   213  0119                     	;# 
   214  011A                     	;# 
   215  011B                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018F                     	;# 
   220  0190                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020D                     	;# 
   242  0210                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0291                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0293                     	;# 
   255  0294                     	;# 
   256  0295                     	;# 
   257  0295                     	;# 
   258  0296                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  029B                     	;# 
   264  029C                     	;# 
   265  029C                     	;# 
   266  029D                     	;# 
   267  029E                     	;# 
   268  029F                     	;# 
   269  0311                     	;# 
   270  0311                     	;# 
   271  0312                     	;# 
   272  0313                     	;# 
   273  0314                     	;# 
   274  0315                     	;# 
   275  0315                     	;# 
   276  0316                     	;# 
   277  0318                     	;# 
   278  0318                     	;# 
   279  0319                     	;# 
   280  031A                     	;# 
   281  031C                     	;# 
   282  031C                     	;# 
   283  031D                     	;# 
   284  031E                     	;# 
   285  0394                     	;# 
   286  0395                     	;# 
   287  0396                     	;# 
   288  0415                     	;# 
   289  0416                     	;# 
   290  0417                     	;# 
   291  041C                     	;# 
   292  041D                     	;# 
   293  041E                     	;# 
   294  0791                     	;# 
   295  0792                     	;# 
   296  0793                     	;# 
   297  0794                     	;# 
   298  0795                     	;# 
   299  0798                     	;# 
   300  0799                     	;# 
   301  079A                     	;# 
   302  07A0                     	;# 
   303  07A1                     	;# 
   304  07A2                     	;# 
   305  07A3                     	;# 
   306  07A4                     	;# 
   307  07A5                     	;# 
   308  07A6                     	;# 
   309  07A7                     	;# 
   310  07A8                     	;# 
   311  07A9                     	;# 
   312  07AA                     	;# 
   313  07AB                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  000F                     	;# 
   341  0010                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0013                     	;# 
   345  0015                     	;# 
   346  0016                     	;# 
   347  0016                     	;# 
   348  0017                     	;# 
   349  0018                     	;# 
   350  0019                     	;# 
   351  001A                     	;# 
   352  001B                     	;# 
   353  001C                     	;# 
   354  001E                     	;# 
   355  001F                     	;# 
   356  008C                     	;# 
   357  008D                     	;# 
   358  008E                     	;# 
   359  008F                     	;# 
   360  0090                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0093                     	;# 
   364  0095                     	;# 
   365  0096                     	;# 
   366  0097                     	;# 
   367  0098                     	;# 
   368  0099                     	;# 
   369  009A                     	;# 
   370  009B                     	;# 
   371  009B                     	;# 
   372  009C                     	;# 
   373  009D                     	;# 
   374  009E                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  010F                     	;# 
   379  0110                     	;# 
   380  0111                     	;# 
   381  0112                     	;# 
   382  0113                     	;# 
   383  0114                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0117                     	;# 
   387  0118                     	;# 
   388  0119                     	;# 
   389  011A                     	;# 
   390  011B                     	;# 
   391  011D                     	;# 
   392  018C                     	;# 
   393  018D                     	;# 
   394  018F                     	;# 
   395  0190                     	;# 
   396  0191                     	;# 
   397  0191                     	;# 
   398  0192                     	;# 
   399  0193                     	;# 
   400  0193                     	;# 
   401  0193                     	;# 
   402  0194                     	;# 
   403  0195                     	;# 
   404  0196                     	;# 
   405  0199                     	;# 
   406  019A                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019B                     	;# 
   410  019B                     	;# 
   411  019C                     	;# 
   412  019C                     	;# 
   413  019D                     	;# 
   414  019E                     	;# 
   415  019F                     	;# 
   416  020D                     	;# 
   417  0210                     	;# 
   418  0211                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0291                     	;# 
   427  0291                     	;# 
   428  0292                     	;# 
   429  0293                     	;# 
   430  0294                     	;# 
   431  0295                     	;# 
   432  0295                     	;# 
   433  0296                     	;# 
   434  0298                     	;# 
   435  0298                     	;# 
   436  0299                     	;# 
   437  029A                     	;# 
   438  029B                     	;# 
   439  029C                     	;# 
   440  029C                     	;# 
   441  029D                     	;# 
   442  029E                     	;# 
   443  029F                     	;# 
   444  0311                     	;# 
   445  0311                     	;# 
   446  0312                     	;# 
   447  0313                     	;# 
   448  0314                     	;# 
   449  0315                     	;# 
   450  0315                     	;# 
   451  0316                     	;# 
   452  0318                     	;# 
   453  0318                     	;# 
   454  0319                     	;# 
   455  031A                     	;# 
   456  031C                     	;# 
   457  031C                     	;# 
   458  031D                     	;# 
   459  031E                     	;# 
   460  0394                     	;# 
   461  0395                     	;# 
   462  0396                     	;# 
   463  0415                     	;# 
   464  0416                     	;# 
   465  0417                     	;# 
   466  041C                     	;# 
   467  041D                     	;# 
   468  041E                     	;# 
   469  0791                     	;# 
   470  0792                     	;# 
   471  0793                     	;# 
   472  0794                     	;# 
   473  0795                     	;# 
   474  0798                     	;# 
   475  0799                     	;# 
   476  079A                     	;# 
   477  07A0                     	;# 
   478  07A1                     	;# 
   479  07A2                     	;# 
   480  07A3                     	;# 
   481  07A4                     	;# 
   482  07A5                     	;# 
   483  07A6                     	;# 
   484  07A7                     	;# 
   485  07A8                     	;# 
   486  07A9                     	;# 
   487  07AA                     	;# 
   488  07AB                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  000F                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0013                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0016                     	;# 
   523  0017                     	;# 
   524  0018                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  001E                     	;# 
   530  001F                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  008F                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  010F                     	;# 
   554  0110                     	;# 
   555  0111                     	;# 
   556  0112                     	;# 
   557  0113                     	;# 
   558  0114                     	;# 
   559  0115                     	;# 
   560  0116                     	;# 
   561  0117                     	;# 
   562  0118                     	;# 
   563  0119                     	;# 
   564  011A                     	;# 
   565  011B                     	;# 
   566  011D                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  018F                     	;# 
   570  0190                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0193                     	;# 
   577  0194                     	;# 
   578  0195                     	;# 
   579  0196                     	;# 
   580  0199                     	;# 
   581  019A                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019C                     	;# 
   587  019C                     	;# 
   588  019D                     	;# 
   589  019E                     	;# 
   590  019F                     	;# 
   591  020D                     	;# 
   592  0210                     	;# 
   593  0211                     	;# 
   594  0212                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0215                     	;# 
   598  0215                     	;# 
   599  0216                     	;# 
   600  0217                     	;# 
   601  0291                     	;# 
   602  0291                     	;# 
   603  0292                     	;# 
   604  0293                     	;# 
   605  0294                     	;# 
   606  0295                     	;# 
   607  0295                     	;# 
   608  0296                     	;# 
   609  0298                     	;# 
   610  0298                     	;# 
   611  0299                     	;# 
   612  029A                     	;# 
   613  029B                     	;# 
   614  029C                     	;# 
   615  029C                     	;# 
   616  029D                     	;# 
   617  029E                     	;# 
   618  029F                     	;# 
   619  0311                     	;# 
   620  0311                     	;# 
   621  0312                     	;# 
   622  0313                     	;# 
   623  0314                     	;# 
   624  0315                     	;# 
   625  0315                     	;# 
   626  0316                     	;# 
   627  0318                     	;# 
   628  0318                     	;# 
   629  0319                     	;# 
   630  031A                     	;# 
   631  031C                     	;# 
   632  031C                     	;# 
   633  031D                     	;# 
   634  031E                     	;# 
   635  0394                     	;# 
   636  0395                     	;# 
   637  0396                     	;# 
   638  0415                     	;# 
   639  0416                     	;# 
   640  0417                     	;# 
   641  041C                     	;# 
   642  041D                     	;# 
   643  041E                     	;# 
   644  0791                     	;# 
   645  0792                     	;# 
   646  0793                     	;# 
   647  0794                     	;# 
   648  0795                     	;# 
   649  0798                     	;# 
   650  0799                     	;# 
   651  079A                     	;# 
   652  07A0                     	;# 
   653  07A1                     	;# 
   654  07A2                     	;# 
   655  07A3                     	;# 
   656  07A4                     	;# 
   657  07A5                     	;# 
   658  07A6                     	;# 
   659  07A7                     	;# 
   660  07A8                     	;# 
   661  07A9                     	;# 
   662  07AA                     	;# 
   663  07AB                     	;# 
   664  0FE4                     	;# 
   665  0FE5                     	;# 
   666  0FE6                     	;# 
   667  0FE7                     	;# 
   668  0FE8                     	;# 
   669  0FE9                     	;# 
   670  0FEA                     	;# 
   671  0FEB                     	;# 
   672  0FED                     	;# 
   673  0FEE                     	;# 
   674  0FEF                     	;# 
   675  0000                     	;# 
   676  0001                     	;# 
   677  0002                     	;# 
   678  0003                     	;# 
   679  0004                     	;# 
   680  0005                     	;# 
   681  0006                     	;# 
   682  0007                     	;# 
   683  0008                     	;# 
   684  0009                     	;# 
   685  000A                     	;# 
   686  000B                     	;# 
   687  000C                     	;# 
   688  000D                     	;# 
   689  000E                     	;# 
   690  000F                     	;# 
   691  0010                     	;# 
   692  0011                     	;# 
   693  0012                     	;# 
   694  0013                     	;# 
   695  0015                     	;# 
   696  0016                     	;# 
   697  0016                     	;# 
   698  0017                     	;# 
   699  0018                     	;# 
   700  0019                     	;# 
   701  001A                     	;# 
   702  001B                     	;# 
   703  001C                     	;# 
   704  001E                     	;# 
   705  001F                     	;# 
   706  008C                     	;# 
   707  008D                     	;# 
   708  008E                     	;# 
   709  008F                     	;# 
   710  0090                     	;# 
   711  0091                     	;# 
   712  0092                     	;# 
   713  0093                     	;# 
   714  0095                     	;# 
   715  0096                     	;# 
   716  0097                     	;# 
   717  0098                     	;# 
   718  0099                     	;# 
   719  009A                     	;# 
   720  009B                     	;# 
   721  009B                     	;# 
   722  009C                     	;# 
   723  009D                     	;# 
   724  009E                     	;# 
   725  010C                     	;# 
   726  010D                     	;# 
   727  010E                     	;# 
   728  010F                     	;# 
   729  0110                     	;# 
   730  0111                     	;# 
   731  0112                     	;# 
   732  0113                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0117                     	;# 
   737  0118                     	;# 
   738  0119                     	;# 
   739  011A                     	;# 
   740  011B                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018F                     	;# 
   745  0190                     	;# 
   746  0191                     	;# 
   747  0191                     	;# 
   748  0192                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019B                     	;# 
   761  019C                     	;# 
   762  019C                     	;# 
   763  019D                     	;# 
   764  019E                     	;# 
   765  019F                     	;# 
   766  020D                     	;# 
   767  0210                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0215                     	;# 
   773  0215                     	;# 
   774  0216                     	;# 
   775  0217                     	;# 
   776  0291                     	;# 
   777  0291                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0294                     	;# 
   781  0295                     	;# 
   782  0295                     	;# 
   783  0296                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  029B                     	;# 
   789  029C                     	;# 
   790  029C                     	;# 
   791  029D                     	;# 
   792  029E                     	;# 
   793  029F                     	;# 
   794  0311                     	;# 
   795  0311                     	;# 
   796  0312                     	;# 
   797  0313                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0315                     	;# 
   801  0316                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031C                     	;# 
   807  031C                     	;# 
   808  031D                     	;# 
   809  031E                     	;# 
   810  0394                     	;# 
   811  0395                     	;# 
   812  0396                     	;# 
   813  0415                     	;# 
   814  0416                     	;# 
   815  0417                     	;# 
   816  041C                     	;# 
   817  041D                     	;# 
   818  041E                     	;# 
   819  0791                     	;# 
   820  0792                     	;# 
   821  0793                     	;# 
   822  0794                     	;# 
   823  0795                     	;# 
   824  0798                     	;# 
   825  0799                     	;# 
   826  079A                     	;# 
   827  07A0                     	;# 
   828  07A1                     	;# 
   829  07A2                     	;# 
   830  07A3                     	;# 
   831  07A4                     	;# 
   832  07A5                     	;# 
   833  07A6                     	;# 
   834  07A7                     	;# 
   835  07A8                     	;# 
   836  07A9                     	;# 
   837  07AA                     	;# 
   838  07AB                     	;# 
   839  0FE4                     	;# 
   840  0FE5                     	;# 
   841  0FE6                     	;# 
   842  0FE7                     	;# 
   843  0FE8                     	;# 
   844  0FE9                     	;# 
   845  0FEA                     	;# 
   846  0FEB                     	;# 
   847  0FED                     	;# 
   848  0FEE                     	;# 
   849  0FEF                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0008                     	;# 
   859  0009                     	;# 
   860  000A                     	;# 
   861  000B                     	;# 
   862  000C                     	;# 
   863  000D                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0015                     	;# 
   871  0016                     	;# 
   872  0016                     	;# 
   873  0017                     	;# 
   874  0018                     	;# 
   875  0019                     	;# 
   876  001A                     	;# 
   877  001B                     	;# 
   878  001C                     	;# 
   879  001E                     	;# 
   880  001F                     	;# 
   881  008C                     	;# 
   882  008D                     	;# 
   883  008E                     	;# 
   884  008F                     	;# 
   885  0090                     	;# 
   886  0091                     	;# 
   887  0092                     	;# 
   888  0093                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0097                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  010F                     	;# 
   904  0110                     	;# 
   905  0111                     	;# 
   906  0112                     	;# 
   907  0113                     	;# 
   908  0114                     	;# 
   909  0115                     	;# 
   910  0116                     	;# 
   911  0117                     	;# 
   912  0118                     	;# 
   913  0119                     	;# 
   914  011A                     	;# 
   915  011B                     	;# 
   916  011D                     	;# 
   917  018C                     	;# 
   918  018D                     	;# 
   919  018F                     	;# 
   920  0190                     	;# 
   921  0191                     	;# 
   922  0191                     	;# 
   923  0192                     	;# 
   924  0193                     	;# 
   925  0193                     	;# 
   926  0193                     	;# 
   927  0194                     	;# 
   928  0195                     	;# 
   929  0196                     	;# 
   930  0199                     	;# 
   931  019A                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019C                     	;# 
   937  019C                     	;# 
   938  019D                     	;# 
   939  019E                     	;# 
   940  019F                     	;# 
   941  020D                     	;# 
   942  0210                     	;# 
   943  0211                     	;# 
   944  0212                     	;# 
   945  0213                     	;# 
   946  0214                     	;# 
   947  0215                     	;# 
   948  0215                     	;# 
   949  0216                     	;# 
   950  0217                     	;# 
   951  0291                     	;# 
   952  0291                     	;# 
   953  0292                     	;# 
   954  0293                     	;# 
   955  0294                     	;# 
   956  0295                     	;# 
   957  0295                     	;# 
   958  0296                     	;# 
   959  0298                     	;# 
   960  0298                     	;# 
   961  0299                     	;# 
   962  029A                     	;# 
   963  029B                     	;# 
   964  029C                     	;# 
   965  029C                     	;# 
   966  029D                     	;# 
   967  029E                     	;# 
   968  029F                     	;# 
   969  0311                     	;# 
   970  0311                     	;# 
   971  0312                     	;# 
   972  0313                     	;# 
   973  0314                     	;# 
   974  0315                     	;# 
   975  0315                     	;# 
   976  0316                     	;# 
   977  0318                     	;# 
   978  0318                     	;# 
   979  0319                     	;# 
   980  031A                     	;# 
   981  031C                     	;# 
   982  031C                     	;# 
   983  031D                     	;# 
   984  031E                     	;# 
   985  0394                     	;# 
   986  0395                     	;# 
   987  0396                     	;# 
   988  0415                     	;# 
   989  0416                     	;# 
   990  0417                     	;# 
   991  041C                     	;# 
   992  041D                     	;# 
   993  041E                     	;# 
   994  0791                     	;# 
   995  0792                     	;# 
   996  0793                     	;# 
   997  0794                     	;# 
   998  0795                     	;# 
   999  0798                     	;# 
  1000  0799                     	;# 
  1001  079A                     	;# 
  1002  07A0                     	;# 
  1003  07A1                     	;# 
  1004  07A2                     	;# 
  1005  07A3                     	;# 
  1006  07A4                     	;# 
  1007  07A5                     	;# 
  1008  07A6                     	;# 
  1009  07A7                     	;# 
  1010  07A8                     	;# 
  1011  07A9                     	;# 
  1012  07AA                     	;# 
  1013  07AB                     	;# 
  1014  0FE4                     	;# 
  1015  0FE5                     	;# 
  1016  0FE6                     	;# 
  1017  0FE7                     	;# 
  1018  0FE8                     	;# 
  1019  0FE9                     	;# 
  1020  0FEA                     	;# 
  1021  0FEB                     	;# 
  1022  0FED                     	;# 
  1023  0FEE                     	;# 
  1024  0FEF                     	;# 
  1025  0000                     	;# 
  1026  0001                     	;# 
  1027  0002                     	;# 
  1028  0003                     	;# 
  1029  0004                     	;# 
  1030  0005                     	;# 
  1031  0006                     	;# 
  1032  0007                     	;# 
  1033  0008                     	;# 
  1034  0009                     	;# 
  1035  000A                     	;# 
  1036  000B                     	;# 
  1037  000C                     	;# 
  1038  000D                     	;# 
  1039  000E                     	;# 
  1040  000F                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0013                     	;# 
  1045  0015                     	;# 
  1046  0016                     	;# 
  1047  0016                     	;# 
  1048  0017                     	;# 
  1049  0018                     	;# 
  1050  0019                     	;# 
  1051  001A                     	;# 
  1052  001B                     	;# 
  1053  001C                     	;# 
  1054  001E                     	;# 
  1055  001F                     	;# 
  1056  008C                     	;# 
  1057  008D                     	;# 
  1058  008E                     	;# 
  1059  008F                     	;# 
  1060  0090                     	;# 
  1061  0091                     	;# 
  1062  0092                     	;# 
  1063  0093                     	;# 
  1064  0095                     	;# 
  1065  0096                     	;# 
  1066  0097                     	;# 
  1067  0098                     	;# 
  1068  0099                     	;# 
  1069  009A                     	;# 
  1070  009B                     	;# 
  1071  009B                     	;# 
  1072  009C                     	;# 
  1073  009D                     	;# 
  1074  009E                     	;# 
  1075  010C                     	;# 
  1076  010D                     	;# 
  1077  010E                     	;# 
  1078  010F                     	;# 
  1079  0110                     	;# 
  1080  0111                     	;# 
  1081  0112                     	;# 
  1082  0113                     	;# 
  1083  0114                     	;# 
  1084  0115                     	;# 
  1085  0116                     	;# 
  1086  0117                     	;# 
  1087  0118                     	;# 
  1088  0119                     	;# 
  1089  011A                     	;# 
  1090  011B                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018F                     	;# 
  1095  0190                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0193                     	;# 
  1102  0194                     	;# 
  1103  0195                     	;# 
  1104  0196                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0291                     	;# 
  1127  0291                     	;# 
  1128  0292                     	;# 
  1129  0293                     	;# 
  1130  0294                     	;# 
  1131  0295                     	;# 
  1132  0295                     	;# 
  1133  0296                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  029B                     	;# 
  1139  029C                     	;# 
  1140  029C                     	;# 
  1141  029D                     	;# 
  1142  029E                     	;# 
  1143  029F                     	;# 
  1144  0311                     	;# 
  1145  0311                     	;# 
  1146  0312                     	;# 
  1147  0313                     	;# 
  1148  0314                     	;# 
  1149  0315                     	;# 
  1150  0315                     	;# 
  1151  0316                     	;# 
  1152  0318                     	;# 
  1153  0318                     	;# 
  1154  0319                     	;# 
  1155  031A                     	;# 
  1156  031C                     	;# 
  1157  031C                     	;# 
  1158  031D                     	;# 
  1159  031E                     	;# 
  1160  0394                     	;# 
  1161  0395                     	;# 
  1162  0396                     	;# 
  1163  0415                     	;# 
  1164  0416                     	;# 
  1165  0417                     	;# 
  1166  041C                     	;# 
  1167  041D                     	;# 
  1168  041E                     	;# 
  1169  0791                     	;# 
  1170  0792                     	;# 
  1171  0793                     	;# 
  1172  0794                     	;# 
  1173  0795                     	;# 
  1174  0798                     	;# 
  1175  0799                     	;# 
  1176  079A                     	;# 
  1177  07A0                     	;# 
  1178  07A1                     	;# 
  1179  07A2                     	;# 
  1180  07A3                     	;# 
  1181  07A4                     	;# 
  1182  07A5                     	;# 
  1183  07A6                     	;# 
  1184  07A7                     	;# 
  1185  07A8                     	;# 
  1186  07A9                     	;# 
  1187  07AA                     	;# 
  1188  07AB                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  000E                     	;# 
  1215  000F                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0015                     	;# 
  1221  0016                     	;# 
  1222  0016                     	;# 
  1223  0017                     	;# 
  1224  0018                     	;# 
  1225  0019                     	;# 
  1226  001A                     	;# 
  1227  001B                     	;# 
  1228  001C                     	;# 
  1229  001E                     	;# 
  1230  001F                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  008E                     	;# 
  1234  008F                     	;# 
  1235  0090                     	;# 
  1236  0091                     	;# 
  1237  0092                     	;# 
  1238  0093                     	;# 
  1239  0095                     	;# 
  1240  0096                     	;# 
  1241  0097                     	;# 
  1242  0098                     	;# 
  1243  0099                     	;# 
  1244  009A                     	;# 
  1245  009B                     	;# 
  1246  009B                     	;# 
  1247  009C                     	;# 
  1248  009D                     	;# 
  1249  009E                     	;# 
  1250  010C                     	;# 
  1251  010D                     	;# 
  1252  010E                     	;# 
  1253  010F                     	;# 
  1254  0110                     	;# 
  1255  0111                     	;# 
  1256  0112                     	;# 
  1257  0113                     	;# 
  1258  0114                     	;# 
  1259  0115                     	;# 
  1260  0116                     	;# 
  1261  0117                     	;# 
  1262  0118                     	;# 
  1263  0119                     	;# 
  1264  011A                     	;# 
  1265  011B                     	;# 
  1266  011D                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018F                     	;# 
  1270  0190                     	;# 
  1271  0191                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0193                     	;# 
  1277  0194                     	;# 
  1278  0195                     	;# 
  1279  0196                     	;# 
  1280  0199                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020D                     	;# 
  1292  0210                     	;# 
  1293  0211                     	;# 
  1294  0212                     	;# 
  1295  0213                     	;# 
  1296  0214                     	;# 
  1297  0215                     	;# 
  1298  0215                     	;# 
  1299  0216                     	;# 
  1300  0217                     	;# 
  1301  0291                     	;# 
  1302  0291                     	;# 
  1303  0292                     	;# 
  1304  0293                     	;# 
  1305  0294                     	;# 
  1306  0295                     	;# 
  1307  0295                     	;# 
  1308  0296                     	;# 
  1309  0298                     	;# 
  1310  0298                     	;# 
  1311  0299                     	;# 
  1312  029A                     	;# 
  1313  029B                     	;# 
  1314  029C                     	;# 
  1315  029C                     	;# 
  1316  029D                     	;# 
  1317  029E                     	;# 
  1318  029F                     	;# 
  1319  0311                     	;# 
  1320  0311                     	;# 
  1321  0312                     	;# 
  1322  0313                     	;# 
  1323  0314                     	;# 
  1324  0315                     	;# 
  1325  0315                     	;# 
  1326  0316                     	;# 
  1327  0318                     	;# 
  1328  0318                     	;# 
  1329  0319                     	;# 
  1330  031A                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  0394                     	;# 
  1336  0395                     	;# 
  1337  0396                     	;# 
  1338  0415                     	;# 
  1339  0416                     	;# 
  1340  0417                     	;# 
  1341  041C                     	;# 
  1342  041D                     	;# 
  1343  041E                     	;# 
  1344  0791                     	;# 
  1345  0792                     	;# 
  1346  0793                     	;# 
  1347  0794                     	;# 
  1348  0795                     	;# 
  1349  0798                     	;# 
  1350  0799                     	;# 
  1351  079A                     	;# 
  1352  07A0                     	;# 
  1353  07A1                     	;# 
  1354  07A2                     	;# 
  1355  07A3                     	;# 
  1356  07A4                     	;# 
  1357  07A5                     	;# 
  1358  07A6                     	;# 
  1359  07A7                     	;# 
  1360  07A8                     	;# 
  1361  07A9                     	;# 
  1362  07AA                     	;# 
  1363  07AB                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  000F                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0013                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  001E                     	;# 
  1405  001F                     	;# 
  1406  008C                     	;# 
  1407  008D                     	;# 
  1408  008E                     	;# 
  1409  008F                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0093                     	;# 
  1414  0095                     	;# 
  1415  0096                     	;# 
  1416  0097                     	;# 
  1417  0098                     	;# 
  1418  0099                     	;# 
  1419  009A                     	;# 
  1420  009B                     	;# 
  1421  009B                     	;# 
  1422  009C                     	;# 
  1423  009D                     	;# 
  1424  009E                     	;# 
  1425  010C                     	;# 
  1426  010D                     	;# 
  1427  010E                     	;# 
  1428  010F                     	;# 
  1429  0110                     	;# 
  1430  0111                     	;# 
  1431  0112                     	;# 
  1432  0113                     	;# 
  1433  0114                     	;# 
  1434  0115                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  0118                     	;# 
  1438  0119                     	;# 
  1439  011A                     	;# 
  1440  011B                     	;# 
  1441  011D                     	;# 
  1442  018C                     	;# 
  1443  018D                     	;# 
  1444  018F                     	;# 
  1445  0190                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0193                     	;# 
  1452  0194                     	;# 
  1453  0195                     	;# 
  1454  0196                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0212                     	;# 
  1470  0213                     	;# 
  1471  0214                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0294                     	;# 
  1481  0295                     	;# 
  1482  0295                     	;# 
  1483  0296                     	;# 
  1484  0298                     	;# 
  1485  0298                     	;# 
  1486  0299                     	;# 
  1487  029A                     	;# 
  1488  029B                     	;# 
  1489  029C                     	;# 
  1490  029C                     	;# 
  1491  029D                     	;# 
  1492  029E                     	;# 
  1493  029F                     	;# 
  1494  0311                     	;# 
  1495  0311                     	;# 
  1496  0312                     	;# 
  1497  0313                     	;# 
  1498  0314                     	;# 
  1499  0315                     	;# 
  1500  0315                     	;# 
  1501  0316                     	;# 
  1502  0318                     	;# 
  1503  0318                     	;# 
  1504  0319                     	;# 
  1505  031A                     	;# 
  1506  031C                     	;# 
  1507  031C                     	;# 
  1508  031D                     	;# 
  1509  031E                     	;# 
  1510  0394                     	;# 
  1511  0395                     	;# 
  1512  0396                     	;# 
  1513  0415                     	;# 
  1514  0416                     	;# 
  1515  0417                     	;# 
  1516  041C                     	;# 
  1517  041D                     	;# 
  1518  041E                     	;# 
  1519  0791                     	;# 
  1520  0792                     	;# 
  1521  0793                     	;# 
  1522  0794                     	;# 
  1523  0795                     	;# 
  1524  0798                     	;# 
  1525  0799                     	;# 
  1526  079A                     	;# 
  1527  07A0                     	;# 
  1528  07A1                     	;# 
  1529  07A2                     	;# 
  1530  07A3                     	;# 
  1531  07A4                     	;# 
  1532  07A5                     	;# 
  1533  07A6                     	;# 
  1534  07A7                     	;# 
  1535  07A8                     	;# 
  1536  07A9                     	;# 
  1537  07AA                     	;# 
  1538  07AB                     	;# 
  1539  0FE4                     	;# 
  1540  0FE5                     	;# 
  1541  0FE6                     	;# 
  1542  0FE7                     	;# 
  1543  0FE8                     	;# 
  1544  0FE9                     	;# 
  1545  0FEA                     	;# 
  1546  0FEB                     	;# 
  1547  0FED                     	;# 
  1548  0FEE                     	;# 
  1549  0FEF                     	;# 
  1550  0000                     	;# 
  1551  0001                     	;# 
  1552  0002                     	;# 
  1553  0003                     	;# 
  1554  0004                     	;# 
  1555  0005                     	;# 
  1556  0006                     	;# 
  1557  0007                     	;# 
  1558  0008                     	;# 
  1559  0009                     	;# 
  1560  000A                     	;# 
  1561  000B                     	;# 
  1562  000C                     	;# 
  1563  000D                     	;# 
  1564  000E                     	;# 
  1565  000F                     	;# 
  1566  0010                     	;# 
  1567  0011                     	;# 
  1568  0012                     	;# 
  1569  0013                     	;# 
  1570  0015                     	;# 
  1571  0016                     	;# 
  1572  0016                     	;# 
  1573  0017                     	;# 
  1574  0018                     	;# 
  1575  0019                     	;# 
  1576  001A                     	;# 
  1577  001B                     	;# 
  1578  001C                     	;# 
  1579  001E                     	;# 
  1580  001F                     	;# 
  1581  008C                     	;# 
  1582  008D                     	;# 
  1583  008E                     	;# 
  1584  008F                     	;# 
  1585  0090                     	;# 
  1586  0091                     	;# 
  1587  0092                     	;# 
  1588  0093                     	;# 
  1589  0095                     	;# 
  1590  0096                     	;# 
  1591  0097                     	;# 
  1592  0098                     	;# 
  1593  0099                     	;# 
  1594  009A                     	;# 
  1595  009B                     	;# 
  1596  009B                     	;# 
  1597  009C                     	;# 
  1598  009D                     	;# 
  1599  009E                     	;# 
  1600  010C                     	;# 
  1601  010D                     	;# 
  1602  010E                     	;# 
  1603  010F                     	;# 
  1604  0110                     	;# 
  1605  0111                     	;# 
  1606  0112                     	;# 
  1607  0113                     	;# 
  1608  0114                     	;# 
  1609  0115                     	;# 
  1610  0116                     	;# 
  1611  0117                     	;# 
  1612  0118                     	;# 
  1613  0119                     	;# 
  1614  011A                     	;# 
  1615  011B                     	;# 
  1616  011D                     	;# 
  1617  018C                     	;# 
  1618  018D                     	;# 
  1619  018F                     	;# 
  1620  0190                     	;# 
  1621  0191                     	;# 
  1622  0191                     	;# 
  1623  0192                     	;# 
  1624  0193                     	;# 
  1625  0193                     	;# 
  1626  0193                     	;# 
  1627  0194                     	;# 
  1628  0195                     	;# 
  1629  0196                     	;# 
  1630  0199                     	;# 
  1631  019A                     	;# 
  1632  019B                     	;# 
  1633  019B                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019C                     	;# 
  1637  019C                     	;# 
  1638  019D                     	;# 
  1639  019E                     	;# 
  1640  019F                     	;# 
  1641  020D                     	;# 
  1642  0210                     	;# 
  1643  0211                     	;# 
  1644  0212                     	;# 
  1645  0213                     	;# 
  1646  0214                     	;# 
  1647  0215                     	;# 
  1648  0215                     	;# 
  1649  0216                     	;# 
  1650  0217                     	;# 
  1651  0291                     	;# 
  1652  0291                     	;# 
  1653  0292                     	;# 
  1654  0293                     	;# 
  1655  0294                     	;# 
  1656  0295                     	;# 
  1657  0295                     	;# 
  1658  0296                     	;# 
  1659  0298                     	;# 
  1660  0298                     	;# 
  1661  0299                     	;# 
  1662  029A                     	;# 
  1663  029B                     	;# 
  1664  029C                     	;# 
  1665  029C                     	;# 
  1666  029D                     	;# 
  1667  029E                     	;# 
  1668  029F                     	;# 
  1669  0311                     	;# 
  1670  0311                     	;# 
  1671  0312                     	;# 
  1672  0313                     	;# 
  1673  0314                     	;# 
  1674  0315                     	;# 
  1675  0315                     	;# 
  1676  0316                     	;# 
  1677  0318                     	;# 
  1678  0318                     	;# 
  1679  0319                     	;# 
  1680  031A                     	;# 
  1681  031C                     	;# 
  1682  031C                     	;# 
  1683  031D                     	;# 
  1684  031E                     	;# 
  1685  0394                     	;# 
  1686  0395                     	;# 
  1687  0396                     	;# 
  1688  0415                     	;# 
  1689  0416                     	;# 
  1690  0417                     	;# 
  1691  041C                     	;# 
  1692  041D                     	;# 
  1693  041E                     	;# 
  1694  0791                     	;# 
  1695  0792                     	;# 
  1696  0793                     	;# 
  1697  0794                     	;# 
  1698  0795                     	;# 
  1699  0798                     	;# 
  1700  0799                     	;# 
  1701  079A                     	;# 
  1702  07A0                     	;# 
  1703  07A1                     	;# 
  1704  07A2                     	;# 
  1705  07A3                     	;# 
  1706  07A4                     	;# 
  1707  07A5                     	;# 
  1708  07A6                     	;# 
  1709  07A7                     	;# 
  1710  07A8                     	;# 
  1711  07A9                     	;# 
  1712  07AA                     	;# 
  1713  07AB                     	;# 
  1714  0FE4                     	;# 
  1715  0FE5                     	;# 
  1716  0FE6                     	;# 
  1717  0FE7                     	;# 
  1718  0FE8                     	;# 
  1719  0FE9                     	;# 
  1720  0FEA                     	;# 
  1721  0FEB                     	;# 
  1722  0FED                     	;# 
  1723  0FEE                     	;# 
  1724  0FEF                     	;# 
  1725  0000                     	;# 
  1726  0001                     	;# 
  1727  0002                     	;# 
  1728  0003                     	;# 
  1729  0004                     	;# 
  1730  0005                     	;# 
  1731  0006                     	;# 
  1732  0007                     	;# 
  1733  0008                     	;# 
  1734  0009                     	;# 
  1735  000A                     	;# 
  1736  000B                     	;# 
  1737  000C                     	;# 
  1738  000D                     	;# 
  1739  000E                     	;# 
  1740  000F                     	;# 
  1741  0010                     	;# 
  1742  0011                     	;# 
  1743  0012                     	;# 
  1744  0013                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  001E                     	;# 
  1755  001F                     	;# 
  1756  008C                     	;# 
  1757  008D                     	;# 
  1758  008E                     	;# 
  1759  008F                     	;# 
  1760  0090                     	;# 
  1761  0091                     	;# 
  1762  0092                     	;# 
  1763  0093                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0098                     	;# 
  1768  0099                     	;# 
  1769  009A                     	;# 
  1770  009B                     	;# 
  1771  009B                     	;# 
  1772  009C                     	;# 
  1773  009D                     	;# 
  1774  009E                     	;# 
  1775  010C                     	;# 
  1776  010D                     	;# 
  1777  010E                     	;# 
  1778  010F                     	;# 
  1779  0110                     	;# 
  1780  0111                     	;# 
  1781  0112                     	;# 
  1782  0113                     	;# 
  1783  0114                     	;# 
  1784  0115                     	;# 
  1785  0116                     	;# 
  1786  0117                     	;# 
  1787  0118                     	;# 
  1788  0119                     	;# 
  1789  011A                     	;# 
  1790  011B                     	;# 
  1791  011D                     	;# 
  1792  018C                     	;# 
  1793  018D                     	;# 
  1794  018F                     	;# 
  1795  0190                     	;# 
  1796  0191                     	;# 
  1797  0191                     	;# 
  1798  0192                     	;# 
  1799  0193                     	;# 
  1800  0193                     	;# 
  1801  0193                     	;# 
  1802  0194                     	;# 
  1803  0195                     	;# 
  1804  0196                     	;# 
  1805  0199                     	;# 
  1806  019A                     	;# 
  1807  019B                     	;# 
  1808  019B                     	;# 
  1809  019B                     	;# 
  1810  019B                     	;# 
  1811  019C                     	;# 
  1812  019C                     	;# 
  1813  019D                     	;# 
  1814  019E                     	;# 
  1815  019F                     	;# 
  1816  020D                     	;# 
  1817  0210                     	;# 
  1818  0211                     	;# 
  1819  0212                     	;# 
  1820  0213                     	;# 
  1821  0214                     	;# 
  1822  0215                     	;# 
  1823  0215                     	;# 
  1824  0216                     	;# 
  1825  0217                     	;# 
  1826  0291                     	;# 
  1827  0291                     	;# 
  1828  0292                     	;# 
  1829  0293                     	;# 
  1830  0294                     	;# 
  1831  0295                     	;# 
  1832  0295                     	;# 
  1833  0296                     	;# 
  1834  0298                     	;# 
  1835  0298                     	;# 
  1836  0299                     	;# 
  1837  029A                     	;# 
  1838  029B                     	;# 
  1839  029C                     	;# 
  1840  029C                     	;# 
  1841  029D                     	;# 
  1842  029E                     	;# 
  1843  029F                     	;# 
  1844  0311                     	;# 
  1845  0311                     	;# 
  1846  0312                     	;# 
  1847  0313                     	;# 
  1848  0314                     	;# 
  1849  0315                     	;# 
  1850  0315                     	;# 
  1851  0316                     	;# 
  1852  0318                     	;# 
  1853  0318                     	;# 
  1854  0319                     	;# 
  1855  031A                     	;# 
  1856  031C                     	;# 
  1857  031C                     	;# 
  1858  031D                     	;# 
  1859  031E                     	;# 
  1860  0394                     	;# 
  1861  0395                     	;# 
  1862  0396                     	;# 
  1863  0415                     	;# 
  1864  0416                     	;# 
  1865  0417                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  0791                     	;# 
  1870  0792                     	;# 
  1871  0793                     	;# 
  1872  0794                     	;# 
  1873  0795                     	;# 
  1874  0798                     	;# 
  1875  0799                     	;# 
  1876  079A                     	;# 
  1877  07A0                     	;# 
  1878  07A1                     	;# 
  1879  07A2                     	;# 
  1880  07A3                     	;# 
  1881  07A4                     	;# 
  1882  07A5                     	;# 
  1883  07A6                     	;# 
  1884  07A7                     	;# 
  1885  07A8                     	;# 
  1886  07A9                     	;# 
  1887  07AA                     	;# 
  1888  07AB                     	;# 
  1889  0FE4                     	;# 
  1890  0FE5                     	;# 
  1891  0FE6                     	;# 
  1892  0FE7                     	;# 
  1893  0FE8                     	;# 
  1894  0FE9                     	;# 
  1895  0FEA                     	;# 
  1896  0FEB                     	;# 
  1897  0FED                     	;# 
  1898  0FEE                     	;# 
  1899  0FEF                     	;# 
  1900  0000                     	;# 
  1901  0001                     	;# 
  1902  0002                     	;# 
  1903  0003                     	;# 
  1904  0004                     	;# 
  1905  0005                     	;# 
  1906  0006                     	;# 
  1907  0007                     	;# 
  1908  0008                     	;# 
  1909  0009                     	;# 
  1910  000A                     	;# 
  1911  000B                     	;# 
  1912  000C                     	;# 
  1913  000D                     	;# 
  1914  000E                     	;# 
  1915  000F                     	;# 
  1916  0010                     	;# 
  1917  0011                     	;# 
  1918  0012                     	;# 
  1919  0013                     	;# 
  1920  0015                     	;# 
  1921  0016                     	;# 
  1922  0016                     	;# 
  1923  0017                     	;# 
  1924  0018                     	;# 
  1925  0019                     	;# 
  1926  001A                     	;# 
  1927  001B                     	;# 
  1928  001C                     	;# 
  1929  001E                     	;# 
  1930  001F                     	;# 
  1931  008C                     	;# 
  1932  008D                     	;# 
  1933  008E                     	;# 
  1934  008F                     	;# 
  1935  0090                     	;# 
  1936  0091                     	;# 
  1937  0092                     	;# 
  1938  0093                     	;# 
  1939  0095                     	;# 
  1940  0096                     	;# 
  1941  0097                     	;# 
  1942  0098                     	;# 
  1943  0099                     	;# 
  1944  009A                     	;# 
  1945  009B                     	;# 
  1946  009B                     	;# 
  1947  009C                     	;# 
  1948  009D                     	;# 
  1949  009E                     	;# 
  1950  010C                     	;# 
  1951  010D                     	;# 
  1952  010E                     	;# 
  1953  010F                     	;# 
  1954  0110                     	;# 
  1955  0111                     	;# 
  1956  0112                     	;# 
  1957  0113                     	;# 
  1958  0114                     	;# 
  1959  0115                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  0118                     	;# 
  1963  0119                     	;# 
  1964  011A                     	;# 
  1965  011B                     	;# 
  1966  011D                     	;# 
  1967  018C                     	;# 
  1968  018D                     	;# 
  1969  018F                     	;# 
  1970  0190                     	;# 
  1971  0191                     	;# 
  1972  0191                     	;# 
  1973  0192                     	;# 
  1974  0193                     	;# 
  1975  0193                     	;# 
  1976  0193                     	;# 
  1977  0194                     	;# 
  1978  0195                     	;# 
  1979  0196                     	;# 
  1980  0199                     	;# 
  1981  019A                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019C                     	;# 
  1987  019C                     	;# 
  1988  019D                     	;# 
  1989  019E                     	;# 
  1990  019F                     	;# 
  1991  020D                     	;# 
  1992  0210                     	;# 
  1993  0211                     	;# 
  1994  0212                     	;# 
  1995  0213                     	;# 
  1996  0214                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0217                     	;# 
  2001  0291                     	;# 
  2002  0291                     	;# 
  2003  0292                     	;# 
  2004  0293                     	;# 
  2005  0294                     	;# 
  2006  0295                     	;# 
  2007  0295                     	;# 
  2008  0296                     	;# 
  2009  0298                     	;# 
  2010  0298                     	;# 
  2011  0299                     	;# 
  2012  029A                     	;# 
  2013  029B                     	;# 
  2014  029C                     	;# 
  2015  029C                     	;# 
  2016  029D                     	;# 
  2017  029E                     	;# 
  2018  029F                     	;# 
  2019  0311                     	;# 
  2020  0311                     	;# 
  2021  0312                     	;# 
  2022  0313                     	;# 
  2023  0314                     	;# 
  2024  0315                     	;# 
  2025  0315                     	;# 
  2026  0316                     	;# 
  2027  0318                     	;# 
  2028  0318                     	;# 
  2029  0319                     	;# 
  2030  031A                     	;# 
  2031  031C                     	;# 
  2032  031C                     	;# 
  2033  031D                     	;# 
  2034  031E                     	;# 
  2035  0394                     	;# 
  2036  0395                     	;# 
  2037  0396                     	;# 
  2038  0415                     	;# 
  2039  0416                     	;# 
  2040  0417                     	;# 
  2041  041C                     	;# 
  2042  041D                     	;# 
  2043  041E                     	;# 
  2044  0791                     	;# 
  2045  0792                     	;# 
  2046  0793                     	;# 
  2047  0794                     	;# 
  2048  0795                     	;# 
  2049  0798                     	;# 
  2050  0799                     	;# 
  2051  079A                     	;# 
  2052  07A0                     	;# 
  2053  07A1                     	;# 
  2054  07A2                     	;# 
  2055  07A3                     	;# 
  2056  07A4                     	;# 
  2057  07A5                     	;# 
  2058  07A6                     	;# 
  2059  07A7                     	;# 
  2060  07A8                     	;# 
  2061  07A9                     	;# 
  2062  07AA                     	;# 
  2063  07AB                     	;# 
  2064  0FE4                     	;# 
  2065  0FE5                     	;# 
  2066  0FE6                     	;# 
  2067  0FE7                     	;# 
  2068  0FE8                     	;# 
  2069  0FE9                     	;# 
  2070  0FEA                     	;# 
  2071  0FEB                     	;# 
  2072  0FED                     	;# 
  2073  0FEE                     	;# 
  2074  0FEF                     	;# 
  2075  0000                     	;# 
  2076  0001                     	;# 
  2077  0002                     	;# 
  2078  0003                     	;# 
  2079  0004                     	;# 
  2080  0005                     	;# 
  2081  0006                     	;# 
  2082  0007                     	;# 
  2083  0008                     	;# 
  2084  0009                     	;# 
  2085  000A                     	;# 
  2086  000B                     	;# 
  2087  000C                     	;# 
  2088  000D                     	;# 
  2089  000E                     	;# 
  2090  000F                     	;# 
  2091  0010                     	;# 
  2092  0011                     	;# 
  2093  0012                     	;# 
  2094  0013                     	;# 
  2095  0015                     	;# 
  2096  0016                     	;# 
  2097  0016                     	;# 
  2098  0017                     	;# 
  2099  0018                     	;# 
  2100  0019                     	;# 
  2101  001A                     	;# 
  2102  001B                     	;# 
  2103  001C                     	;# 
  2104  001E                     	;# 
  2105  001F                     	;# 
  2106  008C                     	;# 
  2107  008D                     	;# 
  2108  008E                     	;# 
  2109  008F                     	;# 
  2110  0090                     	;# 
  2111  0091                     	;# 
  2112  0092                     	;# 
  2113  0093                     	;# 
  2114  0095                     	;# 
  2115  0096                     	;# 
  2116  0097                     	;# 
  2117  0098                     	;# 
  2118  0099                     	;# 
  2119  009A                     	;# 
  2120  009B                     	;# 
  2121  009B                     	;# 
  2122  009C                     	;# 
  2123  009D                     	;# 
  2124  009E                     	;# 
  2125  010C                     	;# 
  2126  010D                     	;# 
  2127  010E                     	;# 
  2128  010F                     	;# 
  2129  0110                     	;# 
  2130  0111                     	;# 
  2131  0112                     	;# 
  2132  0113                     	;# 
  2133  0114                     	;# 
  2134  0115                     	;# 
  2135  0116                     	;# 
  2136  0117                     	;# 
  2137  0118                     	;# 
  2138  0119                     	;# 
  2139  011A                     	;# 
  2140  011B                     	;# 
  2141  011D                     	;# 
  2142  018C                     	;# 
  2143  018D                     	;# 
  2144  018F                     	;# 
  2145  0190                     	;# 
  2146  0191                     	;# 
  2147  0191                     	;# 
  2148  0192                     	;# 
  2149  0193                     	;# 
  2150  0193                     	;# 
  2151  0193                     	;# 
  2152  0194                     	;# 
  2153  0195                     	;# 
  2154  0196                     	;# 
  2155  0199                     	;# 
  2156  019A                     	;# 
  2157  019B                     	;# 
  2158  019B                     	;# 
  2159  019B                     	;# 
  2160  019B                     	;# 
  2161  019C                     	;# 
  2162  019C                     	;# 
  2163  019D                     	;# 
  2164  019E                     	;# 
  2165  019F                     	;# 
  2166  020D                     	;# 
  2167  0210                     	;# 
  2168  0211                     	;# 
  2169  0212                     	;# 
  2170  0213                     	;# 
  2171  0214                     	;# 
  2172  0215                     	;# 
  2173  0215                     	;# 
  2174  0216                     	;# 
  2175  0217                     	;# 
  2176  0291                     	;# 
  2177  0291                     	;# 
  2178  0292                     	;# 
  2179  0293                     	;# 
  2180  0294                     	;# 
  2181  0295                     	;# 
  2182  0295                     	;# 
  2183  0296                     	;# 
  2184  0298                     	;# 
  2185  0298                     	;# 
  2186  0299                     	;# 
  2187  029A                     	;# 
  2188  029B                     	;# 
  2189  029C                     	;# 
  2190  029C                     	;# 
  2191  029D                     	;# 
  2192  029E                     	;# 
  2193  029F                     	;# 
  2194  0311                     	;# 
  2195  0311                     	;# 
  2196  0312                     	;# 
  2197  0313                     	;# 
  2198  0314                     	;# 
  2199  0315                     	;# 
  2200  0315                     	;# 
  2201  0316                     	;# 
  2202  0318                     	;# 
  2203  0318                     	;# 
  2204  0319                     	;# 
  2205  031A                     	;# 
  2206  031C                     	;# 
  2207  031C                     	;# 
  2208  031D                     	;# 
  2209  031E                     	;# 
  2210  0394                     	;# 
  2211  0395                     	;# 
  2212  0396                     	;# 
  2213  0415                     	;# 
  2214  0416                     	;# 
  2215  0417                     	;# 
  2216  041C                     	;# 
  2217  041D                     	;# 
  2218  041E                     	;# 
  2219  0791                     	;# 
  2220  0792                     	;# 
  2221  0793                     	;# 
  2222  0794                     	;# 
  2223  0795                     	;# 
  2224  0798                     	;# 
  2225  0799                     	;# 
  2226  079A                     	;# 
  2227  07A0                     	;# 
  2228  07A1                     	;# 
  2229  07A2                     	;# 
  2230  07A3                     	;# 
  2231  07A4                     	;# 
  2232  07A5                     	;# 
  2233  07A6                     	;# 
  2234  07A7                     	;# 
  2235  07A8                     	;# 
  2236  07A9                     	;# 
  2237  07AA                     	;# 
  2238  07AB                     	;# 
  2239  0FE4                     	;# 
  2240  0FE5                     	;# 
  2241  0FE6                     	;# 
  2242  0FE7                     	;# 
  2243  0FE8                     	;# 
  2244  0FE9                     	;# 
  2245  0FEA                     	;# 
  2246  0FEB                     	;# 
  2247  0FED                     	;# 
  2248  0FEE                     	;# 
  2249  0FEF                     	;# 
  2250                           
  2251                           	psect	idataBANK2
  2252  0002                     __pidataBANK2:	
  2253                           
  2254                           ;initializer for _temp_setata
  2255  0002  3425               	retlw	37
  2256  0003  3400               	retlw	0
  2257                           
  2258                           	psect	idataBANK3
  2259  1441                     __pidataBANK3:	
  2260                           
  2261                           ;initializer for _btn
  2262  1441  3414               	retlw	20
  2263  1442  3400               	retlw	0
  2264                           
  2265                           	psect	idataBANK4
  2266  16AD                     __pidataBANK4:	
  2267                           
  2268                           ;initializer for comparare@F3786
  2269  16AD  34BA               	retlw	186
  2270  16AE  340B               	retlw	11
  2271  16AF  3481               	retlw	129
  2272  16B0  340A               	retlw	10
  2273  16B1  3449               	retlw	73
  2274  16B2  3409               	retlw	9
  2275  16B3  3458               	retlw	88
  2276  16B4  3408               	retlw	8
  2277  16B5  3467               	retlw	103
  2278  16B6  3407               	retlw	7
  2279  16B7  34AB               	retlw	171
  2280  16B8  3406               	retlw	6
  2281  16B9  34F0               	retlw	240
  2282  16BA  3405               	retlw	5
  2283  16BB  345E               	retlw	94
  2284  16BC  3405               	retlw	5
  2285  16BD  34CC               	retlw	204
  2286  16BE  3404               	retlw	4
  2287  16BF  345A               	retlw	90
  2288  16C0  3404               	retlw	4
  2289  16C1  34E8               	retlw	232
  2290  16C2  3403               	retlw	3
  2291  16C3  348C               	retlw	140
  2292  16C4  3403               	retlw	3
  2293  16C5  3431               	retlw	49
  2294  16C6  3403               	retlw	3
  2295  16C7  34E9               	retlw	233
  2296  16C8  3402               	retlw	2
  2297  16C9  34A1               	retlw	161
  2298  16CA  3402               	retlw	2
  2299  16CB  3467               	retlw	103
  2300  16CC  3402               	retlw	2
  2301  16CD  342D               	retlw	45
  2302  16CE  3402               	retlw	2
  2303  16CF  34FE               	retlw	254
  2304  16D0  3401               	retlw	1
  2305  16D1  34CF               	retlw	207
  2306  16D2  3401               	retlw	1
  2307  16D3  34A7               	retlw	167
  2308  16D4  3401               	retlw	1
  2309  16D5  347F               	retlw	127
  2310  16D6  3401               	retlw	1
  2311                           
  2312                           	psect	stringtext1
  2313  18B5                     __pstringtext1:	
  2314  18B5                     _dpowers:	
  2315  18B5  3401               	retlw	1
  2316  18B6  3400               	retlw	0
  2317  18B7  340A               	retlw	10
  2318  18B8  3400               	retlw	0
  2319  18B9  3464               	retlw	100
  2320  18BA  3400               	retlw	0
  2321  18BB  34E8               	retlw	232
  2322  18BC  3403               	retlw	3
  2323  18BD  3410               	retlw	16
  2324  18BE  3427               	retlw	39
  2325  18BF                     __end_of_dpowers:	
  2326                           
  2327                           	psect	nvBANK2
  2328  016B                     __pnvBANK2:	
  2329  016B                     _timer1ReloadVal:	
  2330  016B                     	ds	2
  2331  016D                     _eusartTxBufferRemaining:	
  2332  016D                     	ds	1
  2333                           
  2334                           	psect	nvBANK3
  2335  01E3                     __pnvBANK3:	
  2336  01E3                     _TMR1_InterruptHandler:	
  2337  01E3                     	ds	2
  2338  000F                     _PORTDbits	set	15
  2339  000F                     _PORTD	set	15
  2340  000D                     _PORTB	set	13
  2341  0019                     _T1GCONbits	set	25
  2342  0018                     _T1CONbits	set	24
  2343  0016                     _TMR1L	set	22
  2344  0017                     _TMR1H	set	23
  2345  0019                     _T1GCON	set	25
  2346  0018                     _T1CON	set	24
  2347  0011                     _PIR1bits	set	17
  2348  000B                     _INTCONbits	set	11
  2349  005F                     _GIE	set	95
  2350  0018                     _CARRY	set	24
  2351  0078                     _RD0	set	120
  2352  0079                     _RD1	set	121
  2353  007B                     _RD3	set	123
  2354  008F                     _TRISDbits	set	143
  2355  008E                     _TRISCbits	set	142
  2356  009D                     _ADCON0bits	set	157
  2357  009C                     _ADRESH	set	156
  2358  009B                     _ADRESL	set	155
  2359  009E                     _ADCON1	set	158
  2360  009D                     _ADCON0	set	157
  2361  0091                     _PIE1bits	set	145
  2362  0095                     _OPTION_REGbits	set	149
  2363  008F                     _TRISD	set	143
  2364  008E                     _TRISC	set	142
  2365  008D                     _TRISB	set	141
  2366  008C                     _TRISA	set	140
  2367  0090                     _TRISE	set	144
  2368  0097                     _WDTCON	set	151
  2369  0098                     _OSCTUNE	set	152
  2370  0099                     _OSCCON	set	153
  2371  010C                     _LATAbits	set	268
  2372  010E                     _LATCbits	set	270
  2373  0117                     _FVRCON	set	279
  2374  011D                     _APFCON	set	285
  2375  010E                     _LATC	set	270
  2376  010D                     _LATB	set	269
  2377  010C                     _LATA	set	268
  2378  010F                     _LATD	set	271
  2379  0110                     _LATE	set	272
  2380  0191                     _EEADR	set	401
  2381  0196                     _EECON2	set	406
  2382  0193                     _EEDATA	set	403
  2383  0195                     _EECON1	set	405
  2384  0199                     _RCREG	set	409
  2385  019D                     _RCSTAbits	set	413
  2386  019A                     _TXREG	set	410
  2387  019C                     _SPBRGH	set	412
  2388  019B                     _SPBRGL	set	411
  2389  019E                     _TXSTA	set	414
  2390  019D                     _RCSTA	set	413
  2391  019F                     _BAUDCON	set	415
  2392  018C                     _ANSELA	set	396
  2393  0190                     _ANSELE	set	400
  2394  018F                     _ANSELD	set	399
  2395  018D                     _ANSELB	set	397
  2396  0CAA                     _WREN	set	3242
  2397  0CA8                     _RD	set	3240
  2398  0CA9                     _WR	set	3241
  2399  020D                     _WPUB	set	525
  2400  0210                     _WPUE	set	528
  2401                           
  2402                           	psect	stringtext2
  2403  1800                     __pstringtext2:	
  2404  1800                     STR_13:	
  2405  1800  3441               	retlw	65	;'A'
  2406  1801  3454               	retlw	84	;'T'
  2407  1802  342B               	retlw	43	;'+'
  2408  1803  3443               	retlw	67	;'C'
  2409  1804  344D               	retlw	77	;'M'
  2410  1805  3447               	retlw	71	;'G'
  2411  1806  3453               	retlw	83	;'S'
  2412  1807  343D               	retlw	61	;'='
  2413  1808  3422               	retlw	34	;'"'
  2414  1809  3430               	retlw	48	;'0'
  2415  180A  3437               	retlw	55	;'7'
  2416  180B  3435               	retlw	53	;'5'
  2417  180C  3438               	retlw	56	;'8'
  2418  180D  3434               	retlw	52	;'4'
  2419  180E  3432               	retlw	50	;'2'
  2420  180F  3436               	retlw	54	;'6'
  2421  1810  3439               	retlw	57	;'9'
  2422  1811  3432               	retlw	50	;'2'
  2423  1812  3439               	retlw	57	;'9'
  2424  1813  3422               	retlw	34	;'"'
  2425  1814  3400               	retlw	0
  2426                           
  2427                           	psect	stringtext3
  2428  1815                     __pstringtext3:	
  2429  1815                     STR_19:	
  2430  1815  3441               	retlw	65	;'A'
  2431  1816  3454               	retlw	84	;'T'
  2432  1817  342B               	retlw	43	;'+'
  2433  1818  3443               	retlw	67	;'C'
  2434  1819  344E               	retlw	78	;'N'
  2435  181A  344D               	retlw	77	;'M'
  2436  181B  3449               	retlw	73	;'I'
  2437  181C  343D               	retlw	61	;'='
  2438  181D  3431               	retlw	49	;'1'
  2439  181E  342C               	retlw	44	;','
  2440  181F  3432               	retlw	50	;'2'
  2441  1820  342C               	retlw	44	;','
  2442  1821  3430               	retlw	48	;'0'
  2443  1822  342C               	retlw	44	;','
  2444  1823  3430               	retlw	48	;'0'
  2445  1824  342C               	retlw	44	;','
  2446  1825  3430               	retlw	48	;'0'
  2447  1826  3400               	retlw	0
  2448                           
  2449                           	psect	stringtext4
  2450  1827                     __pstringtext4:	
  2451  1827                     STR_15:	
  2452  1827  3420               	retlw	32	;' '
  2453  1828  3455               	retlw	85	;'U'
  2454  1829  346D               	retlw	109	;'m'
  2455  182A  3469               	retlw	105	;'i'
  2456  182B  3464               	retlw	100	;'d'
  2457  182C  343D               	retlw	61	;'='
  2458  182D  3425               	retlw	37	;'%'
  2459  182E  3464               	retlw	100	;'d'
  2460  182F  3420               	retlw	32	;' '
  2461  1830  3420               	retlw	32	;' '
  2462  1831  3420               	retlw	32	;' '
  2463  1832  3420               	retlw	32	;' '
  2464  1833  3420               	retlw	32	;' '
  2465  1834  3420               	retlw	32	;' '
  2466  1835  3420               	retlw	32	;' '
  2467  1836  3420               	retlw	32	;' '
  2468  1837  3400               	retlw	0
  2469                           
  2470                           	psect	stringtext5
  2471  1838                     __pstringtext5:	
  2472  1838                     STR_14:	
  2473  1838  3420               	retlw	32	;' '
  2474  1839  3454               	retlw	84	;'T'
  2475  183A  3465               	retlw	101	;'e'
  2476  183B  346D               	retlw	109	;'m'
  2477  183C  3470               	retlw	112	;'p'
  2478  183D  3465               	retlw	101	;'e'
  2479  183E  3472               	retlw	114	;'r'
  2480  183F  343D               	retlw	61	;'='
  2481  1840  3425               	retlw	37	;'%'
  2482  1841  3464               	retlw	100	;'d'
  2483  1842  3420               	retlw	32	;' '
  2484  1843  3420               	retlw	32	;' '
  2485  1844  3420               	retlw	32	;' '
  2486  1845  3420               	retlw	32	;' '
  2487  1846  3420               	retlw	32	;' '
  2488  1847  3420               	retlw	32	;' '
  2489  1848  3400               	retlw	0
  2490                           
  2491                           	psect	stringtext6
  2492  1849                     __pstringtext6:	
  2493  1849                     STR_9:	
  2494  1849  3420               	retlw	32	;' '
  2495  184A  3449               	retlw	73	;'I'
  2496  184B  346E               	retlw	110	;'n'
  2497  184C  3474               	retlw	116	;'t'
  2498  184D  346F               	retlw	111	;'o'
  2499  184E  3461               	retlw	97	;'a'
  2500  184F  3472               	retlw	114	;'r'
  2501  1850  3463               	retlw	99	;'c'
  2502  1851  3465               	retlw	101	;'e'
  2503  1852  3472               	retlw	114	;'r'
  2504  1853  3465               	retlw	101	;'e'
  2505  1854  3420               	retlw	32	;' '
  2506  1855  346F               	retlw	111	;'o'
  2507  1856  3475               	retlw	117	;'u'
  2508  1857  3461               	retlw	97	;'a'
  2509  1858  3421               	retlw	33	;'!'
  2510  1859  3400               	retlw	0
  2511                           
  2512                           	psect	stringtext7
  2513  185A                     __pstringtext7:	
  2514  185A                     STR_5:	
  2515  185A  3420               	retlw	32	;' '
  2516  185B  3454               	retlw	84	;'T'
  2517  185C  3465               	retlw	101	;'e'
  2518  185D  346D               	retlw	109	;'m'
  2519  185E  3470               	retlw	112	;'p'
  2520  185F  3420               	retlw	32	;' '
  2521  1860  3473               	retlw	115	;'s'
  2522  1861  3465               	retlw	101	;'e'
  2523  1862  3474               	retlw	116	;'t'
  2524  1863  3461               	retlw	97	;'a'
  2525  1864  3474               	retlw	116	;'t'
  2526  1865  3420               	retlw	32	;' '
  2527  1866  3465               	retlw	101	;'e'
  2528  1867  3473               	retlw	115	;'s'
  2529  1868  3474               	retlw	116	;'t'
  2530  1869  3465               	retlw	101	;'e'
  2531  186A  3400               	retlw	0
  2532                           
  2533                           	psect	stringtext8
  2534  186B                     __pstringtext8:	
  2535  186B                     STR_11:	
  2536  186B  3420               	retlw	32	;' '
  2537  186C  3420               	retlw	32	;' '
  2538  186D  3420               	retlw	32	;' '
  2539  186E  3469               	retlw	105	;'i'
  2540  186F  346E               	retlw	110	;'n'
  2541  1870  3469               	retlw	105	;'i'
  2542  1871  3474               	retlw	116	;'t'
  2543  1872  3469               	retlw	105	;'i'
  2544  1873  3461               	retlw	97	;'a'
  2545  1874  346C               	retlw	108	;'l'
  2546  1875  3469               	retlw	105	;'i'
  2547  1876  347A               	retlw	122	;'z'
  2548  1877  3465               	retlw	101	;'e'
  2549  1878  3420               	retlw	32	;' '
  2550  1879  3420               	retlw	32	;' '
  2551  187A  3400               	retlw	0
  2552                           
  2553                           	psect	stringtext9
  2554  187B                     __pstringtext9:	
  2555  187B                     STR_17:	
  2556  187B  3441               	retlw	65	;'A'
  2557  187C  3454               	retlw	84	;'T'
  2558  187D  342B               	retlw	43	;'+'
  2559  187E  3443               	retlw	67	;'C'
  2560  187F  3450               	retlw	80	;'P'
  2561  1880  3449               	retlw	73	;'I'
  2562  1881  344E               	retlw	78	;'N'
  2563  1882  343D               	retlw	61	;'='
  2564  1883  3422               	retlw	34	;'"'
  2565  1884  3430               	retlw	48	;'0'
  2566  1885  3430               	retlw	48	;'0'
  2567  1886  3430               	retlw	48	;'0'
  2568  1887  3430               	retlw	48	;'0'
  2569  1888  3422               	retlw	34	;'"'
  2570  1889  3400               	retlw	0
  2571                           
  2572                           	psect	stringtext10
  2573  188A                     __pstringtext10:	
  2574  188A                     STR_21:	
  2575  188A  3420               	retlw	32	;' '
  2576  188B  3454               	retlw	84	;'T'
  2577  188C  3472               	retlw	114	;'r'
  2578  188D  3469               	retlw	105	;'i'
  2579  188E  346D               	retlw	109	;'m'
  2580  188F  3469               	retlw	105	;'i'
  2581  1890  3474               	retlw	116	;'t'
  2582  1891  3465               	retlw	101	;'e'
  2583  1892  3472               	retlw	114	;'r'
  2584  1893  3465               	retlw	101	;'e'
  2585  1894  3420               	retlw	32	;' '
  2586  1895  3473               	retlw	115	;'s'
  2587  1896  346D               	retlw	109	;'m'
  2588  1897  3473               	retlw	115	;'s'
  2589  1898  3400               	retlw	0
  2590                           
  2591                           	psect	stringtext11
  2592  1899                     __pstringtext11:	
  2593  1899                     STR_12:	
  2594  1899  3441               	retlw	65	;'A'
  2595  189A  3454               	retlw	84	;'T'
  2596  189B  342B               	retlw	43	;'+'
  2597  189C  3443               	retlw	67	;'C'
  2598  189D  3453               	retlw	83	;'S'
  2599  189E  3443               	retlw	67	;'C'
  2600  189F  3453               	retlw	83	;'S'
  2601  18A0  343D               	retlw	61	;'='
  2602  18A1  3422               	retlw	34	;'"'
  2603  18A2  3447               	retlw	71	;'G'
  2604  18A3  3453               	retlw	83	;'S'
  2605  18A4  344D               	retlw	77	;'M'
  2606  18A5  3422               	retlw	34	;'"'
  2607  18A6  3400               	retlw	0
  2608                           
  2609                           	psect	stringtext12
  2610  18A7                     __pstringtext12:	
  2611  18A7                     STR_10:	
  2612  18A7  3420               	retlw	32	;' '
  2613  18A8  3420               	retlw	32	;' '
  2614  18A9  3420               	retlw	32	;' '
  2615  18AA  3457               	retlw	87	;'W'
  2616  18AB  3461               	retlw	97	;'a'
  2617  18AC  3469               	retlw	105	;'i'
  2618  18AD  3474               	retlw	116	;'t'
  2619  18AE  3420               	retlw	32	;' '
  2620  18AF  3466               	retlw	102	;'f'
  2621  18B0  346F               	retlw	111	;'o'
  2622  18B1  3472               	retlw	114	;'r'
  2623  18B2  3420               	retlw	32	;' '
  2624  18B3  3420               	retlw	32	;' '
  2625  18B4  3400               	retlw	0
  2626                           
  2627                           	psect	stringtext13
  2628  18BF                     __pstringtext13:	
  2629  18BF                     STR_18:	
  2630  18BF  3441               	retlw	65	;'A'
  2631  18C0  3454               	retlw	84	;'T'
  2632  18C1  342B               	retlw	43	;'+'
  2633  18C2  3443               	retlw	67	;'C'
  2634  18C3  344D               	retlw	77	;'M'
  2635  18C4  3447               	retlw	71	;'G'
  2636  18C5  3446               	retlw	70	;'F'
  2637  18C6  343D               	retlw	61	;'='
  2638  18C7  3431               	retlw	49	;'1'
  2639  18C8  3400               	retlw	0
  2640                           
  2641                           	psect	stringtext14
  2642  18C9                     __pstringtext14:	
  2643  18C9                     STR_4:	
  2644  18C9  3455               	retlw	85	;'U'
  2645  18CA  346D               	retlw	109	;'m'
  2646  18CB  3469               	retlw	105	;'i'
  2647  18CC  3464               	retlw	100	;'d'
  2648  18CD  343D               	retlw	61	;'='
  2649  18CE  3400               	retlw	0
  2650                           
  2651                           	psect	stringtext15
  2652  18CF                     __pstringtext15:	
  2653  18CF                     STR_1:	
  2654  18CF  3454               	retlw	84	;'T'
  2655  18D0  3465               	retlw	101	;'e'
  2656  18D1  346D               	retlw	109	;'m'
  2657  18D2  3470               	retlw	112	;'p'
  2658  18D3  343D               	retlw	61	;'='
  2659  18D4  3400               	retlw	0
  2660                           
  2661                           	psect	stringtext16
  2662  18D5                     __pstringtext16:	
  2663  18D5                     STR_16:	
  2664  18D5  3441               	retlw	65	;'A'
  2665  18D6  3454               	retlw	84	;'T'
  2666  18D7  3400               	retlw	0
  2667                           
  2668                           	psect	stringtext17
  2669  18D8                     __pstringtext17:	
  2670  18D8                     STR_3:	
  2671  18D8  3443               	retlw	67	;'C'
  2672  18D9  3420               	retlw	32	;' '
  2673  18DA  3400               	retlw	0
  2674                           
  2675                           	psect	stringtext18
  2676  18DB                     __pstringtext18:	
  2677  18DB                     STR_2:	
  2678  18DB  342E               	retlw	46	;'.'
  2679  18DC  3400               	retlw	0
  2680                           
  2681                           	psect	stringtext19
  2682  18DD                     __pstringtext19:	
  2683  18DD                     STR_8:	
  2684  18DD  3443               	retlw	67	;'C'
  2685  18DE  3400               	retlw	0
  2686                           
  2687                           	psect	stringtext20
  2688  0000                     __pstringtext20:	
  2689  1834                     
  2690                           ; #config settings
  2691  0000                     
  2692                           	psect	cinit
  2693  003E                     start_initialization:	
  2694  003E                     __initialization:	
  2695                           
  2696                           ; Initialize objects allocated to BANK2
  2697  003E  0022               	movlb	2	; select bank2
  2698  003F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  2699  0042  00EE               	movwf	__pdataBANK2& (0+127)
  2700  0043  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2701  0046  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  2702                           
  2703                           ; Initialize objects allocated to BANK3
  2704  0047  0023               	movlb	3	; select bank3
  2705  0048  3194  2441  3180   	fcall	__pidataBANK3	;fetch initializer
  2706  004B  00E5               	movwf	__pdataBANK3& (0+127)
  2707  004C  3194  2442  3180   	fcall	__pidataBANK3+1	;fetch initializer
  2708  004F  00E6               	movwf	(__pdataBANK3+1)& (0+127)
  2709                           
  2710                           ; Initialize objects allocated to BANK4
  2711  0050  30AD               	movlw	low __pidataBANK4
  2712  0051  0084               	movwf	4
  2713  0052  3096               	movlw	(high __pidataBANK4)| (0+128)
  2714  0053  0085               	movwf	5
  2715  0054  3020               	movlw	low __pdataBANK4
  2716  0055  0086               	movwf	6
  2717  0056  3002               	movlw	high __pdataBANK4
  2718  0057  0087               	movwf	7
  2719  0058  302A               	movlw	42
  2720  0059  3194  2471  3180   	fcall	init_ram
  2721                           
  2722                           ; Clear objects allocated to COMMON
  2723  005C  01FA               	clrf	__pbssCOMMON& (0+127)
  2724  005D  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2725                           
  2726                           ; Clear objects allocated to BANK0
  2727  005E  3063               	movlw	low __pbssBANK0
  2728  005F  0084               	movwf	4
  2729  0060  3000               	movlw	high __pbssBANK0
  2730  0061  0085               	movwf	5
  2731  0062  300C               	movlw	12
  2732  0063  3194  246B  3180   	fcall	clear_ram0
  2733                           
  2734                           ; Clear objects allocated to BANK1
  2735  0066  0021               	movlb	1	; select bank1
  2736  0067  01EF               	clrf	__pbssBANK1& (0+127)
  2737                           
  2738                           ; Clear objects allocated to BANK2
  2739  0068  304C               	movlw	low __pbssBANK2
  2740  0069  0084               	movwf	4
  2741  006A  3001               	movlw	high __pbssBANK2
  2742  006B  0085               	movwf	5
  2743  006C  301F               	movlw	31
  2744  006D  3194  246B  3180   	fcall	clear_ram0
  2745                           
  2746                           ; Clear objects allocated to BANK3
  2747  0070  30A0               	movlw	low __pbssBANK3
  2748  0071  0084               	movwf	4
  2749  0072  3001               	movlw	high __pbssBANK3
  2750  0073  0085               	movwf	5
  2751  0074  303B               	movlw	59
  2752  0075  3194  246B  3180   	fcall	clear_ram0
  2753                           
  2754                           ; Clear objects allocated to BANK5
  2755  0078  30A0               	movlw	low __pbssBANK5
  2756  0079  0084               	movwf	4
  2757  007A  3002               	movlw	high __pbssBANK5
  2758  007B  0085               	movwf	5
  2759  007C  304B               	movlw	75
  2760  007D  3194  246B         	fcall	clear_ram0
  2761  007F                     end_of_initialization:	
  2762                           ;End of C runtime variable initialization code
  2763                           
  2764  007F                     __end_of__initialization:	
  2765  007F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2766  0080  0020               	movlb	0
  2767  0081  3182  2A3D         	ljmp	_main	;jump to C main() function
  2768                           
  2769                           	psect	bssCOMMON
  2770  007A                     __pbssCOMMON:	
  2771  007A                     _menu_flag:	
  2772  007A                     	ds	1
  2773  007B                     _strKey_Counts:	
  2774  007B                     	ds	1
  2775                           
  2776                           	psect	bssBANK0
  2777  0063                     __pbssBANK0:	
  2778  0063                     _flag_directie:	
  2779  0063                     	ds	2
  2780  0065                     _step_nr:	
  2781  0065                     	ds	2
  2782  0067                     _rcreg:	
  2783  0067                     	ds	1
  2784  0068                     _eusartRxTail:	
  2785  0068                     	ds	1
  2786  0069                     _eusartRxHead:	
  2787  0069                     	ds	1
  2788  006A                     _eusartTxTail:	
  2789  006A                     	ds	1
  2790  006B                     _eusartTxHead:	
  2791  006B                     	ds	1
  2792  006C                     _T_byte1:	
  2793  006C                     	ds	1
  2794  006D                     _RH_byte1:	
  2795  006D                     	ds	1
  2796  006E                     _strKey_Pressed:	
  2797  006E                     	ds	1
  2798                           
  2799                           	psect	bssBANK1
  2800  00EF                     __pbssBANK1:	
  2801  00EF                     _eusartRxCount:	
  2802  00EF                     	ds	1
  2803                           
  2804                           	psect	bssBANK2
  2805  014C                     __pbssBANK2:	
  2806  014C                     _virgula_temp_setata:	
  2807  014C                     	ds	2
  2808  014E                     TMR1_ISR@CountCallBack:	
  2809  014E                     	ds	2
  2810  0150                     _flag_G:	
  2811  0150                     	ds	2
  2812  0152                     _flag_N:	
  2813  0152                     	ds	2
  2814  0154                     _flag_directie_read:	
  2815  0154                     	ds	2
  2816  0156                     _flag_on:	
  2817  0156                     	ds	2
  2818  0158                     _umiditate:	
  2819  0158                     	ds	2
  2820  015A                     _temp:	
  2821  015A                     	ds	2
  2822  015C                     sms_text@F3772:	
  2823  015C                     	ds	1
  2824  015D                     sms_text@F3770:	
  2825  015D                     	ds	1
  2826  015E                     _temp_virgula1:	
  2827  015E                     	ds	1
  2828  015F                     _temp_real1:	
  2829  015F                     	ds	1
  2830  0160                     _temp_virgula:	
  2831  0160                     	ds	1
  2832  0161                     _temp_real:	
  2833  0161                     	ds	1
  2834  0162                     _val:	
  2835  0162                     	ds	1
  2836  0163                     _Sum:	
  2837  0163                     	ds	1
  2838  0164                     _RH:	
  2839  0164                     	ds	1
  2840  0165                     _Temp:	
  2841  0165                     	ds	1
  2842  0166                     _Ch:	
  2843  0166                     	ds	1
  2844  0167                     _RH_byte2:	
  2845  0167                     	ds	1
  2846  0168                     _T_byte2:	
  2847  0168                     	ds	1
  2848  0169                     _Check:	
  2849  0169                     	ds	1
  2850  016A                     _strKey_Released:	
  2851  016A                     	ds	1
  2852                           
  2853                           	psect	dataBANK2
  2854  016E                     __pdataBANK2:	
  2855  016E                     _temp_setata:	
  2856  016E                     	ds	2
  2857                           
  2858                           	psect	bssBANK3
  2859  01A0                     __pbssBANK3:	
  2860  01A0                     _eusartRxBuffer:	
  2861  01A0                     	ds	8
  2862  01A8                     _eusartTxBuffer:	
  2863  01A8                     	ds	8
  2864  01B0                     LCDWriteInt@F3800:	
  2865  01B0                     	ds	5
  2866  01B5                     sms_text@sms_index:	
  2867  01B5                     	ds	2
  2868  01B7                     _supplay_security:	
  2869  01B7                     	ds	2
  2870  01B9                     _test_eeprom:	
  2871  01B9                     	ds	2
  2872  01BB                     _valoare:	
  2873  01BB                     	ds	2
  2874  01BD                     _rez:	
  2875  01BD                     	ds	2
  2876  01BF                     _count_4000_ms:	
  2877  01BF                     	ds	2
  2878  01C1                     _count_1000_ms:	
  2879  01C1                     	ds	2
  2880  01C3                     _count_500_ms:	
  2881  01C3                     	ds	2
  2882  01C5                     _count_100_ms:	
  2883  01C5                     	ds	2
  2884  01C7                     _flag_4000_ms:	
  2885  01C7                     	ds	2
  2886  01C9                     _flag_1000_ms:	
  2887  01C9                     	ds	2
  2888  01CB                     _flag_500_ms:	
  2889  01CB                     	ds	2
  2890  01CD                     _flag_100_ms:	
  2891  01CD                     	ds	2
  2892  01CF                     _flag_10_ms:	
  2893  01CF                     	ds	2
  2894  01D1                     _flag_1_ms:	
  2895  01D1                     	ds	2
  2896  01D3                     _flag_B:	
  2897  01D3                     	ds	2
  2898  01D5                     _flag_A:	
  2899  01D5                     	ds	2
  2900  01D7                     _flag_step:	
  2901  01D7                     	ds	2
  2902  01D9                     _rez_conversie:	
  2903  01D9                     	ds	2
  2904                           
  2905                           	psect	dataBANK3
  2906  01E5                     __pdataBANK3:	
  2907  01E5                     _btn:	
  2908  01E5                     	ds	2
  2909                           
  2910                           	psect	dataBANK4
  2911  0220                     __pdataBANK4:	
  2912  0220                     comparare@F3786:	
  2913  0220                     	ds	42
  2914                           
  2915                           	psect	bssBANK5
  2916  02A0                     __pbssBANK5:	
  2917  02A0                     comparare@F3791:	
  2918  02A0                     	ds	75
  2919                           
  2920                           	psect	inittext
  2921  1471                     init_ram:	
  2922  1471  00FE               	movwf	126
  2923  1472                     initloop:	
  2924  1472  0012               	moviw fsr0++
  2925  1473  001E               	movwi fsr1++
  2926  1474  0BFE               	decfsz	126,f
  2927  1475  2C72               	goto	initloop
  2928  1476  3400               	retlw	0
  2929                           
  2930                           	psect	clrtext
  2931  146B                     clear_ram0:	
  2932                           ;	Called with FSR0 containing the base address, and
  2933                           ;	WREG with the size to clear
  2934                           
  2935  146B  0064               	clrwdt	;clear the watchdog before getting into this loop
  2936  146C                     clrloop0:	
  2937  146C  0180               	clrf	0	;clear RAM location pointed to by FSR
  2938  146D  3101               	addfsr 0,1
  2939  146E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2940  146F  2C6C               	goto	clrloop0	;have we reached the end yet?
  2941  1470  3400               	retlw	0	;all done for this memory range, return
  2942                           
  2943                           	psect	cstackBANK3
  2944  01DB                     __pcstackBANK3:	
  2945  01DB                     main@flag_scriere:	
  2946                           
  2947                           ; 2 bytes @ 0x0
  2948  01DB                     	ds	2
  2949  01DD                     main@flag_citire:	
  2950                           
  2951                           ; 2 bytes @ 0x2
  2952  01DD                     	ds	2
  2953  01DF                     main@x:	
  2954                           
  2955                           ; 1 bytes @ 0x4
  2956  01DF                     	ds	1
  2957  01E0                     main@volt:	
  2958                           
  2959                           ; 3 bytes @ 0x5
  2960  01E0                     	ds	3
  2961                           
  2962                           	psect	cstackBANK2
  2963  0120                     __pcstackBANK2:	
  2964  0120                     comparare@res:	
  2965                           
  2966                           ; 42 bytes @ 0x0
  2967  0120                     	ds	42
  2968  014A                     comparare@i:	
  2969                           
  2970                           ; 2 bytes @ 0x2A
  2971  014A                     	ds	2
  2972                           
  2973                           	psect	cstackBANK1
  2974  00A0                     __pcstackBANK1:	
  2975  00A0                     comparare@table:	
  2976                           
  2977                           ; 75 bytes @ 0x0
  2978  00A0                     	ds	75
  2979  00EB                     comparare@j:	
  2980                           
  2981                           ; 2 bytes @ 0x4B
  2982  00EB                     	ds	2
  2983  00ED                     comparare@j_912:	
  2984                           
  2985                           ; 2 bytes @ 0x4D
  2986  00ED                     	ds	2
  2987                           
  2988                           	psect	cstackCOMMON
  2989  0070                     __pcstackCOMMON:	
  2990  0070                     ?_PIN_MANAGER_Initialize:	
  2991  0070                     ?_OSCILLATOR_Initialize:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994  0070                     ?_WDT_Initialize:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997  0070                     ?_TMR1_Initialize:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000  0070                     ?_ADC_Initialize:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003  0070                     ?_EUSART_Initialize:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006  0070                     ?_ADC_ISR:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009  0070                     ??_ADC_ISR:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012  0070                     ?_TMR1_ISR:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015  0070                     ??_TMR1_ISR:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018  0070                     ?_TMR1_DefaultInterruptHandler:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021  0070                     ??_TMR1_DefaultInterruptHandler:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024  0070                     ?_TMR1_StartTimer:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027  0070                     ?_TMR1_CallBack:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030  0070                     ??_TMR1_CallBack:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033  0070                     ?_eeprom_read:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036  0070                     ?_LCD_Init_apdatat:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039  0070                     ?_Check_key:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042  0070                     ?_turn_egs:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045  0070                     ?_LCDInit:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048  0070                     ?_int_gsm:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_StartSignal:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_CheckResponse:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_DHT_result:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_Keyboard_Manager:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_command_turn:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_check_status_incubator:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ?_Check_KeyPressed:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_Check_KeyReleased:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_SYSTEM_Initialize:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_EUSART_Write:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_EUSART_Transmit_ISR:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ??_EUSART_Transmit_ISR:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?_EUSART_Receive_ISR:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ??_EUSART_Receive_ISR:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?_INTERRUPT_InterruptManager:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ?_TMR1_disable:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?_TMR1_enable:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     ?_ADC_StartConversion:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     ?_afisare_inf_lcd:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     ?_setare_temperatura:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ?_state_of_button:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114  0070                     ?_main:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117  0070                     ?_sms_text:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0070                     ?_ReadData:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123                           
  3124                           ; 1 bytes @ 0x0
  3125  0070                     	ds	1
  3126  0071                     ??_INTERRUPT_InterruptManager:	
  3127                           
  3128                           ; 1 bytes @ 0x1
  3129  0071                     	ds	1
  3130  0072                     ??_PIN_MANAGER_Initialize:	
  3131  0072                     ??_OSCILLATOR_Initialize:	
  3132                           ; 1 bytes @ 0x2
  3133                           
  3134  0072                     ??_WDT_Initialize:	
  3135                           ; 1 bytes @ 0x2
  3136                           
  3137  0072                     ??_ADC_Initialize:	
  3138                           ; 1 bytes @ 0x2
  3139                           
  3140  0072                     ??_EUSART_Initialize:	
  3141                           ; 1 bytes @ 0x2
  3142                           
  3143  0072                     ?_TMR1_SetInterruptHandler:	
  3144                           ; 1 bytes @ 0x2
  3145                           
  3146  0072                     ??_TMR1_StartTimer:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149  0072                     ?_eeprom_write:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152  0072                     ??_eeprom_read:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0072                     ?_LCDByte:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158  0072                     ??_Check_key:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161  0072                     ??_turn_egs:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164  0072                     ??_StartSignal:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167  0072                     ??_CheckResponse:	
  3168                           ; 1 bytes @ 0x2
  3169                           
  3170  0072                     ??_Check_KeyPressed:	
  3171                           ; 1 bytes @ 0x2
  3172                           
  3173  0072                     ??_Check_KeyReleased:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0072                     ??_EUSART_Write:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0072                     ??_TMR1_disable:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0072                     ??_TMR1_enable:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0072                     ??_ADC_StartConversion:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0072                     ??_ReadData:	
  3189                           ; 1 bytes @ 0x2
  3190                           
  3191  0072                     ?___bmul:	
  3192                           ; 1 bytes @ 0x2
  3193                           
  3194  0072                     ?_ADC_GetConversion:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0072                     ?___wmul:	
  3198                           ; 2 bytes @ 0x2
  3199                           
  3200  0072                     ?___awdiv:	
  3201                           ; 2 bytes @ 0x2
  3202                           
  3203  0072                     ?___awmod:	
  3204                           ; 2 bytes @ 0x2
  3205                           
  3206  0072                     ?___lwdiv:	
  3207                           ; 2 bytes @ 0x2
  3208                           
  3209  0072                     ?___ftpack:	
  3210                           ; 2 bytes @ 0x2
  3211                           
  3212  0072                     ?___fttol:	
  3213                           ; 3 bytes @ 0x2
  3214                           
  3215  0072                     LCDByte@isdata:	
  3216                           ; 4 bytes @ 0x2
  3217                           
  3218  0072                     Check_key@btn_mask:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0072                     eeprom_write@value:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0072                     ___bmul@multiplicand:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0072                     TMR1_SetInterruptHandler@InterruptHandler:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0072                     ___wmul@multiplier:	
  3231                           ; 2 bytes @ 0x2
  3232                           
  3233  0072                     ___awdiv@divisor:	
  3234                           ; 2 bytes @ 0x2
  3235                           
  3236  0072                     ___awmod@divisor:	
  3237                           ; 2 bytes @ 0x2
  3238                           
  3239  0072                     ___lwdiv@divisor:	
  3240                           ; 2 bytes @ 0x2
  3241                           
  3242  0072                     ___ftpack@arg:	
  3243                           ; 2 bytes @ 0x2
  3244                           
  3245  0072                     ___fttol@f1:	
  3246                           ; 3 bytes @ 0x2
  3247                           
  3248                           
  3249                           ; 3 bytes @ 0x2
  3250  0072                     	ds	1
  3251  0073                     ??_eeprom_write:	
  3252  0073                     ??_LCDByte:	
  3253                           ; 1 bytes @ 0x3
  3254                           
  3255  0073                     ??_Keyboard_Manager:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258  0073                     ??___bmul:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     EUSART_Write@txData:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     Check_key@btn_pressed:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267                           
  3268                           ; 1 bytes @ 0x3
  3269  0073                     	ds	1
  3270  0074                     ??_TMR1_Initialize:	
  3271  0074                     ??_TMR1_SetInterruptHandler:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274  0074                     ??_SYSTEM_Initialize:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277  0074                     ?_putch:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280  0074                     putch@txData:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283  0074                     ADC_GetConversion@channel:	
  3284                           ; 1 bytes @ 0x4
  3285                           
  3286  0074                     ReadData@i:	
  3287                           ; 1 bytes @ 0x4
  3288                           
  3289  0074                     ___bmul@product:	
  3290                           ; 1 bytes @ 0x4
  3291                           
  3292  0074                     ___wmul@multiplicand:	
  3293                           ; 1 bytes @ 0x4
  3294                           
  3295  0074                     ___awdiv@dividend:	
  3296                           ; 2 bytes @ 0x4
  3297                           
  3298  0074                     ___awmod@dividend:	
  3299                           ; 2 bytes @ 0x4
  3300                           
  3301  0074                     ___lwdiv@dividend:	
  3302                           ; 2 bytes @ 0x4
  3303                           
  3304                           
  3305                           ; 2 bytes @ 0x4
  3306  0074                     	ds	1
  3307  0075                     ??_putch:	
  3308  0075                     LCDByte@hn:	
  3309                           ; 1 bytes @ 0x5
  3310                           
  3311  0075                     ReadData@j:	
  3312                           ; 1 bytes @ 0x5
  3313                           
  3314  0075                     eeprom_read@addr:	
  3315                           ; 1 bytes @ 0x5
  3316                           
  3317  0075                     eeprom_write@addr:	
  3318                           ; 1 bytes @ 0x5
  3319                           
  3320  0075                     ___bmul@multiplier:	
  3321                           ; 1 bytes @ 0x5
  3322                           
  3323  0075                     ___ftpack@exp:	
  3324                           ; 1 bytes @ 0x5
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0x5
  3328  0075                     	ds	1
  3329  0076                     ??___wmul:	
  3330  0076                     ??___awdiv:	
  3331                           ; 1 bytes @ 0x6
  3332                           
  3333  0076                     ??___awmod:	
  3334                           ; 1 bytes @ 0x6
  3335                           
  3336  0076                     ??___fttol:	
  3337                           ; 1 bytes @ 0x6
  3338                           
  3339  0076                     ??___lwdiv:	
  3340                           ; 1 bytes @ 0x6
  3341                           
  3342  0076                     ?_read_eeprom_int32:	
  3343                           ; 1 bytes @ 0x6
  3344                           
  3345  0076                     LCDByte@ln:	
  3346                           ; 4 bytes @ 0x6
  3347                           
  3348  0076                     ___ftpack@sign:	
  3349                           ; 1 bytes @ 0x6
  3350                           
  3351  0076                     DHT_result@x:	
  3352                           ; 1 bytes @ 0x6
  3353                           
  3354  0076                     ___wmul@product:	
  3355                           ; 2 bytes @ 0x6
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0x6
  3359  0076                     	ds	1
  3360  0077                     ??___ftpack:	
  3361  0077                     LCDByte@c:	
  3362                           ; 1 bytes @ 0x7
  3363                           
  3364  0077                     ___awmod@counter:	
  3365                           ; 1 bytes @ 0x7
  3366                           
  3367  0077                     ___lwdiv@counter:	
  3368                           ; 1 bytes @ 0x7
  3369                           
  3370                           
  3371                           ; 1 bytes @ 0x7
  3372  0077                     	ds	1
  3373  0078                     LCDByte@temp:	
  3374  0078                     ___awmod@sign:	
  3375                           ; 1 bytes @ 0x8
  3376                           
  3377  0078                     ___lwdiv@quotient:	
  3378                           ; 1 bytes @ 0x8
  3379                           
  3380                           
  3381                           ; 2 bytes @ 0x8
  3382  0078                     	ds	1
  3383  0079                     ?_LCDGotoXY:	
  3384  0079                     ??_LCDWriteString:	
  3385                           ; 1 bytes @ 0x9
  3386                           
  3387  0079                     LCDInit@style:	
  3388                           ; 1 bytes @ 0x9
  3389                           
  3390  0079                     LCDGotoXY@y:	
  3391                           ; 1 bytes @ 0x9
  3392                           
  3393                           
  3394                           ; 1 bytes @ 0x9
  3395  0079                     	ds	1
  3396  007A                     ??_check_status_incubator:	
  3397  007A                     ??___ftneg:	
  3398                           ; 1 bytes @ 0xA
  3399                           
  3400                           
  3401                           	psect	cstackBANK0
  3402  0020                     __pcstackBANK0:	
  3403                           ; 1 bytes @ 0xA
  3404                           
  3405  0020                     ??_LCD_Init_apdatat:	
  3406  0020                     ??_LCDGotoXY:	
  3407                           ; 1 bytes @ 0x0
  3408                           
  3409  0020                     ?_LCDWriteString:	
  3410                           ; 1 bytes @ 0x0
  3411                           
  3412  0020                     ??_LCDInit:	
  3413                           ; 1 bytes @ 0x0
  3414                           
  3415  0020                     ??_DHT_result:	
  3416                           ; 1 bytes @ 0x0
  3417                           
  3418  0020                     ??_ADC_GetConversion:	
  3419                           ; 1 bytes @ 0x0
  3420                           
  3421  0020                     ??_read_eeprom_int32:	
  3422                           ; 1 bytes @ 0x0
  3423                           
  3424  0020                     ?___lwmod:	
  3425                           ; 1 bytes @ 0x0
  3426                           
  3427  0020                     ?___awtoft:	
  3428                           ; 2 bytes @ 0x0
  3429                           
  3430  0020                     ___awdiv@counter:	
  3431                           ; 3 bytes @ 0x0
  3432                           
  3433  0020                     ___fttol@sign1:	
  3434                           ; 1 bytes @ 0x0
  3435                           
  3436  0020                     LCDWriteString@msg:	
  3437                           ; 1 bytes @ 0x0
  3438                           
  3439  0020                     ___awtoft@c:	
  3440                           ; 2 bytes @ 0x0
  3441                           
  3442  0020                     ___lwmod@divisor:	
  3443                           ; 2 bytes @ 0x0
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x0
  3447  0020                     	ds	1
  3448  0021                     LCDGotoXY@x:	
  3449  0021                     ___awdiv@sign:	
  3450                           ; 1 bytes @ 0x1
  3451                           
  3452  0021                     ___fttol@lval:	
  3453                           ; 1 bytes @ 0x1
  3454                           
  3455                           
  3456                           ; 4 bytes @ 0x1
  3457  0021                     	ds	1
  3458  0022                     LCDWriteString@cc:	
  3459  0022                     ___awdiv@quotient:	
  3460                           ; 1 bytes @ 0x2
  3461                           
  3462  0022                     ___lwmod@dividend:	
  3463                           ; 2 bytes @ 0x2
  3464                           
  3465                           
  3466                           ; 2 bytes @ 0x2
  3467  0022                     	ds	1
  3468  0023                     ??_command_turn:	
  3469  0023                     ??___awtoft:	
  3470                           ; 1 bytes @ 0x3
  3471                           
  3472                           
  3473                           ; 1 bytes @ 0x3
  3474  0023                     	ds	1
  3475  0024                     ?_LCDWriteInt:	
  3476  0024                     ??___lwmod:	
  3477                           ; 1 bytes @ 0x4
  3478                           
  3479  0024                     LCDWriteInt@val:	
  3480                           ; 1 bytes @ 0x4
  3481                           
  3482  0024                     read_eeprom_int32@result:	
  3483                           ; 2 bytes @ 0x4
  3484                           
  3485                           
  3486                           ; 4 bytes @ 0x4
  3487  0024                     	ds	1
  3488  0025                     ___awtoft@sign:	
  3489  0025                     ___fttol@exp1:	
  3490                           ; 1 bytes @ 0x5
  3491                           
  3492  0025                     ___lwmod@counter:	
  3493                           ; 1 bytes @ 0x5
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x5
  3497  0025                     	ds	1
  3498  0026                     ?___ftge:	
  3499  0026                     ?__doprnt:	
  3500                           ; 1 bit 
  3501                           
  3502  0026                     LCDWriteInt@field_length:	
  3503                           ; 2 bytes @ 0x6
  3504                           
  3505  0026                     __doprnt@f:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0026                     ___ftge@ff1:	
  3509                           ; 2 bytes @ 0x6
  3510                           
  3511                           
  3512                           ; 3 bytes @ 0x6
  3513  0026                     	ds	1
  3514  0027                     ??_LCDWriteInt:	
  3515  0027                     ?_ADC_conversii:	
  3516                           ; 1 bytes @ 0x7
  3517                           
  3518                           
  3519                           ; 2 bytes @ 0x7
  3520  0027                     	ds	1
  3521  0028                     read_eeprom_int32@addr:	
  3522  0028                     __doprnt@ap:	
  3523                           ; 1 bytes @ 0x8
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x8
  3527  0028                     	ds	1
  3528  0029                     ??_ADC_conversii:	
  3529  0029                     ??__doprnt:	
  3530                           ; 1 bytes @ 0x9
  3531                           
  3532  0029                     ___ftge@ff2:	
  3533                           ; 1 bytes @ 0x9
  3534                           
  3535  0029                     LCDWriteInt@str:	
  3536                           ; 3 bytes @ 0x9
  3537                           
  3538                           
  3539                           ; 5 bytes @ 0x9
  3540  0029                     	ds	1
  3541  002A                     ADC_conversii@rezultat:	
  3542                           
  3543                           ; 2 bytes @ 0xA
  3544  002A                     	ds	2
  3545  002C                     ??___ftge:	
  3546  002C                     ADC_conversii@temper:	
  3547                           ; 1 bytes @ 0xC
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0xC
  3551  002C                     	ds	1
  3552  002D                     __doprnt@flag:	
  3553                           
  3554                           ; 1 bytes @ 0xD
  3555  002D                     	ds	1
  3556  002E                     __doprnt@prec:	
  3557  002E                     ADC_conversii@i:	
  3558                           ; 1 bytes @ 0xE
  3559                           
  3560  002E                     LCDWriteInt@j:	
  3561                           ; 2 bytes @ 0xE
  3562                           
  3563                           
  3564                           ; 2 bytes @ 0xE
  3565  002E                     	ds	1
  3566  002F                     __doprnt@val:	
  3567                           
  3568                           ; 2 bytes @ 0xF
  3569  002F                     	ds	1
  3570  0030                     ?___lwtoft:	
  3571  0030                     LCDWriteInt@i:	
  3572                           ; 3 bytes @ 0x10
  3573                           
  3574  0030                     ___lwtoft@c:	
  3575                           ; 2 bytes @ 0x10
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x10
  3579  0030                     	ds	1
  3580  0031                     __doprnt@c:	
  3581                           
  3582                           ; 1 bytes @ 0x11
  3583  0031                     	ds	1
  3584  0032                     ??_afisare_inf_lcd:	
  3585  0032                     ??_setare_temperatura:	
  3586                           ; 1 bytes @ 0x12
  3587                           
  3588  0032                     __doprnt@pb:	
  3589                           ; 1 bytes @ 0x12
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x12
  3593  0032                     	ds	1
  3594  0033                     ??___lwtoft:	
  3595  0033                     ?_printf:	
  3596                           ; 1 bytes @ 0x13
  3597                           
  3598  0033                     ?_sprintf:	
  3599                           ; 2 bytes @ 0x13
  3600                           
  3601  0033                     printf@f:	
  3602                           ; 2 bytes @ 0x13
  3603                           
  3604  0033                     sprintf@f:	
  3605                           ; 2 bytes @ 0x13
  3606                           
  3607                           
  3608                           ; 2 bytes @ 0x13
  3609  0033                     	ds	1
  3610  0034                     ?___ftmul:	
  3611  0034                     ___ftmul@f1:	
  3612                           ; 3 bytes @ 0x14
  3613                           
  3614                           
  3615                           ; 3 bytes @ 0x14
  3616  0034                     	ds	1
  3617  0035                     ??_printf:	
  3618  0035                     ??_state_of_button:	
  3619                           ; 1 bytes @ 0x15
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0x15
  3623  0035                     	ds	1
  3624  0036                     printf@ap:	
  3625                           
  3626                           ; 1 bytes @ 0x16
  3627  0036                     	ds	1
  3628  0037                     ??_sprintf:	
  3629  0037                     ___ftmul@f2:	
  3630                           ; 1 bytes @ 0x17
  3631                           
  3632  0037                     printf@pb:	
  3633                           ; 3 bytes @ 0x17
  3634                           
  3635                           
  3636                           ; 3 bytes @ 0x17
  3637  0037                     	ds	1
  3638  0038                     sprintf@wh:	
  3639                           
  3640                           ; 1 bytes @ 0x18
  3641  0038                     	ds	1
  3642  0039                     sprintf@ap:	
  3643                           
  3644                           ; 1 bytes @ 0x19
  3645  0039                     	ds	1
  3646  003A                     ??_int_gsm:	
  3647  003A                     ??___ftmul:	
  3648                           ; 1 bytes @ 0x1A
  3649                           
  3650  003A                     sprintf@pb:	
  3651                           ; 1 bytes @ 0x1A
  3652                           
  3653                           
  3654                           ; 3 bytes @ 0x1A
  3655  003A                     	ds	3
  3656  003D                     ??_sms_text:	
  3657                           
  3658                           ; 1 bytes @ 0x1D
  3659  003D                     	ds	1
  3660  003E                     ___ftmul@exp:	
  3661                           
  3662                           ; 1 bytes @ 0x1E
  3663  003E                     	ds	1
  3664  003F                     sms_text@smstext:	
  3665  003F                     ___ftmul@f3_as_product:	
  3666                           ; 1 bytes @ 0x1F
  3667                           
  3668                           
  3669                           ; 3 bytes @ 0x1F
  3670  003F                     	ds	1
  3671  0040                     sms_text@umid:	
  3672                           
  3673                           ; 1 bytes @ 0x20
  3674  0040                     	ds	2
  3675  0042                     ___ftmul@cntr:	
  3676                           
  3677                           ; 1 bytes @ 0x22
  3678  0042                     	ds	1
  3679  0043                     ___ftmul@sign:	
  3680                           
  3681                           ; 1 bytes @ 0x23
  3682  0043                     	ds	1
  3683  0044                     ?___ftdiv:	
  3684  0044                     ?___ftneg:	
  3685                           ; 3 bytes @ 0x24
  3686                           
  3687  0044                     ___ftdiv@f2:	
  3688                           ; 3 bytes @ 0x24
  3689                           
  3690  0044                     ___ftneg@f1:	
  3691                           ; 3 bytes @ 0x24
  3692                           
  3693                           
  3694                           ; 3 bytes @ 0x24
  3695  0044                     	ds	3
  3696  0047                     ?___ftadd:	
  3697  0047                     ___ftadd@f1:	
  3698                           ; 3 bytes @ 0x27
  3699                           
  3700  0047                     ___ftdiv@f1:	
  3701                           ; 3 bytes @ 0x27
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0x27
  3705  0047                     	ds	3
  3706  004A                     ??___ftdiv:	
  3707  004A                     ___ftadd@f2:	
  3708                           ; 1 bytes @ 0x2A
  3709                           
  3710                           
  3711                           ; 3 bytes @ 0x2A
  3712  004A                     	ds	3
  3713  004D                     ??___ftadd:	
  3714                           
  3715                           ; 1 bytes @ 0x2D
  3716  004D                     	ds	1
  3717  004E                     ___ftdiv@cntr:	
  3718                           
  3719                           ; 1 bytes @ 0x2E
  3720  004E                     	ds	1
  3721  004F                     ___ftdiv@f3:	
  3722                           
  3723                           ; 3 bytes @ 0x2F
  3724  004F                     	ds	2
  3725  0051                     ___ftadd@sign:	
  3726                           
  3727                           ; 1 bytes @ 0x31
  3728  0051                     	ds	1
  3729  0052                     ___ftadd@exp2:	
  3730  0052                     ___ftdiv@exp:	
  3731                           ; 1 bytes @ 0x32
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x32
  3735  0052                     	ds	1
  3736  0053                     ___ftadd@exp1:	
  3737  0053                     ___ftdiv@sign:	
  3738                           ; 1 bytes @ 0x33
  3739                           
  3740                           
  3741                           ; 1 bytes @ 0x33
  3742  0053                     	ds	1
  3743  0054                     ?_comparare:	
  3744  0054                     comparare@resistor_value:	
  3745                           ; 2 bytes @ 0x34
  3746                           
  3747                           
  3748                           ; 2 bytes @ 0x34
  3749  0054                     	ds	2
  3750  0056                     ??_comparare:	
  3751                           
  3752                           ; 1 bytes @ 0x36
  3753  0056                     	ds	2
  3754  0058                     comparare@dif:	
  3755                           
  3756                           ; 3 bytes @ 0x38
  3757  0058                     	ds	3
  3758  005B                     comparare@step:	
  3759                           
  3760                           ; 3 bytes @ 0x3B
  3761  005B                     	ds	3
  3762  005E                     comparare@result:	
  3763                           
  3764                           ; 2 bytes @ 0x3E
  3765  005E                     	ds	2
  3766  0060                     ??_main:	
  3767                           
  3768                           ; 1 bytes @ 0x40
  3769  0060                     	ds	3
  3770                           
  3771                           	psect	maintext
  3772  023D                     __pmaintext:	
  3773 ;;
  3774 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3775 ;;
  3776 ;; *************** function _main *****************
  3777 ;; Defined at:
  3778 ;;		line 289 in file "main.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  volt            3    5[BANK3 ] float 
  3783 ;;  volt2           3    0        float 
  3784 ;;  volt1           3    0        float 
  3785 ;;  flag_citire     2    2[BANK3 ] int 
  3786 ;;  flag_scriere    2    0[BANK3 ] int 
  3787 ;;  x               1    4[BANK3 ] unsigned char 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      void 
  3790 ;; Registers used:
  3791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : B1F/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3797 ;;      Params:         0       0       0       0       0       0       0       0
  3798 ;;      Locals:         0       0       0       0       8       0       0       0
  3799 ;;      Temps:          0       3       0       0       0       0       0       0
  3800 ;;      Totals:         0       3       0       0       8       0       0       0
  3801 ;;Total ram usage:       11 bytes
  3802 ;; Hardware stack levels required when called:   10
  3803 ;; This function calls:
  3804 ;;		_ADC_GetConversion
  3805 ;;		_ADC_StartConversion
  3806 ;;		_ADC_conversii
  3807 ;;		_CheckResponse
  3808 ;;		_DHT_result
  3809 ;;		_Keyboard_Manager
  3810 ;;		_LCDByte
  3811 ;;		_LCDInit
  3812 ;;		_LCDWriteString
  3813 ;;		_LCD_Init_apdatat
  3814 ;;		_SYSTEM_Initialize
  3815 ;;		_StartSignal
  3816 ;;		_TMR1_disable
  3817 ;;		_TMR1_enable
  3818 ;;		___ftdiv
  3819 ;;		___ftmul
  3820 ;;		___fttol
  3821 ;;		___lwtoft
  3822 ;;		_check_status_incubator
  3823 ;;		_command_turn
  3824 ;;		_comparare
  3825 ;;		_eeprom_read
  3826 ;;		_eeprom_write
  3827 ;;		_int_gsm
  3828 ;;		_read_eeprom_int32
  3829 ;;		_state_of_button
  3830 ;;		_turn_egs
  3831 ;; This function is called by:
  3832 ;;		Startup code after reset
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function _main
  3838  023D                     _main:	
  3839                           
  3840                           ;main.c: 291: char x=0;
  3841                           
  3842                           ;incstack = 0
  3843                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3844  023D  0023               	movlb	3	; select bank3
  3845  023E  01DF               	clrf	main@x^(0+384)
  3846                           
  3847                           ;main.c: 292: int flag_scriere=0,flag_citire=0;
  3848  023F  01DB               	clrf	main@flag_scriere^(0+384)
  3849  0240  01DC               	clrf	(main@flag_scriere+1)^(0+384)
  3850  0241  01DD               	clrf	main@flag_citire^(0+384)
  3851  0242  01DE               	clrf	(main@flag_citire+1)^(0+384)
  3852                           
  3853                           ;main.c: 294: SYSTEM_Initialize();
  3854  0243  3187  27EE  3182   	fcall	_SYSTEM_Initialize
  3855                           
  3856                           ;main.c: 295: TRISCbits.TRISC2=0;
  3857  0246  0021               	movlb	1	; select bank1
  3858  0247  110E               	bcf	14,2	;volatile
  3859                           
  3860                           ;main.c: 296: TRISCbits.TRISC1=0;
  3861  0248  108E               	bcf	14,1	;volatile
  3862                           
  3863                           ;main.c: 297: ADC_StartConversion();
  3864  0249  3194  2446  3182   	fcall	_ADC_StartConversion
  3865                           
  3866                           ;main.c: 302: (INTCONbits.GIE = 1);
  3867  024C  178B               	bsf	11,7	;volatile
  3868                           
  3869                           ;main.c: 305: (INTCONbits.PEIE = 1);
  3870  024D  170B               	bsf	11,6	;volatile
  3871                           
  3872                           ;main.c: 315: float volt,volt1,volt2;
  3873                           ;main.c: 317: LCDInit(1);
  3874  024E  3001               	movlw	1
  3875  024F  318A  22AF  3182   	fcall	_LCDInit
  3876                           
  3877                           ;main.c: 318: LCD_Init_apdatat();
  3878  0252  3197  272F  3182   	fcall	_LCD_Init_apdatat
  3879                           
  3880                           ;main.c: 319: flag_directie_read=eeprom_read(0x00);
  3881  0255  3000               	movlw	0
  3882  0256  3195  250C  3182   	fcall	_eeprom_read
  3883  0259  0020               	movlb	0	; select bank0
  3884  025A  00E0               	movwf	??_main
  3885  025B  01E1               	clrf	??_main+1
  3886  025C  0860               	movf	??_main,w
  3887  025D  0022               	movlb	2	; select bank2
  3888  025E  00D4               	movwf	_flag_directie_read^(0+256)
  3889  025F  0020               	movlb	0	; select bank0
  3890  0260  0861               	movf	??_main+1,w
  3891  0261  0022               	movlb	2	; select bank2
  3892  0262  00D5               	movwf	(_flag_directie_read+1)^(0+256)
  3893                           
  3894                           ;main.c: 320: step_nr=read_eeprom_int32(0x01);
  3895  0263  3001               	movlw	1
  3896  0264  318B  23CD  3182   	fcall	_read_eeprom_int32
  3897  0267  0877               	movf	?_read_eeprom_int32+1,w
  3898  0268  0020               	movlb	0	; select bank0
  3899  0269  00E6               	movwf	_step_nr+1
  3900  026A  0876               	movf	?_read_eeprom_int32,w
  3901  026B  00E5               	movwf	_step_nr
  3902                           
  3903                           ;main.c: 322: if((flag_directie_read!=0)&&(flag_directie_read!=1))
  3904  026C  0022               	movlb	2	; select bank2
  3905  026D  0854               	movf	_flag_directie_read^(0+256),w
  3906  026E  0455               	iorwf	(_flag_directie_read+1)^(0+256),w
  3907  026F  1903               	btfsc	3,2
  3908  0270  2A83               	goto	l6126
  3909  0271  0354               	decf	_flag_directie_read^(0+256),w
  3910  0272  0455               	iorwf	(_flag_directie_read+1)^(0+256),w
  3911  0273  1903               	btfsc	3,2
  3912  0274  2A83               	goto	l6126
  3913                           
  3914                           ;main.c: 323: {
  3915                           ;main.c: 325: flag_directie=1;
  3916  0275  3001               	movlw	1
  3917  0276  0020               	movlb	0	; select bank0
  3918  0277  00E3               	movwf	_flag_directie
  3919  0278  3000               	movlw	0
  3920  0279  00E4               	movwf	_flag_directie+1
  3921                           
  3922                           ;main.c: 326: eeprom_write(0x00,flag_directie);
  3923  027A  0863               	movf	_flag_directie,w
  3924  027B  00E0               	movwf	??_main
  3925  027C  0860               	movf	??_main,w
  3926  027D  00F2               	movwf	eeprom_write@value
  3927  027E  3000               	movlw	0
  3928  027F  3196  261A  3182   	fcall	_eeprom_write
  3929                           
  3930                           ;main.c: 328: }
  3931  0282  2A8E               	goto	l6128
  3932  0283                     l6126:	
  3933                           
  3934                           ;main.c: 329: else
  3935                           ;main.c: 331: flag_directie=eeprom_read(0x00);
  3936  0283  3000               	movlw	0
  3937  0284  3195  250C  3182   	fcall	_eeprom_read
  3938  0287  0020               	movlb	0	; select bank0
  3939  0288  00E0               	movwf	??_main
  3940  0289  01E1               	clrf	??_main+1
  3941  028A  0860               	movf	??_main,w
  3942  028B  00E3               	movwf	_flag_directie
  3943  028C  0861               	movf	??_main+1,w
  3944  028D  00E4               	movwf	_flag_directie+1
  3945  028E                     l6128:	
  3946                           
  3947                           ;main.c: 332: if (step_nr==-1)
  3948  028E  0020               	movlb	0	; select bank0
  3949  028F  0A65               	incf	_step_nr,w
  3950  0290  1D03               	skipz
  3951  0291  2A98               	goto	l6132
  3952  0292  0A66               	incf	_step_nr+1,w
  3953  0293  1D03               	btfss	3,2
  3954  0294  2A98               	goto	l6132
  3955                           
  3956                           ;main.c: 333: {
  3957                           ;main.c: 334: step_nr=0;
  3958  0295  01E5               	clrf	_step_nr
  3959  0296  01E6               	clrf	_step_nr+1
  3960                           
  3961                           ;main.c: 335: }
  3962  0297  2AA1               	goto	l6134
  3963  0298                     l6132:	
  3964                           
  3965                           ;main.c: 336: else
  3966                           ;main.c: 337: step_nr=read_eeprom_int32(0x01);
  3967  0298  3001               	movlw	1
  3968  0299  318B  23CD  3182   	fcall	_read_eeprom_int32
  3969  029C  0877               	movf	?_read_eeprom_int32+1,w
  3970  029D  0020               	movlb	0	; select bank0
  3971  029E  00E6               	movwf	_step_nr+1
  3972  029F  0876               	movf	?_read_eeprom_int32,w
  3973  02A0  00E5               	movwf	_step_nr
  3974  02A1                     l6134:	
  3975                           
  3976                           ;main.c: 338: if (step_nr)
  3977  02A1  0865               	movf	_step_nr,w
  3978  02A2  0466               	iorwf	_step_nr+1,w
  3979  02A3  1903               	btfsc	3,2
  3980  02A4  2AA8               	goto	l6138
  3981                           
  3982                           ;main.c: 339: {
  3983                           ;main.c: 340: turn_egs();
  3984  02A5  3187  2746  3182   	fcall	_turn_egs
  3985  02A8                     l6138:	
  3986                           
  3987                           ;main.c: 341: }
  3988                           ;main.c: 344: LCDWriteString("   Wait for  ");
  3989  02A8  30A7               	movlw	low (STR_10| (0+32768))
  3990  02A9  0020               	movlb	0	; select bank0
  3991  02AA  00A0               	movwf	LCDWriteString@msg
  3992  02AB  3098               	movlw	high (STR_10| (0+32768))
  3993  02AC  00A1               	movwf	LCDWriteString@msg+1
  3994  02AD  3188  2058  3182   	fcall	_LCDWriteString
  3995                           
  3996                           ;main.c: 345: (LCDByte(0xC0,0));
  3997  02B0  01F2               	clrf	LCDByte@isdata
  3998  02B1  30C0               	movlw	192
  3999  02B2  3188  20DD  3182   	fcall	_LCDByte
  4000                           
  4001                           ;main.c: 346: LCDWriteString("   initialize  ");
  4002  02B5  306B               	movlw	low (STR_11| (0+32768))
  4003  02B6  0020               	movlb	0	; select bank0
  4004  02B7  00A0               	movwf	LCDWriteString@msg
  4005  02B8  3098               	movlw	high (STR_11| (0+32768))
  4006  02B9  00A1               	movwf	LCDWriteString@msg+1
  4007  02BA  3188  2058  3182   	fcall	_LCDWriteString
  4008                           
  4009                           ;main.c: 347: int_gsm();
  4010  02BD  318E  263E  3182   	fcall	_int_gsm
  4011                           
  4012                           ;main.c: 348: _delay((unsigned long)((3000)*(18432000/4000.0)));
  4013  02C0  3047               	movlw	71
  4014  02C1  0020               	movlb	0	; select bank0
  4015  02C2  00E1               	movwf	??_main+1
  4016  02C3  3022               	movlw	34
  4017  02C4  00E0               	movwf	??_main
  4018  02C5  300D               	movlw	13
  4019  02C6                     u7307:	
  4020  02C6  0B89               	decfsz	9,f
  4021  02C7  2AC6               	goto	u7307
  4022  02C8  0BE0               	decfsz	??_main,f
  4023  02C9  2AC6               	goto	u7307
  4024  02CA  0BE1               	decfsz	??_main+1,f
  4025  02CB  2AC6               	goto	u7307
  4026  02CC  3200               	nop2
  4027  02CD                     l6146:	
  4028                           ;main.c: 353: while (1)
  4029                           
  4030                           
  4031                           ;main.c: 354: {
  4032                           ;main.c: 356: LATCbits.LATC1=1;
  4033  02CD  0022               	movlb	2	; select bank2
  4034  02CE  148E               	bsf	14,1	;volatile
  4035                           
  4036                           ;main.c: 359: supplay_security=ADC_GetConversion(1);
  4037  02CF  3001               	movlw	1
  4038  02D0  3197  2793  3182   	fcall	_ADC_GetConversion
  4039  02D3  0873               	movf	?_ADC_GetConversion+1,w
  4040  02D4  0023               	movlb	3	; select bank3
  4041  02D5  00B8               	movwf	(_supplay_security+1)^(0+384)
  4042  02D6  0872               	movf	?_ADC_GetConversion,w
  4043  02D7  00B7               	movwf	_supplay_security^(0+384)
  4044                           
  4045                           ;main.c: 361: if( (supplay_security<200)&& (flag_on==0))
  4046  02D8  3000               	movlw	0
  4047  02D9  0238               	subwf	(_supplay_security+1)^(0+384),w
  4048  02DA  30C8               	movlw	200
  4049  02DB  1903               	skipnz
  4050  02DC  0237               	subwf	_supplay_security^(0+384),w
  4051  02DD  1803               	skipnc
  4052  02DE  2AF1               	goto	l6158
  4053  02DF  0022               	movlb	2	; select bank2
  4054  02E0  0856               	movf	_flag_on^(0+256),w
  4055  02E1  0457               	iorwf	(_flag_on+1)^(0+256),w
  4056  02E2  1D03               	btfss	3,2
  4057  02E3  2AF1               	goto	l6158
  4058                           
  4059                           ;main.c: 362: {
  4060                           ;main.c: 363: flag_on=1;
  4061  02E4  3001               	movlw	1
  4062  02E5  00D6               	movwf	_flag_on^(0+256)
  4063  02E6  3000               	movlw	0
  4064  02E7  00D7               	movwf	(_flag_on^(0+256)+1)
  4065                           
  4066                           ;main.c: 365: eeprom_write(0x00,flag_directie);
  4067  02E8  0020               	movlb	0	; select bank0
  4068  02E9  0863               	movf	_flag_directie,w
  4069  02EA  00E0               	movwf	??_main
  4070  02EB  0860               	movf	??_main,w
  4071  02EC  00F2               	movwf	eeprom_write@value
  4072  02ED  3000               	movlw	0
  4073  02EE  3196  261A  3182   	fcall	_eeprom_write
  4074  02F1                     l6158:	
  4075                           
  4076                           ;main.c: 367: }
  4077                           ;main.c: 370: if (flag_1000_ms==1)
  4078  02F1  0023               	movlb	3	; select bank3
  4079  02F2  0349               	decf	_flag_1000_ms^(0+384),w
  4080  02F3  044A               	iorwf	(_flag_1000_ms+1)^(0+384),w
  4081  02F4  1D03               	btfss	3,2
  4082  02F5  2BB2               	goto	l6196
  4083                           
  4084                           ;main.c: 371: {
  4085                           ;main.c: 373: (LCDByte(0b00000001,0));
  4086  02F6  01F2               	clrf	LCDByte@isdata
  4087  02F7  3001               	movlw	1
  4088  02F8  3188  20DD  3182   	fcall	_LCDByte
  4089                           
  4090                           ;main.c: 375: TMR1_disable();
  4091  02FB  3194  244C  3182   	fcall	_TMR1_disable
  4092                           
  4093                           ;main.c: 376: StartSignal();
  4094  02FE  3194  249E  3182   	fcall	_StartSignal
  4095                           
  4096                           ;main.c: 377: CheckResponse();
  4097  0301  3194  24F4  3182   	fcall	_CheckResponse
  4098                           
  4099                           ;main.c: 378: if(Check == 1)
  4100  0304  0022               	movlb	2	; select bank2
  4101  0305  0369               	decf	_Check^(0+256),w
  4102  0306  1D03               	btfss	3,2
  4103  0307  2B0B               	goto	l6172
  4104                           
  4105                           ;main.c: 379: {
  4106                           ;main.c: 380: DHT_result();
  4107  0308  318C  2433  3182   	fcall	_DHT_result
  4108  030B                     l6172:	
  4109                           
  4110                           ;main.c: 382: }
  4111                           ;main.c: 383: ADC_StartConversion();
  4112  030B  3194  2446  3182   	fcall	_ADC_StartConversion
  4113                           
  4114                           ;main.c: 388: volt=(ADC_conversii()*1.97)/0.555;
  4115  030E  3014               	movlw	20
  4116  030F  0020               	movlb	0	; select bank0
  4117  0310  00C4               	movwf	___ftdiv@f2
  4118  0311  300E               	movlw	14
  4119  0312  00C5               	movwf	___ftdiv@f2+1
  4120  0313  303F               	movlw	63
  4121  0314  00C6               	movwf	___ftdiv@f2+2
  4122  0315  3029               	movlw	41
  4123  0316  00B4               	movwf	___ftmul@f1
  4124  0317  30FC               	movlw	252
  4125  0318  00B5               	movwf	___ftmul@f1+1
  4126  0319  303F               	movlw	63
  4127  031A  00B6               	movwf	___ftmul@f1+2
  4128  031B  3189  2124  3182   	fcall	_ADC_conversii
  4129  031E  0020               	movlb	0	; select bank0
  4130  031F  0828               	movf	?_ADC_conversii+1,w
  4131  0320  00B1               	movwf	___lwtoft@c+1
  4132  0321  0827               	movf	?_ADC_conversii,w
  4133  0322  00B0               	movwf	___lwtoft@c
  4134  0323  3194  24B2  3182   	fcall	___lwtoft
  4135  0326  0020               	movlb	0	; select bank0
  4136  0327  0830               	movf	?___lwtoft,w
  4137  0328  00B7               	movwf	___ftmul@f2
  4138  0329  0831               	movf	?___lwtoft+1,w
  4139  032A  00B8               	movwf	___ftmul@f2+1
  4140  032B  0832               	movf	?___lwtoft+2,w
  4141  032C  00B9               	movwf	___ftmul@f2+2
  4142  032D  3185  25E9  3182   	fcall	___ftmul
  4143  0330  0020               	movlb	0	; select bank0
  4144  0331  0834               	movf	?___ftmul,w
  4145  0332  00C7               	movwf	___ftdiv@f1
  4146  0333  0835               	movf	?___ftmul+1,w
  4147  0334  00C8               	movwf	___ftdiv@f1+1
  4148  0335  0836               	movf	?___ftmul+2,w
  4149  0336  00C9               	movwf	___ftdiv@f1+2
  4150  0337  3186  269D  3182   	fcall	___ftdiv
  4151  033A  0020               	movlb	0	; select bank0
  4152  033B  0844               	movf	?___ftdiv,w
  4153  033C  0023               	movlb	3	; select bank3
  4154  033D  00E0               	movwf	main@volt^(0+384)
  4155  033E  0020               	movlb	0	; select bank0
  4156  033F  0845               	movf	?___ftdiv+1,w
  4157  0340  0023               	movlb	3	; select bank3
  4158  0341  00E1               	movwf	(main@volt+1)^(0+384)
  4159  0342  0020               	movlb	0	; select bank0
  4160  0343  0846               	movf	?___ftdiv+2,w
  4161  0344  0023               	movlb	3	; select bank3
  4162  0345  00E2               	movwf	(main@volt+2)^(0+384)
  4163                           
  4164                           ;main.c: 393: temp=comparare(volt);
  4165  0346  0860               	movf	main@volt^(0+384),w
  4166  0347  00F2               	movwf	___fttol@f1
  4167  0348  0861               	movf	(main@volt+1)^(0+384),w
  4168  0349  00F3               	movwf	___fttol@f1+1
  4169  034A  0862               	movf	(main@volt+2)^(0+384),w
  4170  034B  00F4               	movwf	___fttol@f1+2
  4171  034C  318D  2526  3182   	fcall	___fttol
  4172  034F  0873               	movf	?___fttol+1,w
  4173  0350  0020               	movlb	0	; select bank0
  4174  0351  00D5               	movwf	comparare@resistor_value+1
  4175  0352  0872               	movf	?___fttol,w
  4176  0353  00D4               	movwf	comparare@resistor_value
  4177  0354  3180  2083  3182   	fcall	_comparare
  4178  0357  0020               	movlb	0	; select bank0
  4179  0358  0855               	movf	?_comparare+1,w
  4180  0359  0022               	movlb	2	; select bank2
  4181  035A  00DB               	movwf	(_temp+1)^(0+256)
  4182  035B  0020               	movlb	0	; select bank0
  4183  035C  0854               	movf	?_comparare,w
  4184  035D  0022               	movlb	2	; select bank2
  4185  035E  00DA               	movwf	_temp^(0+256)
  4186                           
  4187                           ;main.c: 397: if (temp<(temp_setata-10))
  4188  035F  086E               	movf	_temp_setata^(0+256),w
  4189  0360  3EF6               	addlw	246
  4190  0361  0020               	movlb	0	; select bank0
  4191  0362  00E0               	movwf	??_main
  4192  0363  30FF               	movlw	255
  4193  0364  0022               	movlb	2	; select bank2
  4194  0365  3D6F               	addwfc	(_temp_setata+1)^(0+256),w
  4195  0366  0020               	movlb	0	; select bank0
  4196  0367  00E1               	movwf	??_main+1
  4197  0368  0022               	movlb	2	; select bank2
  4198  0369  085B               	movf	(_temp+1)^(0+256),w
  4199  036A  3A80               	xorlw	128
  4200  036B  0020               	movlb	0	; select bank0
  4201  036C  00E2               	movwf	??_main+2
  4202  036D  0861               	movf	??_main+1,w
  4203  036E  3A80               	xorlw	128
  4204  036F  0262               	subwf	??_main+2,w
  4205  0370  1D03               	skipz
  4206  0371  2B75               	goto	u7265
  4207  0372  0860               	movf	??_main,w
  4208  0373  0022               	movlb	2	; select bank2
  4209  0374  025A               	subwf	_temp^(0+256),w
  4210  0375                     u7265:	
  4211  0375  1803               	skipnc
  4212  0376  2B7A               	goto	l6182
  4213                           
  4214                           ;main.c: 398: {
  4215                           ;main.c: 399: LATCbits.LATC2=1;
  4216  0377  0022               	movlb	2	; select bank2
  4217  0378  150E               	bsf	14,2	;volatile
  4218                           
  4219                           ;main.c: 401: }
  4220  0379  2B96               	goto	l6186
  4221  037A                     l6182:	
  4222                           
  4223                           ;main.c: 402: else if(temp>(temp_setata+10))
  4224  037A  0022               	movlb	2	; select bank2
  4225  037B  086E               	movf	_temp_setata^(0+256),w
  4226  037C  3E0A               	addlw	10
  4227  037D  0020               	movlb	0	; select bank0
  4228  037E  00E0               	movwf	??_main
  4229  037F  3000               	movlw	0
  4230  0380  0022               	movlb	2	; select bank2
  4231  0381  3D6F               	addwfc	(_temp_setata+1)^(0+256),w
  4232  0382  0020               	movlb	0	; select bank0
  4233  0383  00E1               	movwf	??_main+1
  4234  0384  0861               	movf	??_main+1,w
  4235  0385  3A80               	xorlw	128
  4236  0386  00E2               	movwf	??_main+2
  4237  0387  0022               	movlb	2	; select bank2
  4238  0388  085B               	movf	(_temp+1)^(0+256),w
  4239  0389  3A80               	xorlw	128
  4240  038A  0020               	movlb	0	; select bank0
  4241  038B  0262               	subwf	??_main+2,w
  4242  038C  1D03               	skipz
  4243  038D  2B92               	goto	u7275
  4244  038E  0022               	movlb	2	; select bank2
  4245  038F  085A               	movf	_temp^(0+256),w
  4246  0390  0020               	movlb	0	; select bank0
  4247  0391  0260               	subwf	??_main,w
  4248  0392                     u7275:	
  4249  0392  1803               	skipnc
  4250  0393  2B96               	goto	l6186
  4251                           
  4252                           ;main.c: 403: {
  4253                           ;main.c: 404: LATCbits.LATC2=0;
  4254  0394  0022               	movlb	2	; select bank2
  4255  0395  110E               	bcf	14,2	;volatile
  4256  0396                     l6186:	
  4257                           
  4258                           ;main.c: 406: }
  4259                           ;main.c: 407: if (umiditate<50)
  4260  0396  0022               	movlb	2	; select bank2
  4261  0397  0859               	movf	(_umiditate+1)^(0+256),w
  4262  0398  3A80               	xorlw	128
  4263  0399  0020               	movlb	0	; select bank0
  4264  039A  00E0               	movwf	??_main
  4265  039B  3080               	movlw	128
  4266  039C  0260               	subwf	??_main,w
  4267  039D  1D03               	skipz
  4268  039E  2BA2               	goto	u7285
  4269  039F  3032               	movlw	50
  4270  03A0  0022               	movlb	2	; select bank2
  4271  03A1  0258               	subwf	_umiditate^(0+256),w
  4272  03A2                     u7285:	
  4273  03A2  1803               	skipnc
  4274  03A3  2BA7               	goto	l633
  4275                           
  4276                           ;main.c: 408: LATAbits.LATA4=1;
  4277  03A4  0022               	movlb	2	; select bank2
  4278  03A5  160C               	bsf	12,4	;volatile
  4279  03A6  2BA9               	goto	l6190
  4280  03A7                     l633:	
  4281                           
  4282                           ;main.c: 410: else
  4283                           ;main.c: 411: LATAbits.LATA4=0;
  4284  03A7  0022               	movlb	2	; select bank2
  4285  03A8  120C               	bcf	12,4	;volatile
  4286  03A9                     l6190:	
  4287                           
  4288                           ;main.c: 413: flag_1000_ms=0;
  4289  03A9  0023               	movlb	3	; select bank3
  4290  03AA  01C9               	clrf	_flag_1000_ms^(0+384)
  4291  03AB  01CA               	clrf	(_flag_1000_ms+1)^(0+384)
  4292                           
  4293                           ;main.c: 414: TMR1_enable();
  4294  03AC  3194  244F  3182   	fcall	_TMR1_enable
  4295                           
  4296                           ;main.c: 415: state_of_button();
  4297  03AF  318E  26D0  3182   	fcall	_state_of_button
  4298  03B2                     l6196:	
  4299                           
  4300                           ;main.c: 416: }
  4301                           ;main.c: 420: if (flag_100_ms==1)
  4302  03B2  0023               	movlb	3	; select bank3
  4303  03B3  034D               	decf	_flag_100_ms^(0+384),w
  4304  03B4  044E               	iorwf	(_flag_100_ms+1)^(0+384),w
  4305  03B5  1D03               	btfss	3,2
  4306  03B6  2BBA               	goto	l6200
  4307                           
  4308                           ;main.c: 421: {
  4309                           ;main.c: 423: Keyboard_Manager();
  4310  03B7  3194  245F  3182   	fcall	_Keyboard_Manager
  4311  03BA                     l6200:	
  4312                           
  4313                           ;main.c: 426: }
  4314                           ;main.c: 428: command_turn();
  4315  03BA  3196  26D7  3182   	fcall	_command_turn
  4316                           
  4317                           ;main.c: 429: check_status_incubator();
  4318  03BD  3194  24DD  3182   	fcall	_check_status_incubator
  4319  03C0  2ACD               	goto	l6146
  4320  03C1                     __end_of_main:	
  4321                           ;main.c: 471: }
  4322                           ;main.c: 474: return;
  4323                           
  4324                           
  4325                           	psect	text1
  4326  0ED0                     __ptext1:	
  4327 ;; *************** function _state_of_button *****************
  4328 ;; Defined at:
  4329 ;;		line 229 in file "main.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4343 ;;      Params:         0       0       0       0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0
  4345 ;;      Temps:          0       2       0       0       0       0       0       0
  4346 ;;      Totals:         0       2       0       0       0       0       0       0
  4347 ;;Total ram usage:        2 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    7
  4350 ;; This function calls:
  4351 ;;		_Check_key
  4352 ;;		_LCDByte
  4353 ;;		_LCDWriteInt
  4354 ;;		_LCDWriteString
  4355 ;;		_LCD_Init_apdatat
  4356 ;;		_afisare_inf_lcd
  4357 ;;		_eeprom_read
  4358 ;;		_eeprom_write
  4359 ;;		_setare_temperatura
  4360 ;;		_turn_egs
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _state_of_button
  4368  0ED0                     _state_of_button:	
  4369                           
  4370                           ;main.c: 231: if (Check_key(0b01000000)==1)
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _state_of_button: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4374  0ED0  3040               	movlw	64
  4375  0ED1  3196  2686  318E   	fcall	_Check_key
  4376  0ED4  3A01               	xorlw	1
  4377  0ED5  1D03               	skipz
  4378  0ED6  2F0C               	goto	l5902
  4379                           
  4380                           ;main.c: 232: {
  4381                           ;main.c: 233: flag_directie=eeprom_read(0x00);
  4382  0ED7  3000               	movlw	0
  4383  0ED8  3195  250C  318E   	fcall	_eeprom_read
  4384  0EDB  0020               	movlb	0	; select bank0
  4385  0EDC  00B5               	movwf	??_state_of_button
  4386  0EDD  01B6               	clrf	??_state_of_button+1
  4387  0EDE  0835               	movf	??_state_of_button,w
  4388  0EDF  00E3               	movwf	_flag_directie
  4389  0EE0  0836               	movf	??_state_of_button+1,w
  4390  0EE1  00E4               	movwf	_flag_directie+1
  4391                           
  4392                           ;main.c: 234: LCD_Init_apdatat();
  4393  0EE2  3197  272F  318E   	fcall	_LCD_Init_apdatat
  4394                           
  4395                           ;main.c: 235: LCDWriteString(" Intoarcere oua!");
  4396  0EE5  3049               	movlw	low (STR_9| (0+32768))
  4397  0EE6  0020               	movlb	0	; select bank0
  4398  0EE7  00A0               	movwf	LCDWriteString@msg
  4399  0EE8  3098               	movlw	high (STR_9| (0+32768))
  4400  0EE9  00A1               	movwf	LCDWriteString@msg+1
  4401  0EEA  3188  2058  318E   	fcall	_LCDWriteString
  4402                           
  4403                           ;main.c: 236: (LCDByte(0xC0,0));
  4404  0EED  01F2               	clrf	LCDByte@isdata
  4405  0EEE  30C0               	movlw	192
  4406  0EEF  3188  20DD  318E   	fcall	_LCDByte
  4407                           
  4408                           ;main.c: 238: LCDWriteInt(step_nr,3);
  4409  0EF2  0020               	movlb	0	; select bank0
  4410  0EF3  0866               	movf	_step_nr+1,w
  4411  0EF4  00A5               	movwf	LCDWriteInt@val+1
  4412  0EF5  0865               	movf	_step_nr,w
  4413  0EF6  00A4               	movwf	LCDWriteInt@val
  4414  0EF7  3003               	movlw	3
  4415  0EF8  00B5               	movwf	??_state_of_button
  4416  0EF9  0835               	movf	??_state_of_button,w
  4417  0EFA  00A6               	movwf	LCDWriteInt@field_length
  4418  0EFB  318D  25AD  318E   	fcall	_LCDWriteInt
  4419                           
  4420                           ;main.c: 239: turn_egs();
  4421  0EFE  3187  2746  318E   	fcall	_turn_egs
  4422                           
  4423                           ;main.c: 240: eeprom_write(0x00,flag_directie);
  4424  0F01  0020               	movlb	0	; select bank0
  4425  0F02  0863               	movf	_flag_directie,w
  4426  0F03  00B5               	movwf	??_state_of_button
  4427  0F04  0835               	movf	??_state_of_button,w
  4428  0F05  00F2               	movwf	eeprom_write@value
  4429  0F06  3000               	movlw	0
  4430  0F07  3196  261A  318E   	fcall	_eeprom_write
  4431                           
  4432                           ;main.c: 242: menu_flag=~menu_flag;
  4433  0F0A  09FA               	comf	_menu_flag,f	;volatile
  4434                           
  4435                           ;main.c: 245: }
  4436  0F0B  2F5B               	goto	l5920
  4437  0F0C                     l5902:	
  4438                           
  4439                           ;main.c: 246: else if((menu_flag==0)&(Check_key(0b10000000)==1))
  4440  0F0C  3080               	movlw	128
  4441  0F0D  3196  2686  318E   	fcall	_Check_key
  4442  0F10  3A01               	xorlw	1
  4443  0F11  1D03               	btfss	3,2
  4444  0F12  2F15               	goto	u6910
  4445  0F13  3001               	movlw	1
  4446  0F14  2F16               	goto	u6912
  4447  0F15                     u6910:	
  4448  0F15  3000               	movlw	0
  4449  0F16                     u6912:	
  4450  0F16  0020               	movlb	0	; select bank0
  4451  0F17  00B5               	movwf	??_state_of_button
  4452  0F18  087A               	movf	_menu_flag,w	;volatile
  4453  0F19  1D03               	btfss	3,2
  4454  0F1A  2F1D               	goto	u6920
  4455  0F1B  3001               	movlw	1
  4456  0F1C  2F1E               	goto	u6922
  4457  0F1D                     u6920:	
  4458  0F1D  3000               	movlw	0
  4459  0F1E                     u6922:	
  4460  0F1E  0535               	andwf	??_state_of_button,w
  4461  0F1F  3800               	iorlw	0
  4462  0F20  1903               	skipnz
  4463  0F21  2F32               	goto	l5912
  4464                           
  4465                           ;main.c: 247: {
  4466                           ;main.c: 251: virgula_temp_setata++;
  4467  0F22  3001               	movlw	1
  4468  0F23  0022               	movlb	2	; select bank2
  4469  0F24  07CC               	addwf	_virgula_temp_setata^(0+256),f
  4470  0F25  3000               	movlw	0
  4471  0F26  3DCD               	addwfc	(_virgula_temp_setata+1)^(0+256),f
  4472                           
  4473                           ;main.c: 252: if (virgula_temp_setata==10)
  4474  0F27  300A               	movlw	10
  4475  0F28  064C               	xorwf	_virgula_temp_setata^(0+256),w
  4476  0F29  044D               	iorwf	(_virgula_temp_setata+1)^(0+256),w
  4477  0F2A  1D03               	btfss	3,2
  4478  0F2B  2F5B               	goto	l5920
  4479                           
  4480                           ;main.c: 253: {
  4481                           ;main.c: 254: virgula_temp_setata=0;
  4482  0F2C  01CC               	clrf	_virgula_temp_setata^(0+256)
  4483  0F2D  01CD               	clrf	(_virgula_temp_setata+1)^(0+256)
  4484                           
  4485                           ;main.c: 255: temp_setata++;
  4486  0F2E  3001               	movlw	1
  4487  0F2F  07EE               	addwf	_temp_setata^(0+256),f
  4488  0F30  3000               	movlw	0
  4489  0F31  2F5A               	goto	L1
  4490  0F32                     l5912:	
  4491                           ;main.c: 256: }
  4492                           ;main.c: 258: }
  4493                           
  4494                           
  4495                           ;main.c: 259: else if((menu_flag==0)&(Check_key(0b00100000)==1))
  4496  0F32  3020               	movlw	32
  4497  0F33  3196  2686  318E   	fcall	_Check_key
  4498  0F36  3A01               	xorlw	1
  4499  0F37  1D03               	btfss	3,2
  4500  0F38  2F3B               	goto	u6950
  4501  0F39  3001               	movlw	1
  4502  0F3A  2F3C               	goto	u6952
  4503  0F3B                     u6950:	
  4504  0F3B  3000               	movlw	0
  4505  0F3C                     u6952:	
  4506  0F3C  0020               	movlb	0	; select bank0
  4507  0F3D  00B5               	movwf	??_state_of_button
  4508  0F3E  087A               	movf	_menu_flag,w	;volatile
  4509  0F3F  1D03               	btfss	3,2
  4510  0F40  2F43               	goto	u6960
  4511  0F41  3001               	movlw	1
  4512  0F42  2F44               	goto	u6962
  4513  0F43                     u6960:	
  4514  0F43  3000               	movlw	0
  4515  0F44                     u6962:	
  4516  0F44  0535               	andwf	??_state_of_button,w
  4517  0F45  3800               	iorlw	0
  4518  0F46  1903               	skipnz
  4519  0F47  2F5B               	goto	l5920
  4520                           
  4521                           ;main.c: 260: {
  4522                           ;main.c: 262: virgula_temp_setata--;
  4523  0F48  30FF               	movlw	255
  4524  0F49  0022               	movlb	2	; select bank2
  4525  0F4A  07CC               	addwf	_virgula_temp_setata^(0+256),f
  4526  0F4B  30FF               	movlw	255
  4527  0F4C  3DCD               	addwfc	(_virgula_temp_setata+1)^(0+256),f
  4528                           
  4529                           ;main.c: 263: if (virgula_temp_setata==-1)
  4530  0F4D  0A4C               	incf	_virgula_temp_setata^(0+256),w
  4531  0F4E  1D03               	skipz
  4532  0F4F  2F5B               	goto	l5920
  4533  0F50  0A4D               	incf	(_virgula_temp_setata+1)^(0+256),w
  4534  0F51  1D03               	btfss	3,2
  4535  0F52  2F5B               	goto	l5920
  4536                           
  4537                           ;main.c: 264: {
  4538                           ;main.c: 265: virgula_temp_setata=9;
  4539  0F53  3009               	movlw	9
  4540  0F54  00CC               	movwf	_virgula_temp_setata^(0+256)
  4541  0F55  3000               	movlw	0
  4542  0F56  00CD               	movwf	(_virgula_temp_setata^(0+256)+1)
  4543                           
  4544                           ;main.c: 266: temp_setata--;
  4545  0F57  30FF               	movlw	255
  4546  0F58  07EE               	addwf	_temp_setata^(0+256),f
  4547  0F59  30FF               	movlw	255
  4548  0F5A                     L1:	
  4549  0F5A  3DEF               	addwfc	(_temp_setata+1)^(0+256),f
  4550  0F5B                     l5920:	
  4551                           
  4552                           ;main.c: 267: }
  4553                           ;main.c: 270: }
  4554                           ;main.c: 271: if (menu_flag!=0 )
  4555  0F5B  087A               	movf	_menu_flag,w	;volatile
  4556  0F5C  1903               	btfsc	3,2
  4557  0F5D  2F61               	goto	l5924
  4558                           
  4559                           ;main.c: 272: {
  4560                           ;main.c: 274: afisare_inf_lcd();
  4561  0F5E  318C  24A4         	fcall	_afisare_inf_lcd
  4562                           
  4563                           ;main.c: 277: }
  4564  0F60  0008               	return
  4565  0F61                     l5924:	
  4566                           
  4567                           ;main.c: 278: else if(menu_flag==0)
  4568  0F61  087A               	movf	_menu_flag,w	;volatile
  4569  0F62  1D03               	btfss	3,2
  4570  0F63  0008               	return
  4571                           
  4572                           ;main.c: 279: {
  4573                           ;main.c: 281: setare_temperatura();
  4574  0F64  318B  230B         	fcall	_setare_temperatura
  4575  0F66  0008               	return
  4576  0F67                     __end_of_state_of_button:	
  4577                           
  4578                           	psect	text2
  4579  0B0B                     __ptext2:	
  4580 ;; *************** function _setare_temperatura *****************
  4581 ;; Defined at:
  4582 ;;		line 190 in file "main.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;		None
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      void 
  4589 ;; Registers used:
  4590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4596 ;;      Params:         0       0       0       0       0       0       0       0
  4597 ;;      Locals:         0       0       0       0       0       0       0       0
  4598 ;;      Temps:          0       1       0       0       0       0       0       0
  4599 ;;      Totals:         0       1       0       0       0       0       0       0
  4600 ;;Total ram usage:        1 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    6
  4603 ;; This function calls:
  4604 ;;		_LCDByte
  4605 ;;		_LCDWriteInt
  4606 ;;		_LCDWriteString
  4607 ;;		_LCD_Init_apdatat
  4608 ;; This function is called by:
  4609 ;;		_state_of_button
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _setare_temperatura
  4615  0B0B                     _setare_temperatura:	
  4616                           
  4617                           ;main.c: 194: LCD_Init_apdatat();
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _setare_temperatura: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4621  0B0B  3197  272F  318B   	fcall	_LCD_Init_apdatat
  4622                           
  4623                           ;main.c: 196: LCDWriteString(" Temp setat este");
  4624  0B0E  305A               	movlw	low (STR_5| (0+32768))
  4625  0B0F  0020               	movlb	0	; select bank0
  4626  0B10  00A0               	movwf	LCDWriteString@msg
  4627  0B11  3098               	movlw	high (STR_5| (0+32768))
  4628  0B12  00A1               	movwf	LCDWriteString@msg+1
  4629  0B13  3188  2058  318B   	fcall	_LCDWriteString
  4630                           
  4631                           ;main.c: 210: (LCDByte(0xC0,0));
  4632  0B16  01F2               	clrf	LCDByte@isdata
  4633  0B17  30C0               	movlw	192
  4634  0B18  3188  20DD  318B   	fcall	_LCDByte
  4635                           
  4636                           ;main.c: 212: LCDWriteInt(step_nr,3);
  4637  0B1B  0020               	movlb	0	; select bank0
  4638  0B1C  0866               	movf	_step_nr+1,w
  4639  0B1D  00A5               	movwf	LCDWriteInt@val+1
  4640  0B1E  0865               	movf	_step_nr,w
  4641  0B1F  00A4               	movwf	LCDWriteInt@val
  4642  0B20  3003               	movlw	3
  4643  0B21  00B2               	movwf	??_setare_temperatura
  4644  0B22  0832               	movf	??_setare_temperatura,w
  4645  0B23  00A6               	movwf	LCDWriteInt@field_length
  4646  0B24  318D  25AD  318B   	fcall	_LCDWriteInt
  4647                           
  4648                           ;main.c: 216: (LCDByte(0xC0,0));
  4649  0B27  01F2               	clrf	LCDByte@isdata
  4650  0B28  30C0               	movlw	192
  4651  0B29  3188  20DD  318B   	fcall	_LCDByte
  4652                           
  4653                           ;main.c: 219: LCDWriteString("   ");
  4654  0B2C  3034               	movlw	low ((STR_15+13)| (0+32768))
  4655  0B2D  0020               	movlb	0	; select bank0
  4656  0B2E  00A0               	movwf	LCDWriteString@msg
  4657  0B2F  3098               	movlw	high ((STR_15+13)| (0+32768))
  4658  0B30  00A1               	movwf	LCDWriteString@msg+1
  4659  0B31  3188  2058  318B   	fcall	_LCDWriteString
  4660                           
  4661                           ;main.c: 220: LCDWriteInt(temp_setata,2);
  4662  0B34  0022               	movlb	2	; select bank2
  4663  0B35  086F               	movf	(_temp_setata+1)^(0+256),w
  4664  0B36  0020               	movlb	0	; select bank0
  4665  0B37  00A5               	movwf	LCDWriteInt@val+1
  4666  0B38  0022               	movlb	2	; select bank2
  4667  0B39  086E               	movf	_temp_setata^(0+256),w
  4668  0B3A  0020               	movlb	0	; select bank0
  4669  0B3B  00A4               	movwf	LCDWriteInt@val
  4670  0B3C  3002               	movlw	2
  4671  0B3D  00B2               	movwf	??_setare_temperatura
  4672  0B3E  0832               	movf	??_setare_temperatura,w
  4673  0B3F  00A6               	movwf	LCDWriteInt@field_length
  4674  0B40  318D  25AD  318B   	fcall	_LCDWriteInt
  4675                           
  4676                           ;main.c: 221: LCDWriteString(".");
  4677  0B43  30DB               	movlw	low (STR_2| (0+32768))
  4678  0B44  0020               	movlb	0	; select bank0
  4679  0B45  00A0               	movwf	LCDWriteString@msg
  4680  0B46  3098               	movlw	high (STR_2| (0+32768))
  4681  0B47  00A1               	movwf	LCDWriteString@msg+1
  4682  0B48  3188  2058  318B   	fcall	_LCDWriteString
  4683                           
  4684                           ;main.c: 222: LCDWriteInt(virgula_temp_setata,1);
  4685  0B4B  0022               	movlb	2	; select bank2
  4686  0B4C  084D               	movf	(_virgula_temp_setata+1)^(0+256),w
  4687  0B4D  0020               	movlb	0	; select bank0
  4688  0B4E  00A5               	movwf	LCDWriteInt@val+1
  4689  0B4F  0022               	movlb	2	; select bank2
  4690  0B50  084C               	movf	_virgula_temp_setata^(0+256),w
  4691  0B51  0020               	movlb	0	; select bank0
  4692  0B52  00A4               	movwf	LCDWriteInt@val
  4693  0B53  01A6               	clrf	LCDWriteInt@field_length
  4694  0B54  0AA6               	incf	LCDWriteInt@field_length,f
  4695  0B55  318D  25AD  318B   	fcall	_LCDWriteInt
  4696                           
  4697                           ;main.c: 223: LCDWriteString("C");
  4698  0B58  30DD               	movlw	low (STR_8| (0+32768))
  4699  0B59  0020               	movlb	0	; select bank0
  4700  0B5A  00A0               	movwf	LCDWriteString@msg
  4701  0B5B  3098               	movlw	high (STR_8| (0+32768))
  4702  0B5C  00A1               	movwf	LCDWriteString@msg+1
  4703  0B5D  3188  2058  318B   	fcall	_LCDWriteString
  4704                           
  4705                           ;main.c: 227: _delay((unsigned long)((3)*(18432000/4000.0)));
  4706  0B60  3012               	movlw	18
  4707  0B61  0020               	movlb	0	; select bank0
  4708  0B62  00B2               	movwf	??_setare_temperatura
  4709  0B63  30F3               	movlw	243
  4710  0B64                     u7317:	
  4711  0B64  0B89               	decfsz	9,f
  4712  0B65  2B64               	goto	u7317
  4713  0B66  0BB2               	decfsz	??_setare_temperatura,f
  4714  0B67  2B64               	goto	u7317
  4715  0B68  0008               	return
  4716  0B69                     __end_of_setare_temperatura:	
  4717                           
  4718                           	psect	text3
  4719  0CA4                     __ptext3:	
  4720 ;; *************** function _afisare_inf_lcd *****************
  4721 ;; Defined at:
  4722 ;;		line 134 in file "main.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 0/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4736 ;;      Params:         0       0       0       0       0       0       0       0
  4737 ;;      Locals:         0       0       0       0       0       0       0       0
  4738 ;;      Temps:          0       3       0       0       0       0       0       0
  4739 ;;      Totals:         0       3       0       0       0       0       0       0
  4740 ;;Total ram usage:        3 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    6
  4743 ;; This function calls:
  4744 ;;		_LCDByte
  4745 ;;		_LCDGotoXY
  4746 ;;		_LCDWriteInt
  4747 ;;		_LCDWriteString
  4748 ;;		_LCD_Init_apdatat
  4749 ;;		___awdiv
  4750 ;;		___awmod
  4751 ;; This function is called by:
  4752 ;;		_state_of_button
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _afisare_inf_lcd
  4758  0CA4                     _afisare_inf_lcd:	
  4759                           
  4760                           ;main.c: 137: LCD_Init_apdatat();
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _afisare_inf_lcd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4764  0CA4  3197  272F  318C   	fcall	_LCD_Init_apdatat
  4765                           
  4766                           ;main.c: 138: temp_virgula=temp%10;
  4767  0CA7  300A               	movlw	10
  4768  0CA8  00F2               	movwf	___awmod@divisor
  4769  0CA9  3000               	movlw	0
  4770  0CAA  00F3               	movwf	___awmod@divisor+1
  4771  0CAB  0022               	movlb	2	; select bank2
  4772  0CAC  085B               	movf	(_temp+1)^(0+256),w
  4773  0CAD  00F5               	movwf	___awmod@dividend+1
  4774  0CAE  085A               	movf	_temp^(0+256),w
  4775  0CAF  00F4               	movwf	___awmod@dividend
  4776  0CB0  3188  2098  318C   	fcall	___awmod
  4777  0CB3  0872               	movf	?___awmod,w
  4778  0CB4  0020               	movlb	0	; select bank0
  4779  0CB5  00B2               	movwf	??_afisare_inf_lcd
  4780  0CB6  0832               	movf	??_afisare_inf_lcd,w
  4781  0CB7  0022               	movlb	2	; select bank2
  4782  0CB8  00E0               	movwf	_temp_virgula^(0+256)
  4783                           
  4784                           ;main.c: 139: temp_real=temp/10;
  4785  0CB9  300A               	movlw	10
  4786  0CBA  00F2               	movwf	___awdiv@divisor
  4787  0CBB  3000               	movlw	0
  4788  0CBC  00F3               	movwf	___awdiv@divisor+1
  4789  0CBD  085B               	movf	(_temp+1)^(0+256),w
  4790  0CBE  00F5               	movwf	___awdiv@dividend+1
  4791  0CBF  085A               	movf	_temp^(0+256),w
  4792  0CC0  00F4               	movwf	___awdiv@dividend
  4793  0CC1  318A  2206  318C   	fcall	___awdiv
  4794  0CC4  0872               	movf	?___awdiv,w
  4795  0CC5  0020               	movlb	0	; select bank0
  4796  0CC6  00B2               	movwf	??_afisare_inf_lcd
  4797  0CC7  0832               	movf	??_afisare_inf_lcd,w
  4798  0CC8  0022               	movlb	2	; select bank2
  4799  0CC9  00E1               	movwf	_temp_real^(0+256)
  4800                           
  4801                           ;main.c: 141: (LCDByte(0xB0,0));
  4802  0CCA  01F2               	clrf	LCDByte@isdata
  4803  0CCB  30B0               	movlw	176
  4804  0CCC  3188  20DD  318C   	fcall	_LCDByte
  4805                           
  4806                           ;main.c: 142: { LCDGotoXY(0,0); LCDWriteString("Temp=");};
  4807  0CCF  01F9               	clrf	LCDGotoXY@y
  4808  0CD0  3000               	movlw	0
  4809  0CD1  3196  263D  318C   	fcall	_LCDGotoXY
  4810  0CD4  30CF               	movlw	low (STR_1| (0+32768))
  4811  0CD5  0020               	movlb	0	; select bank0
  4812  0CD6  00A0               	movwf	LCDWriteString@msg
  4813  0CD7  3098               	movlw	high (STR_1| (0+32768))
  4814  0CD8  00A1               	movwf	LCDWriteString@msg+1
  4815  0CD9  3188  2058  318C   	fcall	_LCDWriteString
  4816                           
  4817                           ;main.c: 143: LCDWriteInt(temp_real,2);
  4818  0CDC  0022               	movlb	2	; select bank2
  4819  0CDD  0861               	movf	_temp_real^(0+256),w
  4820  0CDE  0020               	movlb	0	; select bank0
  4821  0CDF  00B2               	movwf	??_afisare_inf_lcd
  4822  0CE0  01B3               	clrf	??_afisare_inf_lcd+1
  4823  0CE1  0832               	movf	??_afisare_inf_lcd,w
  4824  0CE2  00A4               	movwf	LCDWriteInt@val
  4825  0CE3  0833               	movf	??_afisare_inf_lcd+1,w
  4826  0CE4  00A5               	movwf	LCDWriteInt@val+1
  4827  0CE5  3002               	movlw	2
  4828  0CE6  00B4               	movwf	??_afisare_inf_lcd+2
  4829  0CE7  0834               	movf	??_afisare_inf_lcd+2,w
  4830  0CE8  00A6               	movwf	LCDWriteInt@field_length
  4831  0CE9  318D  25AD  318C   	fcall	_LCDWriteInt
  4832                           
  4833                           ;main.c: 144: LCDWriteString(".");
  4834  0CEC  30DB               	movlw	low (STR_2| (0+32768))
  4835  0CED  0020               	movlb	0	; select bank0
  4836  0CEE  00A0               	movwf	LCDWriteString@msg
  4837  0CEF  3098               	movlw	high (STR_2| (0+32768))
  4838  0CF0  00A1               	movwf	LCDWriteString@msg+1
  4839  0CF1  3188  2058  318C   	fcall	_LCDWriteString
  4840                           
  4841                           ;main.c: 145: LCDWriteInt(temp_virgula,1);
  4842  0CF4  0022               	movlb	2	; select bank2
  4843  0CF5  0860               	movf	_temp_virgula^(0+256),w
  4844  0CF6  0020               	movlb	0	; select bank0
  4845  0CF7  00B2               	movwf	??_afisare_inf_lcd
  4846  0CF8  01B3               	clrf	??_afisare_inf_lcd+1
  4847  0CF9  0832               	movf	??_afisare_inf_lcd,w
  4848  0CFA  00A4               	movwf	LCDWriteInt@val
  4849  0CFB  0833               	movf	??_afisare_inf_lcd+1,w
  4850  0CFC  00A5               	movwf	LCDWriteInt@val+1
  4851  0CFD  01A6               	clrf	LCDWriteInt@field_length
  4852  0CFE  0AA6               	incf	LCDWriteInt@field_length,f
  4853  0CFF  318D  25AD  318C   	fcall	_LCDWriteInt
  4854                           
  4855                           ;main.c: 146: LCDWriteString("C ");
  4856  0D02  30D8               	movlw	low (STR_3| (0+32768))
  4857  0D03  0020               	movlb	0	; select bank0
  4858  0D04  00A0               	movwf	LCDWriteString@msg
  4859  0D05  3098               	movlw	high (STR_3| (0+32768))
  4860  0D06  00A1               	movwf	LCDWriteString@msg+1
  4861  0D07  3188  2058  318C   	fcall	_LCDWriteString
  4862                           
  4863                           ;main.c: 147: (LCDByte(0xC0,0));
  4864  0D0A  01F2               	clrf	LCDByte@isdata
  4865  0D0B  30C0               	movlw	192
  4866  0D0C  3188  20DD  318C   	fcall	_LCDByte
  4867                           
  4868                           ;main.c: 148: LCDWriteString("Umid=");
  4869  0D0F  30C9               	movlw	low (STR_4| (0+32768))
  4870  0D10  0020               	movlb	0	; select bank0
  4871  0D11  00A0               	movwf	LCDWriteString@msg
  4872  0D12  3098               	movlw	high (STR_4| (0+32768))
  4873  0D13  00A1               	movwf	LCDWriteString@msg+1
  4874  0D14  3188  2058  318C   	fcall	_LCDWriteString
  4875                           
  4876                           ;main.c: 150: LCDWriteInt(umiditate,3);
  4877  0D17  0022               	movlb	2	; select bank2
  4878  0D18  0859               	movf	(_umiditate+1)^(0+256),w
  4879  0D19  0020               	movlb	0	; select bank0
  4880  0D1A  00A5               	movwf	LCDWriteInt@val+1
  4881  0D1B  0022               	movlb	2	; select bank2
  4882  0D1C  0858               	movf	_umiditate^(0+256),w
  4883  0D1D  0020               	movlb	0	; select bank0
  4884  0D1E  00A4               	movwf	LCDWriteInt@val
  4885  0D1F  3003               	movlw	3
  4886  0D20  00B2               	movwf	??_afisare_inf_lcd
  4887  0D21  0832               	movf	??_afisare_inf_lcd,w
  4888  0D22  00A6               	movwf	LCDWriteInt@field_length
  4889  0D23  318D  25AD         	fcall	_LCDWriteInt
  4890  0D25  0008               	return
  4891  0D26                     __end_of_afisare_inf_lcd:	
  4892                           
  4893                           	psect	text4
  4894  0DAD                     __ptext4:	
  4895 ;; *************** function _LCDWriteInt *****************
  4896 ;; Defined at:
  4897 ;;		line 299 in file "lcd_hd44780_pic16.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  val             2    4[BANK0 ] int 
  4900 ;;  field_length    1    6[BANK0 ] char 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  str             5    9[BANK0 ] unsigned char [5]
  4903 ;;  i               2   16[BANK0 ] int 
  4904 ;;  j               2   14[BANK0 ] int 
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4914 ;;      Params:         0       3       0       0       0       0       0       0
  4915 ;;      Locals:         0       9       0       0       0       0       0       0
  4916 ;;      Temps:          0       2       0       0       0       0       0       0
  4917 ;;      Totals:         0      14       0       0       0       0       0       0
  4918 ;;Total ram usage:       14 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    5
  4921 ;; This function calls:
  4922 ;;		_LCDByte
  4923 ;;		___awdiv
  4924 ;;		___awmod
  4925 ;; This function is called by:
  4926 ;;		_afisare_inf_lcd
  4927 ;;		_setare_temperatura
  4928 ;;		_state_of_button
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _LCDWriteInt
  4934  0DAD                     _LCDWriteInt:	
  4935                           
  4936                           ;lcd_hd44780_pic16.c: 312: char str[5]={0,0,0,0,0};
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4940  0DAD  30B0               	movlw	low LCDWriteInt@F3800
  4941  0DAE  0086               	movwf	6
  4942  0DAF  3001               	movlw	high LCDWriteInt@F3800
  4943  0DB0  0087               	movwf	7
  4944  0DB1  3029               	movlw	low LCDWriteInt@str
  4945  0DB2  0084               	movwf	4
  4946  0DB3  3000               	movlw	high LCDWriteInt@str
  4947  0DB4  0085               	movwf	5
  4948  0DB5  3005               	movlw	5
  4949  0DB6  0020               	movlb	0	; select bank0
  4950  0DB7  00A7               	movwf	??_LCDWriteInt
  4951  0DB8                     u5630:	
  4952  0DB8  0016               	moviw fsr1++
  4953  0DB9  001A               	movwi fsr0++
  4954  0DBA  0BA7               	decfsz	??_LCDWriteInt,f
  4955  0DBB  2DB8               	goto	u5630
  4956                           
  4957                           ;lcd_hd44780_pic16.c: 313: int i=4,j=0;
  4958  0DBC  3004               	movlw	4
  4959  0DBD  00B0               	movwf	LCDWriteInt@i
  4960  0DBE  3000               	movlw	0
  4961  0DBF  00B1               	movwf	LCDWriteInt@i+1
  4962  0DC0  01AE               	clrf	LCDWriteInt@j
  4963  0DC1  01AF               	clrf	LCDWriteInt@j+1
  4964                           
  4965                           ;lcd_hd44780_pic16.c: 316: if(val<0)
  4966  0DC2  1FA5               	btfss	LCDWriteInt@val+1,7
  4967  0DC3  2DD0               	goto	l5120
  4968                           
  4969                           ;lcd_hd44780_pic16.c: 317: {
  4970                           ;lcd_hd44780_pic16.c: 318: (LCDByte('-',1));
  4971  0DC4  01F2               	clrf	LCDByte@isdata
  4972  0DC5  0AF2               	incf	LCDByte@isdata,f
  4973  0DC6  302D               	movlw	45
  4974  0DC7  3188  20DD  318D   	fcall	_LCDByte
  4975                           
  4976                           ;lcd_hd44780_pic16.c: 319: val=val*-1;
  4977  0DCA  0020               	movlb	0	; select bank0
  4978  0DCB  09A4               	comf	LCDWriteInt@val,f
  4979  0DCC  09A5               	comf	LCDWriteInt@val+1,f
  4980  0DCD  0AA4               	incf	LCDWriteInt@val,f
  4981  0DCE  1903               	skipnz
  4982  0DCF  0AA5               	incf	LCDWriteInt@val+1,f
  4983  0DD0                     l5120:	
  4984                           ;lcd_hd44780_pic16.c: 320: }
  4985                           ;lcd_hd44780_pic16.c: 322: while(val)
  4986                           
  4987  0DD0  0824               	movf	LCDWriteInt@val,w
  4988  0DD1  0425               	iorwf	LCDWriteInt@val+1,w
  4989  0DD2  1903               	btfsc	3,2
  4990  0DD3  2DFD               	goto	l5122
  4991                           
  4992                           ;lcd_hd44780_pic16.c: 323: {
  4993                           ;lcd_hd44780_pic16.c: 324: str[i]=val%10;
  4994  0DD4  300A               	movlw	10
  4995  0DD5  00F2               	movwf	___awmod@divisor
  4996  0DD6  3000               	movlw	0
  4997  0DD7  00F3               	movwf	___awmod@divisor+1
  4998  0DD8  0825               	movf	LCDWriteInt@val+1,w
  4999  0DD9  00F5               	movwf	___awmod@dividend+1
  5000  0DDA  0824               	movf	LCDWriteInt@val,w
  5001  0DDB  00F4               	movwf	___awmod@dividend
  5002  0DDC  3188  2098  318D   	fcall	___awmod
  5003  0DDF  0872               	movf	?___awmod,w
  5004  0DE0  0020               	movlb	0	; select bank0
  5005  0DE1  00A7               	movwf	??_LCDWriteInt
  5006  0DE2  0830               	movf	LCDWriteInt@i,w
  5007  0DE3  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  5008  0DE4  0086               	movwf	6
  5009  0DE5  0187               	clrf	7
  5010  0DE6  0827               	movf	??_LCDWriteInt,w
  5011  0DE7  0081               	movwf	1
  5012                           
  5013                           ;lcd_hd44780_pic16.c: 325: val=val/10;
  5014  0DE8  300A               	movlw	10
  5015  0DE9  00F2               	movwf	___awdiv@divisor
  5016  0DEA  3000               	movlw	0
  5017  0DEB  00F3               	movwf	___awdiv@divisor+1
  5018  0DEC  0825               	movf	LCDWriteInt@val+1,w
  5019  0DED  00F5               	movwf	___awdiv@dividend+1
  5020  0DEE  0824               	movf	LCDWriteInt@val,w
  5021  0DEF  00F4               	movwf	___awdiv@dividend
  5022  0DF0  318A  2206  318D   	fcall	___awdiv
  5023  0DF3  0873               	movf	?___awdiv+1,w
  5024  0DF4  0020               	movlb	0	; select bank0
  5025  0DF5  00A5               	movwf	LCDWriteInt@val+1
  5026  0DF6  0872               	movf	?___awdiv,w
  5027  0DF7  00A4               	movwf	LCDWriteInt@val
  5028                           
  5029                           ;lcd_hd44780_pic16.c: 326: i--;
  5030  0DF8  30FF               	movlw	255
  5031  0DF9  07B0               	addwf	LCDWriteInt@i,f
  5032  0DFA  30FF               	movlw	255
  5033  0DFB  3DB1               	addwfc	LCDWriteInt@i+1,f
  5034  0DFC  2DD0               	goto	l5120
  5035  0DFD                     l5122:	
  5036                           
  5037                           ;lcd_hd44780_pic16.c: 327: }
  5038                           ;lcd_hd44780_pic16.c: 328: if(field_length==-1)
  5039  0DFD  0A26               	incf	LCDWriteInt@field_length,w
  5040  0DFE  1903               	btfsc	3,2
  5041  0DFF  2E05               	goto	l5128
  5042  0E00  2E0D               	goto	l5130
  5043  0E01                     l5126:	
  5044                           ;lcd_hd44780_pic16.c: 329: while(str[j]==0) j++;
  5045                           
  5046  0E01  3001               	movlw	1
  5047  0E02  07AE               	addwf	LCDWriteInt@j,f
  5048  0E03  3000               	movlw	0
  5049  0E04  3DAF               	addwfc	LCDWriteInt@j+1,f
  5050  0E05                     l5128:	
  5051  0E05  082E               	movf	LCDWriteInt@j,w
  5052  0E06  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  5053  0E07  0086               	movwf	6
  5054  0E08  0187               	clrf	7
  5055  0E09  0801               	movf	1,w
  5056  0E0A  1D03               	btfss	3,2
  5057  0E0B  2E1D               	goto	l5132
  5058  0E0C  2E01               	goto	l5126
  5059  0E0D                     l5130:	
  5060                           
  5061                           ;lcd_hd44780_pic16.c: 330: else
  5062                           ;lcd_hd44780_pic16.c: 331: j=5-field_length;
  5063  0E0D  0826               	movf	LCDWriteInt@field_length,w
  5064  0E0E  00A7               	movwf	??_LCDWriteInt
  5065  0E0F  01A8               	clrf	??_LCDWriteInt+1
  5066  0E10  1BA7               	btfsc	??_LCDWriteInt,7
  5067  0E11  03A8               	decf	??_LCDWriteInt+1,f
  5068  0E12  09A7               	comf	??_LCDWriteInt,f
  5069  0E13  09A8               	comf	??_LCDWriteInt+1,f
  5070  0E14  0AA7               	incf	??_LCDWriteInt,f
  5071  0E15  1903               	skipnz
  5072  0E16  0AA8               	incf	??_LCDWriteInt+1,f
  5073  0E17  0827               	movf	??_LCDWriteInt,w
  5074  0E18  3E05               	addlw	5
  5075  0E19  00AE               	movwf	LCDWriteInt@j
  5076  0E1A  3000               	movlw	0
  5077  0E1B  3D28               	addwfc	??_LCDWriteInt+1,w
  5078  0E1C  00AF               	movwf	LCDWriteInt@j+1
  5079  0E1D                     l5132:	
  5080                           
  5081                           ;lcd_hd44780_pic16.c: 334: for(i=j;i<5;i++)
  5082  0E1D  082F               	movf	LCDWriteInt@j+1,w
  5083  0E1E  00B1               	movwf	LCDWriteInt@i+1
  5084  0E1F  082E               	movf	LCDWriteInt@j,w
  5085  0E20  00B0               	movwf	LCDWriteInt@i
  5086  0E21                     L2:	
  5087  0E21  0831               	movf	LCDWriteInt@i+1,w
  5088  0E22  3A80               	xorlw	128
  5089  0E23  00A7               	movwf	??_LCDWriteInt
  5090  0E24  3080               	movlw	128
  5091  0E25  0227               	subwf	??_LCDWriteInt,w
  5092  0E26  1D03               	skipz
  5093  0E27  2E2A               	goto	u5685
  5094  0E28  3005               	movlw	5
  5095  0E29  0230               	subwf	LCDWriteInt@i,w
  5096  0E2A                     u5685:	
  5097  0E2A  1803               	btfsc	3,0
  5098  0E2B  0008               	return
  5099                           
  5100                           ;lcd_hd44780_pic16.c: 335: {
  5101                           ;lcd_hd44780_pic16.c: 336: (LCDByte(48+str[i],1));
  5102  0E2C  01F2               	clrf	LCDByte@isdata
  5103  0E2D  0AF2               	incf	LCDByte@isdata,f
  5104  0E2E  0020               	movlb	0	; select bank0
  5105  0E2F  0830               	movf	LCDWriteInt@i,w
  5106  0E30  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  5107  0E31  0086               	movwf	6
  5108  0E32  0187               	clrf	7
  5109  0E33  0801               	movf	1,w
  5110  0E34  3E30               	addlw	48
  5111  0E35  3188  20DD  318D   	fcall	_LCDByte
  5112  0E38  3001               	movlw	1
  5113  0E39  0020               	movlb	0	; select bank0
  5114  0E3A  07B0               	addwf	LCDWriteInt@i,f
  5115  0E3B  3000               	movlw	0
  5116  0E3C  3DB1               	addwfc	LCDWriteInt@i+1,f
  5117  0E3D  2E21               	goto	L2
  5118  0E3E                     __end_of_LCDWriteInt:	
  5119                           
  5120                           	psect	text5
  5121  0898                     __ptext5:	
  5122 ;; *************** function ___awmod *****************
  5123 ;; Defined at:
  5124 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  divisor         2    2[COMMON] int 
  5127 ;;  dividend        2    4[COMMON] int 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  sign            1    8[COMMON] unsigned char 
  5130 ;;  counter         1    7[COMMON] unsigned char 
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  2    2[COMMON] int 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5140 ;;      Params:         4       0       0       0       0       0       0       0
  5141 ;;      Locals:         2       0       0       0       0       0       0       0
  5142 ;;      Temps:          1       0       0       0       0       0       0       0
  5143 ;;      Totals:         7       0       0       0       0       0       0       0
  5144 ;;Total ram usage:        7 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    4
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_afisare_inf_lcd
  5151 ;;		_LCDWriteInt
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           
  5156                           ;psect for function ___awmod
  5157  0898                     ___awmod:	
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5161  0898  01F8               	clrf	___awmod@sign
  5162  0899  1FF5               	btfss	___awmod@dividend+1,7
  5163  089A  28A2               	goto	l5012
  5164  089B  09F4               	comf	___awmod@dividend,f
  5165  089C  09F5               	comf	___awmod@dividend+1,f
  5166  089D  0AF4               	incf	___awmod@dividend,f
  5167  089E  1903               	skipnz
  5168  089F  0AF5               	incf	___awmod@dividend+1,f
  5169  08A0  01F8               	clrf	___awmod@sign
  5170  08A1  0AF8               	incf	___awmod@sign,f
  5171  08A2                     l5012:	
  5172  08A2  1FF3               	btfss	___awmod@divisor+1,7
  5173  08A3  28A9               	goto	l5016
  5174  08A4  09F2               	comf	___awmod@divisor,f
  5175  08A5  09F3               	comf	___awmod@divisor+1,f
  5176  08A6  0AF2               	incf	___awmod@divisor,f
  5177  08A7  1903               	skipnz
  5178  08A8  0AF3               	incf	___awmod@divisor+1,f
  5179  08A9                     l5016:	
  5180  08A9  0872               	movf	___awmod@divisor,w
  5181  08AA  0473               	iorwf	___awmod@divisor+1,w
  5182  08AB  1903               	btfsc	3,2
  5183  08AC  28D0               	goto	l5034
  5184  08AD  01F7               	clrf	___awmod@counter
  5185  08AE  0AF7               	incf	___awmod@counter,f
  5186  08AF                     l5024:	
  5187  08AF  1BF3               	btfsc	___awmod@divisor+1,7
  5188  08B0  28BB               	goto	l5026
  5189  08B1  3001               	movlw	1
  5190  08B2                     u5525:	
  5191  08B2  35F2               	lslf	___awmod@divisor,f
  5192  08B3  0DF3               	rlf	___awmod@divisor+1,f
  5193  08B4  0B89               	decfsz	9,f
  5194  08B5  28B2               	goto	u5525
  5195  08B6  3001               	movlw	1
  5196  08B7  00F6               	movwf	??___awmod
  5197  08B8  0876               	movf	??___awmod,w
  5198  08B9  07F7               	addwf	___awmod@counter,f
  5199  08BA  28AF               	goto	l5024
  5200  08BB                     l5026:	
  5201  08BB  0873               	movf	___awmod@divisor+1,w
  5202  08BC  0275               	subwf	___awmod@dividend+1,w
  5203  08BD  1D03               	skipz
  5204  08BE  28C1               	goto	u5545
  5205  08BF  0872               	movf	___awmod@divisor,w
  5206  08C0  0274               	subwf	___awmod@dividend,w
  5207  08C1                     u5545:	
  5208  08C1  1C03               	skipc
  5209  08C2  28C7               	goto	l5030
  5210  08C3  0872               	movf	___awmod@divisor,w
  5211  08C4  02F4               	subwf	___awmod@dividend,f
  5212  08C5  0873               	movf	___awmod@divisor+1,w
  5213  08C6  3BF5               	subwfb	___awmod@dividend+1,f
  5214  08C7                     l5030:	
  5215  08C7  3001               	movlw	1
  5216  08C8                     u5555:	
  5217  08C8  36F3               	lsrf	___awmod@divisor+1,f
  5218  08C9  0CF2               	rrf	___awmod@divisor,f
  5219  08CA  0B89               	decfsz	9,f
  5220  08CB  28C8               	goto	u5555
  5221  08CC  3001               	movlw	1
  5222  08CD  02F7               	subwf	___awmod@counter,f
  5223  08CE  1D03               	btfss	3,2
  5224  08CF  28BB               	goto	l5026
  5225  08D0                     l5034:	
  5226  08D0  0878               	movf	___awmod@sign,w
  5227  08D1  1903               	btfsc	3,2
  5228  08D2  28D8               	goto	l5038
  5229  08D3  09F4               	comf	___awmod@dividend,f
  5230  08D4  09F5               	comf	___awmod@dividend+1,f
  5231  08D5  0AF4               	incf	___awmod@dividend,f
  5232  08D6  1903               	skipnz
  5233  08D7  0AF5               	incf	___awmod@dividend+1,f
  5234  08D8                     l5038:	
  5235  08D8  0875               	movf	___awmod@dividend+1,w
  5236  08D9  00F3               	movwf	?___awmod+1
  5237  08DA  0874               	movf	___awmod@dividend,w
  5238  08DB  00F2               	movwf	?___awmod
  5239  08DC  0008               	return
  5240  08DD                     __end_of___awmod:	
  5241                           
  5242                           	psect	text6
  5243  0A06                     __ptext6:	
  5244 ;; *************** function ___awdiv *****************
  5245 ;; Defined at:
  5246 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  divisor         2    2[COMMON] int 
  5249 ;;  dividend        2    4[COMMON] int 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  quotient        2    2[BANK0 ] int 
  5252 ;;  sign            1    1[BANK0 ] unsigned char 
  5253 ;;  counter         1    0[BANK0 ] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;                  2    2[COMMON] int 
  5256 ;; Registers used:
  5257 ;;		wreg, status,2, status,0
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5263 ;;      Params:         4       0       0       0       0       0       0       0
  5264 ;;      Locals:         0       4       0       0       0       0       0       0
  5265 ;;      Temps:          1       0       0       0       0       0       0       0
  5266 ;;      Totals:         5       4       0       0       0       0       0       0
  5267 ;;Total ram usage:        9 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    4
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_afisare_inf_lcd
  5274 ;;		_LCDWriteInt
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function ___awdiv
  5280  0A06                     ___awdiv:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5284  0A06  0020               	movlb	0	; select bank0
  5285  0A07  01A1               	clrf	___awdiv@sign
  5286  0A08  1FF3               	btfss	___awdiv@divisor+1,7
  5287  0A09  2A11               	goto	l4968
  5288  0A0A  09F2               	comf	___awdiv@divisor,f
  5289  0A0B  09F3               	comf	___awdiv@divisor+1,f
  5290  0A0C  0AF2               	incf	___awdiv@divisor,f
  5291  0A0D  1903               	skipnz
  5292  0A0E  0AF3               	incf	___awdiv@divisor+1,f
  5293  0A0F  01A1               	clrf	___awdiv@sign
  5294  0A10  0AA1               	incf	___awdiv@sign,f
  5295  0A11                     l4968:	
  5296  0A11  1FF5               	btfss	___awdiv@dividend+1,7
  5297  0A12  2A1C               	goto	l4974
  5298  0A13  09F4               	comf	___awdiv@dividend,f
  5299  0A14  09F5               	comf	___awdiv@dividend+1,f
  5300  0A15  0AF4               	incf	___awdiv@dividend,f
  5301  0A16  1903               	skipnz
  5302  0A17  0AF5               	incf	___awdiv@dividend+1,f
  5303  0A18  3001               	movlw	1
  5304  0A19  00F6               	movwf	??___awdiv
  5305  0A1A  0876               	movf	??___awdiv,w
  5306  0A1B  06A1               	xorwf	___awdiv@sign,f
  5307  0A1C                     l4974:	
  5308  0A1C  01A2               	clrf	___awdiv@quotient
  5309  0A1D  01A3               	clrf	___awdiv@quotient+1
  5310  0A1E  0872               	movf	___awdiv@divisor,w
  5311  0A1F  0473               	iorwf	___awdiv@divisor+1,w
  5312  0A20  1903               	btfsc	3,2
  5313  0A21  2A4B               	goto	l4996
  5314  0A22  01A0               	clrf	___awdiv@counter
  5315  0A23  0AA0               	incf	___awdiv@counter,f
  5316  0A24                     l4984:	
  5317  0A24  1BF3               	btfsc	___awdiv@divisor+1,7
  5318  0A25  2A30               	goto	l4986
  5319  0A26  3001               	movlw	1
  5320  0A27                     u5425:	
  5321  0A27  35F2               	lslf	___awdiv@divisor,f
  5322  0A28  0DF3               	rlf	___awdiv@divisor+1,f
  5323  0A29  0B89               	decfsz	9,f
  5324  0A2A  2A27               	goto	u5425
  5325  0A2B  3001               	movlw	1
  5326  0A2C  00F6               	movwf	??___awdiv
  5327  0A2D  0876               	movf	??___awdiv,w
  5328  0A2E  07A0               	addwf	___awdiv@counter,f
  5329  0A2F  2A24               	goto	l4984
  5330  0A30                     l4986:	
  5331  0A30  3001               	movlw	1
  5332  0A31                     u5445:	
  5333  0A31  35A2               	lslf	___awdiv@quotient,f
  5334  0A32  0DA3               	rlf	___awdiv@quotient+1,f
  5335  0A33  0B89               	decfsz	9,f
  5336  0A34  2A31               	goto	u5445
  5337  0A35  0873               	movf	___awdiv@divisor+1,w
  5338  0A36  0275               	subwf	___awdiv@dividend+1,w
  5339  0A37  1D03               	skipz
  5340  0A38  2A3B               	goto	u5455
  5341  0A39  0872               	movf	___awdiv@divisor,w
  5342  0A3A  0274               	subwf	___awdiv@dividend,w
  5343  0A3B                     u5455:	
  5344  0A3B  1C03               	skipc
  5345  0A3C  2A42               	goto	l4992
  5346  0A3D  0872               	movf	___awdiv@divisor,w
  5347  0A3E  02F4               	subwf	___awdiv@dividend,f
  5348  0A3F  0873               	movf	___awdiv@divisor+1,w
  5349  0A40  3BF5               	subwfb	___awdiv@dividend+1,f
  5350  0A41  1422               	bsf	___awdiv@quotient,0
  5351  0A42                     l4992:	
  5352  0A42  3001               	movlw	1
  5353  0A43                     u5465:	
  5354  0A43  36F3               	lsrf	___awdiv@divisor+1,f
  5355  0A44  0CF2               	rrf	___awdiv@divisor,f
  5356  0A45  0B89               	decfsz	9,f
  5357  0A46  2A43               	goto	u5465
  5358  0A47  3001               	movlw	1
  5359  0A48  02A0               	subwf	___awdiv@counter,f
  5360  0A49  1D03               	btfss	3,2
  5361  0A4A  2A30               	goto	l4986
  5362  0A4B                     l4996:	
  5363  0A4B  0821               	movf	___awdiv@sign,w
  5364  0A4C  1903               	btfsc	3,2
  5365  0A4D  2A53               	goto	l5000
  5366  0A4E  09A2               	comf	___awdiv@quotient,f
  5367  0A4F  09A3               	comf	___awdiv@quotient+1,f
  5368  0A50  0AA2               	incf	___awdiv@quotient,f
  5369  0A51  1903               	skipnz
  5370  0A52  0AA3               	incf	___awdiv@quotient+1,f
  5371  0A53                     l5000:	
  5372  0A53  0823               	movf	___awdiv@quotient+1,w
  5373  0A54  00F3               	movwf	?___awdiv+1
  5374  0A55  0822               	movf	___awdiv@quotient,w
  5375  0A56  00F2               	movwf	?___awdiv
  5376  0A57  0008               	return
  5377  0A58                     __end_of___awdiv:	
  5378                           
  5379                           	psect	text7
  5380  163D                     __ptext7:	
  5381 ;; *************** function _LCDGotoXY *****************
  5382 ;; Defined at:
  5383 ;;		line 344 in file "lcd_hd44780_pic16.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  x               1    wreg     unsigned char 
  5386 ;;  y               1    9[COMMON] unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  x               1    1[BANK0 ] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5398 ;;      Params:         1       0       0       0       0       0       0       0
  5399 ;;      Locals:         0       1       0       0       0       0       0       0
  5400 ;;      Temps:          0       1       0       0       0       0       0       0
  5401 ;;      Totals:         1       2       0       0       0       0       0       0
  5402 ;;Total ram usage:        3 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    5
  5405 ;; This function calls:
  5406 ;;		_LCDByte
  5407 ;; This function is called by:
  5408 ;;		_afisare_inf_lcd
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           
  5413                           ;psect for function _LCDGotoXY
  5414  163D                     _LCDGotoXY:	
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5418                           ;LCDGotoXY@x stored from wreg
  5419  163D  0020               	movlb	0	; select bank0
  5420  163E  00A1               	movwf	LCDGotoXY@x
  5421                           
  5422                           ;lcd_hd44780_pic16.c: 346: if(x>=20) return;
  5423  163F  3014               	movlw	20
  5424  1640  0221               	subwf	LCDGotoXY@x,w
  5425  1641  1803               	btfsc	3,0
  5426  1642  0008               	return
  5427  1643  2E4D               	goto	l5074
  5428  1644                     l745:	
  5429                           ;lcd_hd44780_pic16.c: 354: case 1:
  5430                           
  5431                           ;lcd_hd44780_pic16.c: 353: break;
  5432                           
  5433                           ;lcd_hd44780_pic16.c: 351: {
  5434                           ;lcd_hd44780_pic16.c: 352: case 0:
  5435                           
  5436                           ;lcd_hd44780_pic16.c: 350: switch(y)
  5437                           
  5438                           
  5439                           ;lcd_hd44780_pic16.c: 355: x|=0b01000000;
  5440  1644  1721               	bsf	LCDGotoXY@x,6
  5441                           
  5442                           ;lcd_hd44780_pic16.c: 356: break;
  5443  1645  2E5B               	goto	l744
  5444  1646                     l5068:	
  5445                           ;lcd_hd44780_pic16.c: 357: case 2:
  5446                           
  5447                           
  5448                           ;lcd_hd44780_pic16.c: 358: x+=0x14;
  5449  1646  3014               	movlw	20
  5450  1647  2E49               	goto	L3
  5451  1648                     l5070:	
  5452                           ;lcd_hd44780_pic16.c: 360: case 3:
  5453                           
  5454                           ;lcd_hd44780_pic16.c: 359: break;
  5455                           
  5456                           
  5457                           ;lcd_hd44780_pic16.c: 361: x+=0x54;
  5458  1648  3054               	movlw	84
  5459  1649                     L3:	
  5460  1649  00A0               	movwf	??_LCDGotoXY
  5461  164A  0820               	movf	??_LCDGotoXY,w
  5462  164B  07A1               	addwf	LCDGotoXY@x,f
  5463                           
  5464                           ;lcd_hd44780_pic16.c: 363: }
  5465                           
  5466                           ;lcd_hd44780_pic16.c: 362: break;
  5467  164C  2E5B               	goto	l744
  5468  164D                     l5074:	
  5469  164D  0879               	movf	LCDGotoXY@y,w
  5470                           
  5471                           ; Switch size 1, requested type "space"
  5472                           ; Number of cases is 4, Range of values is 0 to 3
  5473                           ; switch strategies available:
  5474                           ; Name         Instructions Cycles
  5475                           ; simple_byte           13     7 (average)
  5476                           ; direct_byte           14     6 (fixed)
  5477                           ; jumptable            260     6 (fixed)
  5478                           ;	Chosen strategy is simple_byte
  5479  164E  3A00               	xorlw	0	; case 0
  5480  164F  1903               	skipnz
  5481  1650  2E5B               	goto	l744
  5482  1651  3A01               	xorlw	1	; case 1
  5483  1652  1903               	skipnz
  5484  1653  2E44               	goto	l745
  5485  1654  3A03               	xorlw	3	; case 2
  5486  1655  1903               	skipnz
  5487  1656  2E46               	goto	l5068
  5488  1657  3A01               	xorlw	1	; case 3
  5489  1658  1903               	skipnz
  5490  1659  2E48               	goto	l5070
  5491  165A  2E5B               	goto	l744
  5492  165B                     l744:	
  5493                           
  5494                           ;lcd_hd44780_pic16.c: 385: x|=0b10000000;
  5495  165B  17A1               	bsf	LCDGotoXY@x,7
  5496                           
  5497                           ;lcd_hd44780_pic16.c: 386: (LCDByte(x,0));
  5498  165C  01F2               	clrf	LCDByte@isdata
  5499  165D  0821               	movf	LCDGotoXY@x,w
  5500  165E  3188  20DD         	fcall	_LCDByte
  5501  1660  0008               	return
  5502  1661                     __end_of_LCDGotoXY:	
  5503                           
  5504                           	psect	text8
  5505  1686                     __ptext8:	
  5506 ;; *************** function _Check_key *****************
  5507 ;; Defined at:
  5508 ;;		line 82 in file "keyboard.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  btn_mask        1    wreg     unsigned char 
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  btn_mask        1    2[COMMON] unsigned char 
  5513 ;;  btn_pressed     1    3[COMMON] unsigned char 
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      unsigned char 
  5516 ;; Registers used:
  5517 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5523 ;;      Params:         0       0       0       0       0       0       0       0
  5524 ;;      Locals:         2       0       0       0       0       0       0       0
  5525 ;;      Temps:          0       0       0       0       0       0       0       0
  5526 ;;      Totals:         2       0       0       0       0       0       0       0
  5527 ;;Total ram usage:        2 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    4
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_state_of_button
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _Check_key
  5539  1686                     _Check_key:	
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _Check_key: [wreg-fsr0h+status,2+status,0]
  5543                           ;Check_key@btn_mask stored from wreg
  5544  1686  00F2               	movwf	Check_key@btn_mask
  5545                           
  5546                           ;keyboard.c: 86: unsigned char btn_pressed=0;
  5547  1687  01F3               	clrf	Check_key@btn_pressed
  5548                           
  5549                           ;keyboard.c: 89: switch(btn_mask)
  5550  1688  2EA0               	goto	l5358
  5551  1689                     l5344:	
  5552                           ;keyboard.c: 90: {
  5553                           ;keyboard.c: 91: case 0b01000000:
  5554                           
  5555                           
  5556                           ;keyboard.c: 92: btn_pressed=strKey_Pressed.btnOK;
  5557  1689  3000               	movlw	0
  5558  168A  0020               	movlb	0	; select bank0
  5559  168B  186E               	btfsc	_strKey_Pressed,0	;volatile
  5560  168C  3001               	movlw	1
  5561  168D  00F3               	movwf	Check_key@btn_pressed
  5562                           
  5563                           ;keyboard.c: 94: strKey_Pressed.btnOK=0;
  5564  168E  106E               	bcf	_strKey_Pressed,0	;volatile
  5565                           
  5566                           ;keyboard.c: 95: break;
  5567  168F  2EAB               	goto	l5360
  5568  1690                     l5348:	
  5569                           ;keyboard.c: 97: case 0b10000000:
  5570                           
  5571                           
  5572                           ;keyboard.c: 98: btn_pressed=strKey_Pressed.btnUP;
  5573  1690  3000               	movlw	0
  5574  1691  0020               	movlb	0	; select bank0
  5575  1692  18EE               	btfsc	_strKey_Pressed,1	;volatile
  5576  1693  3001               	movlw	1
  5577  1694  00F3               	movwf	Check_key@btn_pressed
  5578                           
  5579                           ;keyboard.c: 100: strKey_Pressed.btnUP=0;
  5580  1695  10EE               	bcf	_strKey_Pressed,1	;volatile
  5581                           
  5582                           ;keyboard.c: 101: break;
  5583  1696  2EAB               	goto	l5360
  5584  1697                     l5352:	
  5585                           ;keyboard.c: 102: case 0b00100000:
  5586                           
  5587                           
  5588                           ;keyboard.c: 103: btn_pressed=strKey_Pressed.btnDOWN;
  5589  1697  3000               	movlw	0
  5590  1698  0020               	movlb	0	; select bank0
  5591  1699  196E               	btfsc	_strKey_Pressed,2	;volatile
  5592  169A  3001               	movlw	1
  5593  169B  00F3               	movwf	Check_key@btn_pressed
  5594                           
  5595                           ;keyboard.c: 105: strKey_Pressed.btnDOWN=0;
  5596  169C  116E               	bcf	_strKey_Pressed,2	;volatile
  5597                           
  5598                           ;keyboard.c: 106: break;
  5599  169D  2EAB               	goto	l5360
  5600  169E                     l5356:	
  5601                           ;keyboard.c: 107: default:
  5602                           
  5603                           
  5604                           ;keyboard.c: 108: btn_pressed=0;
  5605  169E  01F3               	clrf	Check_key@btn_pressed
  5606                           
  5607                           ;keyboard.c: 109: }
  5608  169F  2EAB               	goto	l5360
  5609  16A0                     l5358:	
  5610  16A0  0872               	movf	Check_key@btn_mask,w
  5611                           
  5612                           ; Switch size 1, requested type "space"
  5613                           ; Number of cases is 3, Range of values is 32 to 128
  5614                           ; switch strategies available:
  5615                           ; Name         Instructions Cycles
  5616                           ; simple_byte           10     6 (average)
  5617                           ; direct_byte          203     9 (fixed)
  5618                           ; jumptable            263     9 (fixed)
  5619                           ;	Chosen strategy is simple_byte
  5620  16A1  3A20               	xorlw	32	; case 32
  5621  16A2  1903               	skipnz
  5622  16A3  2E97               	goto	l5352
  5623  16A4  3A60               	xorlw	96	; case 64
  5624  16A5  1903               	skipnz
  5625  16A6  2E89               	goto	l5344
  5626  16A7  3AC0               	xorlw	192	; case 128
  5627  16A8  1903               	skipnz
  5628  16A9  2E90               	goto	l5348
  5629  16AA  2E9E               	goto	l5356
  5630  16AB                     l5360:	
  5631                           
  5632                           ;keyboard.c: 110: return btn_pressed;
  5633  16AB  0873               	movf	Check_key@btn_pressed,w
  5634  16AC  0008               	return
  5635  16AD                     __end_of_Check_key:	
  5636                           
  5637                           	psect	text9
  5638  0BCD                     __ptext9:	
  5639 ;; *************** function _read_eeprom_int32 *****************
  5640 ;; Defined at:
  5641 ;;		line 79 in file "main.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  addr            1    wreg     unsigned char 
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;  addr            1    8[BANK0 ] unsigned char 
  5646 ;;  result          4    4[BANK0 ] unsigned long 
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  4    6[COMMON] unsigned long 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0, pclath, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5656 ;;      Params:         4       0       0       0       0       0       0       0
  5657 ;;      Locals:         0       5       0       0       0       0       0       0
  5658 ;;      Temps:          0       4       0       0       0       0       0       0
  5659 ;;      Totals:         4       9       0       0       0       0       0       0
  5660 ;;Total ram usage:       13 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    5
  5663 ;; This function calls:
  5664 ;;		_eeprom_read
  5665 ;; This function is called by:
  5666 ;;		_main
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           
  5671                           ;psect for function _read_eeprom_int32
  5672  0BCD                     _read_eeprom_int32:	
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _read_eeprom_int32: [wreg+status,2+status,0+pclath+cstack]
  5676                           ;read_eeprom_int32@addr stored from wreg
  5677  0BCD  0020               	movlb	0	; select bank0
  5678  0BCE  00A8               	movwf	read_eeprom_int32@addr
  5679                           
  5680                           ;main.c: 81: uint32_t result;
  5681                           ;main.c: 83: result = eeprom_read(addr + 3);
  5682  0BCF  0828               	movf	read_eeprom_int32@addr,w
  5683  0BD0  3E03               	addlw	3
  5684  0BD1  3195  250C  318B   	fcall	_eeprom_read
  5685  0BD4  0020               	movlb	0	; select bank0
  5686  0BD5  00A0               	movwf	??_read_eeprom_int32
  5687  0BD6  01A1               	clrf	??_read_eeprom_int32+1
  5688  0BD7  01A2               	clrf	??_read_eeprom_int32+2
  5689  0BD8  01A3               	clrf	??_read_eeprom_int32+3
  5690  0BD9  0823               	movf	??_read_eeprom_int32+3,w
  5691  0BDA  00A7               	movwf	read_eeprom_int32@result+3
  5692  0BDB  0822               	movf	??_read_eeprom_int32+2,w
  5693  0BDC  00A6               	movwf	read_eeprom_int32@result+2
  5694  0BDD  0821               	movf	??_read_eeprom_int32+1,w
  5695  0BDE  00A5               	movwf	read_eeprom_int32@result+1
  5696  0BDF  0820               	movf	??_read_eeprom_int32,w
  5697  0BE0  00A4               	movwf	read_eeprom_int32@result
  5698                           
  5699                           ;main.c: 84: result <<= 8;
  5700  0BE1  3008               	movlw	8
  5701  0BE2                     u6755:	
  5702  0BE2  35A4               	lslf	read_eeprom_int32@result,f
  5703  0BE3  0DA5               	rlf	read_eeprom_int32@result+1,f
  5704  0BE4  0DA6               	rlf	read_eeprom_int32@result+2,f
  5705  0BE5  0DA7               	rlf	read_eeprom_int32@result+3,f
  5706  0BE6  0B89               	decfsz	9,f
  5707  0BE7  2BE2               	goto	u6755
  5708                           
  5709                           ;main.c: 85: result += eeprom_read(addr + 2);
  5710  0BE8  0828               	movf	read_eeprom_int32@addr,w
  5711  0BE9  3E02               	addlw	2
  5712  0BEA  3195  250C  318B   	fcall	_eeprom_read
  5713  0BED  0020               	movlb	0	; select bank0
  5714  0BEE  00A0               	movwf	??_read_eeprom_int32
  5715  0BEF  01A1               	clrf	??_read_eeprom_int32+1
  5716  0BF0  01A2               	clrf	??_read_eeprom_int32+2
  5717  0BF1  01A3               	clrf	??_read_eeprom_int32+3
  5718  0BF2  0820               	movf	??_read_eeprom_int32,w
  5719  0BF3  07A4               	addwf	read_eeprom_int32@result,f
  5720  0BF4  0821               	movf	??_read_eeprom_int32+1,w
  5721  0BF5  3DA5               	addwfc	read_eeprom_int32@result+1,f
  5722  0BF6  0822               	movf	??_read_eeprom_int32+2,w
  5723  0BF7  3DA6               	addwfc	read_eeprom_int32@result+2,f
  5724  0BF8  0823               	movf	??_read_eeprom_int32+3,w
  5725  0BF9  3DA7               	addwfc	read_eeprom_int32@result+3,f
  5726                           
  5727                           ;main.c: 86: result <<= 8;
  5728  0BFA  3008               	movlw	8
  5729  0BFB                     u6765:	
  5730  0BFB  35A4               	lslf	read_eeprom_int32@result,f
  5731  0BFC  0DA5               	rlf	read_eeprom_int32@result+1,f
  5732  0BFD  0DA6               	rlf	read_eeprom_int32@result+2,f
  5733  0BFE  0DA7               	rlf	read_eeprom_int32@result+3,f
  5734  0BFF  0B89               	decfsz	9,f
  5735  0C00  2BFB               	goto	u6765
  5736                           
  5737                           ;main.c: 87: result += eeprom_read(addr + 1);
  5738  0C01  0828               	movf	read_eeprom_int32@addr,w
  5739  0C02  3E01               	addlw	1
  5740  0C03  3195  250C  318B   	fcall	_eeprom_read
  5741  0C06  0020               	movlb	0	; select bank0
  5742  0C07  00A0               	movwf	??_read_eeprom_int32
  5743  0C08  01A1               	clrf	??_read_eeprom_int32+1
  5744  0C09  01A2               	clrf	??_read_eeprom_int32+2
  5745  0C0A  01A3               	clrf	??_read_eeprom_int32+3
  5746  0C0B  0820               	movf	??_read_eeprom_int32,w
  5747  0C0C  07A4               	addwf	read_eeprom_int32@result,f
  5748  0C0D  0821               	movf	??_read_eeprom_int32+1,w
  5749  0C0E  3DA5               	addwfc	read_eeprom_int32@result+1,f
  5750  0C0F  0822               	movf	??_read_eeprom_int32+2,w
  5751  0C10  3DA6               	addwfc	read_eeprom_int32@result+2,f
  5752  0C11  0823               	movf	??_read_eeprom_int32+3,w
  5753  0C12  3DA7               	addwfc	read_eeprom_int32@result+3,f
  5754                           
  5755                           ;main.c: 88: result <<= 8;
  5756  0C13  3008               	movlw	8
  5757  0C14                     u6775:	
  5758  0C14  35A4               	lslf	read_eeprom_int32@result,f
  5759  0C15  0DA5               	rlf	read_eeprom_int32@result+1,f
  5760  0C16  0DA6               	rlf	read_eeprom_int32@result+2,f
  5761  0C17  0DA7               	rlf	read_eeprom_int32@result+3,f
  5762  0C18  0B89               	decfsz	9,f
  5763  0C19  2C14               	goto	u6775
  5764                           
  5765                           ;main.c: 89: result += eeprom_read(addr);
  5766  0C1A  0828               	movf	read_eeprom_int32@addr,w
  5767  0C1B  3195  250C         	fcall	_eeprom_read
  5768  0C1D  0020               	movlb	0	; select bank0
  5769  0C1E  00A0               	movwf	??_read_eeprom_int32
  5770  0C1F  01A1               	clrf	??_read_eeprom_int32+1
  5771  0C20  01A2               	clrf	??_read_eeprom_int32+2
  5772  0C21  01A3               	clrf	??_read_eeprom_int32+3
  5773  0C22  0820               	movf	??_read_eeprom_int32,w
  5774  0C23  07A4               	addwf	read_eeprom_int32@result,f
  5775  0C24  0821               	movf	??_read_eeprom_int32+1,w
  5776  0C25  3DA5               	addwfc	read_eeprom_int32@result+1,f
  5777  0C26  0822               	movf	??_read_eeprom_int32+2,w
  5778  0C27  3DA6               	addwfc	read_eeprom_int32@result+2,f
  5779  0C28  0823               	movf	??_read_eeprom_int32+3,w
  5780  0C29  3DA7               	addwfc	read_eeprom_int32@result+3,f
  5781                           
  5782                           ;main.c: 90: return result;
  5783  0C2A  0827               	movf	read_eeprom_int32@result+3,w
  5784  0C2B  00F9               	movwf	?_read_eeprom_int32+3
  5785  0C2C  0826               	movf	read_eeprom_int32@result+2,w
  5786  0C2D  00F8               	movwf	?_read_eeprom_int32+2
  5787  0C2E  0825               	movf	read_eeprom_int32@result+1,w
  5788  0C2F  00F7               	movwf	?_read_eeprom_int32+1
  5789  0C30  0824               	movf	read_eeprom_int32@result,w
  5790  0C31  00F6               	movwf	?_read_eeprom_int32
  5791  0C32  0008               	return
  5792  0C33                     __end_of_read_eeprom_int32:	
  5793                           
  5794                           	psect	text10
  5795  0E3E                     __ptext10:	
  5796 ;; *************** function _int_gsm *****************
  5797 ;; Defined at:
  5798 ;;		line 38 in file "gsm.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  1    wreg      void 
  5805 ;; Registers used:
  5806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5812 ;;      Params:         0       0       0       0       0       0       0       0
  5813 ;;      Locals:         0       0       0       0       0       0       0       0
  5814 ;;      Temps:          0       2       0       0       0       0       0       0
  5815 ;;      Totals:         0       2       0       0       0       0       0       0
  5816 ;;Total ram usage:        2 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    8
  5819 ;; This function calls:
  5820 ;;		_printf
  5821 ;;		_putch
  5822 ;; This function is called by:
  5823 ;;		_main
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _int_gsm
  5829  0E3E                     _int_gsm:	
  5830                           
  5831                           ;gsm.c: 41: printf("AT");
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _int_gsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5835  0E3E  30D5               	movlw	low (STR_16| (0+32768))
  5836  0E3F  0020               	movlb	0	; select bank0
  5837  0E40  00B3               	movwf	printf@f
  5838  0E41  3098               	movlw	high (STR_16| (0+32768))
  5839  0E42  00B4               	movwf	printf@f+1
  5840  0E43  3194  24C7  318E   	fcall	_printf
  5841                           
  5842                           ;gsm.c: 42: putch(0x0d);
  5843  0E46  300D               	movlw	13
  5844  0E47  0020               	movlb	0	; select bank0
  5845  0E48  00BA               	movwf	??_int_gsm
  5846  0E49  083A               	movf	??_int_gsm,w
  5847  0E4A  00F4               	movwf	putch@txData
  5848  0E4B  3194  2456  318E   	fcall	_putch
  5849                           
  5850                           ;gsm.c: 43: _delay((unsigned long)((3000)*(18432000/4000.0)));
  5851  0E4E  3047               	movlw	71
  5852  0E4F  0020               	movlb	0	; select bank0
  5853  0E50  00BB               	movwf	??_int_gsm+1
  5854  0E51  3022               	movlw	34
  5855  0E52  00BA               	movwf	??_int_gsm
  5856  0E53  300D               	movlw	13
  5857  0E54                     u7327:	
  5858  0E54  0B89               	decfsz	9,f
  5859  0E55  2E54               	goto	u7327
  5860  0E56  0BBA               	decfsz	??_int_gsm,f
  5861  0E57  2E54               	goto	u7327
  5862  0E58  0BBB               	decfsz	??_int_gsm+1,f
  5863  0E59  2E54               	goto	u7327
  5864  0E5A  3200               	nop2
  5865                           
  5866                           ;gsm.c: 44: printf("AT+CPIN=\"0000\"");
  5867  0E5B  307B               	movlw	low (STR_17| (0+32768))
  5868  0E5C  0020               	movlb	0	; select bank0
  5869  0E5D  00B3               	movwf	printf@f
  5870  0E5E  3098               	movlw	high (STR_17| (0+32768))
  5871  0E5F  00B4               	movwf	printf@f+1
  5872  0E60  3194  24C7  318E   	fcall	_printf
  5873                           
  5874                           ;gsm.c: 45: putch(0x0d);
  5875  0E63  300D               	movlw	13
  5876  0E64  0020               	movlb	0	; select bank0
  5877  0E65  00BA               	movwf	??_int_gsm
  5878  0E66  083A               	movf	??_int_gsm,w
  5879  0E67  00F4               	movwf	putch@txData
  5880  0E68  3194  2456  318E   	fcall	_putch
  5881                           
  5882                           ;gsm.c: 48: _delay((unsigned long)((5000)*(18432000/4000.0)));
  5883  0E6B  3075               	movlw	117
  5884  0E6C  0020               	movlb	0	; select bank0
  5885  0E6D  00BB               	movwf	??_int_gsm+1
  5886  0E6E  30E2               	movlw	226
  5887  0E6F  00BA               	movwf	??_int_gsm
  5888  0E70  30C4               	movlw	196
  5889  0E71                     u7337:	
  5890  0E71  0B89               	decfsz	9,f
  5891  0E72  2E71               	goto	u7337
  5892  0E73  0BBA               	decfsz	??_int_gsm,f
  5893  0E74  2E71               	goto	u7337
  5894  0E75  0BBB               	decfsz	??_int_gsm+1,f
  5895  0E76  2E71               	goto	u7337
  5896  0E77  0000               	nop
  5897                           
  5898                           ;gsm.c: 49: printf("AT+CMGF=1");
  5899  0E78  30BF               	movlw	low (STR_18| (0+32768))
  5900  0E79  0020               	movlb	0	; select bank0
  5901  0E7A  00B3               	movwf	printf@f
  5902  0E7B  3098               	movlw	high (STR_18| (0+32768))
  5903  0E7C  00B4               	movwf	printf@f+1
  5904  0E7D  3194  24C7  318E   	fcall	_printf
  5905                           
  5906                           ;gsm.c: 50: putch(0x0d);
  5907  0E80  300D               	movlw	13
  5908  0E81  0020               	movlb	0	; select bank0
  5909  0E82  00BA               	movwf	??_int_gsm
  5910  0E83  083A               	movf	??_int_gsm,w
  5911  0E84  00F4               	movwf	putch@txData
  5912  0E85  3194  2456  318E   	fcall	_putch
  5913                           
  5914                           ;gsm.c: 51: _delay((unsigned long)((5000)*(18432000/4000.0)));
  5915  0E88  3075               	movlw	117
  5916  0E89  0020               	movlb	0	; select bank0
  5917  0E8A  00BB               	movwf	??_int_gsm+1
  5918  0E8B  30E2               	movlw	226
  5919  0E8C  00BA               	movwf	??_int_gsm
  5920  0E8D  30C4               	movlw	196
  5921  0E8E                     u7347:	
  5922  0E8E  0B89               	decfsz	9,f
  5923  0E8F  2E8E               	goto	u7347
  5924  0E90  0BBA               	decfsz	??_int_gsm,f
  5925  0E91  2E8E               	goto	u7347
  5926  0E92  0BBB               	decfsz	??_int_gsm+1,f
  5927  0E93  2E8E               	goto	u7347
  5928  0E94  0000               	nop
  5929                           
  5930                           ;gsm.c: 52: printf("AT+CNMI=1,2,0,0,0");
  5931  0E95  3015               	movlw	low (STR_19| (0+32768))
  5932  0E96  0020               	movlb	0	; select bank0
  5933  0E97  00B3               	movwf	printf@f
  5934  0E98  3098               	movlw	high (STR_19| (0+32768))
  5935  0E99  00B4               	movwf	printf@f+1
  5936  0E9A  3194  24C7  318E   	fcall	_printf
  5937                           
  5938                           ;gsm.c: 53: putch(0x0d);
  5939  0E9D  300D               	movlw	13
  5940  0E9E  0020               	movlb	0	; select bank0
  5941  0E9F  00BA               	movwf	??_int_gsm
  5942  0EA0  083A               	movf	??_int_gsm,w
  5943  0EA1  00F4               	movwf	putch@txData
  5944  0EA2  3194  2456  318E   	fcall	_putch
  5945                           
  5946                           ;gsm.c: 54: _delay((unsigned long)((5000)*(18432000/4000.0)));
  5947  0EA5  3075               	movlw	117
  5948  0EA6  0020               	movlb	0	; select bank0
  5949  0EA7  00BB               	movwf	??_int_gsm+1
  5950  0EA8  30E2               	movlw	226
  5951  0EA9  00BA               	movwf	??_int_gsm
  5952  0EAA  30C4               	movlw	196
  5953  0EAB                     u7357:	
  5954  0EAB  0B89               	decfsz	9,f
  5955  0EAC  2EAB               	goto	u7357
  5956  0EAD  0BBA               	decfsz	??_int_gsm,f
  5957  0EAE  2EAB               	goto	u7357
  5958  0EAF  0BBB               	decfsz	??_int_gsm+1,f
  5959  0EB0  2EAB               	goto	u7357
  5960  0EB1  0000               	nop
  5961                           
  5962                           ;gsm.c: 55: printf("AT+CSCS=\"GSM\"");
  5963  0EB2  3099               	movlw	low (STR_12| (0+32768))
  5964  0EB3  0020               	movlb	0	; select bank0
  5965  0EB4  00B3               	movwf	printf@f
  5966  0EB5  3098               	movlw	high (STR_12| (0+32768))
  5967  0EB6  00B4               	movwf	printf@f+1
  5968  0EB7  3194  24C7  318E   	fcall	_printf
  5969                           
  5970                           ;gsm.c: 56: putch(0x0d);
  5971  0EBA  300D               	movlw	13
  5972  0EBB  0020               	movlb	0	; select bank0
  5973  0EBC  00BA               	movwf	??_int_gsm
  5974  0EBD  083A               	movf	??_int_gsm,w
  5975  0EBE  00F4               	movwf	putch@txData
  5976  0EBF  3194  2456  318E   	fcall	_putch
  5977                           
  5978                           ;gsm.c: 57: _delay((unsigned long)((5000)*(18432000/4000.0)));
  5979  0EC2  3075               	movlw	117
  5980  0EC3  0020               	movlb	0	; select bank0
  5981  0EC4  00BB               	movwf	??_int_gsm+1
  5982  0EC5  30E2               	movlw	226
  5983  0EC6  00BA               	movwf	??_int_gsm
  5984  0EC7  30C4               	movlw	196
  5985  0EC8                     u7367:	
  5986  0EC8  0B89               	decfsz	9,f
  5987  0EC9  2EC8               	goto	u7367
  5988  0ECA  0BBA               	decfsz	??_int_gsm,f
  5989  0ECB  2EC8               	goto	u7367
  5990  0ECC  0BBB               	decfsz	??_int_gsm+1,f
  5991  0ECD  2EC8               	goto	u7367
  5992  0ECE  0000               	nop
  5993  0ECF  0008               	return
  5994  0ED0                     __end_of_int_gsm:	
  5995                           
  5996                           	psect	text11
  5997  0083                     __ptext11:	
  5998 ;; *************** function _comparare *****************
  5999 ;; Defined at:
  6000 ;;		line 96 in file "main.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;  resistor_val    2   52[BANK0 ] int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  j               2   77[BANK1 ] int 
  6005 ;;  j               2   75[BANK1 ] int 
  6006 ;;  i               2   42[BANK2 ] int 
  6007 ;;  table          75    0[BANK1 ] float [25]
  6008 ;;  res            42    0[BANK2 ] unsigned int [21]
  6009 ;;  step            3   59[BANK0 ] float 
  6010 ;;  dif             3   56[BANK0 ] float 
  6011 ;;  result          2   62[BANK0 ] int 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  2   52[BANK0 ] int 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6021 ;;      Params:         0       2       0       0       0       0       0       0
  6022 ;;      Locals:         0       8      79      44       0       0       0       0
  6023 ;;      Temps:          0       2       0       0       0       0       0       0
  6024 ;;      Totals:         0      12      79      44       0       0       0       0
  6025 ;;Total ram usage:      135 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    6
  6028 ;; This function calls:
  6029 ;;		___awtoft
  6030 ;;		___bmul
  6031 ;;		___ftadd
  6032 ;;		___ftdiv
  6033 ;;		___ftge
  6034 ;;		___ftmul
  6035 ;;		___ftneg
  6036 ;;		___lwtoft
  6037 ;;		___wmul
  6038 ;; This function is called by:
  6039 ;;		_main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _comparare
  6045  0083                     _comparare:	
  6046                           
  6047                           ;main.c: 98: unsigned int res[]={3002,2689,2377,2136,1895,1707,1520,1374,1228,1114,1000,
      +                          908,817,745,673,615,557,510,463,423,383};
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in _comparare: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6051  0083  3020               	movlw	low comparare@F3786
  6052  0084  0086               	movwf	6
  6053  0085  3002               	movlw	high comparare@F3786
  6054  0086  0087               	movwf	7
  6055  0087  3020               	movlw	low comparare@res
  6056  0088  0084               	movwf	4
  6057  0089  3001               	movlw	high comparare@res
  6058  008A  0085               	movwf	5
  6059  008B  302A               	movlw	42
  6060  008C  0020               	movlb	0	; select bank0
  6061  008D  00D6               	movwf	??_comparare
  6062  008E                     u6780:	
  6063  008E  0016               	moviw fsr1++
  6064  008F  001A               	movwi fsr0++
  6065  0090  0BD6               	decfsz	??_comparare,f
  6066  0091  288E               	goto	u6780
  6067                           
  6068                           ;main.c: 99: int result=1000;
  6069  0092  30E8               	movlw	232
  6070  0093  00DE               	movwf	comparare@result
  6071  0094  3003               	movlw	3
  6072  0095  00DF               	movwf	comparare@result+1
  6073                           
  6074                           ;main.c: 100: float dif=0,step=0;
  6075  0096  3000               	movlw	0
  6076  0097  00D8               	movwf	comparare@dif
  6077  0098  3000               	movlw	0
  6078  0099  00D9               	movwf	comparare@dif+1
  6079  009A  3000               	movlw	0
  6080  009B  00DA               	movwf	comparare@dif+2
  6081  009C  3000               	movlw	0
  6082  009D  00DB               	movwf	comparare@step
  6083  009E  3000               	movlw	0
  6084  009F  00DC               	movwf	comparare@step+1
  6085  00A0  3000               	movlw	0
  6086  00A1  00DD               	movwf	comparare@step+2
  6087                           
  6088                           ;main.c: 101: float table[25]={};
  6089  00A2  30A0               	movlw	low comparare@F3791
  6090  00A3  0086               	movwf	6
  6091  00A4  3002               	movlw	high comparare@F3791
  6092  00A5  0087               	movwf	7
  6093  00A6  30A0               	movlw	low comparare@table
  6094  00A7  0084               	movwf	4
  6095  00A8  3000               	movlw	high comparare@table
  6096  00A9  0085               	movwf	5
  6097  00AA  304B               	movlw	75
  6098  00AB  00D6               	movwf	??_comparare
  6099  00AC                     u6790:	
  6100  00AC  0016               	moviw fsr1++
  6101  00AD  001A               	movwi fsr0++
  6102  00AE  0BD6               	decfsz	??_comparare,f
  6103  00AF  28AC               	goto	u6790
  6104                           
  6105                           ;main.c: 102: for(int i=0;i<21;i++)
  6106  00B0  0022               	movlb	2	; select bank2
  6107  00B1  01CA               	clrf	comparare@i^(0+256)
  6108  00B2  01CB               	clrf	(comparare@i+1)^(0+256)
  6109  00B3  084B               	movf	(comparare@i+1)^(0+256),w
  6110  00B4  3A80               	xorlw	128
  6111  00B5  0020               	movlb	0	; select bank0
  6112  00B6  00D6               	movwf	??_comparare
  6113  00B7  3080               	movlw	128
  6114  00B8  0256               	subwf	??_comparare,w
  6115  00B9  1D03               	skipz
  6116  00BA  28BE               	goto	u6805
  6117  00BB  3015               	movlw	21
  6118  00BC  0022               	movlb	2	; select bank2
  6119  00BD  024A               	subwf	comparare@i^(0+256),w
  6120  00BE                     u6805:	
  6121  00BE  1803               	btfsc	3,0
  6122  00BF  2A37               	goto	l5882
  6123  00C0                     l5846:	
  6124                           
  6125                           ;main.c: 103: {
  6126                           ;main.c: 104: if((resistor_value<=res[i])&(resistor_value>=res[i+1]))
  6127  00C0  0022               	movlb	2	; select bank2
  6128  00C1  354A               	lslf	comparare@i^(0+256),w
  6129  00C2  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  6130  00C3  0086               	movwf	6
  6131  00C4  3001               	movlw	1	; select bank2/3
  6132  00C5  0087               	movwf	7
  6133  00C6  3F40               	moviw [0]fsr1
  6134  00C7  0020               	movlb	0	; select bank0
  6135  00C8  00D6               	movwf	??_comparare
  6136  00C9  3F41               	moviw [1]fsr1
  6137  00CA  00D7               	movwf	??_comparare+1
  6138  00CB  0855               	movf	comparare@resistor_value+1,w
  6139  00CC  0257               	subwf	??_comparare+1,w
  6140  00CD  1D03               	skipz
  6141  00CE  28D1               	goto	u6815
  6142  00CF  0854               	movf	comparare@resistor_value,w
  6143  00D0  0256               	subwf	??_comparare,w
  6144  00D1                     u6815:	
  6145  00D1  1C03               	skipc
  6146  00D2  2A25               	goto	l5880
  6147  00D3  0022               	movlb	2	; select bank2
  6148  00D4  354A               	lslf	comparare@i^(0+256),w
  6149  00D5  3E02               	addlw	2
  6150  00D6  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  6151  00D7  0086               	movwf	6
  6152  00D8  3001               	movlw	1	; select bank2/3
  6153  00D9  0087               	movwf	7
  6154  00DA  3F40               	moviw [0]fsr1
  6155  00DB  0020               	movlb	0	; select bank0
  6156  00DC  00D6               	movwf	??_comparare
  6157  00DD  3F41               	moviw [1]fsr1
  6158  00DE  00D7               	movwf	??_comparare+1
  6159  00DF  0857               	movf	??_comparare+1,w
  6160  00E0  0255               	subwf	comparare@resistor_value+1,w
  6161  00E1  1D03               	skipz
  6162  00E2  28E5               	goto	u6825
  6163  00E3  0856               	movf	??_comparare,w
  6164  00E4  0254               	subwf	comparare@resistor_value,w
  6165  00E5                     u6825:	
  6166  00E5  1C03               	skipc
  6167  00E6  2A25               	goto	l5880
  6168                           
  6169                           ;main.c: 105: {
  6170                           ;main.c: 106: dif=res[i]-res[i+1];
  6171  00E7  0022               	movlb	2	; select bank2
  6172  00E8  354A               	lslf	comparare@i^(0+256),w
  6173  00E9  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  6174  00EA  0086               	movwf	6
  6175  00EB  3001               	movlw	1	; select bank2/3
  6176  00EC  0087               	movwf	7
  6177  00ED  354A               	lslf	comparare@i^(0+256),w
  6178  00EE  3E02               	addlw	2
  6179  00EF  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  6180  00F0  0084               	movwf	4
  6181  00F1  3001               	movlw	1	; select bank2/3
  6182  00F2  0085               	movwf	5
  6183  00F3  3F00               	moviw [0]fsr0
  6184  00F4  0020               	movlb	0	; select bank0
  6185  00F5  00D6               	movwf	??_comparare
  6186  00F6  3F01               	moviw [1]fsr0
  6187  00F7  00D7               	movwf	??_comparare+1
  6188  00F8  09D6               	comf	??_comparare,f
  6189  00F9  09D7               	comf	??_comparare+1,f
  6190  00FA  0AD6               	incf	??_comparare,f
  6191  00FB  1903               	skipnz
  6192  00FC  0AD7               	incf	??_comparare+1,f
  6193  00FD  3F40               	moviw [0]fsr1
  6194  00FE  0756               	addwf	??_comparare,w
  6195  00FF  00B0               	movwf	___lwtoft@c
  6196  0100  3F41               	moviw [1]fsr1
  6197  0101  3D57               	addwfc	??_comparare+1,w
  6198  0102  00B1               	movwf	___lwtoft@c+1
  6199  0103  3194  24B2  3180   	fcall	___lwtoft
  6200  0106  0020               	movlb	0	; select bank0
  6201  0107  0830               	movf	?___lwtoft,w
  6202  0108  00D8               	movwf	comparare@dif
  6203  0109  0831               	movf	?___lwtoft+1,w
  6204  010A  00D9               	movwf	comparare@dif+1
  6205  010B  0832               	movf	?___lwtoft+2,w
  6206  010C  00DA               	movwf	comparare@dif+2
  6207                           
  6208                           ;main.c: 107: step=dif/25;
  6209  010D  3000               	movlw	0
  6210  010E  00C4               	movwf	___ftdiv@f2
  6211  010F  30C8               	movlw	200
  6212  0110  00C5               	movwf	___ftdiv@f2+1
  6213  0111  3041               	movlw	65
  6214  0112  00C6               	movwf	___ftdiv@f2+2
  6215  0113  0858               	movf	comparare@dif,w
  6216  0114  00C7               	movwf	___ftdiv@f1
  6217  0115  0859               	movf	comparare@dif+1,w
  6218  0116  00C8               	movwf	___ftdiv@f1+1
  6219  0117  085A               	movf	comparare@dif+2,w
  6220  0118  00C9               	movwf	___ftdiv@f1+2
  6221  0119  3186  269D  3180   	fcall	___ftdiv
  6222  011C  0020               	movlb	0	; select bank0
  6223  011D  0844               	movf	?___ftdiv,w
  6224  011E  00DB               	movwf	comparare@step
  6225  011F  0845               	movf	?___ftdiv+1,w
  6226  0120  00DC               	movwf	comparare@step+1
  6227  0121  0846               	movf	?___ftdiv+2,w
  6228  0122  00DD               	movwf	comparare@step+2
  6229                           
  6230                           ;main.c: 108: for(int j=0;j<25;j++)
  6231  0123  0021               	movlb	1	; select bank1
  6232  0124  01EB               	clrf	comparare@j^(0+128)
  6233  0125  01EC               	clrf	(comparare@j+1)^(0+128)
  6234  0126  086C               	movf	(comparare@j+1)^(0+128),w
  6235  0127  3A80               	xorlw	128
  6236  0128  0020               	movlb	0	; select bank0
  6237  0129  00D6               	movwf	??_comparare
  6238  012A  3080               	movlw	128
  6239  012B  0256               	subwf	??_comparare,w
  6240  012C  1D03               	skipz
  6241  012D  2931               	goto	u6835
  6242  012E  3019               	movlw	25
  6243  012F  0021               	movlb	1	; select bank1
  6244  0130  026B               	subwf	comparare@j^(0+128),w
  6245  0131                     u6835:	
  6246  0131  1803               	btfsc	3,0
  6247  0132  299D               	goto	l5866
  6248  0133                     l5860:	
  6249                           
  6250                           ;main.c: 109: {
  6251                           ;main.c: 111: table[j]=res[i]-j*step;
  6252  0133  3003               	movlw	3
  6253  0134  0020               	movlb	0	; select bank0
  6254  0135  00D6               	movwf	??_comparare
  6255  0136  0856               	movf	??_comparare,w
  6256  0137  00F2               	movwf	___bmul@multiplicand
  6257  0138  0021               	movlb	1	; select bank1
  6258  0139  086B               	movf	comparare@j^(0+128),w
  6259  013A  3194  248D  3180   	fcall	___bmul
  6260  013D  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  6261  013E  0086               	movwf	6
  6262  013F  0187               	clrf	7
  6263  0140  0021               	movlb	1	; select bank1
  6264  0141  086C               	movf	(comparare@j+1)^(0+128),w
  6265  0142  0020               	movlb	0	; select bank0
  6266  0143  00A1               	movwf	___awtoft@c+1
  6267  0144  0021               	movlb	1	; select bank1
  6268  0145  086B               	movf	comparare@j^(0+128),w
  6269  0146  0020               	movlb	0	; select bank0
  6270  0147  00A0               	movwf	___awtoft@c
  6271  0148  3195  25D5  3180   	fcall	___awtoft
  6272  014B  0020               	movlb	0	; select bank0
  6273  014C  0820               	movf	?___awtoft,w
  6274  014D  00B7               	movwf	___ftmul@f2
  6275  014E  0821               	movf	?___awtoft+1,w
  6276  014F  00B8               	movwf	___ftmul@f2+1
  6277  0150  0822               	movf	?___awtoft+2,w
  6278  0151  00B9               	movwf	___ftmul@f2+2
  6279  0152  085B               	movf	comparare@step,w
  6280  0153  00B4               	movwf	___ftmul@f1
  6281  0154  085C               	movf	comparare@step+1,w
  6282  0155  00B5               	movwf	___ftmul@f1+1
  6283  0156  085D               	movf	comparare@step+2,w
  6284  0157  00B6               	movwf	___ftmul@f1+2
  6285  0158  3185  25E9  3180   	fcall	___ftmul
  6286  015B  0020               	movlb	0	; select bank0
  6287  015C  0834               	movf	?___ftmul,w
  6288  015D  00C4               	movwf	___ftneg@f1
  6289  015E  0835               	movf	?___ftmul+1,w
  6290  015F  00C5               	movwf	___ftneg@f1+1
  6291  0160  0836               	movf	?___ftmul+2,w
  6292  0161  00C6               	movwf	___ftneg@f1+2
  6293  0162  3194  2477  3180   	fcall	___ftneg
  6294  0165  0020               	movlb	0	; select bank0
  6295  0166  0844               	movf	?___ftneg,w
  6296  0167  00C7               	movwf	___ftadd@f1
  6297  0168  0845               	movf	?___ftneg+1,w
  6298  0169  00C8               	movwf	___ftadd@f1+1
  6299  016A  0846               	movf	?___ftneg+2,w
  6300  016B  00C9               	movwf	___ftadd@f1+2
  6301  016C  0022               	movlb	2	; select bank2
  6302  016D  354A               	lslf	comparare@i^(0+256),w
  6303  016E  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  6304  016F  0084               	movwf	4
  6305  0170  3001               	movlw	1	; select bank2/3
  6306  0171  0085               	movwf	5
  6307  0172  3F00               	moviw [0]fsr0
  6308  0173  0020               	movlb	0	; select bank0
  6309  0174  00B0               	movwf	___lwtoft@c
  6310  0175  3F01               	moviw [1]fsr0
  6311  0176  00B1               	movwf	___lwtoft@c+1
  6312  0177  3194  24B2  3180   	fcall	___lwtoft
  6313  017A  0020               	movlb	0	; select bank0
  6314  017B  0830               	movf	?___lwtoft,w
  6315  017C  00CA               	movwf	___ftadd@f2
  6316  017D  0831               	movf	?___lwtoft+1,w
  6317  017E  00CB               	movwf	___ftadd@f2+1
  6318  017F  0832               	movf	?___lwtoft+2,w
  6319  0180  00CC               	movwf	___ftadd@f2+2
  6320  0181  3184  24F3  3180   	fcall	___ftadd
  6321  0184  0020               	movlb	0	; select bank0
  6322  0185  0847               	movf	?___ftadd,w
  6323  0186  3FC0               	movwi [0]fsr1
  6324  0187  0848               	movf	?___ftadd+1,w
  6325  0188  3FC1               	movwi [1]fsr1
  6326  0189  0849               	movf	?___ftadd+2,w
  6327  018A  3FC2               	movwi [2]fsr1
  6328  018B  3001               	movlw	1
  6329  018C  0021               	movlb	1	; select bank1
  6330  018D  07EB               	addwf	comparare@j^(0+128),f
  6331  018E  3000               	movlw	0
  6332  018F  3DEC               	addwfc	(comparare@j+1)^(0+128),f
  6333  0190  086C               	movf	(comparare@j+1)^(0+128),w
  6334  0191  3A80               	xorlw	128
  6335  0192  0020               	movlb	0	; select bank0
  6336  0193  00D6               	movwf	??_comparare
  6337  0194  3080               	movlw	128
  6338  0195  0256               	subwf	??_comparare,w
  6339  0196  1D03               	skipz
  6340  0197  299B               	goto	u6845
  6341  0198  3019               	movlw	25
  6342  0199  0021               	movlb	1	; select bank1
  6343  019A  026B               	subwf	comparare@j^(0+128),w
  6344  019B                     u6845:	
  6345  019B  1C03               	skipc
  6346  019C  2933               	goto	l5860
  6347  019D                     l5866:	
  6348                           
  6349                           ;main.c: 113: }
  6350                           ;main.c: 114: for(int j=0;j<25;j++)
  6351  019D  0021               	movlb	1	; select bank1
  6352  019E  01ED               	clrf	comparare@j_912^(0+128)
  6353  019F  01EE               	clrf	(comparare@j_912+1)^(0+128)
  6354  01A0  086E               	movf	(comparare@j_912+1)^(0+128),w
  6355  01A1  3A80               	xorlw	128
  6356  01A2  0020               	movlb	0	; select bank0
  6357  01A3  00D6               	movwf	??_comparare
  6358  01A4  3080               	movlw	128
  6359  01A5  0256               	subwf	??_comparare,w
  6360  01A6  1D03               	skipz
  6361  01A7  29AB               	goto	u6855
  6362  01A8  3019               	movlw	25
  6363  01A9  0021               	movlb	1	; select bank1
  6364  01AA  026D               	subwf	comparare@j_912^(0+128),w
  6365  01AB                     u6855:	
  6366  01AB  1803               	btfsc	3,0
  6367  01AC  2A25               	goto	l5880
  6368  01AD                     l5872:	
  6369                           
  6370                           ;main.c: 115: {
  6371                           ;main.c: 116: if((resistor_value<=table[j])&(resistor_value>=table[j+1]))
  6372  01AD  3003               	movlw	3
  6373  01AE  0020               	movlb	0	; select bank0
  6374  01AF  00D6               	movwf	??_comparare
  6375  01B0  0856               	movf	??_comparare,w
  6376  01B1  00F2               	movwf	___bmul@multiplicand
  6377  01B2  0021               	movlb	1	; select bank1
  6378  01B3  086D               	movf	comparare@j_912^(0+128),w
  6379  01B4  3194  248D  3180   	fcall	___bmul
  6380  01B7  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  6381  01B8  0086               	movwf	6
  6382  01B9  0187               	clrf	7
  6383  01BA  3F40               	moviw [0]fsr1
  6384  01BB  0020               	movlb	0	; select bank0
  6385  01BC  00A6               	movwf	___ftge@ff1
  6386  01BD  3F41               	moviw [1]fsr1
  6387  01BE  00A7               	movwf	___ftge@ff1+1
  6388  01BF  3F42               	moviw [2]fsr1
  6389  01C0  00A8               	movwf	___ftge@ff1+2
  6390  01C1  0855               	movf	comparare@resistor_value+1,w
  6391  01C2  00A1               	movwf	___awtoft@c+1
  6392  01C3  0854               	movf	comparare@resistor_value,w
  6393  01C4  00A0               	movwf	___awtoft@c
  6394  01C5  3195  25D5  3180   	fcall	___awtoft
  6395  01C8  0020               	movlb	0	; select bank0
  6396  01C9  0820               	movf	?___awtoft,w
  6397  01CA  00A9               	movwf	___ftge@ff2
  6398  01CB  0821               	movf	?___awtoft+1,w
  6399  01CC  00AA               	movwf	___ftge@ff2+1
  6400  01CD  0822               	movf	?___awtoft+2,w
  6401  01CE  00AB               	movwf	___ftge@ff2+2
  6402  01CF  3188  201C  3180   	fcall	___ftge
  6403  01D2  1C03               	btfss	3,0
  6404  01D3  2A13               	goto	l5878
  6405  01D4  0020               	movlb	0	; select bank0
  6406  01D5  0855               	movf	comparare@resistor_value+1,w
  6407  01D6  00A1               	movwf	___awtoft@c+1
  6408  01D7  0854               	movf	comparare@resistor_value,w
  6409  01D8  00A0               	movwf	___awtoft@c
  6410  01D9  3195  25D5  3180   	fcall	___awtoft
  6411  01DC  0020               	movlb	0	; select bank0
  6412  01DD  0820               	movf	?___awtoft,w
  6413  01DE  00A6               	movwf	___ftge@ff1
  6414  01DF  0821               	movf	?___awtoft+1,w
  6415  01E0  00A7               	movwf	___ftge@ff1+1
  6416  01E1  0822               	movf	?___awtoft+2,w
  6417  01E2  00A8               	movwf	___ftge@ff1+2
  6418  01E3  3003               	movlw	3
  6419  01E4  00D6               	movwf	??_comparare
  6420  01E5  0856               	movf	??_comparare,w
  6421  01E6  00F2               	movwf	___bmul@multiplicand
  6422  01E7  0021               	movlb	1	; select bank1
  6423  01E8  086D               	movf	comparare@j_912^(0+128),w
  6424  01E9  3E01               	addlw	1
  6425  01EA  3194  248D  3180   	fcall	___bmul
  6426  01ED  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  6427  01EE  0086               	movwf	6
  6428  01EF  0187               	clrf	7
  6429  01F0  3F40               	moviw [0]fsr1
  6430  01F1  0020               	movlb	0	; select bank0
  6431  01F2  00A9               	movwf	___ftge@ff2
  6432  01F3  3F41               	moviw [1]fsr1
  6433  01F4  00AA               	movwf	___ftge@ff2+1
  6434  01F5  3F42               	moviw [2]fsr1
  6435  01F6  00AB               	movwf	___ftge@ff2+2
  6436  01F7  3188  201C  3180   	fcall	___ftge
  6437  01FA  1C03               	btfss	3,0
  6438  01FB  2A13               	goto	l5878
  6439                           
  6440                           ;main.c: 117: {
  6441                           ;main.c: 118: result=(i*25+1*j);
  6442  01FC  0022               	movlb	2	; select bank2
  6443  01FD  084B               	movf	(comparare@i+1)^(0+256),w
  6444  01FE  00F3               	movwf	___wmul@multiplier+1
  6445  01FF  084A               	movf	comparare@i^(0+256),w
  6446  0200  00F2               	movwf	___wmul@multiplier
  6447  0201  3019               	movlw	25
  6448  0202  00F4               	movwf	___wmul@multiplicand
  6449  0203  3000               	movlw	0
  6450  0204  00F5               	movwf	___wmul@multiplicand+1
  6451  0205  3195  253F  3180   	fcall	___wmul
  6452  0208  0021               	movlb	1	; select bank1
  6453  0209  086D               	movf	comparare@j_912^(0+128),w
  6454  020A  0772               	addwf	?___wmul,w
  6455  020B  0020               	movlb	0	; select bank0
  6456  020C  00DE               	movwf	comparare@result
  6457  020D  0021               	movlb	1	; select bank1
  6458  020E  086E               	movf	(comparare@j_912+1)^(0+128),w
  6459  020F  3D73               	addwfc	?___wmul+1,w
  6460  0210  0020               	movlb	0	; select bank0
  6461  0211  00DF               	movwf	comparare@result+1
  6462                           
  6463                           ;main.c: 119: break;
  6464  0212  2A25               	goto	l5880
  6465  0213                     l5878:	
  6466  0213  3001               	movlw	1
  6467  0214  0021               	movlb	1	; select bank1
  6468  0215  07ED               	addwf	comparare@j_912^(0+128),f
  6469  0216  3000               	movlw	0
  6470  0217  3DEE               	addwfc	(comparare@j_912+1)^(0+128),f
  6471  0218  086E               	movf	(comparare@j_912+1)^(0+128),w
  6472  0219  3A80               	xorlw	128
  6473  021A  0020               	movlb	0	; select bank0
  6474  021B  00D6               	movwf	??_comparare
  6475  021C  3080               	movlw	128
  6476  021D  0256               	subwf	??_comparare,w
  6477  021E  1D03               	skipz
  6478  021F  2A23               	goto	u6885
  6479  0220  3019               	movlw	25
  6480  0221  0021               	movlb	1	; select bank1
  6481  0222  026D               	subwf	comparare@j_912^(0+128),w
  6482  0223                     u6885:	
  6483  0223  1C03               	skipc
  6484  0224  29AD               	goto	l5872
  6485  0225                     l5880:	
  6486  0225  3001               	movlw	1
  6487  0226  0022               	movlb	2	; select bank2
  6488  0227  07CA               	addwf	comparare@i^(0+256),f
  6489  0228  3000               	movlw	0
  6490  0229  3DCB               	addwfc	(comparare@i+1)^(0+256),f
  6491  022A  084B               	movf	(comparare@i+1)^(0+256),w
  6492  022B  3A80               	xorlw	128
  6493  022C  0020               	movlb	0	; select bank0
  6494  022D  00D6               	movwf	??_comparare
  6495  022E  3080               	movlw	128
  6496  022F  0256               	subwf	??_comparare,w
  6497  0230  1D03               	skipz
  6498  0231  2A35               	goto	u6895
  6499  0232  3015               	movlw	21
  6500  0233  0022               	movlb	2	; select bank2
  6501  0234  024A               	subwf	comparare@i^(0+256),w
  6502  0235                     u6895:	
  6503  0235  1C03               	skipc
  6504  0236  28C0               	goto	l5846
  6505  0237                     l5882:	
  6506                           
  6507                           ;main.c: 120: }
  6508                           ;main.c: 121: }
  6509                           ;main.c: 122: }
  6510                           ;main.c: 123: }
  6511                           ;main.c: 124: return result;
  6512  0237  0020               	movlb	0	; select bank0
  6513  0238  085F               	movf	comparare@result+1,w
  6514  0239  00D5               	movwf	?_comparare+1
  6515  023A  085E               	movf	comparare@result,w
  6516  023B  00D4               	movwf	?_comparare
  6517  023C  0008               	return
  6518  023D                     __end_of_comparare:	
  6519                           
  6520                           	psect	text12
  6521  153F                     __ptext12:	
  6522 ;; *************** function ___wmul *****************
  6523 ;; Defined at:
  6524 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  multiplier      2    2[COMMON] unsigned int 
  6527 ;;  multiplicand    2    4[COMMON] unsigned int 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  product         2    6[COMMON] unsigned int 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  2    2[COMMON] unsigned int 
  6532 ;; Registers used:
  6533 ;;		wreg, status,2, status,0
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6539 ;;      Params:         4       0       0       0       0       0       0       0
  6540 ;;      Locals:         2       0       0       0       0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0
  6542 ;;      Totals:         6       0       0       0       0       0       0       0
  6543 ;;Total ram usage:        6 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    4
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_comparare
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           
  6554                           ;psect for function ___wmul
  6555  153F                     ___wmul:	
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6559  153F  01F6               	clrf	___wmul@product
  6560  1540  01F7               	clrf	___wmul@product+1
  6561  1541                     l5556:	
  6562  1541  1C72               	btfss	___wmul@multiplier,0
  6563  1542  2D47               	goto	l1152
  6564  1543  0874               	movf	___wmul@multiplicand,w
  6565  1544  07F6               	addwf	___wmul@product,f
  6566  1545  0875               	movf	___wmul@multiplicand+1,w
  6567  1546  3DF7               	addwfc	___wmul@product+1,f
  6568  1547                     l1152:	
  6569  1547  3001               	movlw	1
  6570  1548                     u6205:	
  6571  1548  35F4               	lslf	___wmul@multiplicand,f
  6572  1549  0DF5               	rlf	___wmul@multiplicand+1,f
  6573  154A  0B89               	decfsz	9,f
  6574  154B  2D48               	goto	u6205
  6575  154C  3001               	movlw	1
  6576  154D                     u6215:	
  6577  154D  36F3               	lsrf	___wmul@multiplier+1,f
  6578  154E  0CF2               	rrf	___wmul@multiplier,f
  6579  154F  0B89               	decfsz	9,f
  6580  1550  2D4D               	goto	u6215
  6581  1551  0872               	movf	___wmul@multiplier,w
  6582  1552  0473               	iorwf	___wmul@multiplier+1,w
  6583  1553  1D03               	btfss	3,2
  6584  1554  2D41               	goto	l5556
  6585  1555  0877               	movf	___wmul@product+1,w
  6586  1556  00F3               	movwf	?___wmul+1
  6587  1557  0876               	movf	___wmul@product,w
  6588  1558  00F2               	movwf	?___wmul
  6589  1559  0008               	return
  6590  155A                     __end_of___wmul:	
  6591                           
  6592                           	psect	text13
  6593  14B2                     __ptext13:	
  6594 ;; *************** function ___lwtoft *****************
  6595 ;; Defined at:
  6596 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwtoft.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  c               2   16[BANK0 ] unsigned int 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;		None
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  3   16[BANK0 ] float 
  6603 ;; Registers used:
  6604 ;;		wreg, status,2, status,0, pclath, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6610 ;;      Params:         0       3       0       0       0       0       0       0
  6611 ;;      Locals:         0       0       0       0       0       0       0       0
  6612 ;;      Temps:          0       1       0       0       0       0       0       0
  6613 ;;      Totals:         0       4       0       0       0       0       0       0
  6614 ;;Total ram usage:        4 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    5
  6617 ;; This function calls:
  6618 ;;		___ftpack
  6619 ;; This function is called by:
  6620 ;;		_comparare
  6621 ;;		_main
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function ___lwtoft
  6627  14B2                     ___lwtoft:	
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6631  14B2  0020               	movlb	0	; select bank0
  6632  14B3  0830               	movf	___lwtoft@c,w
  6633  14B4  00F2               	movwf	___ftpack@arg
  6634  14B5  0831               	movf	___lwtoft@c+1,w
  6635  14B6  00F3               	movwf	___ftpack@arg+1
  6636  14B7  01F4               	clrf	___ftpack@arg+2
  6637  14B8  308E               	movlw	142
  6638  14B9  00B3               	movwf	??___lwtoft
  6639  14BA  0833               	movf	??___lwtoft,w
  6640  14BB  00F5               	movwf	___ftpack@exp
  6641  14BC  01F6               	clrf	___ftpack@sign
  6642  14BD  318B  2369         	fcall	___ftpack
  6643  14BF  0872               	movf	?___ftpack,w
  6644  14C0  0020               	movlb	0	; select bank0
  6645  14C1  00B0               	movwf	?___lwtoft
  6646  14C2  0873               	movf	?___ftpack+1,w
  6647  14C3  00B1               	movwf	?___lwtoft+1
  6648  14C4  0874               	movf	?___ftpack+2,w
  6649  14C5  00B2               	movwf	?___lwtoft+2
  6650  14C6  0008               	return
  6651  14C7                     __end_of___lwtoft:	
  6652                           
  6653                           	psect	text14
  6654  1477                     __ptext14:	
  6655 ;; *************** function ___ftneg *****************
  6656 ;; Defined at:
  6657 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  f1              3   36[BANK0 ] float 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  3   36[BANK0 ] float 
  6664 ;; Registers used:
  6665 ;;		wreg
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6671 ;;      Params:         0       3       0       0       0       0       0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0
  6674 ;;      Totals:         0       3       0       0       0       0       0       0
  6675 ;;Total ram usage:        3 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    4
  6678 ;; This function calls:
  6679 ;;		Nothing
  6680 ;; This function is called by:
  6681 ;;		_comparare
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function ___ftneg
  6687  1477                     ___ftneg:	
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in ___ftneg: [wreg]
  6691  1477  0020               	movlb	0	; select bank0
  6692  1478  0846               	movf	___ftneg@f1+2,w
  6693  1479  0445               	iorwf	___ftneg@f1+1,w
  6694  147A  0444               	iorwf	___ftneg@f1,w
  6695  147B  1903               	skipnz
  6696  147C  0008               	return
  6697  147D  3080               	movlw	128
  6698  147E  06C6               	xorwf	___ftneg@f1+2,f
  6699  147F  0008               	return
  6700  1480                     __end_of___ftneg:	
  6701                           
  6702                           	psect	text15
  6703  05E9                     __ptext15:	
  6704 ;; *************** function ___ftmul *****************
  6705 ;; Defined at:
  6706 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;  f1              3   20[BANK0 ] float 
  6709 ;;  f2              3   23[BANK0 ] float 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
  6712 ;;  sign            1   35[BANK0 ] unsigned char 
  6713 ;;  cntr            1   34[BANK0 ] unsigned char 
  6714 ;;  exp             1   30[BANK0 ] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  3   20[BANK0 ] float 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, pclath, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6724 ;;      Params:         0       6       0       0       0       0       0       0
  6725 ;;      Locals:         0       6       0       0       0       0       0       0
  6726 ;;      Temps:          0       4       0       0       0       0       0       0
  6727 ;;      Totals:         0      16       0       0       0       0       0       0
  6728 ;;Total ram usage:       16 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    5
  6731 ;; This function calls:
  6732 ;;		___ftpack
  6733 ;; This function is called by:
  6734 ;;		_comparare
  6735 ;;		_main
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           
  6740                           ;psect for function ___ftmul
  6741  05E9                     ___ftmul:	
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6745  05E9  0020               	movlb	0	; select bank0
  6746  05EA  0834               	movf	___ftmul@f1,w
  6747  05EB  00BA               	movwf	??___ftmul
  6748  05EC  0835               	movf	___ftmul@f1+1,w
  6749  05ED  00BB               	movwf	??___ftmul+1
  6750  05EE  0836               	movf	___ftmul@f1+2,w
  6751  05EF  00BC               	movwf	??___ftmul+2
  6752  05F0  1003               	clrc
  6753  05F1  0D3B               	rlf	??___ftmul+1,w
  6754  05F2  0D3C               	rlf	??___ftmul+2,w
  6755  05F3  00BD               	movwf	??___ftmul+3
  6756  05F4  083D               	movf	??___ftmul+3,w
  6757  05F5  00BE               	movwf	___ftmul@exp
  6758  05F6  083E               	movf	___ftmul@exp,w
  6759  05F7  1D03               	btfss	3,2
  6760  05F8  2E00               	goto	l5732
  6761  05F9  3000               	movlw	0
  6762  05FA  00B4               	movwf	?___ftmul
  6763  05FB  3000               	movlw	0
  6764  05FC  00B5               	movwf	?___ftmul+1
  6765  05FD  3000               	movlw	0
  6766  05FE  00B6               	movwf	?___ftmul+2
  6767  05FF  0008               	return
  6768  0600                     l5732:	
  6769  0600  0837               	movf	___ftmul@f2,w
  6770  0601  00BA               	movwf	??___ftmul
  6771  0602  0838               	movf	___ftmul@f2+1,w
  6772  0603  00BB               	movwf	??___ftmul+1
  6773  0604  0839               	movf	___ftmul@f2+2,w
  6774  0605  00BC               	movwf	??___ftmul+2
  6775  0606  1003               	clrc
  6776  0607  0D3B               	rlf	??___ftmul+1,w
  6777  0608  0D3C               	rlf	??___ftmul+2,w
  6778  0609  00BD               	movwf	??___ftmul+3
  6779  060A  083D               	movf	??___ftmul+3,w
  6780  060B  00C3               	movwf	___ftmul@sign
  6781  060C  0843               	movf	___ftmul@sign,w
  6782  060D  1D03               	btfss	3,2
  6783  060E  2E16               	goto	l5738
  6784  060F  3000               	movlw	0
  6785  0610  00B4               	movwf	?___ftmul
  6786  0611  3000               	movlw	0
  6787  0612  00B5               	movwf	?___ftmul+1
  6788  0613  3000               	movlw	0
  6789  0614  00B6               	movwf	?___ftmul+2
  6790  0615  0008               	return
  6791  0616                     l5738:	
  6792  0616  0843               	movf	___ftmul@sign,w
  6793  0617  3E7B               	addlw	123
  6794  0618  00BA               	movwf	??___ftmul
  6795  0619  083A               	movf	??___ftmul,w
  6796  061A  07BE               	addwf	___ftmul@exp,f
  6797  061B  0834               	movf	___ftmul@f1,w
  6798  061C  00BA               	movwf	??___ftmul
  6799  061D  0835               	movf	___ftmul@f1+1,w
  6800  061E  00BB               	movwf	??___ftmul+1
  6801  061F  0836               	movf	___ftmul@f1+2,w
  6802  0620  00BC               	movwf	??___ftmul+2
  6803  0621  3010               	movlw	16
  6804  0622                     u6625:	
  6805  0622  36BC               	lsrf	??___ftmul+2,f
  6806  0623  0CBB               	rrf	??___ftmul+1,f
  6807  0624  0CBA               	rrf	??___ftmul,f
  6808  0625  0B89               	decfsz	9,f
  6809  0626  2E22               	goto	u6625
  6810  0627  083A               	movf	??___ftmul,w
  6811  0628  00BD               	movwf	??___ftmul+3
  6812  0629  083D               	movf	??___ftmul+3,w
  6813  062A  00C3               	movwf	___ftmul@sign
  6814  062B  0837               	movf	___ftmul@f2,w
  6815  062C  00BA               	movwf	??___ftmul
  6816  062D  0838               	movf	___ftmul@f2+1,w
  6817  062E  00BB               	movwf	??___ftmul+1
  6818  062F  0839               	movf	___ftmul@f2+2,w
  6819  0630  00BC               	movwf	??___ftmul+2
  6820  0631  3010               	movlw	16
  6821  0632                     u6635:	
  6822  0632  36BC               	lsrf	??___ftmul+2,f
  6823  0633  0CBB               	rrf	??___ftmul+1,f
  6824  0634  0CBA               	rrf	??___ftmul,f
  6825  0635  0B89               	decfsz	9,f
  6826  0636  2E32               	goto	u6635
  6827  0637  083A               	movf	??___ftmul,w
  6828  0638  00BD               	movwf	??___ftmul+3
  6829  0639  083D               	movf	??___ftmul+3,w
  6830  063A  06C3               	xorwf	___ftmul@sign,f
  6831  063B  3080               	movlw	128
  6832  063C  00BA               	movwf	??___ftmul
  6833  063D  083A               	movf	??___ftmul,w
  6834  063E  05C3               	andwf	___ftmul@sign,f
  6835  063F  17B5               	bsf	___ftmul@f1+1,7
  6836  0640  17B8               	bsf	___ftmul@f2+1,7
  6837  0641  30FF               	movlw	255
  6838  0642  05B7               	andwf	___ftmul@f2,f
  6839  0643  30FF               	movlw	255
  6840  0644  05B8               	andwf	___ftmul@f2+1,f
  6841  0645  3000               	movlw	0
  6842  0646  05B9               	andwf	___ftmul@f2+2,f
  6843  0647  3000               	movlw	0
  6844  0648  00BF               	movwf	___ftmul@f3_as_product
  6845  0649  3000               	movlw	0
  6846  064A  00C0               	movwf	___ftmul@f3_as_product+1
  6847  064B  3000               	movlw	0
  6848  064C  00C1               	movwf	___ftmul@f3_as_product+2
  6849  064D  3007               	movlw	7
  6850  064E  00BA               	movwf	??___ftmul
  6851  064F  083A               	movf	??___ftmul,w
  6852  0650  00C2               	movwf	___ftmul@cntr
  6853  0651                     l5750:	
  6854  0651  1C34               	btfss	___ftmul@f1,0
  6855  0652  2E59               	goto	l5754
  6856  0653  0837               	movf	___ftmul@f2,w
  6857  0654  07BF               	addwf	___ftmul@f3_as_product,f
  6858  0655  0838               	movf	___ftmul@f2+1,w
  6859  0656  3DC0               	addwfc	___ftmul@f3_as_product+1,f
  6860  0657  0839               	movf	___ftmul@f2+2,w
  6861  0658  3DC1               	addwfc	___ftmul@f3_as_product+2,f
  6862  0659                     l5754:	
  6863  0659  3001               	movlw	1
  6864  065A                     u6655:	
  6865  065A  36B6               	lsrf	___ftmul@f1+2,f
  6866  065B  0CB5               	rrf	___ftmul@f1+1,f
  6867  065C  0CB4               	rrf	___ftmul@f1,f
  6868  065D  0B89               	decfsz	9,f
  6869  065E  2E5A               	goto	u6655
  6870  065F  3001               	movlw	1
  6871  0660                     u6665:	
  6872  0660  35B7               	lslf	___ftmul@f2,f
  6873  0661  0DB8               	rlf	___ftmul@f2+1,f
  6874  0662  0DB9               	rlf	___ftmul@f2+2,f
  6875  0663  0B89               	decfsz	9,f
  6876  0664  2E60               	goto	u6665
  6877  0665  3001               	movlw	1
  6878  0666  02C2               	subwf	___ftmul@cntr,f
  6879  0667  1D03               	btfss	3,2
  6880  0668  2E51               	goto	l5750
  6881  0669  3009               	movlw	9
  6882  066A  00BA               	movwf	??___ftmul
  6883  066B  083A               	movf	??___ftmul,w
  6884  066C  00C2               	movwf	___ftmul@cntr
  6885  066D                     l5762:	
  6886  066D  1C34               	btfss	___ftmul@f1,0
  6887  066E  2E75               	goto	l5766
  6888  066F  0837               	movf	___ftmul@f2,w
  6889  0670  07BF               	addwf	___ftmul@f3_as_product,f
  6890  0671  0838               	movf	___ftmul@f2+1,w
  6891  0672  3DC0               	addwfc	___ftmul@f3_as_product+1,f
  6892  0673  0839               	movf	___ftmul@f2+2,w
  6893  0674  3DC1               	addwfc	___ftmul@f3_as_product+2,f
  6894  0675                     l5766:	
  6895  0675  3001               	movlw	1
  6896  0676                     u6695:	
  6897  0676  36B6               	lsrf	___ftmul@f1+2,f
  6898  0677  0CB5               	rrf	___ftmul@f1+1,f
  6899  0678  0CB4               	rrf	___ftmul@f1,f
  6900  0679  0B89               	decfsz	9,f
  6901  067A  2E76               	goto	u6695
  6902  067B  3001               	movlw	1
  6903  067C                     u6705:	
  6904  067C  36C1               	lsrf	___ftmul@f3_as_product+2,f
  6905  067D  0CC0               	rrf	___ftmul@f3_as_product+1,f
  6906  067E  0CBF               	rrf	___ftmul@f3_as_product,f
  6907  067F  0B89               	decfsz	9,f
  6908  0680  2E7C               	goto	u6705
  6909  0681  3001               	movlw	1
  6910  0682  02C2               	subwf	___ftmul@cntr,f
  6911  0683  1D03               	btfss	3,2
  6912  0684  2E6D               	goto	l5762
  6913  0685  083F               	movf	___ftmul@f3_as_product,w
  6914  0686  00F2               	movwf	___ftpack@arg
  6915  0687  0840               	movf	___ftmul@f3_as_product+1,w
  6916  0688  00F3               	movwf	___ftpack@arg+1
  6917  0689  0841               	movf	___ftmul@f3_as_product+2,w
  6918  068A  00F4               	movwf	___ftpack@arg+2
  6919  068B  083E               	movf	___ftmul@exp,w
  6920  068C  00BA               	movwf	??___ftmul
  6921  068D  083A               	movf	??___ftmul,w
  6922  068E  00F5               	movwf	___ftpack@exp
  6923  068F  0843               	movf	___ftmul@sign,w
  6924  0690  00BB               	movwf	??___ftmul+1
  6925  0691  083B               	movf	??___ftmul+1,w
  6926  0692  00F6               	movwf	___ftpack@sign
  6927  0693  318B  2369         	fcall	___ftpack
  6928  0695  0872               	movf	?___ftpack,w
  6929  0696  0020               	movlb	0	; select bank0
  6930  0697  00B4               	movwf	?___ftmul
  6931  0698  0873               	movf	?___ftpack+1,w
  6932  0699  00B5               	movwf	?___ftmul+1
  6933  069A  0874               	movf	?___ftpack+2,w
  6934  069B  00B6               	movwf	?___ftmul+2
  6935  069C  0008               	return
  6936  069D                     __end_of___ftmul:	
  6937                           
  6938                           	psect	text16
  6939  081C                     __ptext16:	
  6940 ;; *************** function ___ftge *****************
  6941 ;; Defined at:
  6942 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  ff1             3    6[BANK0 ] float 
  6945 ;;  ff2             3    9[BANK0 ] float 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6957 ;;      Params:         0       6       0       0       0       0       0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0       0
  6959 ;;      Temps:          0       3       0       0       0       0       0       0
  6960 ;;      Totals:         0       9       0       0       0       0       0       0
  6961 ;;Total ram usage:        9 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    4
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_comparare
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           
  6972                           ;psect for function ___ftge
  6973  081C                     ___ftge:	
  6974                           
  6975                           ;incstack = 0
  6976                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6977  081C  0020               	movlb	0	; select bank0
  6978  081D  1FA8               	btfss	___ftge@ff1+2,7
  6979  081E  2833               	goto	l5710
  6980  081F  0926               	comf	___ftge@ff1,w
  6981  0820  00AC               	movwf	??___ftge
  6982  0821  0927               	comf	___ftge@ff1+1,w
  6983  0822  00AD               	movwf	??___ftge+1
  6984  0823  0928               	comf	___ftge@ff1+2,w
  6985  0824  00AE               	movwf	??___ftge+2
  6986  0825  0AAC               	incf	??___ftge,f
  6987  0826  1903               	skipnz
  6988  0827  0AAD               	incf	??___ftge+1,f
  6989  0828  1903               	skipnz
  6990  0829  0AAE               	incf	??___ftge+2,f
  6991  082A  3000               	movlw	0
  6992  082B  072C               	addwf	??___ftge,w
  6993  082C  00A6               	movwf	___ftge@ff1
  6994  082D  3000               	movlw	0
  6995  082E  3D2D               	addwfc	??___ftge+1,w
  6996  082F  00A7               	movwf	___ftge@ff1+1
  6997  0830  3080               	movlw	128
  6998  0831  3D2E               	addwfc	??___ftge+2,w
  6999  0832  00A8               	movwf	___ftge@ff1+2
  7000  0833                     l5710:	
  7001  0833  1FAB               	btfss	___ftge@ff2+2,7
  7002  0834  2849               	goto	l5714
  7003  0835  0929               	comf	___ftge@ff2,w
  7004  0836  00AC               	movwf	??___ftge
  7005  0837  092A               	comf	___ftge@ff2+1,w
  7006  0838  00AD               	movwf	??___ftge+1
  7007  0839  092B               	comf	___ftge@ff2+2,w
  7008  083A  00AE               	movwf	??___ftge+2
  7009  083B  0AAC               	incf	??___ftge,f
  7010  083C  1903               	skipnz
  7011  083D  0AAD               	incf	??___ftge+1,f
  7012  083E  1903               	skipnz
  7013  083F  0AAE               	incf	??___ftge+2,f
  7014  0840  3000               	movlw	0
  7015  0841  072C               	addwf	??___ftge,w
  7016  0842  00A9               	movwf	___ftge@ff2
  7017  0843  3000               	movlw	0
  7018  0844  3D2D               	addwfc	??___ftge+1,w
  7019  0845  00AA               	movwf	___ftge@ff2+1
  7020  0846  3080               	movlw	128
  7021  0847  3D2E               	addwfc	??___ftge+2,w
  7022  0848  00AB               	movwf	___ftge@ff2+2
  7023  0849                     l5714:	
  7024  0849  3080               	movlw	128
  7025  084A  06A8               	xorwf	___ftge@ff1+2,f
  7026  084B  3080               	movlw	128
  7027  084C  06AB               	xorwf	___ftge@ff2+2,f
  7028  084D  082B               	movf	___ftge@ff2+2,w
  7029  084E  0228               	subwf	___ftge@ff1+2,w
  7030  084F  1D03               	skipz
  7031  0850  0008               	return
  7032  0851  082A               	movf	___ftge@ff2+1,w
  7033  0852  0227               	subwf	___ftge@ff1+1,w
  7034  0853  1D03               	skipz
  7035  0854  0008               	return
  7036  0855  0829               	movf	___ftge@ff2,w
  7037  0856  0226               	subwf	___ftge@ff1,w
  7038  0857  0008               	return
  7039  0858                     __end_of___ftge:	
  7040                           
  7041                           	psect	text17
  7042  069D                     __ptext17:	
  7043 ;; *************** function ___ftdiv *****************
  7044 ;; Defined at:
  7045 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  f2              3   36[BANK0 ] float 
  7048 ;;  f1              3   39[BANK0 ] float 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  f3              3   47[BANK0 ] float 
  7051 ;;  sign            1   51[BANK0 ] unsigned char 
  7052 ;;  exp             1   50[BANK0 ] unsigned char 
  7053 ;;  cntr            1   46[BANK0 ] unsigned char 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  3   36[BANK0 ] float 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, pclath, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7063 ;;      Params:         0       6       0       0       0       0       0       0
  7064 ;;      Locals:         0       6       0       0       0       0       0       0
  7065 ;;      Temps:          0       4       0       0       0       0       0       0
  7066 ;;      Totals:         0      16       0       0       0       0       0       0
  7067 ;;Total ram usage:       16 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    5
  7070 ;; This function calls:
  7071 ;;		___ftpack
  7072 ;; This function is called by:
  7073 ;;		_comparare
  7074 ;;		_main
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           
  7079                           ;psect for function ___ftdiv
  7080  069D                     ___ftdiv:	
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7084  069D  0020               	movlb	0	; select bank0
  7085  069E  0847               	movf	___ftdiv@f1,w
  7086  069F  00CA               	movwf	??___ftdiv
  7087  06A0  0848               	movf	___ftdiv@f1+1,w
  7088  06A1  00CB               	movwf	??___ftdiv+1
  7089  06A2  0849               	movf	___ftdiv@f1+2,w
  7090  06A3  00CC               	movwf	??___ftdiv+2
  7091  06A4  1003               	clrc
  7092  06A5  0D4B               	rlf	??___ftdiv+1,w
  7093  06A6  0D4C               	rlf	??___ftdiv+2,w
  7094  06A7  00CD               	movwf	??___ftdiv+3
  7095  06A8  084D               	movf	??___ftdiv+3,w
  7096  06A9  00D2               	movwf	___ftdiv@exp
  7097  06AA  0852               	movf	___ftdiv@exp,w
  7098  06AB  1D03               	btfss	3,2
  7099  06AC  2EB4               	goto	l5670
  7100  06AD  3000               	movlw	0
  7101  06AE  00C4               	movwf	?___ftdiv
  7102  06AF  3000               	movlw	0
  7103  06B0  00C5               	movwf	?___ftdiv+1
  7104  06B1  3000               	movlw	0
  7105  06B2  00C6               	movwf	?___ftdiv+2
  7106  06B3  0008               	return
  7107  06B4                     l5670:	
  7108  06B4  0844               	movf	___ftdiv@f2,w
  7109  06B5  00CA               	movwf	??___ftdiv
  7110  06B6  0845               	movf	___ftdiv@f2+1,w
  7111  06B7  00CB               	movwf	??___ftdiv+1
  7112  06B8  0846               	movf	___ftdiv@f2+2,w
  7113  06B9  00CC               	movwf	??___ftdiv+2
  7114  06BA  1003               	clrc
  7115  06BB  0D4B               	rlf	??___ftdiv+1,w
  7116  06BC  0D4C               	rlf	??___ftdiv+2,w
  7117  06BD  00CD               	movwf	??___ftdiv+3
  7118  06BE  084D               	movf	??___ftdiv+3,w
  7119  06BF  00D3               	movwf	___ftdiv@sign
  7120  06C0  0853               	movf	___ftdiv@sign,w
  7121  06C1  1D03               	btfss	3,2
  7122  06C2  2ECA               	goto	l5676
  7123  06C3  3000               	movlw	0
  7124  06C4  00C4               	movwf	?___ftdiv
  7125  06C5  3000               	movlw	0
  7126  06C6  00C5               	movwf	?___ftdiv+1
  7127  06C7  3000               	movlw	0
  7128  06C8  00C6               	movwf	?___ftdiv+2
  7129  06C9  0008               	return
  7130  06CA                     l5676:	
  7131  06CA  3000               	movlw	0
  7132  06CB  00CF               	movwf	___ftdiv@f3
  7133  06CC  3000               	movlw	0
  7134  06CD  00D0               	movwf	___ftdiv@f3+1
  7135  06CE  3000               	movlw	0
  7136  06CF  00D1               	movwf	___ftdiv@f3+2
  7137  06D0  3089               	movlw	137
  7138  06D1  0753               	addwf	___ftdiv@sign,w
  7139  06D2  00CA               	movwf	??___ftdiv
  7140  06D3  084A               	movf	??___ftdiv,w
  7141  06D4  02D2               	subwf	___ftdiv@exp,f
  7142  06D5  0847               	movf	___ftdiv@f1,w
  7143  06D6  00CA               	movwf	??___ftdiv
  7144  06D7  0848               	movf	___ftdiv@f1+1,w
  7145  06D8  00CB               	movwf	??___ftdiv+1
  7146  06D9  0849               	movf	___ftdiv@f1+2,w
  7147  06DA  00CC               	movwf	??___ftdiv+2
  7148  06DB  3010               	movlw	16
  7149  06DC                     u6515:	
  7150  06DC  36CC               	lsrf	??___ftdiv+2,f
  7151  06DD  0CCB               	rrf	??___ftdiv+1,f
  7152  06DE  0CCA               	rrf	??___ftdiv,f
  7153  06DF  0B89               	decfsz	9,f
  7154  06E0  2EDC               	goto	u6515
  7155  06E1  084A               	movf	??___ftdiv,w
  7156  06E2  00CD               	movwf	??___ftdiv+3
  7157  06E3  084D               	movf	??___ftdiv+3,w
  7158  06E4  00D3               	movwf	___ftdiv@sign
  7159  06E5  0844               	movf	___ftdiv@f2,w
  7160  06E6  00CA               	movwf	??___ftdiv
  7161  06E7  0845               	movf	___ftdiv@f2+1,w
  7162  06E8  00CB               	movwf	??___ftdiv+1
  7163  06E9  0846               	movf	___ftdiv@f2+2,w
  7164  06EA  00CC               	movwf	??___ftdiv+2
  7165  06EB  3010               	movlw	16
  7166  06EC                     u6525:	
  7167  06EC  36CC               	lsrf	??___ftdiv+2,f
  7168  06ED  0CCB               	rrf	??___ftdiv+1,f
  7169  06EE  0CCA               	rrf	??___ftdiv,f
  7170  06EF  0B89               	decfsz	9,f
  7171  06F0  2EEC               	goto	u6525
  7172  06F1  084A               	movf	??___ftdiv,w
  7173  06F2  00CD               	movwf	??___ftdiv+3
  7174  06F3  084D               	movf	??___ftdiv+3,w
  7175  06F4  06D3               	xorwf	___ftdiv@sign,f
  7176  06F5  3080               	movlw	128
  7177  06F6  00CA               	movwf	??___ftdiv
  7178  06F7  084A               	movf	??___ftdiv,w
  7179  06F8  05D3               	andwf	___ftdiv@sign,f
  7180  06F9  17C8               	bsf	___ftdiv@f1+1,7
  7181  06FA  30FF               	movlw	255
  7182  06FB  05C7               	andwf	___ftdiv@f1,f
  7183  06FC  30FF               	movlw	255
  7184  06FD  05C8               	andwf	___ftdiv@f1+1,f
  7185  06FE  3000               	movlw	0
  7186  06FF  05C9               	andwf	___ftdiv@f1+2,f
  7187  0700  17C5               	bsf	___ftdiv@f2+1,7
  7188  0701  30FF               	movlw	255
  7189  0702  05C4               	andwf	___ftdiv@f2,f
  7190  0703  30FF               	movlw	255
  7191  0704  05C5               	andwf	___ftdiv@f2+1,f
  7192  0705  3000               	movlw	0
  7193  0706  05C6               	andwf	___ftdiv@f2+2,f
  7194  0707  3018               	movlw	24
  7195  0708  00CA               	movwf	??___ftdiv
  7196  0709  084A               	movf	??___ftdiv,w
  7197  070A  00CE               	movwf	___ftdiv@cntr
  7198  070B                     l5690:	
  7199  070B  3001               	movlw	1
  7200  070C                     u6535:	
  7201  070C  35CF               	lslf	___ftdiv@f3,f
  7202  070D  0DD0               	rlf	___ftdiv@f3+1,f
  7203  070E  0DD1               	rlf	___ftdiv@f3+2,f
  7204  070F  0B89               	decfsz	9,f
  7205  0710  2F0C               	goto	u6535
  7206  0711  0846               	movf	___ftdiv@f2+2,w
  7207  0712  0249               	subwf	___ftdiv@f1+2,w
  7208  0713  1D03               	skipz
  7209  0714  2F1B               	goto	u6545
  7210  0715  0845               	movf	___ftdiv@f2+1,w
  7211  0716  0248               	subwf	___ftdiv@f1+1,w
  7212  0717  1D03               	skipz
  7213  0718  2F1B               	goto	u6545
  7214  0719  0844               	movf	___ftdiv@f2,w
  7215  071A  0247               	subwf	___ftdiv@f1,w
  7216  071B                     u6545:	
  7217  071B  1C03               	skipc
  7218  071C  2F24               	goto	l5698
  7219  071D  0844               	movf	___ftdiv@f2,w
  7220  071E  02C7               	subwf	___ftdiv@f1,f
  7221  071F  0845               	movf	___ftdiv@f2+1,w
  7222  0720  3BC8               	subwfb	___ftdiv@f1+1,f
  7223  0721  0846               	movf	___ftdiv@f2+2,w
  7224  0722  3BC9               	subwfb	___ftdiv@f1+2,f
  7225  0723  144F               	bsf	___ftdiv@f3,0
  7226  0724                     l5698:	
  7227  0724  3001               	movlw	1
  7228  0725                     u6555:	
  7229  0725  35C7               	lslf	___ftdiv@f1,f
  7230  0726  0DC8               	rlf	___ftdiv@f1+1,f
  7231  0727  0DC9               	rlf	___ftdiv@f1+2,f
  7232  0728  0B89               	decfsz	9,f
  7233  0729  2F25               	goto	u6555
  7234  072A  3001               	movlw	1
  7235  072B  02CE               	subwf	___ftdiv@cntr,f
  7236  072C  1D03               	btfss	3,2
  7237  072D  2F0B               	goto	l5690
  7238  072E  084F               	movf	___ftdiv@f3,w
  7239  072F  00F2               	movwf	___ftpack@arg
  7240  0730  0850               	movf	___ftdiv@f3+1,w
  7241  0731  00F3               	movwf	___ftpack@arg+1
  7242  0732  0851               	movf	___ftdiv@f3+2,w
  7243  0733  00F4               	movwf	___ftpack@arg+2
  7244  0734  0852               	movf	___ftdiv@exp,w
  7245  0735  00CA               	movwf	??___ftdiv
  7246  0736  084A               	movf	??___ftdiv,w
  7247  0737  00F5               	movwf	___ftpack@exp
  7248  0738  0853               	movf	___ftdiv@sign,w
  7249  0739  00CB               	movwf	??___ftdiv+1
  7250  073A  084B               	movf	??___ftdiv+1,w
  7251  073B  00F6               	movwf	___ftpack@sign
  7252  073C  318B  2369         	fcall	___ftpack
  7253  073E  0872               	movf	?___ftpack,w
  7254  073F  0020               	movlb	0	; select bank0
  7255  0740  00C4               	movwf	?___ftdiv
  7256  0741  0873               	movf	?___ftpack+1,w
  7257  0742  00C5               	movwf	?___ftdiv+1
  7258  0743  0874               	movf	?___ftpack+2,w
  7259  0744  00C6               	movwf	?___ftdiv+2
  7260  0745  0008               	return
  7261  0746                     __end_of___ftdiv:	
  7262                           
  7263                           	psect	text18
  7264  04F3                     __ptext18:	
  7265 ;; *************** function ___ftadd *****************
  7266 ;; Defined at:
  7267 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  f1              3   39[BANK0 ] float 
  7270 ;;  f2              3   42[BANK0 ] float 
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  exp1            1   51[BANK0 ] unsigned char 
  7273 ;;  exp2            1   50[BANK0 ] unsigned char 
  7274 ;;  sign            1   49[BANK0 ] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  3   39[BANK0 ] float 
  7277 ;; Registers used:
  7278 ;;		wreg, status,2, status,0, pclath, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7284 ;;      Params:         0       6       0       0       0       0       0       0
  7285 ;;      Locals:         0       3       0       0       0       0       0       0
  7286 ;;      Temps:          0       4       0       0       0       0       0       0
  7287 ;;      Totals:         0      13       0       0       0       0       0       0
  7288 ;;Total ram usage:       13 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    5
  7291 ;; This function calls:
  7292 ;;		___ftpack
  7293 ;; This function is called by:
  7294 ;;		_comparare
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           
  7299                           ;psect for function ___ftadd
  7300  04F3                     ___ftadd:	
  7301                           
  7302                           ;incstack = 0
  7303                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7304  04F3  0020               	movlb	0	; select bank0
  7305  04F4  0847               	movf	___ftadd@f1,w
  7306  04F5  00CD               	movwf	??___ftadd
  7307  04F6  0848               	movf	___ftadd@f1+1,w
  7308  04F7  00CE               	movwf	??___ftadd+1
  7309  04F8  0849               	movf	___ftadd@f1+2,w
  7310  04F9  00CF               	movwf	??___ftadd+2
  7311  04FA  1003               	clrc
  7312  04FB  0D4E               	rlf	??___ftadd+1,w
  7313  04FC  0D4F               	rlf	??___ftadd+2,w
  7314  04FD  00D0               	movwf	??___ftadd+3
  7315  04FE  0850               	movf	??___ftadd+3,w
  7316  04FF  00D3               	movwf	___ftadd@exp1
  7317  0500  084A               	movf	___ftadd@f2,w
  7318  0501  00CD               	movwf	??___ftadd
  7319  0502  084B               	movf	___ftadd@f2+1,w
  7320  0503  00CE               	movwf	??___ftadd+1
  7321  0504  084C               	movf	___ftadd@f2+2,w
  7322  0505  00CF               	movwf	??___ftadd+2
  7323  0506  1003               	clrc
  7324  0507  0D4E               	rlf	??___ftadd+1,w
  7325  0508  0D4F               	rlf	??___ftadd+2,w
  7326  0509  00D0               	movwf	??___ftadd+3
  7327  050A  0850               	movf	??___ftadd+3,w
  7328  050B  00D2               	movwf	___ftadd@exp2
  7329  050C  0853               	movf	___ftadd@exp1,w
  7330  050D  1903               	btfsc	3,2
  7331  050E  2D1B               	goto	l5600
  7332  050F  0852               	movf	___ftadd@exp2,w
  7333  0510  0253               	subwf	___ftadd@exp1,w
  7334  0511  1803               	skipnc
  7335  0512  2D22               	goto	l5604
  7336  0513  0353               	decf	___ftadd@exp1,w
  7337  0514  3AFF               	xorlw	255
  7338  0515  0752               	addwf	___ftadd@exp2,w
  7339  0516  00CD               	movwf	??___ftadd
  7340  0517  3019               	movlw	25
  7341  0518  024D               	subwf	??___ftadd,w
  7342  0519  1C03               	skipc
  7343  051A  2D22               	goto	l5604
  7344  051B                     l5600:	
  7345  051B  084A               	movf	___ftadd@f2,w
  7346  051C  00C7               	movwf	?___ftadd
  7347  051D  084B               	movf	___ftadd@f2+1,w
  7348  051E  00C8               	movwf	?___ftadd+1
  7349  051F  084C               	movf	___ftadd@f2+2,w
  7350  0520  00C9               	movwf	?___ftadd+2
  7351  0521  0008               	return
  7352  0522                     l5604:	
  7353  0522  0852               	movf	___ftadd@exp2,w
  7354  0523  1903               	btfsc	3,2
  7355  0524  0008               	return
  7356  0525  0853               	movf	___ftadd@exp1,w
  7357  0526  0252               	subwf	___ftadd@exp2,w
  7358  0527  1803               	skipnc
  7359  0528  2D31               	goto	l5610
  7360  0529  0352               	decf	___ftadd@exp2,w
  7361  052A  3AFF               	xorlw	255
  7362  052B  0753               	addwf	___ftadd@exp1,w
  7363  052C  00CD               	movwf	??___ftadd
  7364  052D  3019               	movlw	25
  7365  052E  024D               	subwf	??___ftadd,w
  7366  052F  1803               	btfsc	3,0
  7367  0530  0008               	return
  7368  0531                     l5610:	
  7369  0531  3006               	movlw	6
  7370  0532  00CD               	movwf	??___ftadd
  7371  0533  084D               	movf	??___ftadd,w
  7372  0534  00D1               	movwf	___ftadd@sign
  7373  0535  1BC9               	btfsc	___ftadd@f1+2,7
  7374  0536  17D1               	bsf	___ftadd@sign,7
  7375  0537  1BCC               	btfsc	___ftadd@f2+2,7
  7376  0538  1751               	bsf	___ftadd@sign,6
  7377  0539  17C8               	bsf	___ftadd@f1+1,7
  7378  053A  30FF               	movlw	255
  7379  053B  05C7               	andwf	___ftadd@f1,f
  7380  053C  30FF               	movlw	255
  7381  053D  05C8               	andwf	___ftadd@f1+1,f
  7382  053E  3000               	movlw	0
  7383  053F  05C9               	andwf	___ftadd@f1+2,f
  7384  0540  17CB               	bsf	___ftadd@f2+1,7
  7385  0541  30FF               	movlw	255
  7386  0542  05CA               	andwf	___ftadd@f2,f
  7387  0543  30FF               	movlw	255
  7388  0544  05CB               	andwf	___ftadd@f2+1,f
  7389  0545  3000               	movlw	0
  7390  0546  05CC               	andwf	___ftadd@f2+2,f
  7391  0547  0852               	movf	___ftadd@exp2,w
  7392  0548  0253               	subwf	___ftadd@exp1,w
  7393  0549  1803               	skipnc
  7394  054A  2D6D               	goto	l5632
  7395  054B                     l5622:	
  7396  054B  3001               	movlw	1
  7397  054C                     u6355:	
  7398  054C  35CA               	lslf	___ftadd@f2,f
  7399  054D  0DCB               	rlf	___ftadd@f2+1,f
  7400  054E  0DCC               	rlf	___ftadd@f2+2,f
  7401  054F  0B89               	decfsz	9,f
  7402  0550  2D4C               	goto	u6355
  7403  0551  3001               	movlw	1
  7404  0552  02D2               	subwf	___ftadd@exp2,f
  7405  0553  0852               	movf	___ftadd@exp2,w
  7406  0554  0653               	xorwf	___ftadd@exp1,w
  7407  0555  1903               	skipnz
  7408  0556  2D68               	goto	l5630
  7409  0557  3001               	movlw	1
  7410  0558  02D1               	subwf	___ftadd@sign,f
  7411  0559  0851               	movf	___ftadd@sign,w
  7412  055A  3907               	andlw	7
  7413  055B  1903               	btfsc	3,2
  7414  055C  2D68               	goto	l5630
  7415  055D  2D4B               	goto	l5622
  7416  055E                     l5628:	
  7417  055E  3001               	movlw	1
  7418  055F                     u6385:	
  7419  055F  36C9               	lsrf	___ftadd@f1+2,f
  7420  0560  0CC8               	rrf	___ftadd@f1+1,f
  7421  0561  0CC7               	rrf	___ftadd@f1,f
  7422  0562  0B89               	decfsz	9,f
  7423  0563  2D5F               	goto	u6385
  7424  0564  3001               	movlw	1
  7425  0565  00CD               	movwf	??___ftadd
  7426  0566  084D               	movf	??___ftadd,w
  7427  0567  07D3               	addwf	___ftadd@exp1,f
  7428  0568                     l5630:	
  7429  0568  0853               	movf	___ftadd@exp1,w
  7430  0569  0652               	xorwf	___ftadd@exp2,w
  7431  056A  1903               	btfsc	3,2
  7432  056B  2D92               	goto	l1344
  7433  056C  2D5E               	goto	l5628
  7434  056D                     l5632:	
  7435  056D  0853               	movf	___ftadd@exp1,w
  7436  056E  0252               	subwf	___ftadd@exp2,w
  7437  056F  1803               	skipnc
  7438  0570  2D92               	goto	l1344
  7439  0571                     l5634:	
  7440  0571  3001               	movlw	1
  7441  0572                     u6415:	
  7442  0572  35C7               	lslf	___ftadd@f1,f
  7443  0573  0DC8               	rlf	___ftadd@f1+1,f
  7444  0574  0DC9               	rlf	___ftadd@f1+2,f
  7445  0575  0B89               	decfsz	9,f
  7446  0576  2D72               	goto	u6415
  7447  0577  3001               	movlw	1
  7448  0578  02D3               	subwf	___ftadd@exp1,f
  7449  0579  0852               	movf	___ftadd@exp2,w
  7450  057A  0653               	xorwf	___ftadd@exp1,w
  7451  057B  1903               	skipnz
  7452  057C  2D8E               	goto	l5642
  7453  057D  3001               	movlw	1
  7454  057E  02D1               	subwf	___ftadd@sign,f
  7455  057F  0851               	movf	___ftadd@sign,w
  7456  0580  3907               	andlw	7
  7457  0581  1903               	btfsc	3,2
  7458  0582  2D8E               	goto	l5642
  7459  0583  2D71               	goto	l5634
  7460  0584                     l5640:	
  7461  0584  3001               	movlw	1
  7462  0585                     u6445:	
  7463  0585  36CC               	lsrf	___ftadd@f2+2,f
  7464  0586  0CCB               	rrf	___ftadd@f2+1,f
  7465  0587  0CCA               	rrf	___ftadd@f2,f
  7466  0588  0B89               	decfsz	9,f
  7467  0589  2D85               	goto	u6445
  7468  058A  3001               	movlw	1
  7469  058B  00CD               	movwf	??___ftadd
  7470  058C  084D               	movf	??___ftadd,w
  7471  058D  07D2               	addwf	___ftadd@exp2,f
  7472  058E                     l5642:	
  7473  058E  0853               	movf	___ftadd@exp1,w
  7474  058F  0652               	xorwf	___ftadd@exp2,w
  7475  0590  1D03               	skipz
  7476  0591  2D84               	goto	l5640
  7477  0592                     l1344:	
  7478  0592  1FD1               	btfss	___ftadd@sign,7
  7479  0593  2DA4               	goto	l5646
  7480  0594  30FF               	movlw	255
  7481  0595  06C7               	xorwf	___ftadd@f1,f
  7482  0596  30FF               	movlw	255
  7483  0597  06C8               	xorwf	___ftadd@f1+1,f
  7484  0598  30FF               	movlw	255
  7485  0599  06C9               	xorwf	___ftadd@f1+2,f
  7486  059A  3001               	movlw	1
  7487  059B  07C7               	addwf	___ftadd@f1,f
  7488  059C  3000               	movlw	0
  7489  059D  1803               	skipnc
  7490  059E  3001               	movlw	1
  7491  059F  07C8               	addwf	___ftadd@f1+1,f
  7492  05A0  3000               	movlw	0
  7493  05A1  1803               	skipnc
  7494  05A2  3001               	movlw	1
  7495  05A3  07C9               	addwf	___ftadd@f1+2,f
  7496  05A4                     l5646:	
  7497  05A4  1F51               	btfss	___ftadd@sign,6
  7498  05A5  2DB6               	goto	l5650
  7499  05A6  30FF               	movlw	255
  7500  05A7  06CA               	xorwf	___ftadd@f2,f
  7501  05A8  30FF               	movlw	255
  7502  05A9  06CB               	xorwf	___ftadd@f2+1,f
  7503  05AA  30FF               	movlw	255
  7504  05AB  06CC               	xorwf	___ftadd@f2+2,f
  7505  05AC  3001               	movlw	1
  7506  05AD  07CA               	addwf	___ftadd@f2,f
  7507  05AE  3000               	movlw	0
  7508  05AF  1803               	skipnc
  7509  05B0  3001               	movlw	1
  7510  05B1  07CB               	addwf	___ftadd@f2+1,f
  7511  05B2  3000               	movlw	0
  7512  05B3  1803               	skipnc
  7513  05B4  3001               	movlw	1
  7514  05B5  07CC               	addwf	___ftadd@f2+2,f
  7515  05B6                     l5650:	
  7516  05B6  01D1               	clrf	___ftadd@sign
  7517  05B7  0847               	movf	___ftadd@f1,w
  7518  05B8  07CA               	addwf	___ftadd@f2,f
  7519  05B9  0848               	movf	___ftadd@f1+1,w
  7520  05BA  3DCB               	addwfc	___ftadd@f2+1,f
  7521  05BB  0849               	movf	___ftadd@f1+2,w
  7522  05BC  3DCC               	addwfc	___ftadd@f2+2,f
  7523  05BD  1FCC               	btfss	___ftadd@f2+2,7
  7524  05BE  2DD1               	goto	l5660
  7525  05BF  30FF               	movlw	255
  7526  05C0  06CA               	xorwf	___ftadd@f2,f
  7527  05C1  30FF               	movlw	255
  7528  05C2  06CB               	xorwf	___ftadd@f2+1,f
  7529  05C3  30FF               	movlw	255
  7530  05C4  06CC               	xorwf	___ftadd@f2+2,f
  7531  05C5  3001               	movlw	1
  7532  05C6  07CA               	addwf	___ftadd@f2,f
  7533  05C7  3000               	movlw	0
  7534  05C8  1803               	skipnc
  7535  05C9  3001               	movlw	1
  7536  05CA  07CB               	addwf	___ftadd@f2+1,f
  7537  05CB  3000               	movlw	0
  7538  05CC  1803               	skipnc
  7539  05CD  3001               	movlw	1
  7540  05CE  07CC               	addwf	___ftadd@f2+2,f
  7541  05CF  01D1               	clrf	___ftadd@sign
  7542  05D0  0AD1               	incf	___ftadd@sign,f
  7543  05D1                     l5660:	
  7544  05D1  084A               	movf	___ftadd@f2,w
  7545  05D2  00F2               	movwf	___ftpack@arg
  7546  05D3  084B               	movf	___ftadd@f2+1,w
  7547  05D4  00F3               	movwf	___ftpack@arg+1
  7548  05D5  084C               	movf	___ftadd@f2+2,w
  7549  05D6  00F4               	movwf	___ftpack@arg+2
  7550  05D7  0853               	movf	___ftadd@exp1,w
  7551  05D8  00CD               	movwf	??___ftadd
  7552  05D9  084D               	movf	??___ftadd,w
  7553  05DA  00F5               	movwf	___ftpack@exp
  7554  05DB  0851               	movf	___ftadd@sign,w
  7555  05DC  00CE               	movwf	??___ftadd+1
  7556  05DD  084E               	movf	??___ftadd+1,w
  7557  05DE  00F6               	movwf	___ftpack@sign
  7558  05DF  318B  2369         	fcall	___ftpack
  7559  05E1  0872               	movf	?___ftpack,w
  7560  05E2  0020               	movlb	0	; select bank0
  7561  05E3  00C7               	movwf	?___ftadd
  7562  05E4  0873               	movf	?___ftpack+1,w
  7563  05E5  00C8               	movwf	?___ftadd+1
  7564  05E6  0874               	movf	?___ftpack+2,w
  7565  05E7  00C9               	movwf	?___ftadd+2
  7566  05E8  0008               	return
  7567  05E9                     __end_of___ftadd:	
  7568                           
  7569                           	psect	text19
  7570  148D                     __ptext19:	
  7571 ;; *************** function ___bmul *****************
  7572 ;; Defined at:
  7573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  multiplier      1    wreg     unsigned char 
  7576 ;;  multiplicand    1    2[COMMON] unsigned char 
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;  multiplier      1    5[COMMON] unsigned char 
  7579 ;;  product         1    4[COMMON] unsigned char 
  7580 ;; Return value:  Size  Location     Type
  7581 ;;                  1    wreg      unsigned char 
  7582 ;; Registers used:
  7583 ;;		wreg, status,2, status,0
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7589 ;;      Params:         1       0       0       0       0       0       0       0
  7590 ;;      Locals:         2       0       0       0       0       0       0       0
  7591 ;;      Temps:          1       0       0       0       0       0       0       0
  7592 ;;      Totals:         4       0       0       0       0       0       0       0
  7593 ;;Total ram usage:        4 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:    4
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_comparare
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           
  7604                           ;psect for function ___bmul
  7605  148D                     ___bmul:	
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7609                           ;___bmul@multiplier stored from wreg
  7610  148D  00F5               	movwf	___bmul@multiplier
  7611  148E  01F4               	clrf	___bmul@product
  7612  148F                     l5570:	
  7613  148F  1C75               	btfss	___bmul@multiplier,0
  7614  1490  2C95               	goto	l5574
  7615  1491  0872               	movf	___bmul@multiplicand,w
  7616  1492  00F3               	movwf	??___bmul
  7617  1493  0873               	movf	??___bmul,w
  7618  1494  07F4               	addwf	___bmul@product,f
  7619  1495                     l5574:	
  7620  1495  1003               	clrc
  7621  1496  0DF2               	rlf	___bmul@multiplicand,f
  7622  1497  1003               	clrc
  7623  1498  0CF5               	rrf	___bmul@multiplier,f
  7624  1499  0875               	movf	___bmul@multiplier,w
  7625  149A  1D03               	btfss	3,2
  7626  149B  2C8F               	goto	l5570
  7627  149C  0874               	movf	___bmul@product,w
  7628  149D  0008               	return
  7629  149E                     __end_of___bmul:	
  7630                           
  7631                           	psect	text20
  7632  15D5                     __ptext20:	
  7633 ;; *************** function ___awtoft *****************
  7634 ;; Defined at:
  7635 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  c               2    0[BANK0 ] int 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  sign            1    5[BANK0 ] unsigned char 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  3    0[BANK0 ] float 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0, pclath, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7649 ;;      Params:         0       3       0       0       0       0       0       0
  7650 ;;      Locals:         0       1       0       0       0       0       0       0
  7651 ;;      Temps:          0       2       0       0       0       0       0       0
  7652 ;;      Totals:         0       6       0       0       0       0       0       0
  7653 ;;Total ram usage:        6 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    5
  7656 ;; This function calls:
  7657 ;;		___ftpack
  7658 ;; This function is called by:
  7659 ;;		_comparare
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function ___awtoft
  7665  15D5                     ___awtoft:	
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7669  15D5  0020               	movlb	0	; select bank0
  7670  15D6  01A5               	clrf	___awtoft@sign
  7671  15D7  1FA1               	btfss	___awtoft@c+1,7
  7672  15D8  2DE0               	goto	l5590
  7673  15D9  09A0               	comf	___awtoft@c,f
  7674  15DA  09A1               	comf	___awtoft@c+1,f
  7675  15DB  0AA0               	incf	___awtoft@c,f
  7676  15DC  1903               	skipnz
  7677  15DD  0AA1               	incf	___awtoft@c+1,f
  7678  15DE  01A5               	clrf	___awtoft@sign
  7679  15DF  0AA5               	incf	___awtoft@sign,f
  7680  15E0                     l5590:	
  7681  15E0  0820               	movf	___awtoft@c,w
  7682  15E1  00F2               	movwf	___ftpack@arg
  7683  15E2  0821               	movf	___awtoft@c+1,w
  7684  15E3  00F3               	movwf	___ftpack@arg+1
  7685  15E4  01F4               	clrf	___ftpack@arg+2
  7686  15E5  308E               	movlw	142
  7687  15E6  00A3               	movwf	??___awtoft
  7688  15E7  0823               	movf	??___awtoft,w
  7689  15E8  00F5               	movwf	___ftpack@exp
  7690  15E9  0825               	movf	___awtoft@sign,w
  7691  15EA  00A4               	movwf	??___awtoft+1
  7692  15EB  0824               	movf	??___awtoft+1,w
  7693  15EC  00F6               	movwf	___ftpack@sign
  7694  15ED  318B  2369         	fcall	___ftpack
  7695  15EF  0872               	movf	?___ftpack,w
  7696  15F0  0020               	movlb	0	; select bank0
  7697  15F1  00A0               	movwf	?___awtoft
  7698  15F2  0873               	movf	?___ftpack+1,w
  7699  15F3  00A1               	movwf	?___awtoft+1
  7700  15F4  0874               	movf	?___ftpack+2,w
  7701  15F5  00A2               	movwf	?___awtoft+2
  7702  15F6  0008               	return
  7703  15F7                     __end_of___awtoft:	
  7704                           
  7705                           	psect	text21
  7706  0B69                     __ptext21:	
  7707 ;; *************** function ___ftpack *****************
  7708 ;; Defined at:
  7709 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  7710 ;; Parameters:    Size  Location     Type
  7711 ;;  arg             3    2[COMMON] unsigned um
  7712 ;;  exp             1    5[COMMON] unsigned char 
  7713 ;;  sign            1    6[COMMON] unsigned char 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;		None
  7716 ;; Return value:  Size  Location     Type
  7717 ;;                  3    2[COMMON] float 
  7718 ;; Registers used:
  7719 ;;		wreg, status,2, status,0
  7720 ;; Tracked objects:
  7721 ;;		On entry : 0/0
  7722 ;;		On exit  : 0/0
  7723 ;;		Unchanged: 0/0
  7724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7725 ;;      Params:         5       0       0       0       0       0       0       0
  7726 ;;      Locals:         0       0       0       0       0       0       0       0
  7727 ;;      Temps:          3       0       0       0       0       0       0       0
  7728 ;;      Totals:         8       0       0       0       0       0       0       0
  7729 ;;Total ram usage:        8 bytes
  7730 ;; Hardware stack levels used:    1
  7731 ;; Hardware stack levels required when called:    4
  7732 ;; This function calls:
  7733 ;;		Nothing
  7734 ;; This function is called by:
  7735 ;;		___awtoft
  7736 ;;		___ftadd
  7737 ;;		___ftdiv
  7738 ;;		___ftmul
  7739 ;;		___lwtoft
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function ___ftpack
  7745  0B69                     ___ftpack:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7749  0B69  0875               	movf	___ftpack@exp,w
  7750  0B6A  1903               	btfsc	3,2
  7751  0B6B  2B71               	goto	l5170
  7752  0B6C  0874               	movf	___ftpack@arg+2,w
  7753  0B6D  0473               	iorwf	___ftpack@arg+1,w
  7754  0B6E  0472               	iorwf	___ftpack@arg,w
  7755  0B6F  1D03               	skipz
  7756  0B70  2B82               	goto	l5176
  7757  0B71                     l5170:	
  7758  0B71  3000               	movlw	0
  7759  0B72  00F2               	movwf	?___ftpack
  7760  0B73  3000               	movlw	0
  7761  0B74  00F3               	movwf	?___ftpack+1
  7762  0B75  3000               	movlw	0
  7763  0B76  00F4               	movwf	?___ftpack+2
  7764  0B77  0008               	return
  7765  0B78                     l5174:	
  7766  0B78  3001               	movlw	1
  7767  0B79  00F7               	movwf	??___ftpack
  7768  0B7A  0877               	movf	??___ftpack,w
  7769  0B7B  07F5               	addwf	___ftpack@exp,f
  7770  0B7C  3001               	movlw	1
  7771  0B7D                     u5725:	
  7772  0B7D  36F4               	lsrf	___ftpack@arg+2,f
  7773  0B7E  0CF3               	rrf	___ftpack@arg+1,f
  7774  0B7F  0CF2               	rrf	___ftpack@arg,f
  7775  0B80  0B89               	decfsz	9,f
  7776  0B81  2B7D               	goto	u5725
  7777  0B82                     l5176:	
  7778  0B82  30FE               	movlw	254
  7779  0B83  0574               	andwf	___ftpack@arg+2,w
  7780  0B84  1903               	btfsc	3,2
  7781  0B85  2B9B               	goto	l1313
  7782  0B86  2B78               	goto	l5174
  7783  0B87                     l5178:	
  7784  0B87  3001               	movlw	1
  7785  0B88  00F7               	movwf	??___ftpack
  7786  0B89  0877               	movf	??___ftpack,w
  7787  0B8A  07F5               	addwf	___ftpack@exp,f
  7788  0B8B  3001               	movlw	1
  7789  0B8C  07F2               	addwf	___ftpack@arg,f
  7790  0B8D  3000               	movlw	0
  7791  0B8E  1803               	skipnc
  7792  0B8F  3001               	movlw	1
  7793  0B90  07F3               	addwf	___ftpack@arg+1,f
  7794  0B91  3000               	movlw	0
  7795  0B92  1803               	skipnc
  7796  0B93  3001               	movlw	1
  7797  0B94  07F4               	addwf	___ftpack@arg+2,f
  7798  0B95  3001               	movlw	1
  7799  0B96                     u5745:	
  7800  0B96  36F4               	lsrf	___ftpack@arg+2,f
  7801  0B97  0CF3               	rrf	___ftpack@arg+1,f
  7802  0B98  0CF2               	rrf	___ftpack@arg,f
  7803  0B99  0B89               	decfsz	9,f
  7804  0B9A  2B96               	goto	u5745
  7805  0B9B                     l1313:	
  7806  0B9B  30FF               	movlw	255
  7807  0B9C  0574               	andwf	___ftpack@arg+2,w
  7808  0B9D  1903               	btfsc	3,2
  7809  0B9E  2BA8               	goto	l5186
  7810  0B9F  2B87               	goto	l5178
  7811  0BA0                     l5184:	
  7812  0BA0  3001               	movlw	1
  7813  0BA1  02F5               	subwf	___ftpack@exp,f
  7814  0BA2  3001               	movlw	1
  7815  0BA3                     u5765:	
  7816  0BA3  35F2               	lslf	___ftpack@arg,f
  7817  0BA4  0DF3               	rlf	___ftpack@arg+1,f
  7818  0BA5  0DF4               	rlf	___ftpack@arg+2,f
  7819  0BA6  0B89               	decfsz	9,f
  7820  0BA7  2BA3               	goto	u5765
  7821  0BA8                     l5186:	
  7822  0BA8  1BF3               	btfsc	___ftpack@arg+1,7
  7823  0BA9  2BAE               	goto	l1320
  7824  0BAA  3002               	movlw	2
  7825  0BAB  0275               	subwf	___ftpack@exp,w
  7826  0BAC  1803               	skipnc
  7827  0BAD  2BA0               	goto	l5184
  7828  0BAE                     l1320:	
  7829  0BAE  1875               	btfsc	___ftpack@exp,0
  7830  0BAF  2BB6               	goto	l1321
  7831  0BB0  30FF               	movlw	255
  7832  0BB1  05F2               	andwf	___ftpack@arg,f
  7833  0BB2  307F               	movlw	127
  7834  0BB3  05F3               	andwf	___ftpack@arg+1,f
  7835  0BB4  30FF               	movlw	255
  7836  0BB5  05F4               	andwf	___ftpack@arg+2,f
  7837  0BB6                     l1321:	
  7838  0BB6  1003               	clrc
  7839  0BB7  0CF5               	rrf	___ftpack@exp,f
  7840  0BB8  0875               	movf	___ftpack@exp,w
  7841  0BB9  00F7               	movwf	??___ftpack
  7842  0BBA  01F8               	clrf	??___ftpack+1
  7843  0BBB  01F9               	clrf	??___ftpack+2
  7844  0BBC  3010               	movlw	16
  7845  0BBD                     u5805:	
  7846  0BBD  35F7               	lslf	??___ftpack,f
  7847  0BBE  0DF8               	rlf	??___ftpack+1,f
  7848  0BBF  0DF9               	rlf	??___ftpack+2,f
  7849  0BC0  0B89               	decfsz	9,f
  7850  0BC1  2BBD               	goto	u5805
  7851  0BC2  0877               	movf	??___ftpack,w
  7852  0BC3  04F2               	iorwf	___ftpack@arg,f
  7853  0BC4  0878               	movf	??___ftpack+1,w
  7854  0BC5  04F3               	iorwf	___ftpack@arg+1,f
  7855  0BC6  0879               	movf	??___ftpack+2,w
  7856  0BC7  04F4               	iorwf	___ftpack@arg+2,f
  7857  0BC8  0876               	movf	___ftpack@sign,w
  7858  0BC9  1903               	btfsc	3,2
  7859  0BCA  0008               	return
  7860  0BCB  17F4               	bsf	___ftpack@arg+2,7
  7861  0BCC  0008               	return
  7862  0BCD                     __end_of___ftpack:	
  7863                           
  7864                           	psect	text22
  7865  16D7                     __ptext22:	
  7866 ;; *************** function _command_turn *****************
  7867 ;; Defined at:
  7868 ;;		line 244 in file "step_motor.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;		None
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      void 
  7875 ;; Registers used:
  7876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7882 ;;      Params:         0       0       0       0       0       0       0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0       0
  7884 ;;      Temps:          0       2       0       0       0       0       0       0
  7885 ;;      Totals:         0       2       0       0       0       0       0       0
  7886 ;;Total ram usage:        2 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    6
  7889 ;; This function calls:
  7890 ;;		_LCDWriteString
  7891 ;;		_LCD_Init_apdatat
  7892 ;;		_eeprom_read
  7893 ;;		_eeprom_write
  7894 ;;		_turn_egs
  7895 ;; This function is called by:
  7896 ;;		_main
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _command_turn
  7902  16D7                     _command_turn:	
  7903                           
  7904                           ;step_motor.c: 246: if (flag_G==1)
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in _command_turn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7908  16D7  0022               	movlb	2	; select bank2
  7909  16D8  0350               	decf	_flag_G^(0+256),w
  7910  16D9  0451               	iorwf	(_flag_G+1)^(0+256),w
  7911  16DA  1D03               	btfss	3,2
  7912  16DB  0008               	return
  7913                           
  7914                           ;step_motor.c: 247: {
  7915                           ;step_motor.c: 248: if (flag_N==1)
  7916  16DC  0352               	decf	_flag_N^(0+256),w
  7917  16DD  0453               	iorwf	(_flag_N+1)^(0+256),w
  7918  16DE  1D03               	btfss	3,2
  7919  16DF  0008               	return
  7920                           
  7921                           ;step_motor.c: 249: {
  7922                           ;step_motor.c: 250: flag_directie=eeprom_read(0x00);
  7923  16E0  3000               	movlw	0
  7924  16E1  3195  250C  3196   	fcall	_eeprom_read
  7925  16E4  0020               	movlb	0	; select bank0
  7926  16E5  00A3               	movwf	??_command_turn
  7927  16E6  01A4               	clrf	??_command_turn+1
  7928  16E7  0823               	movf	??_command_turn,w
  7929  16E8  00E3               	movwf	_flag_directie
  7930  16E9  0824               	movf	??_command_turn+1,w
  7931  16EA  00E4               	movwf	_flag_directie+1
  7932                           
  7933                           ;step_motor.c: 252: LCD_Init_apdatat();
  7934  16EB  3197  272F  3196   	fcall	_LCD_Init_apdatat
  7935                           
  7936                           ;step_motor.c: 253: LCDWriteString(" Intoarcere oua!");
  7937  16EE  3049               	movlw	low (STR_9| (0+32768))
  7938  16EF  0020               	movlb	0	; select bank0
  7939  16F0  00A0               	movwf	LCDWriteString@msg
  7940  16F1  3098               	movlw	high (STR_9| (0+32768))
  7941  16F2  00A1               	movwf	LCDWriteString@msg+1
  7942  16F3  3188  2058  3196   	fcall	_LCDWriteString
  7943                           
  7944                           ;step_motor.c: 254: turn_egs();
  7945  16F6  3187  2746  3196   	fcall	_turn_egs
  7946                           
  7947                           ;step_motor.c: 255: eeprom_write(0x00,flag_directie);
  7948  16F9  0020               	movlb	0	; select bank0
  7949  16FA  0863               	movf	_flag_directie,w
  7950  16FB  00A3               	movwf	??_command_turn
  7951  16FC  0823               	movf	??_command_turn,w
  7952  16FD  00F2               	movwf	eeprom_write@value
  7953  16FE  3000               	movlw	0
  7954  16FF  3196  261A         	fcall	_eeprom_write
  7955  1701  0008               	return
  7956  1702                     __end_of_command_turn:	
  7957                           
  7958                           	psect	text23
  7959  0746                     __ptext23:	
  7960 ;; *************** function _turn_egs *****************
  7961 ;; Defined at:
  7962 ;;		line 9 in file "step_motor.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;		None
  7965 ;; Auto vars:     Size  Location     Type
  7966 ;;		None
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      void 
  7969 ;; Registers used:
  7970 ;;		wreg, status,2, status,0
  7971 ;; Tracked objects:
  7972 ;;		On entry : 0/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7976 ;;      Params:         0       0       0       0       0       0       0       0
  7977 ;;      Locals:         0       0       0       0       0       0       0       0
  7978 ;;      Temps:          1       0       0       0       0       0       0       0
  7979 ;;      Totals:         1       0       0       0       0       0       0       0
  7980 ;;Total ram usage:        1 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    4
  7983 ;; This function calls:
  7984 ;;		Nothing
  7985 ;; This function is called by:
  7986 ;;		_state_of_button
  7987 ;;		_main
  7988 ;;		_command_turn
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _turn_egs
  7994  0746                     _turn_egs:	
  7995  0746                     l979:	
  7996                           ;step_motor.c: 11: extern unsigned char step_index;
  7997                           ;step_motor.c: 19: while((step_nr<350))
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _turn_egs: [wreg+status,2+status,0]
  8001                           
  8002  0746  3001               	movlw	1
  8003  0747  0020               	movlb	0	; select bank0
  8004  0748  0266               	subwf	_step_nr+1,w
  8005  0749  305E               	movlw	94
  8006  074A  1903               	skipnz
  8007  074B  0265               	subwf	_step_nr,w
  8008  074C  1803               	btfsc	3,0
  8009  074D  2FC9               	goto	l983
  8010                           
  8011                           ;step_motor.c: 20: {
  8012                           ;step_motor.c: 22: if(flag_directie==1)
  8013  074E  0020               	movlb	0	; select bank0
  8014  074F  0363               	decf	_flag_directie,w
  8015  0750  0464               	iorwf	_flag_directie+1,w
  8016  0751  1D03               	btfss	3,2
  8017  0752  2F8B               	goto	l5402
  8018                           
  8019                           ;step_motor.c: 23: {
  8020                           ;step_motor.c: 33: step_nr++;
  8021  0753  3001               	movlw	1
  8022  0754  07E5               	addwf	_step_nr,f
  8023  0755  3000               	movlw	0
  8024  0756  3DE6               	addwfc	_step_nr+1,f
  8025                           
  8026                           ;step_motor.c: 35: LATCbits.LATC5=1;
  8027  0757  0022               	movlb	2	; select bank2
  8028  0758  168E               	bsf	14,5	;volatile
  8029                           
  8030                           ;step_motor.c: 36: LATCbits.LATC4=0;
  8031  0759  120E               	bcf	14,4	;volatile
  8032                           
  8033                           ;step_motor.c: 37: LATCbits.LATC3=0;
  8034  075A  118E               	bcf	14,3	;volatile
  8035                           
  8036                           ;step_motor.c: 38: LATCbits.LATC0=0;
  8037  075B  100E               	bcf	14,0	;volatile
  8038                           
  8039                           ;step_motor.c: 39: _delay((unsigned long)((5)*(18432000/4000.0)));
  8040  075C  301E               	movlw	30
  8041  075D  00F2               	movwf	??_turn_egs
  8042  075E  30EB               	movlw	235
  8043  075F                     u7377:	
  8044  075F  0B89               	decfsz	9,f
  8045  0760  2F5F               	goto	u7377
  8046  0761  0BF2               	decfsz	??_turn_egs,f
  8047  0762  2F5F               	goto	u7377
  8048  0763  0000               	nop
  8049                           
  8050                           ;step_motor.c: 42: LATCbits.LATC5=0;
  8051  0764  0022               	movlb	2	; select bank2
  8052  0765  128E               	bcf	14,5	;volatile
  8053                           
  8054                           ;step_motor.c: 43: LATCbits.LATC4=1;
  8055  0766  160E               	bsf	14,4	;volatile
  8056                           
  8057                           ;step_motor.c: 44: LATCbits.LATC3=0;
  8058  0767  118E               	bcf	14,3	;volatile
  8059                           
  8060                           ;step_motor.c: 45: LATCbits.LATC0=0;
  8061  0768  100E               	bcf	14,0	;volatile
  8062                           
  8063                           ;step_motor.c: 46: _delay((unsigned long)((5)*(18432000/4000.0)));
  8064  0769  301E               	movlw	30
  8065  076A  00F2               	movwf	??_turn_egs
  8066  076B  30EB               	movlw	235
  8067  076C                     u7387:	
  8068  076C  0B89               	decfsz	9,f
  8069  076D  2F6C               	goto	u7387
  8070  076E  0BF2               	decfsz	??_turn_egs,f
  8071  076F  2F6C               	goto	u7387
  8072  0770  0000               	nop
  8073                           
  8074                           ;step_motor.c: 48: LATCbits.LATC5=0;
  8075  0771  0022               	movlb	2	; select bank2
  8076  0772  128E               	bcf	14,5	;volatile
  8077                           
  8078                           ;step_motor.c: 49: LATCbits.LATC4=0;
  8079  0773  120E               	bcf	14,4	;volatile
  8080                           
  8081                           ;step_motor.c: 50: LATCbits.LATC3=1;
  8082  0774  158E               	bsf	14,3	;volatile
  8083                           
  8084                           ;step_motor.c: 51: LATCbits.LATC0=0;
  8085  0775  100E               	bcf	14,0	;volatile
  8086                           
  8087                           ;step_motor.c: 52: _delay((unsigned long)((5)*(18432000/4000.0)));
  8088  0776  301E               	movlw	30
  8089  0777  00F2               	movwf	??_turn_egs
  8090  0778  30EB               	movlw	235
  8091  0779                     u7397:	
  8092  0779  0B89               	decfsz	9,f
  8093  077A  2F79               	goto	u7397
  8094  077B  0BF2               	decfsz	??_turn_egs,f
  8095  077C  2F79               	goto	u7397
  8096  077D  0000               	nop
  8097                           
  8098                           ;step_motor.c: 55: LATCbits.LATC5=0;
  8099  077E  0022               	movlb	2	; select bank2
  8100  077F  128E               	bcf	14,5	;volatile
  8101                           
  8102                           ;step_motor.c: 56: LATCbits.LATC4=0;
  8103  0780  120E               	bcf	14,4	;volatile
  8104                           
  8105                           ;step_motor.c: 57: LATCbits.LATC3=0;
  8106  0781  118E               	bcf	14,3	;volatile
  8107                           
  8108                           ;step_motor.c: 58: LATCbits.LATC0=1;
  8109  0782  140E               	bsf	14,0	;volatile
  8110                           
  8111                           ;step_motor.c: 59: _delay((unsigned long)((5)*(18432000/4000.0)));
  8112  0783  301E               	movlw	30
  8113  0784  00F2               	movwf	??_turn_egs
  8114  0785  30EB               	movlw	235
  8115  0786                     u7407:	
  8116  0786  0B89               	decfsz	9,f
  8117  0787  2F86               	goto	u7407
  8118  0788  0BF2               	decfsz	??_turn_egs,f
  8119  0789  2F86               	goto	u7407
  8120  078A  0000               	nop
  8121  078B                     l5402:	
  8122                           
  8123                           ;step_motor.c: 62: }
  8124                           ;step_motor.c: 63: if(flag_directie==0)
  8125  078B  0020               	movlb	0	; select bank0
  8126  078C  0863               	movf	_flag_directie,w
  8127  078D  0464               	iorwf	_flag_directie+1,w
  8128  078E  1D03               	btfss	3,2
  8129  078F  2F46               	goto	l979
  8130                           
  8131                           ;step_motor.c: 64: {
  8132                           ;step_motor.c: 78: step_nr++;
  8133  0790  3001               	movlw	1
  8134  0791  07E5               	addwf	_step_nr,f
  8135  0792  3000               	movlw	0
  8136  0793  3DE6               	addwfc	_step_nr+1,f
  8137                           
  8138                           ;step_motor.c: 79: LATCbits.LATC0=1;
  8139  0794  0022               	movlb	2	; select bank2
  8140  0795  140E               	bsf	14,0	;volatile
  8141                           
  8142                           ;step_motor.c: 80: LATCbits.LATC3=0;
  8143  0796  118E               	bcf	14,3	;volatile
  8144                           
  8145                           ;step_motor.c: 81: LATCbits.LATC4=0;
  8146  0797  120E               	bcf	14,4	;volatile
  8147                           
  8148                           ;step_motor.c: 82: LATCbits.LATC5=0;
  8149  0798  128E               	bcf	14,5	;volatile
  8150                           
  8151                           ;step_motor.c: 83: _delay((unsigned long)((5)*(18432000/4000.0)));
  8152  0799  301E               	movlw	30
  8153  079A  00F2               	movwf	??_turn_egs
  8154  079B  30EB               	movlw	235
  8155  079C                     u7417:	
  8156  079C  0B89               	decfsz	9,f
  8157  079D  2F9C               	goto	u7417
  8158  079E  0BF2               	decfsz	??_turn_egs,f
  8159  079F  2F9C               	goto	u7417
  8160  07A0  0000               	nop
  8161                           
  8162                           ;step_motor.c: 86: LATCbits.LATC0=0;
  8163  07A1  0022               	movlb	2	; select bank2
  8164  07A2  100E               	bcf	14,0	;volatile
  8165                           
  8166                           ;step_motor.c: 87: LATCbits.LATC3=1;
  8167  07A3  158E               	bsf	14,3	;volatile
  8168                           
  8169                           ;step_motor.c: 88: LATCbits.LATC4=0;
  8170  07A4  120E               	bcf	14,4	;volatile
  8171                           
  8172                           ;step_motor.c: 89: LATCbits.LATC5=0;
  8173  07A5  128E               	bcf	14,5	;volatile
  8174                           
  8175                           ;step_motor.c: 90: _delay((unsigned long)((5)*(18432000/4000.0)));
  8176  07A6  301E               	movlw	30
  8177  07A7  00F2               	movwf	??_turn_egs
  8178  07A8  30EB               	movlw	235
  8179  07A9                     u7427:	
  8180  07A9  0B89               	decfsz	9,f
  8181  07AA  2FA9               	goto	u7427
  8182  07AB  0BF2               	decfsz	??_turn_egs,f
  8183  07AC  2FA9               	goto	u7427
  8184  07AD  0000               	nop
  8185                           
  8186                           ;step_motor.c: 92: LATCbits.LATC0=0;
  8187  07AE  0022               	movlb	2	; select bank2
  8188  07AF  100E               	bcf	14,0	;volatile
  8189                           
  8190                           ;step_motor.c: 93: LATCbits.LATC3=0;
  8191  07B0  118E               	bcf	14,3	;volatile
  8192                           
  8193                           ;step_motor.c: 94: LATCbits.LATC4=1;
  8194  07B1  160E               	bsf	14,4	;volatile
  8195                           
  8196                           ;step_motor.c: 95: LATCbits.LATC5=0;
  8197  07B2  128E               	bcf	14,5	;volatile
  8198                           
  8199                           ;step_motor.c: 96: _delay((unsigned long)((5)*(18432000/4000.0)));
  8200  07B3  301E               	movlw	30
  8201  07B4  00F2               	movwf	??_turn_egs
  8202  07B5  30EB               	movlw	235
  8203  07B6                     u7437:	
  8204  07B6  0B89               	decfsz	9,f
  8205  07B7  2FB6               	goto	u7437
  8206  07B8  0BF2               	decfsz	??_turn_egs,f
  8207  07B9  2FB6               	goto	u7437
  8208  07BA  0000               	nop
  8209                           
  8210                           ;step_motor.c: 98: LATCbits.LATC0=0;
  8211  07BB  0022               	movlb	2	; select bank2
  8212  07BC  100E               	bcf	14,0	;volatile
  8213                           
  8214                           ;step_motor.c: 99: LATCbits.LATC3=0;
  8215  07BD  118E               	bcf	14,3	;volatile
  8216                           
  8217                           ;step_motor.c: 100: LATCbits.LATC4=0;
  8218  07BE  120E               	bcf	14,4	;volatile
  8219                           
  8220                           ;step_motor.c: 101: LATCbits.LATC5=1;
  8221  07BF  168E               	bsf	14,5	;volatile
  8222                           
  8223                           ;step_motor.c: 102: _delay((unsigned long)((5)*(18432000/4000.0)));
  8224  07C0  301E               	movlw	30
  8225  07C1  00F2               	movwf	??_turn_egs
  8226  07C2  30EB               	movlw	235
  8227  07C3                     u7447:	
  8228  07C3  0B89               	decfsz	9,f
  8229  07C4  2FC3               	goto	u7447
  8230  07C5  0BF2               	decfsz	??_turn_egs,f
  8231  07C6  2FC3               	goto	u7447
  8232  07C7  0000               	nop
  8233  07C8  2F46               	goto	l979
  8234  07C9                     l983:	
  8235                           
  8236                           ;step_motor.c: 112: }
  8237                           ;step_motor.c: 113: }
  8238                           ;step_motor.c: 115: LATCbits.LATC0=0;
  8239  07C9  0022               	movlb	2	; select bank2
  8240  07CA  100E               	bcf	14,0	;volatile
  8241                           
  8242                           ;step_motor.c: 116: LATCbits.LATC3=0;
  8243  07CB  118E               	bcf	14,3	;volatile
  8244                           
  8245                           ;step_motor.c: 117: LATCbits.LATC4=0;
  8246  07CC  120E               	bcf	14,4	;volatile
  8247                           
  8248                           ;step_motor.c: 118: LATCbits.LATC5=0;
  8249  07CD  128E               	bcf	14,5	;volatile
  8250                           
  8251                           ;step_motor.c: 119: if(step_nr==350)
  8252  07CE  305E               	movlw	94
  8253  07CF  0020               	movlb	0	; select bank0
  8254  07D0  0665               	xorwf	_step_nr,w
  8255  07D1  1D03               	skipz
  8256  07D2  2FDE               	goto	l5442
  8257  07D3  0366               	decf	_step_nr+1,w
  8258  07D4  1D03               	btfss	3,2
  8259  07D5  2FDE               	goto	l5442
  8260                           
  8261                           ;step_motor.c: 120: {
  8262                           ;step_motor.c: 121: flag_N=0;
  8263  07D6  0022               	movlb	2	; select bank2
  8264  07D7  01D2               	clrf	_flag_N^(0+256)
  8265  07D8  01D3               	clrf	(_flag_N+1)^(0+256)
  8266                           
  8267                           ;step_motor.c: 122: flag_G=0;
  8268  07D9  01D0               	clrf	_flag_G^(0+256)
  8269  07DA  01D1               	clrf	(_flag_G+1)^(0+256)
  8270                           
  8271                           ;step_motor.c: 123: step_nr=0;
  8272  07DB  0020               	movlb	0	; select bank0
  8273  07DC  01E5               	clrf	_step_nr
  8274  07DD  01E6               	clrf	_step_nr+1
  8275  07DE                     l5442:	
  8276                           
  8277                           ;step_motor.c: 125: }
  8278                           ;step_motor.c: 127: if(flag_directie==1)
  8279  07DE  0363               	decf	_flag_directie,w
  8280  07DF  0464               	iorwf	_flag_directie+1,w
  8281  07E0  1D03               	btfss	3,2
  8282  07E1  2FE5               	goto	l5446
  8283                           
  8284                           ;step_motor.c: 128: {
  8285                           ;step_motor.c: 129: flag_directie=0;
  8286  07E2  01E3               	clrf	_flag_directie
  8287  07E3  01E4               	clrf	_flag_directie+1
  8288                           
  8289                           ;step_motor.c: 130: }
  8290  07E4  0008               	return
  8291  07E5                     l5446:	
  8292                           
  8293                           ;step_motor.c: 131: else if(flag_directie==0)
  8294  07E5  0863               	movf	_flag_directie,w
  8295  07E6  0464               	iorwf	_flag_directie+1,w
  8296  07E7  1D03               	btfss	3,2
  8297  07E8  0008               	return
  8298                           
  8299                           ;step_motor.c: 132: {
  8300                           ;step_motor.c: 133: flag_directie=1;
  8301  07E9  3001               	movlw	1
  8302  07EA  00E3               	movwf	_flag_directie
  8303  07EB  3000               	movlw	0
  8304  07EC  00E4               	movwf	_flag_directie+1
  8305  07ED  0008               	return
  8306  07EE                     __end_of_turn_egs:	
  8307                           
  8308                           	psect	text24
  8309  161A                     __ptext24:	
  8310 ;; *************** function _eeprom_write *****************
  8311 ;; Defined at:
  8312 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eewrite.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  addr            1    wreg     unsigned char 
  8315 ;;  value           1    2[COMMON] unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  addr            1    5[COMMON] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8327 ;;      Params:         1       0       0       0       0       0       0       0
  8328 ;;      Locals:         1       0       0       0       0       0       0       0
  8329 ;;      Temps:          2       0       0       0       0       0       0       0
  8330 ;;      Totals:         4       0       0       0       0       0       0       0
  8331 ;;Total ram usage:        4 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    4
  8334 ;; This function calls:
  8335 ;;		Nothing
  8336 ;; This function is called by:
  8337 ;;		_state_of_button
  8338 ;;		_main
  8339 ;;		_command_turn
  8340 ;;		_write_eeprom_int32
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _eeprom_write
  8346  161A                     _eeprom_write:	
  8347                           
  8348                           ;incstack = 0
  8349                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  8350                           ;eeprom_write@addr stored from wreg
  8351  161A  00F5               	movwf	eeprom_write@addr
  8352  161B                     l1062:	
  8353  161B  0023               	movlb	3	; select bank3
  8354  161C  1895               	btfsc	21,1	;volsfr
  8355  161D  2E1B               	goto	l1062
  8356  161E  0875               	movf	eeprom_write@addr,w
  8357  161F  00F3               	movwf	??_eeprom_write
  8358  1620  01F4               	clrf	??_eeprom_write+1
  8359  1621  0873               	movf	??_eeprom_write,w
  8360  1622  0091               	movwf	17	;volatile
  8361  1623  0874               	movf	??_eeprom_write+1,w
  8362  1624  0092               	movwf	18	;volatile
  8363  1625  0872               	movf	eeprom_write@value,w
  8364  1626  0093               	movwf	19	;volatile
  8365  1627  303F               	movlw	63
  8366  1628  00F3               	movwf	??_eeprom_write
  8367  1629  0873               	movf	??_eeprom_write,w
  8368  162A  0595               	andwf	21,f	;volsfr
  8369  162B  0020               	movlb	0	; select bank0
  8370  162C  1003               	bcf	3,0	;volatile
  8371  162D  1B8B               	btfsc	11,7	;volatile
  8372  162E  1403               	bsf	3,0	;volatile
  8373  162F  138B               	bcf	11,7	;volatile
  8374  1630  0023               	movlb	3	; select bank3
  8375  1631  1515               	bsf	21,2	;volsfr
  8376  1632  3055               	movlw	85
  8377  1633  0096               	movwf	22	;volsfr
  8378  1634  30AA               	movlw	170
  8379  1635  0096               	movwf	22	;volsfr
  8380  1636  1495               	bsf	21,1	;volsfr
  8381  1637  1115               	bcf	21,2	;volsfr
  8382  1638  0020               	movlb	0	; select bank0
  8383  1639  1C03               	btfss	3,0	;volatile
  8384  163A  0008               	return
  8385  163B  178B               	bsf	11,7	;volatile
  8386  163C  0008               	return
  8387  163D                     __end_of_eeprom_write:	
  8388                           
  8389                           	psect	text25
  8390  150C                     __ptext25:	
  8391 ;; *************** function _eeprom_read *****************
  8392 ;; Defined at:
  8393 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eeread.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  addr            1    wreg     unsigned char 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;  addr            1    5[COMMON] unsigned char 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      unsigned char 
  8400 ;; Registers used:
  8401 ;;		wreg, status,2, status,0
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8407 ;;      Params:         0       0       0       0       0       0       0       0
  8408 ;;      Locals:         1       0       0       0       0       0       0       0
  8409 ;;      Temps:          3       0       0       0       0       0       0       0
  8410 ;;      Totals:         4       0       0       0       0       0       0       0
  8411 ;;Total ram usage:        4 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    4
  8414 ;; This function calls:
  8415 ;;		Nothing
  8416 ;; This function is called by:
  8417 ;;		_read_eeprom_int32
  8418 ;;		_state_of_button
  8419 ;;		_main
  8420 ;;		_command_turn
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _eeprom_read
  8426  150C                     _eeprom_read:	
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  8430                           ;eeprom_read@addr stored from wreg
  8431  150C  00F5               	movwf	eeprom_read@addr
  8432  150D                     l1040:	
  8433  150D  0064               	clrwdt	;# 
  8434  150E  0023               	movlb	3	; select bank3
  8435  150F  1895               	btfsc	21,1	;volsfr
  8436  1510  2D0D               	goto	l1040
  8437  1511  0875               	movf	eeprom_read@addr,w
  8438  1512  00F2               	movwf	??_eeprom_read
  8439  1513  01F3               	clrf	??_eeprom_read+1
  8440  1514  0872               	movf	??_eeprom_read,w
  8441  1515  0091               	movwf	17	;volatile
  8442  1516  0873               	movf	??_eeprom_read+1,w
  8443  1517  0092               	movwf	18	;volatile
  8444  1518  303F               	movlw	63
  8445  1519  00F4               	movwf	??_eeprom_read+2
  8446  151A  0874               	movf	??_eeprom_read+2,w
  8447  151B  0595               	andwf	21,f	;volsfr
  8448  151C  1415               	bsf	21,0	;volsfr
  8449  151D  1003               	clrc
  8450  151E  1815               	btfsc	21,0	;volsfr
  8451  151F  1403               	setc
  8452  1520  3000               	movlw	0
  8453  1521  3D09               	addwfc	9,w
  8454  1522  0813               	movf	19,w	;volatile
  8455  1523  0008               	return
  8456  1524                     __end_of_eeprom_read:	
  8457                           
  8458                           	psect	text26
  8459  14DD                     __ptext26:	
  8460 ;; *************** function _check_status_incubator *****************
  8461 ;; Defined at:
  8462 ;;		line 62 in file "gsm.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8476 ;;      Params:         0       0       0       0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0
  8479 ;;      Totals:         0       0       0       0       0       0       0       0
  8480 ;;Total ram usage:        0 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    9
  8483 ;; This function calls:
  8484 ;;		_LCDWriteString
  8485 ;;		_LCD_Init_apdatat
  8486 ;;		_sms_text
  8487 ;; This function is called by:
  8488 ;;		_main
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _check_status_incubator
  8494  14DD                     _check_status_incubator:	
  8495                           
  8496                           ;gsm.c: 64: if (flag_A==1)
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in _check_status_incubator: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8500  14DD  0023               	movlb	3	; select bank3
  8501  14DE  0355               	decf	_flag_A^(0+384),w
  8502  14DF  0456               	iorwf	(_flag_A+1)^(0+384),w
  8503  14E0  1D03               	btfss	3,2
  8504  14E1  0008               	return
  8505                           
  8506                           ;gsm.c: 65: {
  8507                           ;gsm.c: 66: if (flag_B==1)
  8508  14E2  0353               	decf	_flag_B^(0+384),w
  8509  14E3  0454               	iorwf	(_flag_B+1)^(0+384),w
  8510  14E4  1D03               	btfss	3,2
  8511  14E5  0008               	return
  8512                           
  8513                           ;gsm.c: 67: {
  8514                           ;gsm.c: 68: LCD_Init_apdatat();
  8515  14E6  3197  272F  3194   	fcall	_LCD_Init_apdatat
  8516                           
  8517                           ;gsm.c: 69: LCDWriteString(" Trimitere sms");
  8518  14E9  308A               	movlw	low (STR_21| (0+32768))
  8519  14EA  0020               	movlb	0	; select bank0
  8520  14EB  00A0               	movwf	LCDWriteString@msg
  8521  14EC  3098               	movlw	high (STR_21| (0+32768))
  8522  14ED  00A1               	movwf	LCDWriteString@msg+1
  8523  14EE  3188  2058  3194   	fcall	_LCDWriteString
  8524                           
  8525                           ;gsm.c: 70: sms_text();
  8526  14F1  318F  2767         	fcall	_sms_text
  8527  14F3  0008               	return
  8528  14F4                     __end_of_check_status_incubator:	
  8529                           
  8530                           	psect	text27
  8531  0F67                     __ptext27:	
  8532 ;; *************** function _sms_text *****************
  8533 ;; Defined at:
  8534 ;;		line 7 in file "gsm.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;		None
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  umid            1   32[BANK0 ] unsigned char 
  8539 ;;  smstext         1   31[BANK0 ] unsigned char 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  1    wreg      void 
  8542 ;; Registers used:
  8543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8549 ;;      Params:         0       0       0       0       0       0       0       0
  8550 ;;      Locals:         0       2       0       0       0       0       0       0
  8551 ;;      Temps:          0       2       0       0       0       0       0       0
  8552 ;;      Totals:         0       4       0       0       0       0       0       0
  8553 ;;Total ram usage:        4 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    8
  8556 ;; This function calls:
  8557 ;;		_printf
  8558 ;;		_putch
  8559 ;;		_sprintf
  8560 ;; This function is called by:
  8561 ;;		_check_status_incubator
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _sms_text
  8567  0F67                     _sms_text:	
  8568                           
  8569                           ;gsm.c: 12: char smstext[]="";
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _sms_text: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8573  0F67  0022               	movlb	2	; select bank2
  8574  0F68  085D               	movf	sms_text@F3770^(0+256),w
  8575  0F69  0020               	movlb	0	; select bank0
  8576  0F6A  00BD               	movwf	??_sms_text
  8577  0F6B  083D               	movf	??_sms_text,w
  8578  0F6C  00BF               	movwf	sms_text@smstext
  8579                           
  8580                           ;gsm.c: 13: char umid[]="";
  8581  0F6D  0022               	movlb	2	; select bank2
  8582  0F6E  085C               	movf	sms_text@F3772^(0+256),w
  8583  0F6F  0020               	movlb	0	; select bank0
  8584  0F70  00BD               	movwf	??_sms_text
  8585  0F71  083D               	movf	??_sms_text,w
  8586  0F72  00C0               	movwf	sms_text@umid
  8587                           
  8588                           ;gsm.c: 14: static int sms_index=0;
  8589                           ;gsm.c: 16: printf("AT+CSCS=\"GSM\"");
  8590  0F73  3099               	movlw	low (STR_12| (0+32768))
  8591  0F74  00B3               	movwf	printf@f
  8592  0F75  3098               	movlw	high (STR_12| (0+32768))
  8593  0F76  00B4               	movwf	printf@f+1
  8594  0F77  3194  24C7  318F   	fcall	_printf
  8595                           
  8596                           ;gsm.c: 17: putch(0x0d);
  8597  0F7A  300D               	movlw	13
  8598  0F7B  0020               	movlb	0	; select bank0
  8599  0F7C  00BD               	movwf	??_sms_text
  8600  0F7D  083D               	movf	??_sms_text,w
  8601  0F7E  00F4               	movwf	putch@txData
  8602  0F7F  3194  2456  318F   	fcall	_putch
  8603                           
  8604                           ;gsm.c: 18: _delay((unsigned long)((200)*(18432000/4000.0)));
  8605  0F82  3005               	movlw	5
  8606  0F83  0020               	movlb	0	; select bank0
  8607  0F84  00BE               	movwf	??_sms_text+1
  8608  0F85  30AD               	movlw	173
  8609  0F86  00BD               	movwf	??_sms_text
  8610  0F87  30DD               	movlw	221
  8611  0F88                     u7457:	
  8612  0F88  0B89               	decfsz	9,f
  8613  0F89  2F88               	goto	u7457
  8614  0F8A  0BBD               	decfsz	??_sms_text,f
  8615  0F8B  2F88               	goto	u7457
  8616  0F8C  0BBE               	decfsz	??_sms_text+1,f
  8617  0F8D  2F88               	goto	u7457
  8618                           
  8619                           ;gsm.c: 19: printf("AT+CMGS=\"0758426929\"");
  8620  0F8E  3000               	movlw	low (STR_13| (0+32768))
  8621  0F8F  0020               	movlb	0	; select bank0
  8622  0F90  00B3               	movwf	printf@f
  8623  0F91  3098               	movlw	high (STR_13| (0+32768))
  8624  0F92  00B4               	movwf	printf@f+1
  8625  0F93  3194  24C7  318F   	fcall	_printf
  8626                           
  8627                           ;gsm.c: 20: putch(0x0d);
  8628  0F96  300D               	movlw	13
  8629  0F97  0020               	movlb	0	; select bank0
  8630  0F98  00BD               	movwf	??_sms_text
  8631  0F99  083D               	movf	??_sms_text,w
  8632  0F9A  00F4               	movwf	putch@txData
  8633  0F9B  3194  2456  318F   	fcall	_putch
  8634                           
  8635                           ;gsm.c: 21: _delay((unsigned long)((600)*(18432000/4000.0)));
  8636  0F9E  300F               	movlw	15
  8637  0F9F  0020               	movlb	0	; select bank0
  8638  0FA0  00BE               	movwf	??_sms_text+1
  8639  0FA1  3007               	movlw	7
  8640  0FA2  00BD               	movwf	??_sms_text
  8641  0FA3  309A               	movlw	154
  8642  0FA4                     u7467:	
  8643  0FA4  0B89               	decfsz	9,f
  8644  0FA5  2FA4               	goto	u7467
  8645  0FA6  0BBD               	decfsz	??_sms_text,f
  8646  0FA7  2FA4               	goto	u7467
  8647  0FA8  0BBE               	decfsz	??_sms_text+1,f
  8648  0FA9  2FA4               	goto	u7467
  8649  0FAA  0000               	nop
  8650                           
  8651                           ;gsm.c: 23: sprintf(smstext," Temper=%d      ", temp);
  8652  0FAB  3038               	movlw	low (STR_14| (0+32768))
  8653  0FAC  0020               	movlb	0	; select bank0
  8654  0FAD  00B3               	movwf	sprintf@f
  8655  0FAE  3098               	movlw	high (STR_14| (0+32768))
  8656  0FAF  00B4               	movwf	sprintf@f+1
  8657  0FB0  0022               	movlb	2	; select bank2
  8658  0FB1  085B               	movf	(_temp+1)^(0+256),w
  8659  0FB2  0020               	movlb	0	; select bank0
  8660  0FB3  00B6               	movwf	?_sprintf+3
  8661  0FB4  0022               	movlb	2	; select bank2
  8662  0FB5  085A               	movf	_temp^(0+256),w
  8663  0FB6  0020               	movlb	0	; select bank0
  8664  0FB7  00B5               	movwf	?_sprintf+2
  8665  0FB8  303F               	movlw	(low (sms_text@smstext| 0))& (0+255)
  8666  0FB9  3195  2577  318F   	fcall	_sprintf
  8667                           
  8668                           ;gsm.c: 24: printf(smstext);
  8669  0FBC  303F               	movlw	low sms_text@smstext
  8670  0FBD  0020               	movlb	0	; select bank0
  8671  0FBE  00B3               	movwf	printf@f
  8672  0FBF  3000               	movlw	high sms_text@smstext
  8673  0FC0  00B4               	movwf	printf@f+1
  8674  0FC1  3194  24C7  318F   	fcall	_printf
  8675                           
  8676                           ;gsm.c: 26: sprintf(umid," Umid=%d        ",RH_byte1);
  8677  0FC4  3027               	movlw	low (STR_15| (0+32768))
  8678  0FC5  0020               	movlb	0	; select bank0
  8679  0FC6  00B3               	movwf	sprintf@f
  8680  0FC7  3098               	movlw	high (STR_15| (0+32768))
  8681  0FC8  00B4               	movwf	sprintf@f+1
  8682  0FC9  086D               	movf	_RH_byte1,w
  8683  0FCA  00BD               	movwf	??_sms_text
  8684  0FCB  01BE               	clrf	??_sms_text+1
  8685  0FCC  083D               	movf	??_sms_text,w
  8686  0FCD  00B5               	movwf	?_sprintf+2
  8687  0FCE  083E               	movf	??_sms_text+1,w
  8688  0FCF  00B6               	movwf	?_sprintf+3
  8689  0FD0  3040               	movlw	(low (sms_text@umid| 0))& (0+255)
  8690  0FD1  3195  2577  318F   	fcall	_sprintf
  8691                           
  8692                           ;gsm.c: 27: printf(umid);
  8693  0FD4  3040               	movlw	low sms_text@umid
  8694  0FD5  0020               	movlb	0	; select bank0
  8695  0FD6  00B3               	movwf	printf@f
  8696  0FD7  3000               	movlw	high sms_text@umid
  8697  0FD8  00B4               	movwf	printf@f+1
  8698  0FD9  3194  24C7  318F   	fcall	_printf
  8699                           
  8700                           ;gsm.c: 28: _delay((unsigned long)((400)*(18432000/4000.0)));
  8701  0FDC  300A               	movlw	10
  8702  0FDD  0020               	movlb	0	; select bank0
  8703  0FDE  00BE               	movwf	??_sms_text+1
  8704  0FDF  305A               	movlw	90
  8705  0FE0  00BD               	movwf	??_sms_text
  8706  0FE1  30BB               	movlw	187
  8707  0FE2                     u7477:	
  8708  0FE2  0B89               	decfsz	9,f
  8709  0FE3  2FE2               	goto	u7477
  8710  0FE4  0BBD               	decfsz	??_sms_text,f
  8711  0FE5  2FE2               	goto	u7477
  8712  0FE6  0BBE               	decfsz	??_sms_text+1,f
  8713  0FE7  2FE2               	goto	u7477
  8714  0FE8  3200               	nop2
  8715                           
  8716                           ;gsm.c: 29: putch(26);
  8717  0FE9  301A               	movlw	26
  8718  0FEA  0020               	movlb	0	; select bank0
  8719  0FEB  00BD               	movwf	??_sms_text
  8720  0FEC  083D               	movf	??_sms_text,w
  8721  0FED  00F4               	movwf	putch@txData
  8722  0FEE  3194  2456  318F   	fcall	_putch
  8723                           
  8724                           ;gsm.c: 30: putch(0x0d);
  8725  0FF1  300D               	movlw	13
  8726  0FF2  0020               	movlb	0	; select bank0
  8727  0FF3  00BD               	movwf	??_sms_text
  8728  0FF4  083D               	movf	??_sms_text,w
  8729  0FF5  00F4               	movwf	putch@txData
  8730  0FF6  3194  2456         	fcall	_putch
  8731                           
  8732                           ;gsm.c: 32: sms_index=0;
  8733  0FF8  0023               	movlb	3	; select bank3
  8734  0FF9  01B5               	clrf	sms_text@sms_index^(0+384)
  8735  0FFA  01B6               	clrf	(sms_text@sms_index+1)^(0+384)
  8736                           
  8737                           ;gsm.c: 33: flag_A=0;
  8738  0FFB  01D5               	clrf	_flag_A^(0+384)
  8739  0FFC  01D6               	clrf	(_flag_A+1)^(0+384)
  8740                           
  8741                           ;gsm.c: 34: flag_B=0;
  8742  0FFD  01D3               	clrf	_flag_B^(0+384)
  8743  0FFE  01D4               	clrf	(_flag_B+1)^(0+384)
  8744  0FFF  0008               	return
  8745  1000                     __end_of_sms_text:	
  8746                           
  8747                           	psect	text28
  8748  1577                     __ptext28:	
  8749 ;; *************** function _sprintf *****************
  8750 ;; Defined at:
  8751 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprintf.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  wh              1    wreg     PTR unsigned char 
  8754 ;;		 -> sms_text@umid(1), sms_text@smstext(1), 
  8755 ;;  f               2   19[BANK0 ] PTR const unsigned char 
  8756 ;;		 -> STR_15(17), STR_14(17), 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  wh              1   24[BANK0 ] PTR unsigned char 
  8759 ;;		 -> sms_text@umid(1), sms_text@smstext(1), 
  8760 ;;  pb              3   26[BANK0 ] struct __prbuf
  8761 ;;  ap              1   25[BANK0 ] PTR void [1]
  8762 ;;		 -> ?_sprintf(2), ?_printf(2), 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  2   19[BANK0 ] int 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8772 ;;      Params:         0       4       0       0       0       0       0       0
  8773 ;;      Locals:         0       5       0       0       0       0       0       0
  8774 ;;      Temps:          0       1       0       0       0       0       0       0
  8775 ;;      Totals:         0      10       0       0       0       0       0       0
  8776 ;;Total ram usage:       10 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    7
  8779 ;; This function calls:
  8780 ;;		__doprnt
  8781 ;; This function is called by:
  8782 ;;		_sms_text
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function _sprintf
  8788  1577                     _sprintf:	
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8792                           ;sprintf@wh stored from wreg
  8793  1577  0020               	movlb	0	; select bank0
  8794  1578  00B8               	movwf	sprintf@wh
  8795  1579  0838               	movf	sprintf@wh,w
  8796  157A  00B7               	movwf	??_sprintf
  8797  157B  0837               	movf	??_sprintf,w
  8798  157C  00BA               	movwf	sprintf@pb
  8799  157D  01BB               	clrf	low ((sprintf@pb| 0+1))
  8800  157E  01BC               	clrf	(low ((sprintf@pb| 0+1))+1)
  8801  157F  3035               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8802  1580  00B7               	movwf	??_sprintf
  8803  1581  0837               	movf	??_sprintf,w
  8804  1582  00B9               	movwf	sprintf@ap
  8805  1583  0834               	movf	sprintf@f+1,w
  8806  1584  00A7               	movwf	__doprnt@f+1
  8807  1585  0833               	movf	sprintf@f,w
  8808  1586  00A6               	movwf	__doprnt@f
  8809  1587  3039               	movlw	(low (sprintf@ap| 0))& (0+255)
  8810  1588  00B7               	movwf	??_sprintf
  8811  1589  0837               	movf	??_sprintf,w
  8812  158A  00A8               	movwf	__doprnt@ap
  8813  158B  303A               	movlw	(low (sprintf@pb| 0))& (0+255)
  8814  158C  3183  23C1         	fcall	__doprnt
  8815  158E  0020               	movlb	0	; select bank0
  8816  158F  083A               	movf	sprintf@pb,w
  8817  1590  0086               	movwf	6
  8818  1591  0187               	clrf	7
  8819  1592  0181               	clrf	1
  8820  1593  0008               	return
  8821  1594                     __end_of_sprintf:	
  8822                           ;	Return value of _sprintf is never used
  8823                           
  8824                           
  8825                           	psect	text29
  8826  14C7                     __ptext29:	
  8827 ;; *************** function _printf *****************
  8828 ;; Defined at:
  8829 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\printf.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;  f               2   19[BANK0 ] PTR const unsigned char 
  8832 ;;		 -> STR_20(14), STR_19(18), STR_18(10), STR_17(15), 
  8833 ;;		 -> STR_16(3), STR_13(21), STR_12(14), sms_text@umid(1), 
  8834 ;;		 -> sms_text@smstext(1), 
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;  pb              3   23[BANK0 ] struct __prbuf
  8837 ;;  ap              1   22[BANK0 ] PTR void [1]
  8838 ;;		 -> ?_sprintf(2), ?_printf(2), 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  2   19[BANK0 ] int 
  8841 ;; Registers used:
  8842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8848 ;;      Params:         0       2       0       0       0       0       0       0
  8849 ;;      Locals:         0       4       0       0       0       0       0       0
  8850 ;;      Temps:          0       1       0       0       0       0       0       0
  8851 ;;      Totals:         0       7       0       0       0       0       0       0
  8852 ;;Total ram usage:        7 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    7
  8855 ;; This function calls:
  8856 ;;		__doprnt
  8857 ;; This function is called by:
  8858 ;;		_sms_text
  8859 ;;		_int_gsm
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           
  8864                           ;psect for function _printf
  8865  14C7                     _printf:	
  8866                           
  8867                           ;incstack = 0
  8868                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8869  14C7  0020               	movlb	0	; select bank0
  8870  14C8  01B7               	clrf	printf@pb
  8871  14C9  3056               	movlw	low _putch
  8872  14CA  00B8               	movwf	low ((printf@pb| 0+1))
  8873  14CB  3014               	movlw	high _putch
  8874  14CC  00B9               	movwf	(low ((printf@pb| 0+1))+1)
  8875  14CD  3035               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8876  14CE  00B5               	movwf	??_printf
  8877  14CF  0835               	movf	??_printf,w
  8878  14D0  00B6               	movwf	printf@ap
  8879                           
  8880                           ;	Return value of _printf is never used
  8881  14D1  0834               	movf	printf@f+1,w
  8882  14D2  00A7               	movwf	__doprnt@f+1
  8883  14D3  0833               	movf	printf@f,w
  8884  14D4  00A6               	movwf	__doprnt@f
  8885  14D5  3036               	movlw	(low (printf@ap| 0))& (0+255)
  8886  14D6  00B5               	movwf	??_printf
  8887  14D7  0835               	movf	??_printf,w
  8888  14D8  00A8               	movwf	__doprnt@ap
  8889  14D9  3037               	movlw	(low (printf@pb| 0))& (0+255)
  8890  14DA  3183  23C1         	fcall	__doprnt
  8891  14DC  0008               	return
  8892  14DD                     __end_of_printf:	
  8893                           
  8894                           	psect	text30
  8895  03C1                     __ptext30:	
  8896 ;; *************** function __doprnt *****************
  8897 ;; Defined at:
  8898 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  pb              1    wreg     PTR struct __prbuf
  8901 ;;		 -> sprintf@pb(3), printf@pb(3), 
  8902 ;;  f               2    6[BANK0 ] PTR const unsigned char 
  8903 ;;		 -> STR_20(14), STR_19(18), STR_18(10), STR_17(15), 
  8904 ;;		 -> STR_16(3), STR_15(17), STR_14(17), STR_13(21), 
  8905 ;;		 -> STR_12(14), sms_text@umid(1), sms_text@smstext(1), 
  8906 ;;  ap              1    8[BANK0 ] PTR PTR void 
  8907 ;;		 -> sprintf@ap(1), printf@ap(1), 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  pb              1   18[BANK0 ] PTR struct __prbuf
  8910 ;;		 -> sprintf@pb(3), printf@pb(3), 
  8911 ;;  tmpval          4    0        struct .
  8912 ;;  val             2   15[BANK0 ] unsigned int 
  8913 ;;  cp              2    0        PTR const unsigned char 
  8914 ;;  len             2    0        unsigned int 
  8915 ;;  c               1   17[BANK0 ] char 
  8916 ;;  prec            1   14[BANK0 ] char 
  8917 ;;  flag            1   13[BANK0 ] unsigned char 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  2    6[BANK0 ] int 
  8920 ;; Registers used:
  8921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8927 ;;      Params:         0       3       0       0       0       0       0       0
  8928 ;;      Locals:         0       6       0       0       0       0       0       0
  8929 ;;      Temps:          0       4       0       0       0       0       0       0
  8930 ;;      Totals:         0      13       0       0       0       0       0       0
  8931 ;;Total ram usage:       13 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    6
  8934 ;; This function calls:
  8935 ;;		Absolute function
  8936 ;;		___lwdiv
  8937 ;;		___lwmod
  8938 ;;		_putch
  8939 ;; This function is called by:
  8940 ;;		_printf
  8941 ;;		_sprintf
  8942 ;; This function uses a non-reentrant model
  8943 ;;
  8944                           
  8945                           
  8946                           ;psect for function __doprnt
  8947  03C1                     __doprnt:	
  8948                           
  8949                           ;incstack = 0
  8950                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8951                           ;__doprnt@pb stored from wreg
  8952  03C1  0020               	movlb	0	; select bank0
  8953  03C2  00B2               	movwf	__doprnt@pb
  8954  03C3                     l4954:	
  8955                           ;doprnt.c: 499: signed char c;
  8956                           ;doprnt.c: 506: signed char prec;
  8957                           ;doprnt.c: 508: unsigned char flag;
  8958                           ;doprnt.c: 523: union {
  8959                           ;doprnt.c: 524: unsigned long vd;
  8960                           ;doprnt.c: 525: double integ;
  8961                           ;doprnt.c: 526: } tmpval;
  8962                           ;doprnt.c: 528: unsigned int val;
  8963                           ;doprnt.c: 529: unsigned len;
  8964                           ;doprnt.c: 530: const char * cp;
  8965                           ;doprnt.c: 536: while(c = *f++) {
  8966                           
  8967  03C3  0020               	movlb	0	; select bank0
  8968  03C4  0827               	movf	__doprnt@f+1,w
  8969  03C5  00AA               	movwf	??__doprnt+1
  8970  03C6  0826               	movf	__doprnt@f,w
  8971  03C7  00A9               	movwf	??__doprnt
  8972  03C8  0AA6               	incf	__doprnt@f,f
  8973  03C9  1903               	skipnz
  8974  03CA  0AA7               	incf	__doprnt@f+1,f
  8975  03CB  0829               	movf	??__doprnt,w
  8976  03CC  0084               	movwf	4
  8977  03CD  082A               	movf	??__doprnt+1,w
  8978  03CE  0085               	movwf	5
  8979  03CF  0800               	movf	0,w	;code access
  8980  03D0  00AB               	movwf	??__doprnt+2
  8981  03D1  082B               	movf	??__doprnt+2,w
  8982  03D2  00B1               	movwf	__doprnt@c
  8983  03D3  0831               	movf	__doprnt@c,w
  8984  03D4  1903               	btfsc	3,2
  8985  03D5  2CF0               	goto	l4956
  8986                           
  8987                           ;doprnt.c: 538: if(c != '%')
  8988  03D6  3025               	movlw	37
  8989  03D7  0631               	xorwf	__doprnt@c,w
  8990  03D8  1903               	btfsc	3,2
  8991  03D9  2BEE               	goto	l4896
  8992                           
  8993                           ;doprnt.c: 540: {
  8994                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  8995  03DA  0A32               	incf	__doprnt@pb,w
  8996  03DB  0086               	movwf	6
  8997  03DC  0187               	clrf	7
  8998  03DD  0016               	moviw fsr1++
  8999  03DE  0401               	iorwf	1,w
  9000  03DF  1903               	btfsc	3,2
  9001  03E0  2C04               	goto	l4902
  9002  03E1  0831               	movf	__doprnt@c,w
  9003  03E2  00A9               	movwf	??__doprnt
  9004  03E3  0829               	movf	??__doprnt,w
  9005  03E4  00F4               	movwf	putch@txData
  9006  03E5  0A32               	incf	__doprnt@pb,w
  9007  03E6  0086               	movwf	6
  9008  03E7  0187               	clrf	7
  9009  03E8  3F41               	moviw [1]fsr1
  9010  03E9  008A               	movwf	10
  9011  03EA  3F40               	moviw [0]fsr1
  9012  03EB  000A               	callw
  9013  03EC  3183               	pagesel	$
  9014  03ED  2BC3               	goto	l4954
  9015  03EE                     l4896:	
  9016                           ;doprnt.c: 542: continue;
  9017                           
  9018                           
  9019                           ;doprnt.c: 543: }
  9020                           ;doprnt.c: 548: flag = 0;
  9021  03EE  01AD               	clrf	__doprnt@flag
  9022                           
  9023                           ;doprnt.c: 635: switch(c = *f++) {
  9024  03EF  2C17               	goto	l4908
  9025  03F0                     l4898:	
  9026                           ;doprnt.c: 802: default:
  9027                           
  9028                           ;doprnt.c: 698: case 'i':
  9029                           ;doprnt.c: 699: break;
  9030                           
  9031                           ;doprnt.c: 697: case 'd':
  9032                           
  9033                           ;doprnt.c: 638: goto alldone;
  9034                           
  9035                           ;doprnt.c: 637: case 0:
  9036                           
  9037                           
  9038                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9039  03F0  0A32               	incf	__doprnt@pb,w
  9040  03F1  0086               	movwf	6
  9041  03F2  0187               	clrf	7
  9042  03F3  0016               	moviw fsr1++
  9043  03F4  0401               	iorwf	1,w
  9044  03F5  1903               	btfsc	3,2
  9045  03F6  2C04               	goto	l4902
  9046  03F7  0831               	movf	__doprnt@c,w
  9047  03F8  00A9               	movwf	??__doprnt
  9048  03F9  0829               	movf	??__doprnt,w
  9049  03FA  00F4               	movwf	putch@txData
  9050  03FB  0A32               	incf	__doprnt@pb,w
  9051  03FC  0086               	movwf	6
  9052  03FD  0187               	clrf	7
  9053  03FE  3F41               	moviw [1]fsr1
  9054  03FF  008A               	movwf	10
  9055  0400  3F40               	moviw [0]fsr1
  9056  0401  000A               	callw
  9057  0402  3183               	pagesel	$
  9058  0403  2BC3               	goto	l4954
  9059  0404                     l4902:	
  9060  0404  0020               	movlb	0	; select bank0
  9061  0405  0831               	movf	__doprnt@c,w
  9062  0406  00A9               	movwf	??__doprnt
  9063  0407  0832               	movf	__doprnt@pb,w
  9064  0408  0086               	movwf	6
  9065  0409  0187               	clrf	7
  9066  040A  0801               	movf	1,w
  9067  040B  0086               	movwf	6
  9068  040C  0187               	clrf	7
  9069  040D  0829               	movf	??__doprnt,w
  9070  040E  0081               	movwf	1
  9071  040F  3001               	movlw	1
  9072  0410  00A9               	movwf	??__doprnt
  9073  0411  0832               	movf	__doprnt@pb,w
  9074  0412  0086               	movwf	6
  9075  0413  0187               	clrf	7
  9076  0414  0829               	movf	??__doprnt,w
  9077  0415  0781               	addwf	1,f
  9078                           
  9079                           ;doprnt.c: 810: continue;
  9080  0416  2BC3               	goto	l4954
  9081  0417                     l4908:	
  9082                           ;doprnt.c: 822: }
  9083                           
  9084  0417  0827               	movf	__doprnt@f+1,w
  9085  0418  00AA               	movwf	??__doprnt+1
  9086  0419  0826               	movf	__doprnt@f,w
  9087  041A  00A9               	movwf	??__doprnt
  9088  041B  0AA6               	incf	__doprnt@f,f
  9089  041C  1903               	skipnz
  9090  041D  0AA7               	incf	__doprnt@f+1,f
  9091  041E  0829               	movf	??__doprnt,w
  9092  041F  0084               	movwf	4
  9093  0420  082A               	movf	??__doprnt+1,w
  9094  0421  0085               	movwf	5
  9095  0422  0800               	movf	0,w	;code access
  9096  0423  00B1               	movwf	__doprnt@c
  9097                           
  9098                           ; Switch size 1, requested type "space"
  9099                           ; Number of cases is 3, Range of values is 0 to 105
  9100                           ; switch strategies available:
  9101                           ; Name         Instructions Cycles
  9102                           ; simple_byte           10     6 (average)
  9103                           ; direct_byte          218     6 (fixed)
  9104                           ; jumptable            260     6 (fixed)
  9105                           ;	Chosen strategy is simple_byte
  9106  0424  3A00               	xorlw	0	; case 0
  9107  0425  1903               	skipnz
  9108  0426  2CF0               	goto	l4956
  9109  0427  3A64               	xorlw	100	; case 100
  9110  0428  1903               	skipnz
  9111  0429  2C2E               	goto	l4910
  9112  042A  3A0D               	xorlw	13	; case 105
  9113  042B  1903               	skipnz
  9114  042C  2C2E               	goto	l4910
  9115  042D  2BF0               	goto	l4898
  9116  042E                     l4910:	
  9117                           
  9118                           ;doprnt.c: 1253: {
  9119                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9120  042E  0828               	movf	__doprnt@ap,w
  9121  042F  0086               	movwf	6
  9122  0430  0187               	clrf	7
  9123  0431  0801               	movf	1,w
  9124  0432  0084               	movwf	4
  9125  0433  0185               	clrf	5
  9126  0434  3002               	movlw	2
  9127  0435  0781               	addwf	1,f
  9128  0436  3F00               	moviw [0]fsr0
  9129  0437  00AF               	movwf	__doprnt@val
  9130  0438  3F01               	moviw [1]fsr0
  9131  0439  00B0               	movwf	__doprnt@val+1
  9132                           
  9133                           ;doprnt.c: 1261: if((int)val < 0) {
  9134  043A  1FB0               	btfss	__doprnt@val+1,7
  9135  043B  2C45               	goto	l4918
  9136                           
  9137                           ;doprnt.c: 1262: flag |= 0x03;
  9138  043C  3003               	movlw	3
  9139  043D  00A9               	movwf	??__doprnt
  9140  043E  0829               	movf	??__doprnt,w
  9141  043F  04AD               	iorwf	__doprnt@flag,f
  9142                           
  9143                           ;doprnt.c: 1263: val = -val;
  9144  0440  09AF               	comf	__doprnt@val,f
  9145  0441  09B0               	comf	__doprnt@val+1,f
  9146  0442  0AAF               	incf	__doprnt@val,f
  9147  0443  1903               	skipnz
  9148  0444  0AB0               	incf	__doprnt@val+1,f
  9149  0445                     l4918:	
  9150                           
  9151                           ;doprnt.c: 1264: }
  9152                           ;doprnt.c: 1266: }
  9153                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9154  0445  01B1               	clrf	__doprnt@c
  9155  0446  0AB1               	incf	__doprnt@c,f
  9156  0447  3005               	movlw	5
  9157  0448  0631               	xorwf	__doprnt@c,w
  9158  0449  1903               	btfsc	3,2
  9159  044A  2C6A               	goto	l4930
  9160  044B                     l4924:	
  9161                           
  9162                           ;doprnt.c: 1306: if(val < dpowers[c])
  9163  044B  0831               	movf	__doprnt@c,w
  9164  044C  00A9               	movwf	??__doprnt
  9165  044D  01AA               	clrf	??__doprnt+1
  9166  044E  35A9               	lslf	??__doprnt,f
  9167  044F  0DAA               	rlf	??__doprnt+1,f
  9168  0450  30B5               	movlw	low (_dpowers| (0+32768))
  9169  0451  0729               	addwf	??__doprnt,w
  9170  0452  0084               	movwf	4
  9171  0453  3098               	movlw	high (_dpowers| (0+32768))
  9172  0454  3D2A               	addwfc	??__doprnt+1,w
  9173  0455  0085               	movwf	5
  9174  0456  3F00               	moviw [0]fsr0
  9175  0457  00AB               	movwf	??__doprnt+2
  9176  0458  3F01               	moviw [1]fsr0
  9177  0459  00AC               	movwf	??__doprnt+3
  9178  045A  082C               	movf	??__doprnt+3,w
  9179  045B  0230               	subwf	__doprnt@val+1,w
  9180  045C  1D03               	skipz
  9181  045D  2C60               	goto	u5325
  9182  045E  082B               	movf	??__doprnt+2,w
  9183  045F  022F               	subwf	__doprnt@val,w
  9184  0460                     u5325:	
  9185  0460  1C03               	btfss	3,0
  9186  0461  2C6A               	goto	l4930
  9187                           
  9188                           ;doprnt.c: 1307: break;
  9189  0462  3001               	movlw	1
  9190  0463  00A9               	movwf	??__doprnt
  9191  0464  0829               	movf	??__doprnt,w
  9192  0465  07B1               	addwf	__doprnt@c,f
  9193  0466  3005               	movlw	5
  9194  0467  0631               	xorwf	__doprnt@c,w
  9195  0468  1D03               	btfss	3,2
  9196  0469  2C4B               	goto	l4924
  9197  046A                     l4930:	
  9198                           
  9199                           ;doprnt.c: 1422: {
  9200                           ;doprnt.c: 1438: if(flag & 0x03)
  9201  046A  082D               	movf	__doprnt@flag,w
  9202  046B  3903               	andlw	3
  9203  046C  1903               	btfsc	3,2
  9204  046D  2C94               	goto	l4940
  9205                           
  9206                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  9207  046E  0A32               	incf	__doprnt@pb,w
  9208  046F  0086               	movwf	6
  9209  0470  0187               	clrf	7
  9210  0471  0016               	moviw fsr1++
  9211  0472  0401               	iorwf	1,w
  9212  0473  1903               	btfsc	3,2
  9213  0474  2C82               	goto	l4936
  9214  0475  302D               	movlw	45
  9215  0476  00A9               	movwf	??__doprnt
  9216  0477  0829               	movf	??__doprnt,w
  9217  0478  00F4               	movwf	putch@txData
  9218  0479  0A32               	incf	__doprnt@pb,w
  9219  047A  0086               	movwf	6
  9220  047B  0187               	clrf	7
  9221  047C  3F41               	moviw [1]fsr1
  9222  047D  008A               	movwf	10
  9223  047E  3F40               	moviw [0]fsr1
  9224  047F  000A               	callw
  9225  0480  3183               	pagesel	$
  9226  0481  2C94               	goto	l4940
  9227  0482                     l4936:	
  9228  0482  302D               	movlw	45
  9229  0483  0020               	movlb	0	; select bank0
  9230  0484  00A9               	movwf	??__doprnt
  9231  0485  0832               	movf	__doprnt@pb,w
  9232  0486  0086               	movwf	6
  9233  0487  0187               	clrf	7
  9234  0488  0801               	movf	1,w
  9235  0489  0086               	movwf	6
  9236  048A  0187               	clrf	7
  9237  048B  0829               	movf	??__doprnt,w
  9238  048C  0081               	movwf	1
  9239  048D  3001               	movlw	1
  9240  048E  00A9               	movwf	??__doprnt
  9241  048F  0832               	movf	__doprnt@pb,w
  9242  0490  0086               	movwf	6
  9243  0491  0187               	clrf	7
  9244  0492  0829               	movf	??__doprnt,w
  9245  0493  0781               	addwf	1,f
  9246  0494                     l4940:	
  9247                           
  9248                           ;doprnt.c: 1469: }
  9249                           ;doprnt.c: 1472: prec = c;
  9250  0494  0020               	movlb	0	; select bank0
  9251  0495  0831               	movf	__doprnt@c,w
  9252  0496  00A9               	movwf	??__doprnt
  9253  0497  0829               	movf	??__doprnt,w
  9254  0498  00AE               	movwf	__doprnt@prec
  9255  0499                     l4952:	
  9256                           ;doprnt.c: 1474: while(prec--) {
  9257                           
  9258  0499  30FF               	movlw	255
  9259  049A  0020               	movlb	0	; select bank0
  9260  049B  00A9               	movwf	??__doprnt
  9261  049C  0829               	movf	??__doprnt,w
  9262  049D  07AE               	addwf	__doprnt@prec,f
  9263  049E  0A2E               	incf	__doprnt@prec,w
  9264  049F  1903               	btfsc	3,2
  9265  04A0  2BC3               	goto	l4954
  9266                           
  9267                           ;doprnt.c: 1478: {
  9268                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9269  04A1  300A               	movlw	10
  9270  04A2  00A0               	movwf	___lwmod@divisor
  9271  04A3  3000               	movlw	0
  9272  04A4  00A1               	movwf	___lwmod@divisor+1
  9273  04A5  082E               	movf	__doprnt@prec,w
  9274  04A6  00A9               	movwf	??__doprnt
  9275  04A7  01AA               	clrf	??__doprnt+1
  9276  04A8  35A9               	lslf	??__doprnt,f
  9277  04A9  0DAA               	rlf	??__doprnt+1,f
  9278  04AA  30B5               	movlw	low (_dpowers| (0+32768))
  9279  04AB  0729               	addwf	??__doprnt,w
  9280  04AC  0084               	movwf	4
  9281  04AD  3098               	movlw	high (_dpowers| (0+32768))
  9282  04AE  3D2A               	addwfc	??__doprnt+1,w
  9283  04AF  0085               	movwf	5
  9284  04B0  3F00               	moviw [0]fsr0
  9285  04B1  00F2               	movwf	___lwdiv@divisor
  9286  04B2  3F01               	moviw [1]fsr0
  9287  04B3  00F3               	movwf	___lwdiv@divisor+1
  9288  04B4  0830               	movf	__doprnt@val+1,w
  9289  04B5  00F5               	movwf	___lwdiv@dividend+1
  9290  04B6  082F               	movf	__doprnt@val,w
  9291  04B7  00F4               	movwf	___lwdiv@dividend
  9292  04B8  3197  275F  3183   	fcall	___lwdiv
  9293  04BB  0873               	movf	?___lwdiv+1,w
  9294  04BC  0020               	movlb	0	; select bank0
  9295  04BD  00A3               	movwf	___lwmod@dividend+1
  9296  04BE  0872               	movf	?___lwdiv,w
  9297  04BF  00A2               	movwf	___lwmod@dividend
  9298  04C0  3197  2702  3183   	fcall	___lwmod
  9299  04C3  0020               	movlb	0	; select bank0
  9300  04C4  0820               	movf	?___lwmod,w
  9301  04C5  3E30               	addlw	48
  9302  04C6  00AB               	movwf	??__doprnt+2
  9303  04C7  082B               	movf	??__doprnt+2,w
  9304  04C8  00B1               	movwf	__doprnt@c
  9305                           
  9306                           ;doprnt.c: 1523: }
  9307                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9308  04C9  0A32               	incf	__doprnt@pb,w
  9309  04CA  0086               	movwf	6
  9310  04CB  0187               	clrf	7
  9311  04CC  0016               	moviw fsr1++
  9312  04CD  0401               	iorwf	1,w
  9313  04CE  1903               	btfsc	3,2
  9314  04CF  2CDD               	goto	l4948
  9315  04D0  0831               	movf	__doprnt@c,w
  9316  04D1  00A9               	movwf	??__doprnt
  9317  04D2  0829               	movf	??__doprnt,w
  9318  04D3  00F4               	movwf	putch@txData
  9319  04D4  0A32               	incf	__doprnt@pb,w
  9320  04D5  0086               	movwf	6
  9321  04D6  0187               	clrf	7
  9322  04D7  3F41               	moviw [1]fsr1
  9323  04D8  008A               	movwf	10
  9324  04D9  3F40               	moviw [0]fsr1
  9325  04DA  000A               	callw
  9326  04DB  3183               	pagesel	$
  9327  04DC  2C99               	goto	l4952
  9328  04DD                     l4948:	
  9329  04DD  0020               	movlb	0	; select bank0
  9330  04DE  0831               	movf	__doprnt@c,w
  9331  04DF  00A9               	movwf	??__doprnt
  9332  04E0  0832               	movf	__doprnt@pb,w
  9333  04E1  0086               	movwf	6
  9334  04E2  0187               	clrf	7
  9335  04E3  0801               	movf	1,w
  9336  04E4  0086               	movwf	6
  9337  04E5  0187               	clrf	7
  9338  04E6  0829               	movf	??__doprnt,w
  9339  04E7  0081               	movwf	1
  9340  04E8  3001               	movlw	1
  9341  04E9  00A9               	movwf	??__doprnt
  9342  04EA  0832               	movf	__doprnt@pb,w
  9343  04EB  0086               	movwf	6
  9344  04EC  0187               	clrf	7
  9345  04ED  0829               	movf	??__doprnt,w
  9346  04EE  0781               	addwf	1,f
  9347  04EF  2C99               	goto	l4952
  9348  04F0                     l4956:	
  9349                           ;doprnt.c: 1525: }
  9350                           ;doprnt.c: 1533: }
  9351                           ;doprnt.c: 1535: alldone:
  9352                           
  9353                           
  9354                           ;doprnt.c: 1540: return 0;
  9355  04F0  01A6               	clrf	?__doprnt
  9356  04F1  01A7               	clrf	?__doprnt+1
  9357  04F2  0008               	return
  9358  04F3                     __end_of__doprnt:	
  9359                           
  9360                           	psect	text31
  9361  1456                     __ptext31:	
  9362 ;; *************** function _putch *****************
  9363 ;; Defined at:
  9364 ;;		line 161 in file "mcc_generated_files/eusart.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  txData          1    4[COMMON] unsigned char 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9378 ;;      Params:         1       0       0       0       0       0       0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0
  9381 ;;      Totals:         1       0       0       0       0       0       0       0
  9382 ;;Total ram usage:        1 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    5
  9385 ;; This function calls:
  9386 ;;		_EUSART_Write
  9387 ;; This function is called by:
  9388 ;;		_sms_text
  9389 ;;		_int_gsm
  9390 ;;		_printf
  9391 ;;		__doprnt
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _putch
  9397  1456                     _putch:	
  9398                           
  9399                           ;eusart.c: 163: EUSART_Write(txData);
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9403  1456  0874               	movf	putch@txData,w
  9404  1457  3196  2661         	fcall	_EUSART_Write
  9405  1459  0008               	return
  9406  145A                     __end_of_putch:	
  9407                           
  9408                           	psect	text32
  9409  1661                     __ptext32:	
  9410 ;; *************** function _EUSART_Write *****************
  9411 ;; Defined at:
  9412 ;;		line 133 in file "mcc_generated_files/eusart.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  txData          1    wreg     unsigned char 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  txData          1    3[COMMON] unsigned char 
  9417 ;; Return value:  Size  Location     Type
  9418 ;;                  1    wreg      void 
  9419 ;; Registers used:
  9420 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9426 ;;      Params:         0       0       0       0       0       0       0       0
  9427 ;;      Locals:         1       0       0       0       0       0       0       0
  9428 ;;      Temps:          1       0       0       0       0       0       0       0
  9429 ;;      Totals:         2       0       0       0       0       0       0       0
  9430 ;;Total ram usage:        2 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:    4
  9433 ;; This function calls:
  9434 ;;		Nothing
  9435 ;; This function is called by:
  9436 ;;		_putch
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           
  9441                           ;psect for function _EUSART_Write
  9442  1661                     _EUSART_Write:	
  9443                           
  9444                           ;incstack = 0
  9445                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9446                           ;EUSART_Write@txData stored from wreg
  9447  1661  00F3               	movwf	EUSART_Write@txData
  9448  1662                     l4786:	
  9449                           ;eusart.c: 136: {
  9450                           
  9451                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  9452                           
  9453  1662  0022               	movlb	2	; select bank2
  9454  1663  086D               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  9455  1664  1903               	btfsc	3,2
  9456  1665  2E62               	goto	l4786
  9457                           
  9458                           ;eusart.c: 137: }
  9459                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  9460  1666  0021               	movlb	1	; select bank1
  9461  1667  1A11               	btfsc	17,4	;volatile
  9462  1668  2E6D               	goto	l169
  9463                           
  9464                           ;eusart.c: 140: {
  9465                           ;eusart.c: 141: TXREG = txData;
  9466  1669  0873               	movf	EUSART_Write@txData,w
  9467  166A  0023               	movlb	3	; select bank3
  9468  166B  009A               	movwf	26	;volatile
  9469                           
  9470                           ;eusart.c: 142: }
  9471  166C  2E83               	goto	l4800
  9472  166D                     l169:	
  9473                           
  9474                           ;eusart.c: 143: else
  9475                           ;eusart.c: 144: {
  9476                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  9477  166D  1211               	bcf	17,4	;volatile
  9478                           
  9479                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  9480  166E  0873               	movf	EUSART_Write@txData,w
  9481  166F  00F2               	movwf	??_EUSART_Write
  9482  1670  0020               	movlb	0	; select bank0
  9483  1671  086B               	movf	_eusartTxHead,w
  9484  1672  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  9485  1673  0086               	movwf	6
  9486  1674  3001               	movlw	1	; select bank3/4
  9487  1675  0087               	movwf	7
  9488  1676  0872               	movf	??_EUSART_Write,w
  9489  1677  0081               	movwf	1
  9490  1678  3001               	movlw	1
  9491  1679  00F2               	movwf	??_EUSART_Write
  9492  167A  0872               	movf	??_EUSART_Write,w
  9493  167B  07EB               	addwf	_eusartTxHead,f	;volatile
  9494                           
  9495                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  9496  167C  3008               	movlw	8
  9497  167D  026B               	subwf	_eusartTxHead,w	;volatile
  9498  167E  1803               	btfsc	3,0
  9499                           
  9500                           ;eusart.c: 148: {
  9501                           ;eusart.c: 149: eusartTxHead = 0;
  9502  167F  01EB               	clrf	_eusartTxHead	;volatile
  9503                           
  9504                           ;eusart.c: 150: }
  9505                           ;eusart.c: 151: eusartTxBufferRemaining--;
  9506  1680  3001               	movlw	1
  9507  1681  0022               	movlb	2	; select bank2
  9508  1682  02ED               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  9509  1683                     l4800:	
  9510                           
  9511                           ;eusart.c: 152: }
  9512                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  9513  1683  0021               	movlb	1	; select bank1
  9514  1684  1611               	bsf	17,4	;volatile
  9515  1685  0008               	return
  9516  1686                     __end_of_EUSART_Write:	
  9517                           
  9518                           	psect	text33
  9519  1702                     __ptext33:	
  9520 ;; *************** function ___lwmod *****************
  9521 ;; Defined at:
  9522 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  divisor         2    0[BANK0 ] unsigned int 
  9525 ;;  dividend        2    2[BANK0 ] unsigned int 
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;  counter         1    5[BANK0 ] unsigned char 
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  2    0[BANK0 ] unsigned int 
  9530 ;; Registers used:
  9531 ;;		wreg, status,2, status,0
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9537 ;;      Params:         0       4       0       0       0       0       0       0
  9538 ;;      Locals:         0       1       0       0       0       0       0       0
  9539 ;;      Temps:          0       1       0       0       0       0       0       0
  9540 ;;      Totals:         0       6       0       0       0       0       0       0
  9541 ;;Total ram usage:        6 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    4
  9544 ;; This function calls:
  9545 ;;		Nothing
  9546 ;; This function is called by:
  9547 ;;		__doprnt
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           
  9552                           ;psect for function ___lwmod
  9553  1702                     ___lwmod:	
  9554                           
  9555                           ;incstack = 0
  9556                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9557  1702  0020               	movlb	0	; select bank0
  9558  1703  0820               	movf	___lwmod@divisor,w
  9559  1704  0421               	iorwf	___lwmod@divisor+1,w
  9560  1705  1903               	btfsc	3,2
  9561  1706  2F2A               	goto	l4848
  9562  1707  01A5               	clrf	___lwmod@counter
  9563  1708  0AA5               	incf	___lwmod@counter,f
  9564  1709                     l4838:	
  9565  1709  1BA1               	btfsc	___lwmod@divisor+1,7
  9566  170A  2F15               	goto	l4840
  9567  170B  3001               	movlw	1
  9568  170C                     u5205:	
  9569  170C  35A0               	lslf	___lwmod@divisor,f
  9570  170D  0DA1               	rlf	___lwmod@divisor+1,f
  9571  170E  0B89               	decfsz	9,f
  9572  170F  2F0C               	goto	u5205
  9573  1710  3001               	movlw	1
  9574  1711  00A4               	movwf	??___lwmod
  9575  1712  0824               	movf	??___lwmod,w
  9576  1713  07A5               	addwf	___lwmod@counter,f
  9577  1714  2F09               	goto	l4838
  9578  1715                     l4840:	
  9579  1715  0821               	movf	___lwmod@divisor+1,w
  9580  1716  0223               	subwf	___lwmod@dividend+1,w
  9581  1717  1D03               	skipz
  9582  1718  2F1B               	goto	u5225
  9583  1719  0820               	movf	___lwmod@divisor,w
  9584  171A  0222               	subwf	___lwmod@dividend,w
  9585  171B                     u5225:	
  9586  171B  1C03               	skipc
  9587  171C  2F21               	goto	l4844
  9588  171D  0820               	movf	___lwmod@divisor,w
  9589  171E  02A2               	subwf	___lwmod@dividend,f
  9590  171F  0821               	movf	___lwmod@divisor+1,w
  9591  1720  3BA3               	subwfb	___lwmod@dividend+1,f
  9592  1721                     l4844:	
  9593  1721  3001               	movlw	1
  9594  1722                     u5235:	
  9595  1722  36A1               	lsrf	___lwmod@divisor+1,f
  9596  1723  0CA0               	rrf	___lwmod@divisor,f
  9597  1724  0B89               	decfsz	9,f
  9598  1725  2F22               	goto	u5235
  9599  1726  3001               	movlw	1
  9600  1727  02A5               	subwf	___lwmod@counter,f
  9601  1728  1D03               	btfss	3,2
  9602  1729  2F15               	goto	l4840
  9603  172A                     l4848:	
  9604  172A  0823               	movf	___lwmod@dividend+1,w
  9605  172B  00A1               	movwf	?___lwmod+1
  9606  172C  0822               	movf	___lwmod@dividend,w
  9607  172D  00A0               	movwf	?___lwmod
  9608  172E  0008               	return
  9609  172F                     __end_of___lwmod:	
  9610                           
  9611                           	psect	text34
  9612  172F                     __ptext34:	
  9613 ;; *************** function _LCD_Init_apdatat *****************
  9614 ;; Defined at:
  9615 ;;		line 108 in file "lcd_hd44780_pic16.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      void 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0, pclath, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9629 ;;      Params:         0       0       0       0       0       0       0       0
  9630 ;;      Locals:         0       0       0       0       0       0       0       0
  9631 ;;      Temps:          0       2       0       0       0       0       0       0
  9632 ;;      Totals:         0       2       0       0       0       0       0       0
  9633 ;;Total ram usage:        2 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    5
  9636 ;; This function calls:
  9637 ;;		_LCDByte
  9638 ;; This function is called by:
  9639 ;;		_afisare_inf_lcd
  9640 ;;		_setare_temperatura
  9641 ;;		_state_of_button
  9642 ;;		_main
  9643 ;;		_check_status_incubator
  9644 ;;		_command_turn
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function _LCD_Init_apdatat
  9650  172F                     _LCD_Init_apdatat:	
  9651                           
  9652                           ;lcd_hd44780_pic16.c: 110: TRISB= 0;
  9653                           
  9654                           ;incstack = 0
  9655                           ; Regs used in _LCD_Init_apdatat: [wreg+status,2+status,0+pclath+cstack]
  9656  172F  0021               	movlb	1	; select bank1
  9657  1730  018D               	clrf	13	;volatile
  9658                           
  9659                           ;lcd_hd44780_pic16.c: 111: _delay((unsigned long)((100)*(18432000/4000.0)));
  9660  1731  3003               	movlw	3
  9661  1732  0020               	movlb	0	; select bank0
  9662  1733  00A1               	movwf	??_LCD_Init_apdatat+1
  9663  1734  3057               	movlw	87
  9664  1735  00A0               	movwf	??_LCD_Init_apdatat
  9665  1736  306D               	movlw	109
  9666  1737                     u7487:	
  9667  1737  0B89               	decfsz	9,f
  9668  1738  2F37               	goto	u7487
  9669  1739  0BA0               	decfsz	??_LCD_Init_apdatat,f
  9670  173A  2F37               	goto	u7487
  9671  173B  0BA1               	decfsz	??_LCD_Init_apdatat+1,f
  9672  173C  2F37               	goto	u7487
  9673                           
  9674                           ;lcd_hd44780_pic16.c: 112: (LCDByte(0x02,0));
  9675  173D  01F2               	clrf	LCDByte@isdata
  9676  173E  3002               	movlw	2
  9677  173F  3188  20DD  3197   	fcall	_LCDByte
  9678                           
  9679                           ;lcd_hd44780_pic16.c: 113: (LCDByte(0x28,0));
  9680  1742  01F2               	clrf	LCDByte@isdata
  9681  1743  3028               	movlw	40
  9682  1744  3188  20DD  3197   	fcall	_LCDByte
  9683                           
  9684                           ;lcd_hd44780_pic16.c: 114: (LCDByte(0x01,0));
  9685  1747  01F2               	clrf	LCDByte@isdata
  9686  1748  3001               	movlw	1
  9687  1749  3188  20DD  3197   	fcall	_LCDByte
  9688                           
  9689                           ;lcd_hd44780_pic16.c: 115: (LCDByte(0x0c,0));
  9690  174C  01F2               	clrf	LCDByte@isdata
  9691  174D  300C               	movlw	12
  9692  174E  3188  20DD  3197   	fcall	_LCDByte
  9693                           
  9694                           ;lcd_hd44780_pic16.c: 116: (LCDByte(0x06,0));
  9695  1751  01F2               	clrf	LCDByte@isdata
  9696  1752  3006               	movlw	6
  9697  1753  3188  20DD  3197   	fcall	_LCDByte
  9698                           
  9699                           ;lcd_hd44780_pic16.c: 117: _delay((unsigned long)((10)*(18432000/4000000.0)));
  9700  1756  300F               	movlw	15
  9701  1757                     u7497:	
  9702  1757  0B89               	decfsz	9,f
  9703  1758  2F57               	goto	u7497
  9704  1759  0000               	nop
  9705                           
  9706                           ;lcd_hd44780_pic16.c: 118: (LCDByte(0b00000001,0));
  9707  175A  01F2               	clrf	LCDByte@isdata
  9708  175B  3001               	movlw	1
  9709  175C  3188  20DD         	fcall	_LCDByte
  9710  175E  0008               	return
  9711  175F                     __end_of_LCD_Init_apdatat:	
  9712                           
  9713                           	psect	text35
  9714  0858                     __ptext35:	
  9715 ;; *************** function _LCDWriteString *****************
  9716 ;; Defined at:
  9717 ;;		line 243 in file "lcd_hd44780_pic16.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;  msg             2    0[BANK0 ] PTR const unsigned char 
  9720 ;;		 -> STR_22(17), STR_21(15), STR_11(16), STR_10(14), 
  9721 ;;		 -> STR_9(17), STR_8(2), STR_7(2), STR_6(4), 
  9722 ;;		 -> STR_5(17), STR_4(6), STR_3(3), STR_2(2), 
  9723 ;;		 -> STR_1(6), 
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  cc              1    2[BANK0 ] char 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9735 ;;      Params:         0       2       0       0       0       0       0       0
  9736 ;;      Locals:         0       1       0       0       0       0       0       0
  9737 ;;      Temps:          1       0       0       0       0       0       0       0
  9738 ;;      Totals:         1       3       0       0       0       0       0       0
  9739 ;;Total ram usage:        4 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    5
  9742 ;; This function calls:
  9743 ;;		_LCDByte
  9744 ;; This function is called by:
  9745 ;;		_afisare_inf_lcd
  9746 ;;		_setare_temperatura
  9747 ;;		_state_of_button
  9748 ;;		_main
  9749 ;;		_check_status_incubator
  9750 ;;		_command_turn
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function _LCDWriteString
  9756  0858                     _LCDWriteString:	
  9757  0858                     l5100:	
  9758                           ;lcd_hd44780_pic16.c: 273: while(*msg!='\0')
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9762                           
  9763  0858  0020               	movlb	0	; select bank0
  9764  0859  0820               	movf	LCDWriteString@msg,w
  9765  085A  0084               	movwf	4
  9766  085B  0821               	movf	LCDWriteString@msg+1,w
  9767  085C  0085               	movwf	5
  9768  085D  0012               	moviw fsr0++
  9769  085E  1903               	btfsc	3,2
  9770  085F  0008               	return
  9771                           
  9772                           ;lcd_hd44780_pic16.c: 274: {
  9773                           ;lcd_hd44780_pic16.c: 276: if(*msg=='%')
  9774  0860  0020               	movlb	0	; select bank0
  9775  0861  0820               	movf	LCDWriteString@msg,w
  9776  0862  0084               	movwf	4
  9777  0863  0821               	movf	LCDWriteString@msg+1,w
  9778  0864  0085               	movwf	5
  9779  0865  0012               	moviw fsr0++
  9780  0866  3A25               	xorlw	37
  9781  0867  1D03               	btfss	3,2
  9782  0868  2887               	goto	l5096
  9783                           
  9784                           ;lcd_hd44780_pic16.c: 277: {
  9785                           ;lcd_hd44780_pic16.c: 278: msg++;
  9786  0869  3001               	movlw	1
  9787  086A  07A0               	addwf	LCDWriteString@msg,f
  9788  086B  3000               	movlw	0
  9789  086C  3DA1               	addwfc	LCDWriteString@msg+1,f
  9790                           
  9791                           ;lcd_hd44780_pic16.c: 279: int8_t cc=*msg-'0';
  9792  086D  0820               	movf	LCDWriteString@msg,w
  9793  086E  0084               	movwf	4
  9794  086F  0821               	movf	LCDWriteString@msg+1,w
  9795  0870  0085               	movwf	5
  9796  0871  0800               	movf	0,w	;code access
  9797  0872  3ED0               	addlw	-48
  9798  0873  00F9               	movwf	??_LCDWriteString
  9799  0874  0879               	movf	??_LCDWriteString,w
  9800  0875  00A2               	movwf	LCDWriteString@cc
  9801                           
  9802                           ;lcd_hd44780_pic16.c: 281: if(cc>=0 && cc<=7)
  9803  0876  1BA2               	btfsc	LCDWriteString@cc,7
  9804  0877  2881               	goto	l5092
  9805  0878  0822               	movf	LCDWriteString@cc,w
  9806  0879  3A80               	xorlw	128
  9807  087A  3E78               	addlw	-136
  9808  087B  1803               	skipnc
  9809  087C  2881               	goto	l5092
  9810                           
  9811                           ;lcd_hd44780_pic16.c: 282: {
  9812                           ;lcd_hd44780_pic16.c: 283: (LCDByte(cc,1));
  9813  087D  01F2               	clrf	LCDByte@isdata
  9814  087E  0AF2               	incf	LCDByte@isdata,f
  9815  087F  0822               	movf	LCDWriteString@cc,w
  9816  0880  288F               	goto	L6
  9817  0881                     l5092:	
  9818                           ;lcd_hd44780_pic16.c: 284: }
  9819                           
  9820                           
  9821                           ;lcd_hd44780_pic16.c: 285: else
  9822                           ;lcd_hd44780_pic16.c: 286: {
  9823                           ;lcd_hd44780_pic16.c: 287: (LCDByte('%',1));
  9824  0881  01F2               	clrf	LCDByte@isdata
  9825  0882  0AF2               	incf	LCDByte@isdata,f
  9826  0883  3025               	movlw	37
  9827  0884  3188  20DD  3188   	fcall	_LCDByte
  9828  0887                     l5096:	
  9829                           ;lcd_hd44780_pic16.c: 289: }
  9830                           ;lcd_hd44780_pic16.c: 290: }
  9831                           
  9832                           ;lcd_hd44780_pic16.c: 288: (LCDByte(*msg,1));
  9833                           
  9834                           
  9835                           ;lcd_hd44780_pic16.c: 291: else
  9836                           ;lcd_hd44780_pic16.c: 292: {
  9837                           ;lcd_hd44780_pic16.c: 293: (LCDByte(*msg,1));
  9838  0887  01F2               	clrf	LCDByte@isdata
  9839  0888  0AF2               	incf	LCDByte@isdata,f
  9840  0889  0020               	movlb	0	; select bank0
  9841  088A  0820               	movf	LCDWriteString@msg,w
  9842  088B  0084               	movwf	4
  9843  088C  0821               	movf	LCDWriteString@msg+1,w
  9844  088D  0085               	movwf	5
  9845  088E  0800               	movf	0,w	;code access
  9846  088F                     L6:	
  9847  088F  3188  20DD  3188   	fcall	_LCDByte
  9848                           
  9849                           ;lcd_hd44780_pic16.c: 294: }
  9850                           ;lcd_hd44780_pic16.c: 295: msg++;
  9851  0892  3001               	movlw	1
  9852  0893  0020               	movlb	0	; select bank0
  9853  0894  07A0               	addwf	LCDWriteString@msg,f
  9854  0895  3000               	movlw	0
  9855  0896  3DA1               	addwfc	LCDWriteString@msg+1,f
  9856  0897  2858               	goto	l5100
  9857  0898                     __end_of_LCDWriteString:	
  9858                           
  9859                           	psect	text36
  9860  0D26                     __ptext36:	
  9861 ;; *************** function ___fttol *****************
  9862 ;; Defined at:
  9863 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  f1              3    2[COMMON] float 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  lval            4    1[BANK0 ] unsigned long 
  9868 ;;  exp1            1    5[BANK0 ] unsigned char 
  9869 ;;  sign1           1    0[BANK0 ] unsigned char 
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  4    2[COMMON] long 
  9872 ;; Registers used:
  9873 ;;		wreg, status,2, status,0
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9879 ;;      Params:         4       0       0       0       0       0       0       0
  9880 ;;      Locals:         0       6       0       0       0       0       0       0
  9881 ;;      Temps:          4       0       0       0       0       0       0       0
  9882 ;;      Totals:         8       6       0       0       0       0       0       0
  9883 ;;Total ram usage:       14 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    4
  9886 ;; This function calls:
  9887 ;;		Nothing
  9888 ;; This function is called by:
  9889 ;;		_main
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           
  9894                           ;psect for function ___fttol
  9895  0D26                     ___fttol:	
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9899  0D26  0872               	movf	___fttol@f1,w
  9900  0D27  00F6               	movwf	??___fttol
  9901  0D28  0873               	movf	___fttol@f1+1,w
  9902  0D29  00F7               	movwf	??___fttol+1
  9903  0D2A  0874               	movf	___fttol@f1+2,w
  9904  0D2B  00F8               	movwf	??___fttol+2
  9905  0D2C  1003               	clrc
  9906  0D2D  0D77               	rlf	??___fttol+1,w
  9907  0D2E  0D78               	rlf	??___fttol+2,w
  9908  0D2F  00F9               	movwf	??___fttol+3
  9909  0D30  0879               	movf	??___fttol+3,w
  9910  0D31  0020               	movlb	0	; select bank0
  9911  0D32  00A5               	movwf	___fttol@exp1
  9912  0D33  0825               	movf	___fttol@exp1,w
  9913  0D34  1D03               	btfss	3,2
  9914  0D35  2D3F               	goto	l6058
  9915  0D36  3000               	movlw	0
  9916  0D37  00F5               	movwf	?___fttol+3
  9917  0D38  3000               	movlw	0
  9918  0D39  00F4               	movwf	?___fttol+2
  9919  0D3A  3000               	movlw	0
  9920  0D3B  00F3               	movwf	?___fttol+1
  9921  0D3C  3000               	movlw	0
  9922  0D3D  00F2               	movwf	?___fttol
  9923  0D3E  0008               	return
  9924  0D3F                     l6058:	
  9925  0D3F  0872               	movf	___fttol@f1,w
  9926  0D40  00F6               	movwf	??___fttol
  9927  0D41  0873               	movf	___fttol@f1+1,w
  9928  0D42  00F7               	movwf	??___fttol+1
  9929  0D43  0874               	movf	___fttol@f1+2,w
  9930  0D44  00F8               	movwf	??___fttol+2
  9931  0D45  3017               	movlw	23
  9932  0D46                     u7095:	
  9933  0D46  36F8               	lsrf	??___fttol+2,f
  9934  0D47  0CF7               	rrf	??___fttol+1,f
  9935  0D48  0CF6               	rrf	??___fttol,f
  9936  0D49  0B89               	decfsz	9,f
  9937  0D4A  2D46               	goto	u7095
  9938  0D4B  0876               	movf	??___fttol,w
  9939  0D4C  00F9               	movwf	??___fttol+3
  9940  0D4D  0879               	movf	??___fttol+3,w
  9941  0D4E  00A0               	movwf	___fttol@sign1
  9942  0D4F  17F3               	bsf	___fttol@f1+1,7
  9943  0D50  30FF               	movlw	255
  9944  0D51  05F2               	andwf	___fttol@f1,f
  9945  0D52  30FF               	movlw	255
  9946  0D53  05F3               	andwf	___fttol@f1+1,f
  9947  0D54  3000               	movlw	0
  9948  0D55  05F4               	andwf	___fttol@f1+2,f
  9949  0D56  0872               	movf	___fttol@f1,w
  9950  0D57  00A1               	movwf	___fttol@lval
  9951  0D58  0873               	movf	___fttol@f1+1,w
  9952  0D59  00A2               	movwf	___fttol@lval+1
  9953  0D5A  0874               	movf	___fttol@f1+2,w
  9954  0D5B  00A3               	movwf	___fttol@lval+2
  9955  0D5C  01A4               	clrf	___fttol@lval+3
  9956  0D5D  308E               	movlw	142
  9957  0D5E  02A5               	subwf	___fttol@exp1,f
  9958  0D5F  1FA5               	btfss	___fttol@exp1,7
  9959  0D60  2D7D               	goto	l6078
  9960  0D61  0825               	movf	___fttol@exp1,w
  9961  0D62  3A80               	xorlw	128
  9962  0D63  3E8F               	addlw	143
  9963  0D64  1803               	skipnc
  9964  0D65  2D6F               	goto	l6076
  9965  0D66  3000               	movlw	0
  9966  0D67  00F5               	movwf	?___fttol+3
  9967  0D68  3000               	movlw	0
  9968  0D69  00F4               	movwf	?___fttol+2
  9969  0D6A  3000               	movlw	0
  9970  0D6B  00F3               	movwf	?___fttol+1
  9971  0D6C  3000               	movlw	0
  9972  0D6D  00F2               	movwf	?___fttol
  9973  0D6E  0008               	return
  9974  0D6F                     l6076:	
  9975  0D6F  3001               	movlw	1
  9976  0D70                     u7125:	
  9977  0D70  36A4               	lsrf	___fttol@lval+3,f
  9978  0D71  0CA3               	rrf	___fttol@lval+2,f
  9979  0D72  0CA2               	rrf	___fttol@lval+1,f
  9980  0D73  0CA1               	rrf	___fttol@lval,f
  9981  0D74  0B89               	decfsz	9,f
  9982  0D75  2D70               	goto	u7125
  9983  0D76  3001               	movlw	1
  9984  0D77  00F6               	movwf	??___fttol
  9985  0D78  0876               	movf	??___fttol,w
  9986  0D79  07A5               	addwf	___fttol@exp1,f
  9987  0D7A  1903               	btfsc	3,2
  9988  0D7B  2D96               	goto	l6086
  9989  0D7C  2D6F               	goto	l6076
  9990  0D7D                     l6078:	
  9991  0D7D  3018               	movlw	24
  9992  0D7E  0225               	subwf	___fttol@exp1,w
  9993  0D7F  1C03               	skipc
  9994  0D80  2D93               	goto	l1404
  9995  0D81  3000               	movlw	0
  9996  0D82  00F5               	movwf	?___fttol+3
  9997  0D83  3000               	movlw	0
  9998  0D84  00F4               	movwf	?___fttol+2
  9999  0D85  3000               	movlw	0
 10000  0D86  00F3               	movwf	?___fttol+1
 10001  0D87  3000               	movlw	0
 10002  0D88  00F2               	movwf	?___fttol
 10003  0D89  0008               	return
 10004  0D8A                     l6084:	
 10005  0D8A  3001               	movlw	1
 10006  0D8B                     u7155:	
 10007  0D8B  35A1               	lslf	___fttol@lval,f
 10008  0D8C  0DA2               	rlf	___fttol@lval+1,f
 10009  0D8D  0DA3               	rlf	___fttol@lval+2,f
 10010  0D8E  0DA4               	rlf	___fttol@lval+3,f
 10011  0D8F  0B89               	decfsz	9,f
 10012  0D90  2D8B               	goto	u7155
 10013  0D91  3001               	movlw	1
 10014  0D92  02A5               	subwf	___fttol@exp1,f
 10015  0D93                     l1404:	
 10016  0D93  0825               	movf	___fttol@exp1,w
 10017  0D94  1D03               	btfss	3,2
 10018  0D95  2D8A               	goto	l6084
 10019  0D96                     l6086:	
 10020  0D96  0820               	movf	___fttol@sign1,w
 10021  0D97  1903               	btfsc	3,2
 10022  0D98  2DA4               	goto	l6090
 10023  0D99  09A1               	comf	___fttol@lval,f
 10024  0D9A  09A2               	comf	___fttol@lval+1,f
 10025  0D9B  09A3               	comf	___fttol@lval+2,f
 10026  0D9C  09A4               	comf	___fttol@lval+3,f
 10027  0D9D  0AA1               	incf	___fttol@lval,f
 10028  0D9E  1903               	skipnz
 10029  0D9F  0AA2               	incf	___fttol@lval+1,f
 10030  0DA0  1903               	skipnz
 10031  0DA1  0AA3               	incf	___fttol@lval+2,f
 10032  0DA2  1903               	skipnz
 10033  0DA3  0AA4               	incf	___fttol@lval+3,f
 10034  0DA4                     l6090:	
 10035  0DA4  0824               	movf	___fttol@lval+3,w
 10036  0DA5  00F5               	movwf	?___fttol+3
 10037  0DA6  0823               	movf	___fttol@lval+2,w
 10038  0DA7  00F4               	movwf	?___fttol+2
 10039  0DA8  0822               	movf	___fttol@lval+1,w
 10040  0DA9  00F3               	movwf	?___fttol+1
 10041  0DAA  0821               	movf	___fttol@lval,w
 10042  0DAB  00F2               	movwf	?___fttol
 10043  0DAC  0008               	return
 10044  0DAD                     __end_of___fttol:	
 10045                           
 10046                           	psect	text37
 10047  144F                     __ptext37:	
 10048 ;; *************** function _TMR1_enable *****************
 10049 ;; Defined at:
 10050 ;;		line 69 in file "mcc_generated_files/tmr1.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;		None
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;		None
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  1    wreg      void 
 10057 ;; Registers used:
 10058 ;;		None
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10064 ;;      Params:         0       0       0       0       0       0       0       0
 10065 ;;      Locals:         0       0       0       0       0       0       0       0
 10066 ;;      Temps:          0       0       0       0       0       0       0       0
 10067 ;;      Totals:         0       0       0       0       0       0       0       0
 10068 ;;Total ram usage:        0 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    4
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		_main
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           
 10079                           ;psect for function _TMR1_enable
 10080  144F                     _TMR1_enable:	
 10081                           
 10082                           ;tmr1.c: 71: PIE1bits.TMR1IE = 1;
 10083                           
 10084                           ;incstack = 0
 10085                           ; Regs used in _TMR1_enable: []
 10086  144F  0021               	movlb	1	; select bank1
 10087  1450  1411               	bsf	17,0	;volatile
 10088  1451  0008               	return
 10089  1452                     __end_of_TMR1_enable:	
 10090                           
 10091                           	psect	text38
 10092  144C                     __ptext38:	
 10093 ;; *************** function _TMR1_disable *****************
 10094 ;; Defined at:
 10095 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;		None
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;		None
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  1    wreg      void 
 10102 ;; Registers used:
 10103 ;;		None
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10109 ;;      Params:         0       0       0       0       0       0       0       0
 10110 ;;      Locals:         0       0       0       0       0       0       0       0
 10111 ;;      Temps:          0       0       0       0       0       0       0       0
 10112 ;;      Totals:         0       0       0       0       0       0       0       0
 10113 ;;Total ram usage:        0 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    4
 10116 ;; This function calls:
 10117 ;;		Nothing
 10118 ;; This function is called by:
 10119 ;;		_main
 10120 ;; This function uses a non-reentrant model
 10121 ;;
 10122                           
 10123                           
 10124                           ;psect for function _TMR1_disable
 10125  144C                     _TMR1_disable:	
 10126                           
 10127                           ;tmr1.c: 66: PIE1bits.TMR1IE = 0;
 10128                           
 10129                           ;incstack = 0
 10130                           ; Regs used in _TMR1_disable: []
 10131  144C  0021               	movlb	1	; select bank1
 10132  144D  1011               	bcf	17,0	;volatile
 10133  144E  0008               	return
 10134  144F                     __end_of_TMR1_disable:	
 10135                           
 10136                           	psect	text39
 10137  149E                     __ptext39:	
 10138 ;; *************** function _StartSignal *****************
 10139 ;; Defined at:
 10140 ;;		line 5 in file "dht11.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;		None
 10143 ;; Auto vars:     Size  Location     Type
 10144 ;;		None
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  1    wreg      void 
 10147 ;; Registers used:
 10148 ;;		wreg
 10149 ;; Tracked objects:
 10150 ;;		On entry : 0/0
 10151 ;;		On exit  : 0/0
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10154 ;;      Params:         0       0       0       0       0       0       0       0
 10155 ;;      Locals:         0       0       0       0       0       0       0       0
 10156 ;;      Temps:          1       0       0       0       0       0       0       0
 10157 ;;      Totals:         1       0       0       0       0       0       0       0
 10158 ;;Total ram usage:        1 bytes
 10159 ;; Hardware stack levels used:    1
 10160 ;; Hardware stack levels required when called:    4
 10161 ;; This function calls:
 10162 ;;		Nothing
 10163 ;; This function is called by:
 10164 ;;		_main
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function _StartSignal
 10170  149E                     _StartSignal:	
 10171                           
 10172                           ;dht11.c: 7: TRISDbits.TRISD2 = 0;
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _StartSignal: [wreg]
 10176  149E  0021               	movlb	1	; select bank1
 10177  149F  110F               	bcf	15,2	;volatile
 10178                           
 10179                           ;dht11.c: 8: PORTDbits.RD2 = 0;
 10180  14A0  0020               	movlb	0	; select bank0
 10181  14A1  110F               	bcf	15,2	;volatile
 10182                           
 10183                           ;dht11.c: 9: _delay((unsigned long)((18)*(18432000/4000.0)));
 10184  14A2  306C               	movlw	108
 10185  14A3  00F2               	movwf	??_StartSignal
 10186  14A4  30B7               	movlw	183
 10187  14A5                     u7507:	
 10188  14A5  0B89               	decfsz	9,f
 10189  14A6  2CA5               	goto	u7507
 10190  14A7  0BF2               	decfsz	??_StartSignal,f
 10191  14A8  2CA5               	goto	u7507
 10192  14A9  0000               	nop
 10193                           
 10194                           ;dht11.c: 10: PORTDbits.RD2 = 1;
 10195  14AA  0020               	movlb	0	; select bank0
 10196  14AB  150F               	bsf	15,2	;volatile
 10197                           
 10198                           ;dht11.c: 11: _delay((unsigned long)((30)*(18432000/4000000.0)));
 10199  14AC  302E               	movlw	46
 10200  14AD                     u7517:	
 10201  14AD  0B89               	decfsz	9,f
 10202  14AE  2CAD               	goto	u7517
 10203                           
 10204                           ;dht11.c: 12: TRISDbits.TRISD2 = 1;
 10205  14AF  0021               	movlb	1	; select bank1
 10206  14B0  150F               	bsf	15,2	;volatile
 10207  14B1  0008               	return
 10208  14B2                     __end_of_StartSignal:	
 10209                           
 10210                           	psect	text40
 10211  07EE                     __ptext40:	
 10212 ;; *************** function _SYSTEM_Initialize *****************
 10213 ;; Defined at:
 10214 ;;		line 70 in file "mcc_generated_files/mcc.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;		None
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;		None
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, status,2, status,0, pclath, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10228 ;;      Params:         0       0       0       0       0       0       0       0
 10229 ;;      Locals:         0       0       0       0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0       0
 10231 ;;      Totals:         0       0       0       0       0       0       0       0
 10232 ;;Total ram usage:        0 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    6
 10235 ;; This function calls:
 10236 ;;		_ADC_Initialize
 10237 ;;		_EUSART_Initialize
 10238 ;;		_OSCILLATOR_Initialize
 10239 ;;		_PIN_MANAGER_Initialize
 10240 ;;		_TMR1_Initialize
 10241 ;;		_WDT_Initialize
 10242 ;; This function is called by:
 10243 ;;		_main
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           
 10248                           ;psect for function _SYSTEM_Initialize
 10249  07EE                     _SYSTEM_Initialize:	
 10250                           
 10251                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10255  07EE  3195  25F7  3187   	fcall	_PIN_MANAGER_Initialize
 10256                           
 10257                           ;mcc.c: 74: OSCILLATOR_Initialize();
 10258  07F1  3194  245A  3187   	fcall	_OSCILLATOR_Initialize
 10259                           
 10260                           ;mcc.c: 75: WDT_Initialize();
 10261  07F4  3194  2452  3187   	fcall	_WDT_Initialize
 10262                           
 10263                           ;mcc.c: 76: TMR1_Initialize();
 10264  07F7  3195  2524  3187   	fcall	_TMR1_Initialize
 10265                           
 10266                           ;mcc.c: 77: ADC_Initialize();
 10267  07FA  3194  2480  3187   	fcall	_ADC_Initialize
 10268                           
 10269                           ;mcc.c: 78: EUSART_Initialize();
 10270  07FD  3195  255A         	fcall	_EUSART_Initialize
 10271  07FF  0008               	return
 10272  0800                     __end_of_SYSTEM_Initialize:	
 10273                           
 10274                           	psect	text41
 10275  1452                     __ptext41:	
 10276 ;; *************** function _WDT_Initialize *****************
 10277 ;; Defined at:
 10278 ;;		line 89 in file "mcc_generated_files/mcc.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      void 
 10285 ;; Registers used:
 10286 ;;		wreg
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10292 ;;      Params:         0       0       0       0       0       0       0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    4
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_SYSTEM_Initialize
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           
 10307                           ;psect for function _WDT_Initialize
 10308  1452                     _WDT_Initialize:	
 10309                           
 10310                           ;mcc.c: 92: WDTCON = 0x16;
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in _WDT_Initialize: [wreg]
 10314  1452  3016               	movlw	22
 10315  1453  0021               	movlb	1	; select bank1
 10316  1454  0097               	movwf	23	;volatile
 10317  1455  0008               	return
 10318  1456                     __end_of_WDT_Initialize:	
 10319                           
 10320                           	psect	text42
 10321  1524                     __ptext42:	
 10322 ;; *************** function _TMR1_Initialize *****************
 10323 ;; Defined at:
 10324 ;;		line 74 in file "mcc_generated_files/tmr1.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;		None
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;		None
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      void 
 10331 ;; Registers used:
 10332 ;;		wreg, status,2, status,0, pclath, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10338 ;;      Params:         0       0       0       0       0       0       0       0
 10339 ;;      Locals:         0       0       0       0       0       0       0       0
 10340 ;;      Temps:          0       0       0       0       0       0       0       0
 10341 ;;      Totals:         0       0       0       0       0       0       0       0
 10342 ;;Total ram usage:        0 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    5
 10345 ;; This function calls:
 10346 ;;		_TMR1_SetInterruptHandler
 10347 ;;		_TMR1_StartTimer
 10348 ;; This function is called by:
 10349 ;;		_SYSTEM_Initialize
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           
 10354                           ;psect for function _TMR1_Initialize
 10355  1524                     _TMR1_Initialize:	
 10356                           
 10357                           ;tmr1.c: 79: T1CON = 0x00;
 10358                           
 10359                           ;incstack = 0
 10360                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10361  1524  0020               	movlb	0	; select bank0
 10362  1525  0198               	clrf	24	;volatile
 10363                           
 10364                           ;tmr1.c: 82: T1GCON = 0x00;
 10365  1526  0199               	clrf	25	;volatile
 10366                           
 10367                           ;tmr1.c: 85: TMR1H = 0xEE;
 10368  1527  30EE               	movlw	238
 10369  1528  0097               	movwf	23	;volatile
 10370                           
 10371                           ;tmr1.c: 88: TMR1L = 0x00;
 10372  1529  0196               	clrf	22	;volatile
 10373                           
 10374                           ;tmr1.c: 91: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 10375  152A  0817               	movf	23,w	;volatile
 10376  152B  0022               	movlb	2	; select bank2
 10377  152C  00EC               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
 10378  152D  0020               	movlb	0	; select bank0
 10379  152E  0816               	movf	22,w	;volatile
 10380  152F  0022               	movlb	2	; select bank2
 10381  1530  00EB               	movwf	_timer1ReloadVal^(0+256)	;volatile
 10382                           
 10383                           ;tmr1.c: 94: PIR1bits.TMR1IF = 0;
 10384  1531  0020               	movlb	0	; select bank0
 10385  1532  1011               	bcf	17,0	;volatile
 10386                           
 10387                           ;tmr1.c: 97: PIE1bits.TMR1IE = 1;
 10388  1533  0021               	movlb	1	; select bank1
 10389  1534  1411               	bsf	17,0	;volatile
 10390                           
 10391                           ;tmr1.c: 100: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10392  1535  3040               	movlw	low _TMR1_DefaultInterruptHandler
 10393  1536  00F2               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 10394  1537  3014               	movlw	high _TMR1_DefaultInterruptHandler
 10395  1538  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 10396  1539  3194  2465  3195   	fcall	_TMR1_SetInterruptHandler
 10397                           
 10398                           ;tmr1.c: 103: TMR1_StartTimer();
 10399  153C  3194  2449         	fcall	_TMR1_StartTimer
 10400  153E  0008               	return
 10401  153F                     __end_of_TMR1_Initialize:	
 10402                           
 10403                           	psect	text43
 10404  1449                     __ptext43:	
 10405 ;; *************** function _TMR1_StartTimer *****************
 10406 ;; Defined at:
 10407 ;;		line 106 in file "mcc_generated_files/tmr1.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		None
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10421 ;;      Params:         0       0       0       0       0       0       0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0
 10424 ;;      Totals:         0       0       0       0       0       0       0       0
 10425 ;;Total ram usage:        0 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    4
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_TMR1_Initialize
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _TMR1_StartTimer
 10437  1449                     _TMR1_StartTimer:	
 10438                           
 10439                           ;tmr1.c: 109: T1CONbits.TMR1ON = 1;
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _TMR1_StartTimer: []
 10443  1449  0020               	movlb	0	; select bank0
 10444  144A  1418               	bsf	24,0	;volatile
 10445  144B  0008               	return
 10446  144C                     __end_of_TMR1_StartTimer:	
 10447                           
 10448                           	psect	text44
 10449  1465                     __ptext44:	
 10450 ;; *************** function _TMR1_SetInterruptHandler *****************
 10451 ;; Defined at:
 10452 ;;		line 227 in file "mcc_generated_files/tmr1.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
 10455 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;		None
 10458 ;; Return value:  Size  Location     Type
 10459 ;;                  1    wreg      void 
 10460 ;; Registers used:
 10461 ;;		wreg
 10462 ;; Tracked objects:
 10463 ;;		On entry : 0/0
 10464 ;;		On exit  : 0/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10467 ;;      Params:         2       0       0       0       0       0       0       0
 10468 ;;      Locals:         0       0       0       0       0       0       0       0
 10469 ;;      Temps:          0       0       0       0       0       0       0       0
 10470 ;;      Totals:         2       0       0       0       0       0       0       0
 10471 ;;Total ram usage:        2 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    4
 10474 ;; This function calls:
 10475 ;;		Nothing
 10476 ;; This function is called by:
 10477 ;;		_TMR1_Initialize
 10478 ;; This function uses a non-reentrant model
 10479 ;;
 10480                           
 10481                           
 10482                           ;psect for function _TMR1_SetInterruptHandler
 10483  1465                     _TMR1_SetInterruptHandler:	
 10484                           
 10485                           ;tmr1.c: 228: TMR1_InterruptHandler = InterruptHandler;
 10486                           
 10487                           ;incstack = 0
 10488                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 10489  1465  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 10490  1466  0023               	movlb	3	; select bank3
 10491  1467  00E4               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
 10492  1468  0872               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 10493  1469  00E3               	movwf	_TMR1_InterruptHandler^(0+384)
 10494  146A  0008               	return
 10495  146B                     __end_of_TMR1_SetInterruptHandler:	
 10496                           
 10497                           	psect	text45
 10498  15F7                     __ptext45:	
 10499 ;; *************** function _PIN_MANAGER_Initialize *****************
 10500 ;; Defined at:
 10501 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10515 ;;      Params:         0       0       0       0       0       0       0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    4
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_SYSTEM_Initialize
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _PIN_MANAGER_Initialize
 10531  15F7                     _PIN_MANAGER_Initialize:	
 10532                           
 10533                           ;pin_manager.c: 57: LATE = 0x00;
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10537  15F7  0022               	movlb	2	; select bank2
 10538  15F8  0190               	clrf	16	;volatile
 10539                           
 10540                           ;pin_manager.c: 58: LATD = 0x00;
 10541  15F9  018F               	clrf	15	;volatile
 10542                           
 10543                           ;pin_manager.c: 59: LATA = 0x00;
 10544  15FA  018C               	clrf	12	;volatile
 10545                           
 10546                           ;pin_manager.c: 60: LATB = 0x00;
 10547  15FB  018D               	clrf	13	;volatile
 10548                           
 10549                           ;pin_manager.c: 61: LATC = 0x00;
 10550  15FC  018E               	clrf	14	;volatile
 10551                           
 10552                           ;pin_manager.c: 66: TRISE = 0x0F;
 10553  15FD  300F               	movlw	15
 10554  15FE  0021               	movlb	1	; select bank1
 10555  15FF  0090               	movwf	16	;volatile
 10556                           
 10557                           ;pin_manager.c: 67: TRISA = 0xEF;
 10558  1600  30EF               	movlw	239
 10559  1601  008C               	movwf	12	;volatile
 10560                           
 10561                           ;pin_manager.c: 68: TRISB = 0x00;
 10562  1602  018D               	clrf	13	;volatile
 10563                           
 10564                           ;pin_manager.c: 69: TRISC = 0x86;
 10565  1603  3086               	movlw	134
 10566  1604  008E               	movwf	14	;volatile
 10567                           
 10568                           ;pin_manager.c: 70: TRISD = 0xF4;
 10569  1605  30F4               	movlw	244
 10570  1606  008F               	movwf	15	;volatile
 10571                           
 10572                           ;pin_manager.c: 75: ANSELB = 0x0F;
 10573  1607  300F               	movlw	15
 10574  1608  0023               	movlb	3	; select bank3
 10575  1609  008D               	movwf	13	;volatile
 10576                           
 10577                           ;pin_manager.c: 76: ANSELD = 0x10;
 10578  160A  3010               	movlw	16
 10579  160B  008F               	movwf	15	;volatile
 10580                           
 10581                           ;pin_manager.c: 77: ANSELE = 0x07;
 10582  160C  3007               	movlw	7
 10583  160D  0090               	movwf	16	;volatile
 10584                           
 10585                           ;pin_manager.c: 78: ANSELA = 0x2F;
 10586  160E  302F               	movlw	47
 10587  160F  008C               	movwf	12	;volatile
 10588                           
 10589                           ;pin_manager.c: 83: WPUE = 0x08;
 10590  1610  3008               	movlw	8
 10591  1611  0024               	movlb	4	; select bank4
 10592  1612  0090               	movwf	16	;volatile
 10593                           
 10594                           ;pin_manager.c: 84: WPUB = 0xFF;
 10595  1613  30FF               	movlw	255
 10596  1614  008D               	movwf	13	;volatile
 10597                           
 10598                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
 10599  1615  0021               	movlb	1	; select bank1
 10600  1616  1395               	bcf	21,7	;volatile
 10601                           
 10602                           ;pin_manager.c: 91: APFCON = 0x00;
 10603  1617  0022               	movlb	2	; select bank2
 10604  1618  019D               	clrf	29	;volatile
 10605  1619  0008               	return
 10606  161A                     __end_of_PIN_MANAGER_Initialize:	
 10607                           
 10608                           	psect	text46
 10609  145A                     __ptext46:	
 10610 ;; *************** function _OSCILLATOR_Initialize *****************
 10611 ;; Defined at:
 10612 ;;		line 81 in file "mcc_generated_files/mcc.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10626 ;;      Params:         0       0       0       0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    4
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		_SYSTEM_Initialize
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _OSCILLATOR_Initialize
 10642  145A                     _OSCILLATOR_Initialize:	
 10643                           
 10644                           ;mcc.c: 84: OSCCON = 0x78;
 10645                           
 10646                           ;incstack = 0
 10647                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10648  145A  3078               	movlw	120
 10649  145B  0021               	movlb	1	; select bank1
 10650  145C  0099               	movwf	25	;volatile
 10651                           
 10652                           ;mcc.c: 86: OSCTUNE = 0x00;
 10653  145D  0198               	clrf	24	;volatile
 10654  145E  0008               	return
 10655  145F                     __end_of_OSCILLATOR_Initialize:	
 10656                           
 10657                           	psect	text47
 10658  155A                     __ptext47:	
 10659 ;; *************** function _EUSART_Initialize *****************
 10660 ;; Defined at:
 10661 ;;		line 76 in file "mcc_generated_files/eusart.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;		None
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;		None
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      void 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10675 ;;      Params:         0       0       0       0       0       0       0       0
 10676 ;;      Locals:         0       0       0       0       0       0       0       0
 10677 ;;      Temps:          1       0       0       0       0       0       0       0
 10678 ;;      Totals:         1       0       0       0       0       0       0       0
 10679 ;;Total ram usage:        1 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    4
 10682 ;; This function calls:
 10683 ;;		Nothing
 10684 ;; This function is called by:
 10685 ;;		_SYSTEM_Initialize
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           
 10690                           ;psect for function _EUSART_Initialize
 10691  155A                     _EUSART_Initialize:	
 10692                           
 10693                           ;eusart.c: 79: PIE1bits.RCIE = 0;
 10694                           
 10695                           ;incstack = 0
 10696                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
 10697  155A  0021               	movlb	1	; select bank1
 10698  155B  1291               	bcf	17,5	;volatile
 10699                           
 10700                           ;eusart.c: 80: PIE1bits.TXIE = 0;
 10701  155C  1211               	bcf	17,4	;volatile
 10702                           
 10703                           ;eusart.c: 85: BAUDCON = 0x08;
 10704  155D  3008               	movlw	8
 10705  155E  0023               	movlb	3	; select bank3
 10706  155F  009F               	movwf	31	;volatile
 10707                           
 10708                           ;eusart.c: 88: RCSTA = 0x90;
 10709  1560  3090               	movlw	144
 10710  1561  009D               	movwf	29	;volatile
 10711                           
 10712                           ;eusart.c: 91: TXSTA = 0x24;
 10713  1562  3024               	movlw	36
 10714  1563  009E               	movwf	30	;volatile
 10715                           
 10716                           ;eusart.c: 94: SPBRGL = 0xDF;
 10717  1564  30DF               	movlw	223
 10718  1565  009B               	movwf	27	;volatile
 10719                           
 10720                           ;eusart.c: 97: SPBRGH = 0x01;
 10721  1566  3001               	movlw	1
 10722  1567  009C               	movwf	28	;volatile
 10723                           
 10724                           ;eusart.c: 101: eusartTxHead = 0;
 10725  1568  0020               	movlb	0	; select bank0
 10726  1569  01EB               	clrf	_eusartTxHead	;volatile
 10727                           
 10728                           ;eusart.c: 102: eusartTxTail = 0;
 10729  156A  01EA               	clrf	_eusartTxTail	;volatile
 10730                           
 10731                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 10732  156B  3008               	movlw	8
 10733  156C  00F2               	movwf	??_EUSART_Initialize
 10734  156D  0872               	movf	??_EUSART_Initialize,w
 10735  156E  0022               	movlb	2	; select bank2
 10736  156F  00ED               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
 10737                           
 10738                           ;eusart.c: 105: eusartRxHead = 0;
 10739  1570  0020               	movlb	0	; select bank0
 10740  1571  01E9               	clrf	_eusartRxHead	;volatile
 10741                           
 10742                           ;eusart.c: 106: eusartRxTail = 0;
 10743  1572  01E8               	clrf	_eusartRxTail	;volatile
 10744                           
 10745                           ;eusart.c: 107: eusartRxCount = 0;
 10746  1573  0021               	movlb	1	; select bank1
 10747  1574  01EF               	clrf	_eusartRxCount^(0+128)	;volatile
 10748                           
 10749                           ;eusart.c: 110: PIE1bits.RCIE = 1;
 10750  1575  1691               	bsf	17,5	;volatile
 10751  1576  0008               	return
 10752  1577                     __end_of_EUSART_Initialize:	
 10753                           
 10754                           	psect	text48
 10755  1480                     __ptext48:	
 10756 ;; *************** function _ADC_Initialize *****************
 10757 ;; Defined at:
 10758 ;;		line 66 in file "mcc_generated_files/adc.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;		None
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;		None
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      void 
 10765 ;; Registers used:
 10766 ;;		wreg, status,2
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10772 ;;      Params:         0       0       0       0       0       0       0       0
 10773 ;;      Locals:         0       0       0       0       0       0       0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0
 10775 ;;      Totals:         0       0       0       0       0       0       0       0
 10776 ;;Total ram usage:        0 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:    4
 10779 ;; This function calls:
 10780 ;;		Nothing
 10781 ;; This function is called by:
 10782 ;;		_SYSTEM_Initialize
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           
 10787                           ;psect for function _ADC_Initialize
 10788  1480                     _ADC_Initialize:	
 10789                           
 10790                           ;adc.c: 71: ADCON0 = 0x01;
 10791                           
 10792                           ;incstack = 0
 10793                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 10794  1480  3001               	movlw	1
 10795  1481  0021               	movlb	1	; select bank1
 10796  1482  009D               	movwf	29	;volatile
 10797                           
 10798                           ;adc.c: 74: ADCON1 = 0x43;
 10799  1483  3043               	movlw	67
 10800  1484  009E               	movwf	30	;volatile
 10801                           
 10802                           ;adc.c: 77: ADRESL = 0x00;
 10803  1485  019B               	clrf	27	;volatile
 10804                           
 10805                           ;adc.c: 80: ADRESH = 0x00;
 10806  1486  019C               	clrf	28	;volatile
 10807                           
 10808                           ;adc.c: 81: FVRCON=0b01001010;
 10809  1487  304A               	movlw	74
 10810  1488  0022               	movlb	2	; select bank2
 10811  1489  0097               	movwf	23	;volatile
 10812                           
 10813                           ;adc.c: 83: PIE1bits.ADIE = 1;
 10814  148A  0021               	movlb	1	; select bank1
 10815  148B  1711               	bsf	17,6	;volatile
 10816  148C  0008               	return
 10817  148D                     __end_of_ADC_Initialize:	
 10818                           
 10819                           	psect	text49
 10820  0AAF                     __ptext49:	
 10821 ;; *************** function _LCDInit *****************
 10822 ;; Defined at:
 10823 ;;		line 175 in file "lcd_hd44780_pic16.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;  style           1    wreg     unsigned char 
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;  style           1    9[COMMON] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  1    wreg      void 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0, pclath, cstack
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10837 ;;      Params:         0       0       0       0       0       0       0       0
 10838 ;;      Locals:         1       0       0       0       0       0       0       0
 10839 ;;      Temps:          0       2       0       0       0       0       0       0
 10840 ;;      Totals:         1       2       0       0       0       0       0       0
 10841 ;;Total ram usage:        3 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    5
 10844 ;; This function calls:
 10845 ;;		_LCDByte
 10846 ;; This function is called by:
 10847 ;;		_main
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function _LCDInit
 10853  0AAF                     _LCDInit:	
 10854                           
 10855                           ;incstack = 0
 10856                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 10857                           ;LCDInit@style stored from wreg
 10858  0AAF  00F9               	movwf	LCDInit@style
 10859                           
 10860                           ;lcd_hd44780_pic16.c: 191: _delay((unsigned long)((40)*(18432000/4000.0)));
 10861  0AB0  30F0               	movlw	240
 10862  0AB1  0020               	movlb	0	; select bank0
 10863  0AB2  00A0               	movwf	??_LCDInit
 10864  0AB3  305F               	movlw	95
 10865  0AB4                     u7527:	
 10866  0AB4  0B89               	decfsz	9,f
 10867  0AB5  2AB4               	goto	u7527
 10868  0AB6  0BA0               	decfsz	??_LCDInit,f
 10869  0AB7  2AB4               	goto	u7527
 10870                           
 10871                           ;lcd_hd44780_pic16.c: 194: TRISB&=(~(0x0F<<0));
 10872  0AB8  30F0               	movlw	240
 10873  0AB9  0020               	movlb	0	; select bank0
 10874  0ABA  00A0               	movwf	??_LCDInit
 10875  0ABB  0820               	movf	??_LCDInit,w
 10876  0ABC  0021               	movlb	1	; select bank1
 10877  0ABD  058D               	andwf	13,f	;volatile
 10878                           
 10879                           ;lcd_hd44780_pic16.c: 196: TRISDbits.TRISD0=0;
 10880  0ABE  100F               	bcf	15,0	;volatile
 10881                           
 10882                           ;lcd_hd44780_pic16.c: 197: TRISDbits.TRISD3=0;
 10883  0ABF  118F               	bcf	15,3	;volatile
 10884                           
 10885                           ;lcd_hd44780_pic16.c: 198: TRISDbits.TRISD1=0;
 10886  0AC0  108F               	bcf	15,1	;volatile
 10887                           
 10888                           ;lcd_hd44780_pic16.c: 200: PORTB&=(~(0x0F<<0));
 10889  0AC1  30F0               	movlw	240
 10890  0AC2  0020               	movlb	0	; select bank0
 10891  0AC3  00A0               	movwf	??_LCDInit
 10892  0AC4  0820               	movf	??_LCDInit,w
 10893  0AC5  058D               	andwf	13,f	;volatile
 10894                           
 10895                           ;lcd_hd44780_pic16.c: 202: (RD0=0);
 10896  0AC6  100F               	bcf	15,0	;volatile
 10897                           
 10898                           ;lcd_hd44780_pic16.c: 203: (RD1=0);
 10899  0AC7  108F               	bcf	15,1	;volatile
 10900                           
 10901                           ;lcd_hd44780_pic16.c: 204: (RD3=0);
 10902  0AC8  118F               	bcf	15,3	;volatile
 10903                           
 10904                           ;lcd_hd44780_pic16.c: 207: _delay((unsigned long)((1)*(18432000/4000000.0)));
 10905  0AC9  3200               	nop2	;2 cycle nop
 10906  0ACA  3200               	nop2	;2 cycle nop
 10907                           
 10908                           ;lcd_hd44780_pic16.c: 209: (RD0=1);
 10909  0ACB  0020               	movlb	0	; select bank0
 10910  0ACC  140F               	bsf	15,0	;volatile
 10911                           
 10912                           ;lcd_hd44780_pic16.c: 211: PORTB|=((0b00101000)<<0);
 10913  0ACD  3028               	movlw	40
 10914  0ACE  00A0               	movwf	??_LCDInit
 10915  0ACF  0820               	movf	??_LCDInit,w
 10916  0AD0  048D               	iorwf	13,f	;volatile
 10917                           
 10918                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((1)*(18432000/4000000.0)));
 10919  0AD1  3200               	nop2	;2 cycle nop
 10920  0AD2  3200               	nop2	;2 cycle nop
 10921                           
 10922                           ;lcd_hd44780_pic16.c: 213: (RD0=0);
 10923  0AD3  0020               	movlb	0	; select bank0
 10924  0AD4  100F               	bcf	15,0	;volatile
 10925                           
 10926                           ;lcd_hd44780_pic16.c: 214: _delay((unsigned long)((1)*(18432000/4000000.0)));
 10927  0AD5  3200               	nop2	;2 cycle nop
 10928  0AD6  3200               	nop2	;2 cycle nop
 10929                           
 10930                           ;lcd_hd44780_pic16.c: 218: _delay((unsigned long)((1)*(18432000/4000.0)));
 10931  0AD7  3006               	movlw	6
 10932  0AD8  0020               	movlb	0	; select bank0
 10933  0AD9  00A0               	movwf	??_LCDInit
 10934  0ADA  30FB               	movlw	251
 10935  0ADB                     u7537:	
 10936  0ADB  0B89               	decfsz	9,f
 10937  0ADC  2ADB               	goto	u7537
 10938  0ADD  0BA0               	decfsz	??_LCDInit,f
 10939  0ADE  2ADB               	goto	u7537
 10940                           
 10941                           ;lcd_hd44780_pic16.c: 228: (LCDByte(0b00101000,0));
 10942  0ADF  01F2               	clrf	LCDByte@isdata
 10943  0AE0  3028               	movlw	40
 10944  0AE1  3188  20DD  318A   	fcall	_LCDByte
 10945                           
 10946                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((54)*(18432000/4000.0)));
 10947  0AE4  3002               	movlw	2
 10948  0AE5  0020               	movlb	0	; select bank0
 10949  0AE6  00A1               	movwf	??_LCDInit+1
 10950  0AE7  3044               	movlw	68
 10951  0AE8  00A0               	movwf	??_LCDInit
 10952  0AE9  3025               	movlw	37
 10953  0AEA                     u7547:	
 10954  0AEA  0B89               	decfsz	9,f
 10955  0AEB  2AEA               	goto	u7547
 10956  0AEC  0BA0               	decfsz	??_LCDInit,f
 10957  0AED  2AEA               	goto	u7547
 10958  0AEE  0BA1               	decfsz	??_LCDInit+1,f
 10959  0AEF  2AEA               	goto	u7547
 10960                           
 10961                           ;lcd_hd44780_pic16.c: 230: (LCDByte(0b00000110,0));
 10962  0AF0  01F2               	clrf	LCDByte@isdata
 10963  0AF1  3006               	movlw	6
 10964  0AF2  3188  20DD  318A   	fcall	_LCDByte
 10965                           
 10966                           ;lcd_hd44780_pic16.c: 231: _delay((unsigned long)((6)*(18432000/4000000.0)));
 10967  0AF5  3009               	movlw	9
 10968  0AF6                     u7557:	
 10969  0AF6  0B89               	decfsz	9,f
 10970  0AF7  2AF6               	goto	u7557
 10971                           
 10972                           ;lcd_hd44780_pic16.c: 232: (LCDByte(0b00001100|style,0));
 10973  0AF8  01F2               	clrf	LCDByte@isdata
 10974  0AF9  0879               	movf	LCDInit@style,w
 10975  0AFA  380C               	iorlw	12
 10976  0AFB  3188  20DD  318A   	fcall	_LCDByte
 10977                           
 10978                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((4)*(18432000/4000.0)));
 10979  0AFE  3018               	movlw	24
 10980  0AFF  0020               	movlb	0	; select bank0
 10981  0B00  00A0               	movwf	??_LCDInit
 10982  0B01  30EF               	movlw	239
 10983  0B02                     u7567:	
 10984  0B02  0B89               	decfsz	9,f
 10985  0B03  2B02               	goto	u7567
 10986  0B04  0BA0               	decfsz	??_LCDInit,f
 10987  0B05  2B02               	goto	u7567
 10988                           
 10989                           ;lcd_hd44780_pic16.c: 237: (LCDByte(0b00000001,0));
 10990  0B06  01F2               	clrf	LCDByte@isdata
 10991  0B07  3001               	movlw	1
 10992  0B08  3188  20DD         	fcall	_LCDByte
 10993  0B0A  0008               	return
 10994  0B0B                     __end_of_LCDInit:	
 10995                           
 10996                           	psect	text50
 10997  08DD                     __ptext50:	
 10998 ;; *************** function _LCDByte *****************
 10999 ;; Defined at:
 11000 ;;		line 120 in file "lcd_hd44780_pic16.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;  c               1    wreg     unsigned char 
 11003 ;;  isdata          1    2[COMMON] unsigned char 
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;  c               1    7[COMMON] unsigned char 
 11006 ;;  temp            1    8[COMMON] unsigned char 
 11007 ;;  ln              1    6[COMMON] unsigned char 
 11008 ;;  hn              1    5[COMMON] unsigned char 
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      void 
 11011 ;; Registers used:
 11012 ;;		wreg, status,2, status,0
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11018 ;;      Params:         1       0       0       0       0       0       0       0
 11019 ;;      Locals:         4       0       0       0       0       0       0       0
 11020 ;;      Temps:          2       0       0       0       0       0       0       0
 11021 ;;      Totals:         7       0       0       0       0       0       0       0
 11022 ;;Total ram usage:        7 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    4
 11025 ;; This function calls:
 11026 ;;		Nothing
 11027 ;; This function is called by:
 11028 ;;		_afisare_inf_lcd
 11029 ;;		_setare_temperatura
 11030 ;;		_state_of_button
 11031 ;;		_main
 11032 ;;		_LCD_Init_apdatat
 11033 ;;		_LCDInit
 11034 ;;		_LCDWriteString
 11035 ;;		_LCDWriteInt
 11036 ;;		_LCDGotoXY
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _LCDByte
 11042  08DD                     _LCDByte:	
 11043                           
 11044                           ;incstack = 0
 11045                           ; Regs used in _LCDByte: [wreg+status,2+status,0]
 11046                           ;LCDByte@c stored from wreg
 11047  08DD  00F7               	movwf	LCDByte@c
 11048                           
 11049                           ;lcd_hd44780_pic16.c: 129: uint8_t hn,ln;
 11050                           ;lcd_hd44780_pic16.c: 130: uint8_t temp;
 11051                           ;lcd_hd44780_pic16.c: 132: hn=c>>4;
 11052  08DE  0877               	movf	LCDByte@c,w
 11053  08DF  00F3               	movwf	??_LCDByte
 11054  08E0  3004               	movlw	4
 11055  08E1                     u5255:	
 11056  08E1  36F3               	lsrf	??_LCDByte,f
 11057  08E2  0B89               	decfsz	9,f
 11058  08E3  28E1               	goto	u5255
 11059  08E4  0873               	movf	??_LCDByte,w
 11060  08E5  00F4               	movwf	??_LCDByte+1
 11061  08E6  0874               	movf	??_LCDByte+1,w
 11062  08E7  00F5               	movwf	LCDByte@hn
 11063                           
 11064                           ;lcd_hd44780_pic16.c: 133: ln=(c & 0x0F);
 11065  08E8  0877               	movf	LCDByte@c,w
 11066  08E9  390F               	andlw	15
 11067  08EA  00F3               	movwf	??_LCDByte
 11068  08EB  0873               	movf	??_LCDByte,w
 11069  08EC  00F6               	movwf	LCDByte@ln
 11070                           
 11071                           ;lcd_hd44780_pic16.c: 135: if(isdata==0)
 11072  08ED  0872               	movf	LCDByte@isdata,w
 11073  08EE  1D03               	btfss	3,2
 11074  08EF  28F3               	goto	l706
 11075                           
 11076                           ;lcd_hd44780_pic16.c: 136: (RD3=0);
 11077  08F0  0020               	movlb	0	; select bank0
 11078  08F1  118F               	bcf	15,3	;volatile
 11079  08F2  28F5               	goto	l4860
 11080  08F3                     l706:	
 11081                           
 11082                           ;lcd_hd44780_pic16.c: 137: else
 11083                           ;lcd_hd44780_pic16.c: 138: (RD3=1);
 11084  08F3  0020               	movlb	0	; select bank0
 11085  08F4  158F               	bsf	15,3	;volatile
 11086  08F5                     l4860:	
 11087                           
 11088                           ;lcd_hd44780_pic16.c: 140: _delay((unsigned long)((10)*(18432000/4000000.0)));
 11089  08F5  300F               	movlw	15
 11090  08F6                     u7577:	
 11091  08F6  0B89               	decfsz	9,f
 11092  08F7  28F6               	goto	u7577
 11093  08F8  0000               	nop
 11094                           
 11095                           ;lcd_hd44780_pic16.c: 142: (RD0=1);
 11096  08F9  0020               	movlb	0	; select bank0
 11097  08FA  140F               	bsf	15,0	;volatile
 11098                           
 11099                           ;lcd_hd44780_pic16.c: 146: temp=(PORTB & (~(0X0F<<0)))|((hn<<0));
 11100  08FB  080D               	movf	13,w	;volatile
 11101  08FC  39F0               	andlw	240
 11102  08FD  0475               	iorwf	LCDByte@hn,w
 11103  08FE  00F3               	movwf	??_LCDByte
 11104  08FF  0873               	movf	??_LCDByte,w
 11105  0900  00F8               	movwf	LCDByte@temp
 11106                           
 11107                           ;lcd_hd44780_pic16.c: 147: PORTB=temp;
 11108  0901  0878               	movf	LCDByte@temp,w
 11109  0902  008D               	movwf	13	;volatile
 11110                           
 11111                           ;lcd_hd44780_pic16.c: 149: _delay((unsigned long)((10)*(18432000/4000000.0)));
 11112  0903  300F               	movlw	15
 11113  0904                     u7587:	
 11114  0904  0B89               	decfsz	9,f
 11115  0905  2904               	goto	u7587
 11116  0906  0000               	nop
 11117                           
 11118                           ;lcd_hd44780_pic16.c: 153: (RD0=0);
 11119  0907  0020               	movlb	0	; select bank0
 11120  0908  100F               	bcf	15,0	;volatile
 11121                           
 11122                           ;lcd_hd44780_pic16.c: 155: _delay((unsigned long)((10)*(18432000/4000000.0)));
 11123  0909  300F               	movlw	15
 11124  090A                     u7597:	
 11125  090A  0B89               	decfsz	9,f
 11126  090B  290A               	goto	u7597
 11127  090C  0000               	nop
 11128                           
 11129                           ;lcd_hd44780_pic16.c: 158: (RD0=1);
 11130  090D  0020               	movlb	0	; select bank0
 11131  090E  140F               	bsf	15,0	;volatile
 11132                           
 11133                           ;lcd_hd44780_pic16.c: 160: temp=(PORTB & (~(0X0F<<0)))|((ln<<0));
 11134  090F  080D               	movf	13,w	;volatile
 11135  0910  39F0               	andlw	240
 11136  0911  0476               	iorwf	LCDByte@ln,w
 11137  0912  00F3               	movwf	??_LCDByte
 11138  0913  0873               	movf	??_LCDByte,w
 11139  0914  00F8               	movwf	LCDByte@temp
 11140                           
 11141                           ;lcd_hd44780_pic16.c: 162: PORTB=temp;
 11142  0915  0878               	movf	LCDByte@temp,w
 11143  0916  008D               	movwf	13	;volatile
 11144                           
 11145                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((1)*(18432000/4000000.0)));
 11146  0917  3200               	nop2	;2 cycle nop
 11147  0918  3200               	nop2	;2 cycle nop
 11148                           
 11149                           ;lcd_hd44780_pic16.c: 168: (RD0=0);
 11150  0919  0020               	movlb	0	; select bank0
 11151  091A  100F               	bcf	15,0	;volatile
 11152                           
 11153                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(18432000/4000.0)));
 11154  091B  3006               	movlw	6
 11155  091C  00F3               	movwf	??_LCDByte
 11156  091D  30FB               	movlw	251
 11157  091E                     u7607:	
 11158  091E  0B89               	decfsz	9,f
 11159  091F  291E               	goto	u7607
 11160  0920  0BF3               	decfsz	??_LCDByte,f
 11161  0921  291E               	goto	u7607
 11162  0922  0000               	nop
 11163  0923  0008               	return
 11164  0924                     __end_of_LCDByte:	
 11165                           
 11166                           	psect	text51
 11167  145F                     __ptext51:	
 11168 ;; *************** function _Keyboard_Manager *****************
 11169 ;; Defined at:
 11170 ;;		line 9 in file "keyboard.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;		None
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;		None
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  1    wreg      void 
 11177 ;; Registers used:
 11178 ;;		wreg, status,2, status,0, pclath, cstack
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11184 ;;      Params:         0       0       0       0       0       0       0       0
 11185 ;;      Locals:         0       0       0       0       0       0       0       0
 11186 ;;      Temps:          0       0       0       0       0       0       0       0
 11187 ;;      Totals:         0       0       0       0       0       0       0       0
 11188 ;;Total ram usage:        0 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    5
 11191 ;; This function calls:
 11192 ;;		_Check_KeyPressed
 11193 ;;		_Check_KeyReleased
 11194 ;; This function is called by:
 11195 ;;		_main
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           
 11200                           ;psect for function _Keyboard_Manager
 11201  145F                     _Keyboard_Manager:	
 11202                           
 11203                           ;keyboard.c: 11: Check_KeyPressed();
 11204                           
 11205                           ;incstack = 0
 11206                           ; Regs used in _Keyboard_Manager: [wreg+status,2+status,0+pclath+cstack]
 11207  145F  318A  2258  3194   	fcall	_Check_KeyPressed
 11208                           
 11209                           ;keyboard.c: 12: Check_KeyReleased();
 11210  1462  3195  25B4         	fcall	_Check_KeyReleased
 11211  1464  0008               	return
 11212  1465                     __end_of_Keyboard_Manager:	
 11213                           
 11214                           	psect	text52
 11215  15B4                     __ptext52:	
 11216 ;; *************** function _Check_KeyReleased *****************
 11217 ;; Defined at:
 11218 ;;		line 56 in file "keyboard.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;		None
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      void 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11232 ;;      Params:         0       0       0       0       0       0       0       0
 11233 ;;      Locals:         0       0       0       0       0       0       0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0
 11235 ;;      Totals:         0       0       0       0       0       0       0       0
 11236 ;;Total ram usage:        0 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    4
 11239 ;; This function calls:
 11240 ;;		Nothing
 11241 ;; This function is called by:
 11242 ;;		_Keyboard_Manager
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           
 11247                           ;psect for function _Check_KeyReleased
 11248  15B4                     _Check_KeyReleased:	
 11249                           
 11250                           ;keyboard.c: 61: if(((PORTD & 0b01000000)!=0)&&(strKey_Counts.btnOK==3))
 11251                           
 11252                           ;incstack = 0
 11253                           ; Regs used in _Check_KeyReleased: [wreg+status,2+status,0]
 11254  15B4  0020               	movlb	0	; select bank0
 11255  15B5  1F0F               	btfss	15,6	;volatile
 11256  15B6  2DBF               	goto	l5488
 11257  15B7  087B               	movf	_strKey_Counts,w	;volatile
 11258  15B8  3903               	andlw	3
 11259  15B9  3A03               	xorlw	3
 11260  15BA  1D03               	skipz
 11261  15BB  2DBF               	goto	l5488
 11262                           
 11263                           ;keyboard.c: 62: {
 11264                           ;keyboard.c: 64: strKey_Pressed.btnOK=1;
 11265  15BC  146E               	bsf	_strKey_Pressed,0	;volatile
 11266                           
 11267                           ;keyboard.c: 65: strKey_Counts.btnOK=0;
 11268  15BD  30FC               	movlw	-4
 11269  15BE  05FB               	andwf	_strKey_Counts,f	;volatile
 11270  15BF                     l5488:	
 11271                           
 11272                           ;keyboard.c: 66: }
 11273                           ;keyboard.c: 68: if(((PORTD & 0b10000000)!=0)&&(strKey_Counts.btnUP==3))
 11274  15BF  1F8F               	btfss	15,7	;volatile
 11275  15C0  2DCA               	goto	l5496
 11276  15C1  0C7B               	rrf	_strKey_Counts,w	;volatile
 11277  15C2  0C89               	rrf	9,f
 11278  15C3  3903               	andlw	3
 11279  15C4  3A03               	xorlw	3
 11280  15C5  1D03               	skipz
 11281  15C6  2DCA               	goto	l5496
 11282                           
 11283                           ;keyboard.c: 69: {
 11284                           ;keyboard.c: 71: strKey_Pressed.btnUP=1;
 11285  15C7  14EE               	bsf	_strKey_Pressed,1	;volatile
 11286                           
 11287                           ;keyboard.c: 72: strKey_Counts.btnUP=0;
 11288  15C8  30F3               	movlw	-13
 11289  15C9  05FB               	andwf	_strKey_Counts,f	;volatile
 11290  15CA                     l5496:	
 11291                           
 11292                           ;keyboard.c: 73: }
 11293                           ;keyboard.c: 74: if(((PORTD & 0b00100000)!=0)&&(strKey_Counts.btnDOWN==3))
 11294  15CA  1E8F               	btfss	15,5	;volatile
 11295  15CB  0008               	return
 11296  15CC  0E7B               	swapf	_strKey_Counts,w	;volatile
 11297  15CD  3903               	andlw	3
 11298  15CE  3A03               	xorlw	3
 11299  15CF  1D03               	skipz
 11300  15D0  0008               	return
 11301                           
 11302                           ;keyboard.c: 75: {
 11303                           ;keyboard.c: 77: strKey_Pressed.btnDOWN=1;
 11304  15D1  156E               	bsf	_strKey_Pressed,2	;volatile
 11305                           
 11306                           ;keyboard.c: 78: strKey_Counts.btnDOWN=0;
 11307  15D2  30CF               	movlw	-49
 11308  15D3  05FB               	andwf	_strKey_Counts,f	;volatile
 11309  15D4  0008               	return
 11310  15D5                     __end_of_Check_KeyReleased:	
 11311                           
 11312                           	psect	text53
 11313  0A58                     __ptext53:	
 11314 ;; *************** function _Check_KeyPressed *****************
 11315 ;; Defined at:
 11316 ;;		line 15 in file "keyboard.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;		None
 11321 ;; Return value:  Size  Location     Type
 11322 ;;                  1    wreg      void 
 11323 ;; Registers used:
 11324 ;;		wreg, status,2, status,0
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11330 ;;      Params:         0       0       0       0       0       0       0       0
 11331 ;;      Locals:         0       0       0       0       0       0       0       0
 11332 ;;      Temps:          1       0       0       0       0       0       0       0
 11333 ;;      Totals:         1       0       0       0       0       0       0       0
 11334 ;;Total ram usage:        1 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    4
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_Keyboard_Manager
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _Check_KeyPressed
 11346  0A58                     _Check_KeyPressed:	
 11347                           
 11348                           ;keyboard.c: 21: if((PORTD & 0b01000000)==0)
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _Check_KeyPressed: [wreg+status,2+status,0]
 11352  0A58  0020               	movlb	0	; select bank0
 11353  0A59  1B0F               	btfsc	15,6	;volatile
 11354  0A5A  2A6A               	goto	l765
 11355                           
 11356                           ;keyboard.c: 22: {
 11357                           ;keyboard.c: 23: if(strKey_Counts.btnOK<3)
 11358  0A5B  087B               	movf	_strKey_Counts,w	;volatile
 11359  0A5C  3903               	andlw	3
 11360  0A5D  3A03               	xorlw	3
 11361  0A5E  1903               	skipnz
 11362  0A5F  2A73               	goto	l5460
 11363                           
 11364                           ;keyboard.c: 24: strKey_Counts.btnOK++;
 11365  0A60  087B               	movf	_strKey_Counts,w	;volatile
 11366  0A61  3903               	andlw	3
 11367  0A62  00F2               	movwf	??_Check_KeyPressed
 11368  0A63  0AF2               	incf	??_Check_KeyPressed,f
 11369  0A64  087B               	movf	_strKey_Counts,w	;volatile
 11370  0A65  0672               	xorwf	??_Check_KeyPressed,w
 11371  0A66  39FC               	andlw	-4
 11372  0A67  0672               	xorwf	??_Check_KeyPressed,w
 11373  0A68  00FB               	movwf	_strKey_Counts	;volatile
 11374                           
 11375                           ;keyboard.c: 25: }
 11376  0A69  2A73               	goto	l5460
 11377  0A6A                     l765:	
 11378                           
 11379                           ;keyboard.c: 26: else if(((PORTD & 0b01000000)!=0)&&(strKey_Counts.btnOK<3))
 11380  0A6A  1F0F               	btfss	15,6	;volatile
 11381  0A6B  2A73               	goto	l5460
 11382  0A6C  087B               	movf	_strKey_Counts,w	;volatile
 11383  0A6D  3903               	andlw	3
 11384  0A6E  3A03               	xorlw	3
 11385  0A6F  1903               	skipnz
 11386  0A70  2A73               	goto	l5460
 11387                           
 11388                           ;keyboard.c: 27: {
 11389                           ;keyboard.c: 28: strKey_Counts.btnOK=0;
 11390  0A71  30FC               	movlw	-4
 11391  0A72  05FB               	andwf	_strKey_Counts,f	;volatile
 11392  0A73                     l5460:	
 11393                           
 11394                           ;keyboard.c: 29: }
 11395                           ;keyboard.c: 32: if((PORTD & 0b10000000)==0)
 11396  0A73  1B8F               	btfsc	15,7	;volatile
 11397  0A74  2A89               	goto	l769
 11398                           
 11399                           ;keyboard.c: 33: {
 11400                           ;keyboard.c: 34: if(strKey_Counts.btnUP<3)
 11401  0A75  0C7B               	rrf	_strKey_Counts,w	;volatile
 11402  0A76  0C89               	rrf	9,f
 11403  0A77  3903               	andlw	3
 11404  0A78  3A03               	xorlw	3
 11405  0A79  1903               	skipnz
 11406  0A7A  2A93               	goto	l5470
 11407                           
 11408                           ;keyboard.c: 35: strKey_Counts.btnUP++;
 11409  0A7B  0C7B               	rrf	_strKey_Counts,w	;volatile
 11410  0A7C  00F2               	movwf	??_Check_KeyPressed
 11411  0A7D  0C72               	rrf	??_Check_KeyPressed,w
 11412  0A7E  3903               	andlw	3
 11413  0A7F  00F2               	movwf	??_Check_KeyPressed
 11414  0A80  0AF2               	incf	??_Check_KeyPressed,f
 11415  0A81  0DF2               	rlf	??_Check_KeyPressed,f
 11416  0A82  0DF2               	rlf	??_Check_KeyPressed,f
 11417  0A83  087B               	movf	_strKey_Counts,w	;volatile
 11418  0A84  0672               	xorwf	??_Check_KeyPressed,w
 11419  0A85  39F3               	andlw	-13
 11420  0A86  0672               	xorwf	??_Check_KeyPressed,w
 11421  0A87  00FB               	movwf	_strKey_Counts	;volatile
 11422                           
 11423                           ;keyboard.c: 36: }
 11424  0A88  2A93               	goto	l5470
 11425  0A89                     l769:	
 11426                           
 11427                           ;keyboard.c: 37: else if(((PORTD & 0b10000000)!=0)&&(strKey_Counts.btnUP<3))
 11428  0A89  1F8F               	btfss	15,7	;volatile
 11429  0A8A  2A93               	goto	l5470
 11430  0A8B  0C7B               	rrf	_strKey_Counts,w	;volatile
 11431  0A8C  0C89               	rrf	9,f
 11432  0A8D  3903               	andlw	3
 11433  0A8E  3A03               	xorlw	3
 11434  0A8F  1903               	skipnz
 11435  0A90  2A93               	goto	l5470
 11436                           
 11437                           ;keyboard.c: 38: {
 11438                           ;keyboard.c: 39: strKey_Counts.btnUP=0;
 11439  0A91  30F3               	movlw	-13
 11440  0A92  05FB               	andwf	_strKey_Counts,f	;volatile
 11441  0A93                     l5470:	
 11442                           
 11443                           ;keyboard.c: 40: }
 11444                           ;keyboard.c: 43: if((PORTD & 0b00100000)==0)
 11445  0A93  1A8F               	btfsc	15,5	;volatile
 11446  0A94  2AA5               	goto	l773
 11447                           
 11448                           ;keyboard.c: 44: {
 11449                           ;keyboard.c: 45: if(strKey_Counts.btnDOWN<3)
 11450  0A95  0E7B               	swapf	_strKey_Counts,w	;volatile
 11451  0A96  3903               	andlw	3
 11452  0A97  3A03               	xorlw	3
 11453  0A98  1903               	skipnz
 11454  0A99  0008               	return
 11455                           
 11456                           ;keyboard.c: 46: strKey_Counts.btnDOWN++;
 11457  0A9A  0E7B               	swapf	_strKey_Counts,w	;volatile
 11458  0A9B  3903               	andlw	3
 11459  0A9C  00F2               	movwf	??_Check_KeyPressed
 11460  0A9D  0AF2               	incf	??_Check_KeyPressed,f
 11461  0A9E  0EF2               	swapf	??_Check_KeyPressed,f
 11462  0A9F  087B               	movf	_strKey_Counts,w	;volatile
 11463  0AA0  0672               	xorwf	??_Check_KeyPressed,w
 11464  0AA1  39CF               	andlw	-49
 11465  0AA2  0672               	xorwf	??_Check_KeyPressed,w
 11466  0AA3  00FB               	movwf	_strKey_Counts	;volatile
 11467                           
 11468                           ;keyboard.c: 47: }
 11469  0AA4  0008               	return
 11470  0AA5                     l773:	
 11471                           
 11472                           ;keyboard.c: 48: else if(((PORTD & 0b00100000)!=0)&&(strKey_Counts.btnDOWN<3))
 11473  0AA5  1E8F               	btfss	15,5	;volatile
 11474  0AA6  0008               	return
 11475  0AA7  0E7B               	swapf	_strKey_Counts,w	;volatile
 11476  0AA8  3903               	andlw	3
 11477  0AA9  3A03               	xorlw	3
 11478  0AAA  1903               	skipnz
 11479  0AAB  0008               	return
 11480                           
 11481                           ;keyboard.c: 49: {
 11482                           ;keyboard.c: 50: strKey_Counts.btnDOWN=0;
 11483  0AAC  30CF               	movlw	-49
 11484  0AAD  05FB               	andwf	_strKey_Counts,f	;volatile
 11485  0AAE  0008               	return
 11486  0AAF                     __end_of_Check_KeyPressed:	
 11487                           
 11488                           	psect	text54
 11489  0C33                     __ptext54:	
 11490 ;; *************** function _DHT_result *****************
 11491 ;; Defined at:
 11492 ;;		line 39 in file "dht11.c"
 11493 ;; Parameters:    Size  Location     Type
 11494 ;;		None
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;  x               2    6[COMMON] int 
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  1    wreg      void 
 11499 ;; Registers used:
 11500 ;;		wreg, status,2, status,0, pclath, cstack
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11506 ;;      Params:         0       0       0       0       0       0       0       0
 11507 ;;      Locals:         2       0       0       0       0       0       0       0
 11508 ;;      Temps:          0      14       0       0       0       0       0       0
 11509 ;;      Totals:         2      14       0       0       0       0       0       0
 11510 ;;Total ram usage:       16 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    5
 11513 ;; This function calls:
 11514 ;;		_ReadData
 11515 ;; This function is called by:
 11516 ;;		_main
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           
 11521                           ;psect for function _DHT_result
 11522  0C33                     _DHT_result:	
 11523                           
 11524                           ;dht11.c: 41: RH_byte1 = ReadData();
 11525                           
 11526                           ;incstack = 0
 11527                           ; Regs used in _DHT_result: [wreg+status,2+status,0+pclath+cstack]
 11528  0C33  3197  27C8  318C   	fcall	_ReadData
 11529  0C36  0020               	movlb	0	; select bank0
 11530  0C37  00A0               	movwf	??_DHT_result
 11531  0C38  0820               	movf	??_DHT_result,w
 11532  0C39  00ED               	movwf	_RH_byte1
 11533                           
 11534                           ;dht11.c: 42: RH_byte2 = ReadData();
 11535  0C3A  3197  27C8  318C   	fcall	_ReadData
 11536  0C3D  0020               	movlb	0	; select bank0
 11537  0C3E  00A0               	movwf	??_DHT_result
 11538  0C3F  0820               	movf	??_DHT_result,w
 11539  0C40  0022               	movlb	2	; select bank2
 11540  0C41  00E7               	movwf	_RH_byte2^(0+256)
 11541                           
 11542                           ;dht11.c: 43: T_byte1 = ReadData();
 11543  0C42  3197  27C8  318C   	fcall	_ReadData
 11544  0C45  0020               	movlb	0	; select bank0
 11545  0C46  00A0               	movwf	??_DHT_result
 11546  0C47  0820               	movf	??_DHT_result,w
 11547  0C48  00EC               	movwf	_T_byte1
 11548                           
 11549                           ;dht11.c: 44: T_byte2 = ReadData();
 11550  0C49  3197  27C8  318C   	fcall	_ReadData
 11551  0C4C  0020               	movlb	0	; select bank0
 11552  0C4D  00A0               	movwf	??_DHT_result
 11553  0C4E  0820               	movf	??_DHT_result,w
 11554  0C4F  0022               	movlb	2	; select bank2
 11555  0C50  00E8               	movwf	_T_byte2^(0+256)
 11556                           
 11557                           ;dht11.c: 45: Sum = ReadData();
 11558  0C51  3197  27C8  318C   	fcall	_ReadData
 11559  0C54  0020               	movlb	0	; select bank0
 11560  0C55  00A0               	movwf	??_DHT_result
 11561  0C56  0820               	movf	??_DHT_result,w
 11562  0C57  0022               	movlb	2	; select bank2
 11563  0C58  00E3               	movwf	_Sum^(0+256)
 11564                           
 11565                           ;dht11.c: 47: if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF))
 11566  0C59  0868               	movf	_T_byte2^(0+256),w
 11567  0C5A  0020               	movlb	0	; select bank0
 11568  0C5B  00A0               	movwf	??_DHT_result
 11569  0C5C  01A1               	clrf	??_DHT_result+1
 11570  0C5D  086C               	movf	_T_byte1,w
 11571  0C5E  00A2               	movwf	??_DHT_result+2
 11572  0C5F  01A3               	clrf	??_DHT_result+3
 11573  0C60  086D               	movf	_RH_byte1,w
 11574  0C61  0022               	movlb	2	; select bank2
 11575  0C62  0767               	addwf	_RH_byte2^(0+256),w
 11576  0C63  0020               	movlb	0	; select bank0
 11577  0C64  00A4               	movwf	??_DHT_result+4
 11578  0C65  01A5               	clrf	??_DHT_result+5
 11579  0C66  0DA5               	rlf	??_DHT_result+5,f
 11580  0C67  0822               	movf	??_DHT_result+2,w
 11581  0C68  0724               	addwf	??_DHT_result+4,w
 11582  0C69  00A6               	movwf	??_DHT_result+6
 11583  0C6A  0823               	movf	??_DHT_result+3,w
 11584  0C6B  3D25               	addwfc	??_DHT_result+5,w
 11585  0C6C  00A7               	movwf	??_DHT_result+7
 11586  0C6D  0820               	movf	??_DHT_result,w
 11587  0C6E  0726               	addwf	??_DHT_result+6,w
 11588  0C6F  00A8               	movwf	??_DHT_result+8
 11589  0C70  0821               	movf	??_DHT_result+1,w
 11590  0C71  3D27               	addwfc	??_DHT_result+7,w
 11591  0C72  00A9               	movwf	??_DHT_result+9
 11592  0C73  30FF               	movlw	255
 11593  0C74  0528               	andwf	??_DHT_result+8,w
 11594  0C75  00AA               	movwf	??_DHT_result+10
 11595  0C76  3000               	movlw	0
 11596  0C77  0529               	andwf	??_DHT_result+9,w
 11597  0C78  00AB               	movwf	??_DHT_result+11
 11598  0C79  0022               	movlb	2	; select bank2
 11599  0C7A  0863               	movf	_Sum^(0+256),w
 11600  0C7B  0020               	movlb	0	; select bank0
 11601  0C7C  00AC               	movwf	??_DHT_result+12
 11602  0C7D  01AD               	clrf	??_DHT_result+13
 11603  0C7E  082B               	movf	??_DHT_result+11,w
 11604  0C7F  062D               	xorwf	??_DHT_result+13,w
 11605  0C80  1D03               	skipz
 11606  0C81  2C84               	goto	u7035
 11607  0C82  082A               	movf	??_DHT_result+10,w
 11608  0C83  062C               	xorwf	??_DHT_result+12,w
 11609  0C84                     u7035:	
 11610  0C84  1D03               	skipz
 11611  0C85  2C91               	goto	l917
 11612                           
 11613                           ;dht11.c: 48: {
 11614                           ;dht11.c: 49: Temp = T_byte1;
 11615  0C86  086C               	movf	_T_byte1,w
 11616  0C87  00A0               	movwf	??_DHT_result
 11617  0C88  0820               	movf	??_DHT_result,w
 11618  0C89  0022               	movlb	2	; select bank2
 11619  0C8A  00E5               	movwf	_Temp^(0+256)
 11620                           
 11621                           ;dht11.c: 50: RH = RH_byte1;
 11622  0C8B  0020               	movlb	0	; select bank0
 11623  0C8C  086D               	movf	_RH_byte1,w
 11624  0C8D  00A0               	movwf	??_DHT_result
 11625  0C8E  0820               	movf	??_DHT_result,w
 11626  0C8F  0022               	movlb	2	; select bank2
 11627  0C90  00E4               	movwf	_RH^(0+256)
 11628  0C91                     l917:	
 11629                           
 11630                           ;dht11.c: 51: }
 11631                           ;dht11.c: 52: int x=RH_byte1;
 11632  0C91  0020               	movlb	0	; select bank0
 11633  0C92  086D               	movf	_RH_byte1,w
 11634  0C93  00A0               	movwf	??_DHT_result
 11635  0C94  01A1               	clrf	??_DHT_result+1
 11636  0C95  0820               	movf	??_DHT_result,w
 11637  0C96  00F6               	movwf	DHT_result@x
 11638  0C97  0821               	movf	??_DHT_result+1,w
 11639  0C98  00F7               	movwf	DHT_result@x+1
 11640                           
 11641                           ;dht11.c: 53: umiditate=RH_byte1;
 11642  0C99  086D               	movf	_RH_byte1,w
 11643  0C9A  00A0               	movwf	??_DHT_result
 11644  0C9B  01A1               	clrf	??_DHT_result+1
 11645  0C9C  0820               	movf	??_DHT_result,w
 11646  0C9D  0022               	movlb	2	; select bank2
 11647  0C9E  00D8               	movwf	_umiditate^(0+256)
 11648  0C9F  0020               	movlb	0	; select bank0
 11649  0CA0  0821               	movf	??_DHT_result+1,w
 11650  0CA1  0022               	movlb	2	; select bank2
 11651  0CA2  00D9               	movwf	(_umiditate+1)^(0+256)
 11652  0CA3  0008               	return
 11653  0CA4                     __end_of_DHT_result:	
 11654                           
 11655                           	psect	text55
 11656  17C8                     __ptext55:	
 11657 ;; *************** function _ReadData *****************
 11658 ;; Defined at:
 11659 ;;		line 25 in file "dht11.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;		None
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;  j               1    5[COMMON] unsigned char 
 11664 ;;  i               1    4[COMMON] unsigned char 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      unsigned char 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11674 ;;      Params:         0       0       0       0       0       0       0       0
 11675 ;;      Locals:         2       0       0       0       0       0       0       0
 11676 ;;      Temps:          2       0       0       0       0       0       0       0
 11677 ;;      Totals:         4       0       0       0       0       0       0       0
 11678 ;;Total ram usage:        4 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    4
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_DHT_result
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           
 11689                           ;psect for function _ReadData
 11690  17C8                     _ReadData:	
 11691                           
 11692                           ;dht11.c: 27: char i, j;
 11693                           ;dht11.c: 28: for(j = 0; j < 8; j++){
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _ReadData: [wreg+status,2+status,0]
 11697  17C8  01F5               	clrf	ReadData@j
 11698  17C9  3008               	movlw	8
 11699  17CA  0275               	subwf	ReadData@j,w
 11700  17CB  1803               	btfsc	3,0
 11701  17CC  2FFE               	goto	l5550
 11702  17CD                     l906:	
 11703                           ;dht11.c: 29: while(!PORTDbits.RD2 );
 11704                           
 11705  17CD  0020               	movlb	0	; select bank0
 11706  17CE  1D0F               	btfss	15,2	;volatile
 11707  17CF  2FCD               	goto	l906
 11708                           
 11709                           ;dht11.c: 30: _delay((unsigned long)((30)*(18432000/4000000.0)));
 11710  17D0  302E               	movlw	46
 11711  17D1                     u7617:	
 11712  17D1  0B89               	decfsz	9,f
 11713  17D2  2FD1               	goto	u7617
 11714                           
 11715                           ;dht11.c: 31: if(PORTDbits.RD2 == 0)
 11716  17D3  0020               	movlb	0	; select bank0
 11717  17D4  190F               	btfsc	15,2	;volatile
 11718  17D5  2FE6               	goto	l5544
 11719                           
 11720                           ;dht11.c: 32: i&= ~(1<<(7 - j));
 11721  17D6  3001               	movlw	1
 11722  17D7  00F2               	movwf	??_ReadData
 11723  17D8  0375               	decf	ReadData@j,w
 11724  17D9  3AFF               	xorlw	255
 11725  17DA  3E07               	addlw	7
 11726  17DB  0A89               	incf	9,f
 11727  17DC  2FDE               	goto	u6154
 11728  17DD                     u6155:	
 11729  17DD  35F2               	lslf	??_ReadData,f
 11730  17DE                     u6154:	
 11731  17DE  0B89               	decfsz	9,f
 11732  17DF  2FDD               	goto	u6155
 11733  17E0  0872               	movf	??_ReadData,w
 11734  17E1  3AFF               	xorlw	255
 11735  17E2  00F3               	movwf	??_ReadData+1
 11736  17E3  0873               	movf	??_ReadData+1,w
 11737  17E4  05F4               	andwf	ReadData@i,f
 11738  17E5  2FF6               	goto	l5546
 11739  17E6                     l5544:	
 11740                           
 11741                           ;dht11.c: 33: else {i|= (1 << (7 - j));
 11742  17E6  3001               	movlw	1
 11743  17E7  00F2               	movwf	??_ReadData
 11744  17E8  0375               	decf	ReadData@j,w
 11745  17E9  3AFF               	xorlw	255
 11746  17EA  3E07               	addlw	7
 11747  17EB  0A89               	incf	9,f
 11748  17EC  2FEE               	goto	u6164
 11749  17ED                     u6165:	
 11750  17ED  35F2               	lslf	??_ReadData,f
 11751  17EE                     u6164:	
 11752  17EE  0B89               	decfsz	9,f
 11753  17EF  2FED               	goto	u6165
 11754  17F0  0872               	movf	??_ReadData,w
 11755  17F1  00F3               	movwf	??_ReadData+1
 11756  17F2  0873               	movf	??_ReadData+1,w
 11757  17F3  04F4               	iorwf	ReadData@i,f
 11758  17F4                     l911:	
 11759                           ;dht11.c: 34: while(PORTDbits.RD2 );}
 11760                           
 11761  17F4  190F               	btfsc	15,2	;volatile
 11762  17F5  2FF4               	goto	l911
 11763  17F6                     l5546:	
 11764  17F6  3001               	movlw	1
 11765  17F7  00F2               	movwf	??_ReadData
 11766  17F8  0872               	movf	??_ReadData,w
 11767  17F9  07F5               	addwf	ReadData@j,f
 11768  17FA  3008               	movlw	8
 11769  17FB  0275               	subwf	ReadData@j,w
 11770  17FC  1C03               	skipc
 11771  17FD  2FCD               	goto	l906
 11772  17FE                     l5550:	
 11773                           
 11774                           ;dht11.c: 35: }
 11775                           ;dht11.c: 36: return i;
 11776  17FE  0874               	movf	ReadData@i,w
 11777  17FF  0008               	return
 11778  1800                     __end_of_ReadData:	
 11779                           
 11780                           	psect	text56
 11781  14F4                     __ptext56:	
 11782 ;; *************** function _CheckResponse *****************
 11783 ;; Defined at:
 11784 ;;		line 16 in file "dht11.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;		None
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;		None
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  1    wreg      void 
 11791 ;; Registers used:
 11792 ;;		wreg, status,2
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11798 ;;      Params:         0       0       0       0       0       0       0       0
 11799 ;;      Locals:         0       0       0       0       0       0       0       0
 11800 ;;      Temps:          0       0       0       0       0       0       0       0
 11801 ;;      Totals:         0       0       0       0       0       0       0       0
 11802 ;;Total ram usage:        0 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    4
 11805 ;; This function calls:
 11806 ;;		Nothing
 11807 ;; This function is called by:
 11808 ;;		_main
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           
 11813                           ;psect for function _CheckResponse
 11814  14F4                     _CheckResponse:	
 11815                           
 11816                           ;dht11.c: 18: Check = 0;
 11817                           
 11818                           ;incstack = 0
 11819                           ; Regs used in _CheckResponse: [wreg+status,2]
 11820  14F4  0022               	movlb	2	; select bank2
 11821  14F5  01E9               	clrf	_Check^(0+256)
 11822                           
 11823                           ;dht11.c: 19: _delay((unsigned long)((40)*(18432000/4000000.0)));
 11824  14F6  303D               	movlw	61
 11825  14F7                     u7627:	
 11826  14F7  0B89               	decfsz	9,f
 11827  14F8  2CF7               	goto	u7627
 11828  14F9  0000               	nop
 11829                           
 11830                           ;dht11.c: 20: if (PORTDbits.RD2 == 0){
 11831  14FA  0020               	movlb	0	; select bank0
 11832  14FB  190F               	btfsc	15,2	;volatile
 11833  14FC  0008               	return
 11834                           
 11835                           ;dht11.c: 21: _delay((unsigned long)((80)*(18432000/4000000.0)));
 11836  14FD  307A               	movlw	122
 11837  14FE                     u7637:	
 11838  14FE  0B89               	decfsz	9,f
 11839  14FF  2CFE               	goto	u7637
 11840  1500  3200               	nop2
 11841                           
 11842                           ;dht11.c: 22: if (PORTDbits.RD2 == 1) Check = 1; _delay((unsigned long)((40)*(18432000/4
      +                          000000.0)));}
 11843  1501  0020               	movlb	0	; select bank0
 11844  1502  1D0F               	btfss	15,2	;volatile
 11845  1503  2D07               	goto	l6020
 11846  1504  0022               	movlb	2	; select bank2
 11847  1505  01E9               	clrf	_Check^(0+256)
 11848  1506  0AE9               	incf	_Check^(0+256),f
 11849  1507                     l6020:	
 11850  1507  303D               	movlw	61
 11851  1508                     u7647:	
 11852  1508  0B89               	decfsz	9,f
 11853  1509  2D08               	goto	u7647
 11854  150A  0000               	nop
 11855  150B  0008               	return
 11856  150C                     __end_of_CheckResponse:	
 11857                           
 11858                           	psect	text57
 11859  0924                     __ptext57:	
 11860 ;; *************** function _ADC_conversii *****************
 11861 ;; Defined at:
 11862 ;;		line 148 in file "mcc_generated_files/adc.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;		None
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;  i               2   14[BANK0 ] int 
 11867 ;;  temper          2   12[BANK0 ] unsigned int 
 11868 ;;  rezultat        2   10[BANK0 ] unsigned int 
 11869 ;; Return value:  Size  Location     Type
 11870 ;;                  2    7[BANK0 ] unsigned int 
 11871 ;; Registers used:
 11872 ;;		wreg, status,2, status,0, pclath, cstack
 11873 ;; Tracked objects:
 11874 ;;		On entry : 0/0
 11875 ;;		On exit  : 0/0
 11876 ;;		Unchanged: 0/0
 11877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11878 ;;      Params:         0       2       0       0       0       0       0       0
 11879 ;;      Locals:         0       6       0       0       0       0       0       0
 11880 ;;      Temps:          0       1       0       0       0       0       0       0
 11881 ;;      Totals:         0       9       0       0       0       0       0       0
 11882 ;;Total ram usage:        9 bytes
 11883 ;; Hardware stack levels used:    1
 11884 ;; Hardware stack levels required when called:    5
 11885 ;; This function calls:
 11886 ;;		_ADC_GetConversion
 11887 ;;		_ADC_StartConversion
 11888 ;;		___lwdiv
 11889 ;; This function is called by:
 11890 ;;		_main
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           
 11895                           ;psect for function _ADC_conversii
 11896  0924                     _ADC_conversii:	
 11897                           
 11898                           ;adc.c: 150: uint16_t rezultat;
 11899                           ;adc.c: 151: uint16_t temper=0;
 11900                           
 11901                           ;incstack = 0
 11902                           ; Regs used in _ADC_conversii: [wreg+status,2+status,0+pclath+cstack]
 11903  0924  0020               	movlb	0	; select bank0
 11904  0925  01AC               	clrf	ADC_conversii@temper
 11905  0926  01AD               	clrf	ADC_conversii@temper+1
 11906                           
 11907                           ;adc.c: 152: for (int i=0; i<10;i++)
 11908  0927  01AE               	clrf	ADC_conversii@i
 11909  0928  01AF               	clrf	ADC_conversii@i+1
 11910  0929  082F               	movf	ADC_conversii@i+1,w
 11911  092A  3A80               	xorlw	128
 11912  092B  00A9               	movwf	??_ADC_conversii
 11913  092C  3080               	movlw	128
 11914  092D  0229               	subwf	??_ADC_conversii,w
 11915  092E  1D03               	skipz
 11916  092F  2932               	goto	u6735
 11917  0930  300A               	movlw	10
 11918  0931  022E               	subwf	ADC_conversii@i,w
 11919  0932                     u6735:	
 11920  0932  1803               	btfsc	3,0
 11921  0933  2955               	goto	l5810
 11922  0934                     l5800:	
 11923                           
 11924                           ;adc.c: 153: {
 11925                           ;adc.c: 154: ADC_StartConversion();
 11926  0934  3194  2446  3189   	fcall	_ADC_StartConversion
 11927                           
 11928                           ;adc.c: 155: rezultat=ADC_GetConversion(0);
 11929  0937  3000               	movlw	0
 11930  0938  3197  2793  3189   	fcall	_ADC_GetConversion
 11931  093B  0873               	movf	?_ADC_GetConversion+1,w
 11932  093C  0020               	movlb	0	; select bank0
 11933  093D  00AB               	movwf	ADC_conversii@rezultat+1
 11934  093E  0872               	movf	?_ADC_GetConversion,w
 11935  093F  00AA               	movwf	ADC_conversii@rezultat
 11936                           
 11937                           ;adc.c: 157: temper=temper+rezultat;
 11938  0940  082A               	movf	ADC_conversii@rezultat,w
 11939  0941  072C               	addwf	ADC_conversii@temper,w
 11940  0942  00AC               	movwf	ADC_conversii@temper
 11941  0943  082B               	movf	ADC_conversii@rezultat+1,w
 11942  0944  3D2D               	addwfc	ADC_conversii@temper+1,w
 11943  0945  00AD               	movwf	ADC_conversii@temper+1
 11944  0946  3001               	movlw	1
 11945  0947  07AE               	addwf	ADC_conversii@i,f
 11946  0948  3000               	movlw	0
 11947  0949  3DAF               	addwfc	ADC_conversii@i+1,f
 11948  094A  082F               	movf	ADC_conversii@i+1,w
 11949  094B  3A80               	xorlw	128
 11950  094C  00A9               	movwf	??_ADC_conversii
 11951  094D  3080               	movlw	128
 11952  094E  0229               	subwf	??_ADC_conversii,w
 11953  094F  1D03               	skipz
 11954  0950  2953               	goto	u6745
 11955  0951  300A               	movlw	10
 11956  0952  022E               	subwf	ADC_conversii@i,w
 11957  0953                     u6745:	
 11958  0953  1C03               	skipc
 11959  0954  2934               	goto	l5800
 11960  0955                     l5810:	
 11961                           
 11962                           ;adc.c: 160: }
 11963                           ;adc.c: 161: rez=temper/10;
 11964  0955  300A               	movlw	10
 11965  0956  00F2               	movwf	___lwdiv@divisor
 11966  0957  3000               	movlw	0
 11967  0958  00F3               	movwf	___lwdiv@divisor+1
 11968  0959  0020               	movlb	0	; select bank0
 11969  095A  082D               	movf	ADC_conversii@temper+1,w
 11970  095B  00F5               	movwf	___lwdiv@dividend+1
 11971  095C  082C               	movf	ADC_conversii@temper,w
 11972  095D  00F4               	movwf	___lwdiv@dividend
 11973  095E  3197  275F         	fcall	___lwdiv
 11974  0960  0873               	movf	?___lwdiv+1,w
 11975  0961  0023               	movlb	3	; select bank3
 11976  0962  00BE               	movwf	(_rez+1)^(0+384)
 11977  0963  0872               	movf	?___lwdiv,w
 11978  0964  00BD               	movwf	_rez^(0+384)
 11979                           
 11980                           ;adc.c: 162: return rez;
 11981  0965  083E               	movf	(_rez+1)^(0+384),w
 11982  0966  0020               	movlb	0	; select bank0
 11983  0967  00A8               	movwf	?_ADC_conversii+1
 11984  0968  0023               	movlb	3	; select bank3
 11985  0969  083D               	movf	_rez^(0+384),w
 11986  096A  0020               	movlb	0	; select bank0
 11987  096B  00A7               	movwf	?_ADC_conversii
 11988  096C  0008               	return
 11989  096D                     __end_of_ADC_conversii:	
 11990                           
 11991                           	psect	text58
 11992  175F                     __ptext58:	
 11993 ;; *************** function ___lwdiv *****************
 11994 ;; Defined at:
 11995 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;  divisor         2    2[COMMON] unsigned int 
 11998 ;;  dividend        2    4[COMMON] unsigned int 
 11999 ;; Auto vars:     Size  Location     Type
 12000 ;;  quotient        2    8[COMMON] unsigned int 
 12001 ;;  counter         1    7[COMMON] unsigned char 
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  2    2[COMMON] unsigned int 
 12004 ;; Registers used:
 12005 ;;		wreg, status,2, status,0
 12006 ;; Tracked objects:
 12007 ;;		On entry : 0/0
 12008 ;;		On exit  : 0/0
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12011 ;;      Params:         4       0       0       0       0       0       0       0
 12012 ;;      Locals:         3       0       0       0       0       0       0       0
 12013 ;;      Temps:          1       0       0       0       0       0       0       0
 12014 ;;      Totals:         8       0       0       0       0       0       0       0
 12015 ;;Total ram usage:        8 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    4
 12018 ;; This function calls:
 12019 ;;		Nothing
 12020 ;; This function is called by:
 12021 ;;		_ADC_conversii
 12022 ;;		__doprnt
 12023 ;; This function uses a non-reentrant model
 12024 ;;
 12025                           
 12026                           
 12027                           ;psect for function ___lwdiv
 12028  175F                     ___lwdiv:	
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12032  175F  01F8               	clrf	___lwdiv@quotient
 12033  1760  01F9               	clrf	___lwdiv@quotient+1
 12034  1761  0872               	movf	___lwdiv@divisor,w
 12035  1762  0473               	iorwf	___lwdiv@divisor+1,w
 12036  1763  1903               	btfsc	3,2
 12037  1764  2F8E               	goto	l4826
 12038  1765  01F7               	clrf	___lwdiv@counter
 12039  1766  0AF7               	incf	___lwdiv@counter,f
 12040  1767                     l4814:	
 12041  1767  1BF3               	btfsc	___lwdiv@divisor+1,7
 12042  1768  2F73               	goto	l4816
 12043  1769  3001               	movlw	1
 12044  176A                     u5135:	
 12045  176A  35F2               	lslf	___lwdiv@divisor,f
 12046  176B  0DF3               	rlf	___lwdiv@divisor+1,f
 12047  176C  0B89               	decfsz	9,f
 12048  176D  2F6A               	goto	u5135
 12049  176E  3001               	movlw	1
 12050  176F  00F6               	movwf	??___lwdiv
 12051  1770  0876               	movf	??___lwdiv,w
 12052  1771  07F7               	addwf	___lwdiv@counter,f
 12053  1772  2F67               	goto	l4814
 12054  1773                     l4816:	
 12055  1773  3001               	movlw	1
 12056  1774                     u5155:	
 12057  1774  35F8               	lslf	___lwdiv@quotient,f
 12058  1775  0DF9               	rlf	___lwdiv@quotient+1,f
 12059  1776  0B89               	decfsz	9,f
 12060  1777  2F74               	goto	u5155
 12061  1778  0873               	movf	___lwdiv@divisor+1,w
 12062  1779  0275               	subwf	___lwdiv@dividend+1,w
 12063  177A  1D03               	skipz
 12064  177B  2F7E               	goto	u5165
 12065  177C  0872               	movf	___lwdiv@divisor,w
 12066  177D  0274               	subwf	___lwdiv@dividend,w
 12067  177E                     u5165:	
 12068  177E  1C03               	skipc
 12069  177F  2F85               	goto	l4822
 12070  1780  0872               	movf	___lwdiv@divisor,w
 12071  1781  02F4               	subwf	___lwdiv@dividend,f
 12072  1782  0873               	movf	___lwdiv@divisor+1,w
 12073  1783  3BF5               	subwfb	___lwdiv@dividend+1,f
 12074  1784  1478               	bsf	___lwdiv@quotient,0
 12075  1785                     l4822:	
 12076  1785  3001               	movlw	1
 12077  1786                     u5175:	
 12078  1786  36F3               	lsrf	___lwdiv@divisor+1,f
 12079  1787  0CF2               	rrf	___lwdiv@divisor,f
 12080  1788  0B89               	decfsz	9,f
 12081  1789  2F86               	goto	u5175
 12082  178A  3001               	movlw	1
 12083  178B  02F7               	subwf	___lwdiv@counter,f
 12084  178C  1D03               	btfss	3,2
 12085  178D  2F73               	goto	l4816
 12086  178E                     l4826:	
 12087  178E  0879               	movf	___lwdiv@quotient+1,w
 12088  178F  00F3               	movwf	?___lwdiv+1
 12089  1790  0878               	movf	___lwdiv@quotient,w
 12090  1791  00F2               	movwf	?___lwdiv
 12091  1792  0008               	return
 12092  1793                     __end_of___lwdiv:	
 12093                           
 12094                           	psect	text59
 12095  1446                     __ptext59:	
 12096 ;; *************** function _ADC_StartConversion *****************
 12097 ;; Defined at:
 12098 ;;		line 94 in file "mcc_generated_files/adc.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;		None
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      void 
 12105 ;; Registers used:
 12106 ;;		None
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12112 ;;      Params:         0       0       0       0       0       0       0       0
 12113 ;;      Locals:         0       0       0       0       0       0       0       0
 12114 ;;      Temps:          0       0       0       0       0       0       0       0
 12115 ;;      Totals:         0       0       0       0       0       0       0       0
 12116 ;;Total ram usage:        0 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    4
 12119 ;; This function calls:
 12120 ;;		Nothing
 12121 ;; This function is called by:
 12122 ;;		_ADC_conversii
 12123 ;;		_main
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           
 12128                           ;psect for function _ADC_StartConversion
 12129  1446                     _ADC_StartConversion:	
 12130                           
 12131                           ;adc.c: 97: ADCON0bits.GO_nDONE = 1;
 12132                           
 12133                           ;incstack = 0
 12134                           ; Regs used in _ADC_StartConversion: []
 12135  1446  0021               	movlb	1	; select bank1
 12136  1447  149D               	bsf	29,1	;volatile
 12137  1448  0008               	return
 12138  1449                     __end_of_ADC_StartConversion:	
 12139                           
 12140                           	psect	text60
 12141  1793                     __ptext60:	
 12142 ;; *************** function _ADC_GetConversion *****************
 12143 ;; Defined at:
 12144 ;;		line 115 in file "mcc_generated_files/adc.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;  channel         1    wreg     enum E3535
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;  channel         1    4[COMMON] enum E3535
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  2    2[COMMON] unsigned int 
 12151 ;; Registers used:
 12152 ;;		wreg, status,2, status,0
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12158 ;;      Params:         2       0       0       0       0       0       0       0
 12159 ;;      Locals:         1       0       0       0       0       0       0       0
 12160 ;;      Temps:          0       7       0       0       0       0       0       0
 12161 ;;      Totals:         3       7       0       0       0       0       0       0
 12162 ;;Total ram usage:       10 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    4
 12165 ;; This function calls:
 12166 ;;		Nothing
 12167 ;; This function is called by:
 12168 ;;		_ADC_conversii
 12169 ;;		_main
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           
 12174                           ;psect for function _ADC_GetConversion
 12175  1793                     _ADC_GetConversion:	
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12179                           ;ADC_GetConversion@channel stored from wreg
 12180  1793  00F4               	movwf	ADC_GetConversion@channel
 12181                           
 12182                           ;adc.c: 118: ADCON0bits.CHS = channel;
 12183  1794  0874               	movf	ADC_GetConversion@channel,w
 12184  1795  0020               	movlb	0	; select bank0
 12185  1796  00A0               	movwf	??_ADC_GetConversion
 12186  1797  0DA0               	rlf	??_ADC_GetConversion,f
 12187  1798  0DA0               	rlf	??_ADC_GetConversion,f
 12188  1799  0021               	movlb	1	; select bank1
 12189  179A  081D               	movf	29,w	;volatile
 12190  179B  0020               	movlb	0	; select bank0
 12191  179C  0620               	xorwf	??_ADC_GetConversion,w
 12192  179D  3983               	andlw	-125
 12193  179E  0620               	xorwf	??_ADC_GetConversion,w
 12194  179F  0021               	movlb	1	; select bank1
 12195  17A0  009D               	movwf	29	;volatile
 12196                           
 12197                           ;adc.c: 121: ADCON0bits.ADON = 1;
 12198  17A1  141D               	bsf	29,0	;volatile
 12199                           
 12200                           ;adc.c: 123: _delay((unsigned long)((5)*(18432000/4000000.0)));
 12201  17A2  3007               	movlw	7
 12202  17A3                     u7657:	
 12203  17A3  0B89               	decfsz	9,f
 12204  17A4  2FA3               	goto	u7657
 12205  17A5  3200               	nop2
 12206                           
 12207                           ;adc.c: 126: ADCON0bits.GO_nDONE = 1;
 12208  17A6  0021               	movlb	1	; select bank1
 12209  17A7  149D               	bsf	29,1	;volatile
 12210  17A8                     l441:	
 12211                           ;adc.c: 130: {
 12212                           
 12213                           ;adc.c: 129: while (ADCON0bits.GO_nDONE)
 12214                           
 12215  17A8  189D               	btfsc	29,1	;volatile
 12216  17A9  2FA8               	goto	l441
 12217                           
 12218                           ;adc.c: 131: }
 12219                           ;adc.c: 135: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
 12220  17AA  081B               	movf	27,w	;volatile
 12221  17AB  0020               	movlb	0	; select bank0
 12222  17AC  00A0               	movwf	??_ADC_GetConversion
 12223  17AD  3006               	movlw	6
 12224  17AE                     u5835:	
 12225  17AE  36A0               	lsrf	??_ADC_GetConversion,f
 12226  17AF  0B89               	decfsz	9,f
 12227  17B0  2FAE               	goto	u5835
 12228  17B1  0820               	movf	??_ADC_GetConversion,w
 12229  17B2  00A1               	movwf	??_ADC_GetConversion+1
 12230  17B3  01A2               	clrf	??_ADC_GetConversion+2
 12231  17B4  0021               	movlb	1	; select bank1
 12232  17B5  081C               	movf	28,w	;volatile
 12233  17B6  0020               	movlb	0	; select bank0
 12234  17B7  00A3               	movwf	??_ADC_GetConversion+3
 12235  17B8  01A4               	clrf	??_ADC_GetConversion+4
 12236  17B9  35A3               	lslf	??_ADC_GetConversion+3,f
 12237  17BA  0DA4               	rlf	??_ADC_GetConversion+4,f
 12238  17BB  35A3               	lslf	??_ADC_GetConversion+3,f
 12239  17BC  0DA4               	rlf	??_ADC_GetConversion+4,f
 12240  17BD  0821               	movf	??_ADC_GetConversion+1,w
 12241  17BE  0723               	addwf	??_ADC_GetConversion+3,w
 12242  17BF  00A5               	movwf	??_ADC_GetConversion+5
 12243  17C0  0822               	movf	??_ADC_GetConversion+2,w
 12244  17C1  3D24               	addwfc	??_ADC_GetConversion+4,w
 12245  17C2  00A6               	movwf	??_ADC_GetConversion+6
 12246  17C3  0825               	movf	??_ADC_GetConversion+5,w
 12247  17C4  00F2               	movwf	?_ADC_GetConversion
 12248  17C5  0826               	movf	??_ADC_GetConversion+6,w
 12249  17C6  00F3               	movwf	?_ADC_GetConversion+1
 12250  17C7  0008               	return
 12251  17C8                     __end_of_ADC_GetConversion:	
 12252                           
 12253                           	psect	intentry
 12254  0004                     __pintentry:	
 12255 ;; *************** function _INTERRUPT_InterruptManager *****************
 12256 ;; Defined at:
 12257 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;		None
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;		None
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  1    wreg      void 
 12264 ;; Registers used:
 12265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12271 ;;      Params:         0       0       0       0       0       0       0       0
 12272 ;;      Locals:         0       0       0       0       0       0       0       0
 12273 ;;      Temps:          1       0       0       0       0       0       0       0
 12274 ;;      Totals:         1       0       0       0       0       0       0       0
 12275 ;;Total ram usage:        1 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    3
 12278 ;; This function calls:
 12279 ;;		_ADC_ISR
 12280 ;;		_EUSART_Receive_ISR
 12281 ;;		_EUSART_Transmit_ISR
 12282 ;;		_TMR1_ISR
 12283 ;; This function is called by:
 12284 ;;		Interrupt level 1
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288  0004                     _INTERRUPT_InterruptManager:	
 12289                           
 12290                           ;incstack = 0
 12291  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12292                           
 12293                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12294  0005  3180               	pagesel	$
 12295  0006  0020               	movlb	0	; select bank0
 12296  0007  087F               	movf	127,w
 12297  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
 12298                           
 12299                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
 12300  0009  1F0B               	btfss	11,6	;volatile
 12301  000A  2815               	goto	i1l255
 12302  000B  0021               	movlb	1	; select bank1
 12303  000C  1F11               	btfss	17,6	;volatile
 12304  000D  2815               	goto	i1l255
 12305  000E  0020               	movlb	0	; select bank0
 12306  000F  1F11               	btfss	17,6	;volatile
 12307  0010  2815               	goto	i1l255
 12308                           
 12309                           ;interrupt_manager.c: 55: {
 12310                           ;interrupt_manager.c: 56: ADC_ISR();
 12311  0011  3194  2443  3180   	fcall	_ADC_ISR
 12312                           
 12313                           ;interrupt_manager.c: 57: }
 12314  0014  2837               	goto	i1l263
 12315  0015                     i1l255:	
 12316                           
 12317                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
 12318  0015  1F0B               	btfss	11,6	;volatile
 12319  0016  2821               	goto	i1l257
 12320  0017  0021               	movlb	1	; select bank1
 12321  0018  1E11               	btfss	17,4	;volatile
 12322  0019  2821               	goto	i1l257
 12323  001A  0020               	movlb	0	; select bank0
 12324  001B  1E11               	btfss	17,4	;volatile
 12325  001C  2821               	goto	i1l257
 12326                           
 12327                           ;interrupt_manager.c: 59: {
 12328                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
 12329  001D  3195  2594  3180   	fcall	_EUSART_Transmit_ISR
 12330                           
 12331                           ;interrupt_manager.c: 61: }
 12332  0020  2837               	goto	i1l263
 12333  0021                     i1l257:	
 12334                           
 12335                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12336  0021  1F0B               	btfss	11,6	;volatile
 12337  0022  282D               	goto	i1l259
 12338  0023  0021               	movlb	1	; select bank1
 12339  0024  1E91               	btfss	17,5	;volatile
 12340  0025  282D               	goto	i1l259
 12341  0026  0020               	movlb	0	; select bank0
 12342  0027  1E91               	btfss	17,5	;volatile
 12343  0028  282D               	goto	i1l259
 12344                           
 12345                           ;interrupt_manager.c: 63: {
 12346                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
 12347  0029  3189  216D  3180   	fcall	_EUSART_Receive_ISR
 12348                           
 12349                           ;interrupt_manager.c: 65: }
 12350  002C  2837               	goto	i1l263
 12351  002D                     i1l259:	
 12352                           
 12353                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 12354  002D  1F0B               	btfss	11,6	;volatile
 12355  002E  2837               	goto	i1l263
 12356  002F  0021               	movlb	1	; select bank1
 12357  0030  1C11               	btfss	17,0	;volatile
 12358  0031  2837               	goto	i1l263
 12359  0032  0020               	movlb	0	; select bank0
 12360  0033  1C11               	btfss	17,0	;volatile
 12361  0034  2837               	goto	i1l263
 12362                           
 12363                           ;interrupt_manager.c: 67: {
 12364                           ;interrupt_manager.c: 68: TMR1_ISR();
 12365  0035  3188  2000         	fcall	_TMR1_ISR
 12366  0037                     i1l263:	
 12367                           ;interrupt_manager.c: 70: else
 12368                           ;interrupt_manager.c: 71: {
 12369                           
 12370                           ;interrupt_manager.c: 69: }
 12371                           
 12372  0037  0871               	movf	??_INTERRUPT_InterruptManager,w
 12373  0038  0020               	movlb	0	; select bank0
 12374  0039  00FF               	movwf	127
 12375  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12376  003B  0009               	retfie
 12377  003C                     __end_of_INTERRUPT_InterruptManager:	
 12378                           
 12379                           	psect	text62
 12380  0800                     __ptext62:	
 12381 ;; *************** function _TMR1_ISR *****************
 12382 ;; Defined at:
 12383 ;;		line 171 in file "mcc_generated_files/tmr1.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;		None
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;		None
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      void 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2, status,0, pclath, cstack
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12397 ;;      Params:         0       0       0       0       0       0       0       0
 12398 ;;      Locals:         0       0       0       0       0       0       0       0
 12399 ;;      Temps:          0       0       0       0       0       0       0       0
 12400 ;;      Totals:         0       0       0       0       0       0       0       0
 12401 ;;Total ram usage:        0 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    2
 12404 ;; This function calls:
 12405 ;;		_TMR1_CallBack
 12406 ;; This function is called by:
 12407 ;;		_INTERRUPT_InterruptManager
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           
 12412                           ;psect for function _TMR1_ISR
 12413  0800                     _TMR1_ISR:	
 12414                           
 12415                           ;tmr1.c: 173: static volatile unsigned int CountCallBack = 0;
 12416                           ;tmr1.c: 176: PIR1bits.TMR1IF = 0;
 12417                           
 12418                           ;incstack = 0
 12419                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 12420  0800  0020               	movlb	0	; select bank0
 12421  0801  1011               	bcf	17,0	;volatile
 12422                           
 12423                           ;tmr1.c: 178: TMR1H = (timer1ReloadVal >> 8);
 12424  0802  0022               	movlb	2	; select bank2
 12425  0803  086C               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 12426  0804  0020               	movlb	0	; select bank0
 12427  0805  0097               	movwf	23	;volatile
 12428                           
 12429                           ;tmr1.c: 179: TMR1L = timer1ReloadVal;
 12430  0806  0022               	movlb	2	; select bank2
 12431  0807  086B               	movf	_timer1ReloadVal^(0+256),w	;volatile
 12432  0808  0020               	movlb	0	; select bank0
 12433  0809  0096               	movwf	22	;volatile
 12434                           
 12435                           ;tmr1.c: 182: if (++CountCallBack >= 10)
 12436  080A  3001               	movlw	1
 12437  080B  0022               	movlb	2	; select bank2
 12438  080C  07CE               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
 12439  080D  3000               	movlw	0
 12440  080E  3DCF               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
 12441  080F  3000               	movlw	0
 12442  0810  024F               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
 12443  0811  300A               	movlw	10
 12444  0812  1903               	skipnz
 12445  0813  024E               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
 12446  0814  1C03               	skipc
 12447  0815  0008               	return
 12448                           
 12449                           ;tmr1.c: 183: {
 12450                           ;tmr1.c: 185: TMR1_CallBack();
 12451  0816  3189  21B9         	fcall	_TMR1_CallBack
 12452                           
 12453                           ;tmr1.c: 188: CountCallBack = 0;
 12454  0818  0022               	movlb	2	; select bank2
 12455  0819  01CE               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
 12456  081A  01CF               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
 12457  081B  0008               	return
 12458  081C                     __end_of_TMR1_ISR:	
 12459                           
 12460                           	psect	text63
 12461  09B9                     __ptext63:	
 12462 ;; *************** function _TMR1_CallBack *****************
 12463 ;; Defined at:
 12464 ;;		line 192 in file "mcc_generated_files/tmr1.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;		None
 12467 ;; Auto vars:     Size  Location     Type
 12468 ;;		None
 12469 ;; Return value:  Size  Location     Type
 12470 ;;                  1    wreg      void 
 12471 ;; Registers used:
 12472 ;;		wreg, status,2, status,0, pclath, cstack
 12473 ;; Tracked objects:
 12474 ;;		On entry : 0/0
 12475 ;;		On exit  : 0/0
 12476 ;;		Unchanged: 0/0
 12477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12478 ;;      Params:         0       0       0       0       0       0       0       0
 12479 ;;      Locals:         0       0       0       0       0       0       0       0
 12480 ;;      Temps:          0       0       0       0       0       0       0       0
 12481 ;;      Totals:         0       0       0       0       0       0       0       0
 12482 ;;Total ram usage:        0 bytes
 12483 ;; Hardware stack levels used:    1
 12484 ;; Hardware stack levels required when called:    1
 12485 ;; This function calls:
 12486 ;;		Absolute function
 12487 ;;		_TMR1_DefaultInterruptHandler
 12488 ;; This function is called by:
 12489 ;;		_TMR1_ISR
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _TMR1_CallBack
 12495  09B9                     _TMR1_CallBack:	
 12496                           
 12497                           ;tmr1.c: 194: flag_1_ms=1;
 12498                           
 12499                           ;incstack = 0
 12500                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12501  09B9  3001               	movlw	1
 12502  09BA  0023               	movlb	3	; select bank3
 12503  09BB  00D1               	movwf	_flag_1_ms^(0+384)
 12504  09BC  3000               	movlw	0
 12505  09BD  00D2               	movwf	(_flag_1_ms^(0+384)+1)
 12506                           
 12507                           ;tmr1.c: 195: count_100_ms++;
 12508  09BE  3001               	movlw	1
 12509  09BF  07C5               	addwf	_count_100_ms^(0+384),f
 12510  09C0  3000               	movlw	0
 12511  09C1  3DC6               	addwfc	(_count_100_ms+1)^(0+384),f
 12512                           
 12513                           ;tmr1.c: 196: count_500_ms++;
 12514  09C2  3001               	movlw	1
 12515  09C3  07C3               	addwf	_count_500_ms^(0+384),f
 12516  09C4  3000               	movlw	0
 12517  09C5  3DC4               	addwfc	(_count_500_ms+1)^(0+384),f
 12518                           
 12519                           ;tmr1.c: 197: count_1000_ms++;
 12520  09C6  3001               	movlw	1
 12521  09C7  07C1               	addwf	_count_1000_ms^(0+384),f
 12522  09C8  3000               	movlw	0
 12523  09C9  3DC2               	addwfc	(_count_1000_ms+1)^(0+384),f
 12524                           
 12525                           ;tmr1.c: 198: count_4000_ms++;
 12526  09CA  3001               	movlw	1
 12527  09CB  07BF               	addwf	_count_4000_ms^(0+384),f
 12528  09CC  3000               	movlw	0
 12529  09CD  3DC0               	addwfc	(_count_4000_ms+1)^(0+384),f
 12530                           
 12531                           ;tmr1.c: 200: if (count_100_ms==10)
 12532  09CE  300A               	movlw	10
 12533  09CF  0645               	xorwf	_count_100_ms^(0+384),w
 12534  09D0  0446               	iorwf	(_count_100_ms+1)^(0+384),w
 12535  09D1  1D03               	btfss	3,2
 12536  09D2  29D9               	goto	i1l3698
 12537                           
 12538                           ;tmr1.c: 201: {
 12539                           ;tmr1.c: 202: flag_100_ms=1;
 12540  09D3  3001               	movlw	1
 12541  09D4  00CD               	movwf	_flag_100_ms^(0+384)
 12542  09D5  3000               	movlw	0
 12543  09D6  00CE               	movwf	(_flag_100_ms^(0+384)+1)
 12544                           
 12545                           ;tmr1.c: 203: count_100_ms=0;
 12546  09D7  01C5               	clrf	_count_100_ms^(0+384)
 12547  09D8  01C6               	clrf	(_count_100_ms+1)^(0+384)
 12548  09D9                     i1l3698:	
 12549                           
 12550                           ;tmr1.c: 204: }
 12551                           ;tmr1.c: 205: if(count_500_ms==50)
 12552  09D9  3032               	movlw	50
 12553  09DA  0643               	xorwf	_count_500_ms^(0+384),w
 12554  09DB  0444               	iorwf	(_count_500_ms+1)^(0+384),w
 12555  09DC  1D03               	btfss	3,2
 12556  09DD  29E4               	goto	i1l3704
 12557                           
 12558                           ;tmr1.c: 206: {
 12559                           ;tmr1.c: 207: flag_500_ms=1;
 12560  09DE  3001               	movlw	1
 12561  09DF  00CB               	movwf	_flag_500_ms^(0+384)
 12562  09E0  3000               	movlw	0
 12563  09E1  00CC               	movwf	(_flag_500_ms^(0+384)+1)
 12564                           
 12565                           ;tmr1.c: 208: count_500_ms=0;
 12566  09E2  01C3               	clrf	_count_500_ms^(0+384)
 12567  09E3  01C4               	clrf	(_count_500_ms+1)^(0+384)
 12568  09E4                     i1l3704:	
 12569                           
 12570                           ;tmr1.c: 209: }
 12571                           ;tmr1.c: 210: if (count_1000_ms==100)
 12572  09E4  3064               	movlw	100
 12573  09E5  0641               	xorwf	_count_1000_ms^(0+384),w
 12574  09E6  0442               	iorwf	(_count_1000_ms+1)^(0+384),w
 12575  09E7  1D03               	btfss	3,2
 12576  09E8  29EF               	goto	i1l3710
 12577                           
 12578                           ;tmr1.c: 211: {
 12579                           ;tmr1.c: 212: flag_1000_ms=1;
 12580  09E9  3001               	movlw	1
 12581  09EA  00C9               	movwf	_flag_1000_ms^(0+384)
 12582  09EB  3000               	movlw	0
 12583  09EC  00CA               	movwf	(_flag_1000_ms^(0+384)+1)
 12584                           
 12585                           ;tmr1.c: 213: count_1000_ms=0;
 12586  09ED  01C1               	clrf	_count_1000_ms^(0+384)
 12587  09EE  01C2               	clrf	(_count_1000_ms+1)^(0+384)
 12588  09EF                     i1l3710:	
 12589                           
 12590                           ;tmr1.c: 214: }
 12591                           ;tmr1.c: 215: if (count_4000_ms==400)
 12592  09EF  3090               	movlw	144
 12593  09F0  063F               	xorwf	_count_4000_ms^(0+384),w
 12594  09F1  1D03               	skipz
 12595  09F2  29FC               	goto	i1l3716
 12596  09F3  0340               	decf	(_count_4000_ms+1)^(0+384),w
 12597  09F4  1D03               	btfss	3,2
 12598  09F5  29FC               	goto	i1l3716
 12599                           
 12600                           ;tmr1.c: 216: {
 12601                           ;tmr1.c: 217: flag_4000_ms=1;
 12602  09F6  3001               	movlw	1
 12603  09F7  00C7               	movwf	_flag_4000_ms^(0+384)
 12604  09F8  3000               	movlw	0
 12605  09F9  00C8               	movwf	(_flag_4000_ms^(0+384)+1)
 12606                           
 12607                           ;tmr1.c: 218: count_4000_ms=0;
 12608  09FA  01BF               	clrf	_count_4000_ms^(0+384)
 12609  09FB  01C0               	clrf	(_count_4000_ms+1)^(0+384)
 12610  09FC                     i1l3716:	
 12611                           
 12612                           ;tmr1.c: 219: }
 12613                           ;tmr1.c: 220: if(TMR1_InterruptHandler)
 12614  09FC  0863               	movf	_TMR1_InterruptHandler^(0+384),w
 12615  09FD  0464               	iorwf	(_TMR1_InterruptHandler+1)^(0+384),w
 12616  09FE  1903               	btfsc	3,2
 12617  09FF  0008               	return
 12618                           
 12619                           ;tmr1.c: 221: {
 12620                           ;tmr1.c: 223: TMR1_InterruptHandler();
 12621  0A00  0864               	movf	(_TMR1_InterruptHandler+1)^(0+384),w
 12622  0A01  008A               	movwf	10
 12623  0A02  0863               	movf	_TMR1_InterruptHandler^(0+384),w
 12624  0A03  000A               	callw
 12625  0A04  3189               	pagesel	$
 12626  0A05  0008               	return
 12627  0A06                     __end_of_TMR1_CallBack:	
 12628                           
 12629                           	psect	text64
 12630  1440                     __ptext64:	
 12631 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 12632 ;; Defined at:
 12633 ;;		line 231 in file "mcc_generated_files/tmr1.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;		None
 12636 ;; Auto vars:     Size  Location     Type
 12637 ;;		None
 12638 ;; Return value:  Size  Location     Type
 12639 ;;                  1    wreg      void 
 12640 ;; Registers used:
 12641 ;;		None
 12642 ;; Tracked objects:
 12643 ;;		On entry : 0/0
 12644 ;;		On exit  : 0/0
 12645 ;;		Unchanged: 0/0
 12646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12647 ;;      Params:         0       0       0       0       0       0       0       0
 12648 ;;      Locals:         0       0       0       0       0       0       0       0
 12649 ;;      Temps:          0       0       0       0       0       0       0       0
 12650 ;;      Totals:         0       0       0       0       0       0       0       0
 12651 ;;Total ram usage:        0 bytes
 12652 ;; Hardware stack levels used:    1
 12653 ;; This function calls:
 12654 ;;		Nothing
 12655 ;; This function is called by:
 12656 ;;		_TMR1_Initialize
 12657 ;;		_TMR1_CallBack
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function _TMR1_DefaultInterruptHandler
 12663  1440                     _TMR1_DefaultInterruptHandler:	
 12664                           
 12665                           ;incstack = 0
 12666                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 12667  1440  0008               	return
 12668  1441                     __end_of_TMR1_DefaultInterruptHandler:	
 12669                           
 12670                           	psect	text65
 12671  1594                     __ptext65:	
 12672 ;; *************** function _EUSART_Transmit_ISR *****************
 12673 ;; Defined at:
 12674 ;;		line 166 in file "mcc_generated_files/eusart.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;		None
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      void 
 12681 ;; Registers used:
 12682 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12688 ;;      Params:         0       0       0       0       0       0       0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0
 12690 ;;      Temps:          1       0       0       0       0       0       0       0
 12691 ;;      Totals:         1       0       0       0       0       0       0       0
 12692 ;;Total ram usage:        1 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		_INTERRUPT_InterruptManager
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           
 12702                           ;psect for function _EUSART_Transmit_ISR
 12703  1594                     _EUSART_Transmit_ISR:	
 12704                           
 12705                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12709  1594  3008               	movlw	8
 12710  1595  0022               	movlb	2	; select bank2
 12711  1596  026D               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 12712  1597  1803               	skipnc
 12713  1598  2DB1               	goto	i1l181
 12714                           
 12715                           ;eusart.c: 171: {
 12716                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
 12717  1599  0020               	movlb	0	; select bank0
 12718  159A  086A               	movf	_eusartTxTail,w
 12719  159B  3EA8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12720  159C  0086               	movwf	6
 12721  159D  3001               	movlw	1	; select bank3/4
 12722  159E  0087               	movwf	7
 12723  159F  0801               	movf	1,w
 12724  15A0  0023               	movlb	3	; select bank3
 12725  15A1  009A               	movwf	26	;volatile
 12726  15A2  3001               	movlw	1
 12727  15A3  00F0               	movwf	??_EUSART_Transmit_ISR
 12728  15A4  0870               	movf	??_EUSART_Transmit_ISR,w
 12729  15A5  0020               	movlb	0	; select bank0
 12730  15A6  07EA               	addwf	_eusartTxTail,f	;volatile
 12731                           
 12732                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 12733  15A7  3008               	movlw	8
 12734  15A8  026A               	subwf	_eusartTxTail,w	;volatile
 12735  15A9  1803               	btfsc	3,0
 12736                           
 12737                           ;eusart.c: 174: {
 12738                           ;eusart.c: 175: eusartTxTail = 0;
 12739  15AA  01EA               	clrf	_eusartTxTail	;volatile
 12740                           
 12741                           ;eusart.c: 176: }
 12742                           ;eusart.c: 177: eusartTxBufferRemaining++;
 12743  15AB  3001               	movlw	1
 12744  15AC  00F0               	movwf	??_EUSART_Transmit_ISR
 12745  15AD  0870               	movf	??_EUSART_Transmit_ISR,w
 12746  15AE  0022               	movlb	2	; select bank2
 12747  15AF  07ED               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 12748                           
 12749                           ;eusart.c: 178: }
 12750  15B0  0008               	return
 12751  15B1                     i1l181:	
 12752                           
 12753                           ;eusart.c: 179: else
 12754                           ;eusart.c: 180: {
 12755                           ;eusart.c: 181: PIE1bits.TXIE = 0;
 12756  15B1  0021               	movlb	1	; select bank1
 12757  15B2  1211               	bcf	17,4	;volatile
 12758  15B3  0008               	return
 12759  15B4                     __end_of_EUSART_Transmit_ISR:	
 12760                           
 12761                           	psect	text66
 12762  096D                     __ptext66:	
 12763 ;; *************** function _EUSART_Receive_ISR *****************
 12764 ;; Defined at:
 12765 ;;		line 185 in file "mcc_generated_files/eusart.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;		None
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;		None
 12770 ;; Return value:  Size  Location     Type
 12771 ;;                  1    wreg      void 
 12772 ;; Registers used:
 12773 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12779 ;;      Params:         0       0       0       0       0       0       0       0
 12780 ;;      Locals:         0       0       0       0       0       0       0       0
 12781 ;;      Temps:          1       0       0       0       0       0       0       0
 12782 ;;      Totals:         1       0       0       0       0       0       0       0
 12783 ;;Total ram usage:        1 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; This function calls:
 12786 ;;		Nothing
 12787 ;; This function is called by:
 12788 ;;		_INTERRUPT_InterruptManager
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _EUSART_Receive_ISR
 12794  096D                     _EUSART_Receive_ISR:	
 12795                           
 12796                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12800  096D  0023               	movlb	3	; select bank3
 12801  096E  1C9D               	btfss	29,1	;volatile
 12802  096F  2972               	goto	i1l4284
 12803                           
 12804                           ;eusart.c: 189: {
 12805                           ;eusart.c: 192: RCSTAbits.CREN = 0;
 12806  0970  121D               	bcf	29,4	;volatile
 12807                           
 12808                           ;eusart.c: 193: RCSTAbits.CREN = 1;
 12809  0971  161D               	bsf	29,4	;volatile
 12810  0972                     i1l4284:	
 12811                           
 12812                           ;eusart.c: 194: }
 12813                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
 12814  0972  0819               	movf	25,w	;volatile
 12815  0973  00F0               	movwf	??_EUSART_Receive_ISR
 12816  0974  0020               	movlb	0	; select bank0
 12817  0975  0869               	movf	_eusartRxHead,w
 12818  0976  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12819  0977  0086               	movwf	6
 12820  0978  3001               	movlw	1	; select bank3/4
 12821  0979  0087               	movwf	7
 12822  097A  0870               	movf	??_EUSART_Receive_ISR,w
 12823  097B  0081               	movwf	1
 12824  097C  3001               	movlw	1
 12825  097D  00F0               	movwf	??_EUSART_Receive_ISR
 12826  097E  0870               	movf	??_EUSART_Receive_ISR,w
 12827  097F  07E9               	addwf	_eusartRxHead,f	;volatile
 12828                           
 12829                           ;eusart.c: 198: rcreg=RCREG;
 12830  0980  0023               	movlb	3	; select bank3
 12831  0981  0819               	movf	25,w	;volatile
 12832  0982  00F0               	movwf	??_EUSART_Receive_ISR
 12833  0983  0870               	movf	??_EUSART_Receive_ISR,w
 12834  0984  0020               	movlb	0	; select bank0
 12835  0985  00E7               	movwf	_rcreg	;volatile
 12836                           
 12837                           ;eusart.c: 200: if(rcreg=='X')
 12838  0986  3058               	movlw	88
 12839  0987  0667               	xorwf	_rcreg,w	;volatile
 12840  0988  1D03               	btfss	3,2
 12841  0989  2990               	goto	i1l4296
 12842                           
 12843                           ;eusart.c: 201: {
 12844                           ;eusart.c: 203: flag_G=1;
 12845  098A  3001               	movlw	1
 12846  098B  0022               	movlb	2	; select bank2
 12847  098C  00D0               	movwf	_flag_G^(0+256)
 12848  098D  3000               	movlw	0
 12849  098E  00D1               	movwf	(_flag_G^(0+256)+1)
 12850  098F  29AD               	goto	i1l4312
 12851  0990                     i1l4296:	
 12852                           ;eusart.c: 205: }
 12853                           
 12854                           ;eusart.c: 204: rcreg=0;
 12855                           
 12856                           
 12857                           ;eusart.c: 206: else if(rcreg=='Y')
 12858  0990  3059               	movlw	89
 12859  0991  0667               	xorwf	_rcreg,w	;volatile
 12860  0992  1D03               	btfss	3,2
 12861  0993  299A               	goto	i1l4302
 12862                           
 12863                           ;eusart.c: 207: {
 12864                           ;eusart.c: 208: flag_N=1;
 12865  0994  3001               	movlw	1
 12866  0995  0022               	movlb	2	; select bank2
 12867  0996  00D2               	movwf	_flag_N^(0+256)
 12868  0997  3000               	movlw	0
 12869  0998  00D3               	movwf	(_flag_N^(0+256)+1)
 12870  0999  29AD               	goto	i1l4312
 12871  099A                     i1l4302:	
 12872                           ;eusart.c: 210: }
 12873                           
 12874                           ;eusart.c: 209: rcreg=0;
 12875                           
 12876                           
 12877                           ;eusart.c: 211: else if(rcreg=='A')
 12878  099A  3041               	movlw	65
 12879  099B  0667               	xorwf	_rcreg,w	;volatile
 12880  099C  1D03               	btfss	3,2
 12881  099D  29A4               	goto	i1l4308
 12882                           
 12883                           ;eusart.c: 212: {
 12884                           ;eusart.c: 213: flag_A=1;
 12885  099E  3001               	movlw	1
 12886  099F  0023               	movlb	3	; select bank3
 12887  09A0  00D5               	movwf	_flag_A^(0+384)
 12888  09A1  3000               	movlw	0
 12889  09A2  00D6               	movwf	(_flag_A^(0+384)+1)
 12890  09A3  29AD               	goto	i1l4312
 12891  09A4                     i1l4308:	
 12892                           ;eusart.c: 215: }
 12893                           
 12894                           ;eusart.c: 214: rcreg=0;
 12895                           
 12896                           
 12897                           ;eusart.c: 216: else if(rcreg=='B')
 12898  09A4  3042               	movlw	66
 12899  09A5  0667               	xorwf	_rcreg,w	;volatile
 12900  09A6  1D03               	btfss	3,2
 12901  09A7  29AF               	goto	i1l4314
 12902                           
 12903                           ;eusart.c: 217: {
 12904                           ;eusart.c: 218: flag_B=1;
 12905  09A8  3001               	movlw	1
 12906  09A9  0023               	movlb	3	; select bank3
 12907  09AA  00D3               	movwf	_flag_B^(0+384)
 12908  09AB  3000               	movlw	0
 12909  09AC  00D4               	movwf	(_flag_B^(0+384)+1)
 12910  09AD                     i1l4312:	
 12911                           
 12912                           ;eusart.c: 219: rcreg=0;
 12913  09AD  0020               	movlb	0	; select bank0
 12914  09AE  01E7               	clrf	_rcreg	;volatile
 12915  09AF                     i1l4314:	
 12916                           
 12917                           ;eusart.c: 220: }
 12918                           ;eusart.c: 226: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12919  09AF  3008               	movlw	8
 12920  09B0  0269               	subwf	_eusartRxHead,w	;volatile
 12921  09B1  1803               	btfsc	3,0
 12922                           
 12923                           ;eusart.c: 227: {
 12924                           ;eusart.c: 228: eusartRxHead = 0;
 12925  09B2  01E9               	clrf	_eusartRxHead	;volatile
 12926                           
 12927                           ;eusart.c: 229: }
 12928                           ;eusart.c: 230: eusartRxCount++;
 12929  09B3  3001               	movlw	1
 12930  09B4  00F0               	movwf	??_EUSART_Receive_ISR
 12931  09B5  0870               	movf	??_EUSART_Receive_ISR,w
 12932  09B6  0021               	movlb	1	; select bank1
 12933  09B7  07EF               	addwf	_eusartRxCount^(0+128),f	;volatile
 12934  09B8  0008               	return
 12935  09B9                     __end_of_EUSART_Receive_ISR:	
 12936                           
 12937                           	psect	text67
 12938  1443                     __ptext67:	
 12939 ;; *************** function _ADC_ISR *****************
 12940 ;; Defined at:
 12941 ;;		line 140 in file "mcc_generated_files/adc.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;		None
 12944 ;; Auto vars:     Size  Location     Type
 12945 ;;		None
 12946 ;; Return value:  Size  Location     Type
 12947 ;;                  1    wreg      void 
 12948 ;; Registers used:
 12949 ;;		None
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12955 ;;      Params:         0       0       0       0       0       0       0       0
 12956 ;;      Locals:         0       0       0       0       0       0       0       0
 12957 ;;      Temps:          0       0       0       0       0       0       0       0
 12958 ;;      Totals:         0       0       0       0       0       0       0       0
 12959 ;;Total ram usage:        0 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; This function calls:
 12962 ;;		Nothing
 12963 ;; This function is called by:
 12964 ;;		_INTERRUPT_InterruptManager
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _ADC_ISR
 12970  1443                     _ADC_ISR:	
 12971                           
 12972                           ;adc.c: 143: PIR1bits.ADIF = 0;
 12973                           
 12974                           ;incstack = 0
 12975                           ; Regs used in _ADC_ISR: []
 12976  1443  0020               	movlb	0	; select bank0
 12977  1444  1311               	bcf	17,6	;volatile
 12978  1445  0008               	return
 12979  1446                     __end_of_ADC_ISR:	
 12980  007E                     btemp	set	126	;btemp
 12981  007E                     int$flags	set	126
 12982  007E                     wtemp0	set	126


Data Sizes:
    Strings     213
    Constant    10
    Data        46
    BSS         181
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     67      79
    BANK1            80     79      80
    BANK2            80     44      80
    BANK3            80      8      71
    BANK4            80      0      42
    BANK5            80      0      75
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[17]), STR_14(CODE[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 1
		 -> sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_20(CODE[14]), STR_19(CODE[18]), STR_18(CODE[10]), STR_17(CODE[15]), 
		 -> STR_16(CODE[3]), STR_13(CODE[21]), STR_12(CODE[14]), sms_text@umid(BANK0[1]), 
		 -> sms_text@smstext(BANK0[1]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_20(CODE[14]), STR_19(CODE[18]), STR_18(CODE[10]), STR_17(CODE[15]), 
		 -> STR_16(CODE[3]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[21]), 
		 -> STR_12(CODE[14]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    S1285__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1285__prbuf$ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[15]), STR_11(CODE[16]), STR_10(CODE[14]), 
		 -> STR_9(CODE[17]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[4]), 
		 -> STR_5(CODE[17]), STR_4(CODE[6]), STR_3(CODE[3]), STR_2(CODE[2]), 
		 -> STR_1(CODE[6]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_LCDInit
    _main->_LCDWriteString
    _main->___fttol
    _main->_read_eeprom_int32
    _state_of_button->_LCDWriteString
    _setare_temperatura->_LCDWriteString
    _afisare_inf_lcd->_LCDGotoXY
    _afisare_inf_lcd->_LCDWriteString
    _LCDWriteInt->_LCDByte
    _LCDWriteInt->___awmod
    _LCDGotoXY->_LCDByte
    _read_eeprom_int32->_eeprom_read
    _comparare->___fttol
    ___lwtoft->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _command_turn->_LCDWriteString
    _check_status_incubator->_LCDWriteString
    __doprnt->___lwdiv
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _LCD_Init_apdatat->_LCDByte
    _LCDWriteString->_LCDByte
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _LCDInit->_LCDByte
    _Keyboard_Manager->_Check_KeyPressed
    _DHT_result->_ReadData
    _ADC_conversii->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR
    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR

Critical Paths under _main in BANK0

    _main->_comparare
    _state_of_button->_afisare_inf_lcd
    _setare_temperatura->_LCDWriteInt
    _afisare_inf_lcd->_LCDWriteInt
    _LCDWriteInt->___awdiv
    _int_gsm->_printf
    _comparare->___ftadd
    _comparare->___ftdiv
    ___lwtoft->_ADC_conversii
    ___ftneg->___ftmul
    ___ftmul->___lwtoft
    ___ftge->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    _command_turn->_LCDWriteString
    _check_status_incubator->_sms_text
    _sms_text->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    _ADC_conversii->_ADC_GetConversion

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0  108771
                                             64 BANK0      3     3      0
                                              0 BANK3      8     8      0
                  _ADC_GetConversion
                _ADC_StartConversion
                      _ADC_conversii
                      _CheckResponse
                         _DHT_result
                   _Keyboard_Manager
                            _LCDByte
                            _LCDInit
                     _LCDWriteString
                   _LCD_Init_apdatat
                  _SYSTEM_Initialize
                        _StartSignal
                       _TMR1_disable
                        _TMR1_enable
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
             _check_status_incubator
                       _command_turn
                          _comparare
                        _eeprom_read
                       _eeprom_write
                            _int_gsm
                  _read_eeprom_int32
                    _state_of_button
                           _turn_egs
 ---------------------------------------------------------------------------------
 (1) _state_of_button                                      2     2      0   42567
                                             21 BANK0      2     2      0
                          _Check_key
                            _LCDByte
                        _LCDWriteInt
                     _LCDWriteString
                   _LCD_Init_apdatat
                    _afisare_inf_lcd
                        _eeprom_read
                       _eeprom_write
                 _setare_temperatura
                           _turn_egs
 ---------------------------------------------------------------------------------
 (2) _setare_temperatura                                   1     1      0   12676
                                             18 BANK0      1     1      0
                            _LCDByte
                        _LCDWriteInt
                     _LCDWriteString
                   _LCD_Init_apdatat
 ---------------------------------------------------------------------------------
 (2) _afisare_inf_lcd                                      3     3      0   16429
                                             18 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                   _LCD_Init_apdatat
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         14    11      3    5187
                                              4 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     741
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     753
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    2259
                                              9 COMMON     1     0      1
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _Check_key                                            2     2      0      77
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _read_eeprom_int32                                   13     9      4     207
                                              6 COMMON     4     0      4
                                              0 BANK0      9     9      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _int_gsm                                              2     2      0    5169
                                             26 BANK0      2     2      0
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _comparare                                          135   133      2   18832
                                             52 BANK0     12    10      2
                                              0 BANK1     79    79      0
                                              0 BANK2     44    44      0
                           ___awtoft
                             ___bmul
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol (ARG)
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     542
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2786
                                             16 BANK0      4     1      3
                      _ADC_conversii (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             36 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3320
                                             20 BANK0     16    10      6
                      _ADC_conversii (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     506
                                              6 BANK0      9     3      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             36 BANK0     16    10      6
                      _ADC_conversii (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4017
                                             39 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     241
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2888
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _command_turn                                         2     2      0    6121
                                              3 BANK0      2     2      0
                     _LCDWriteString
                   _LCD_Init_apdatat
                        _eeprom_read
                       _eeprom_write
                           _turn_egs
 ---------------------------------------------------------------------------------
 (1) _turn_egs                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         4     3      1     678
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          4     4      0      31
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _check_status_incubator                               0     0      0   14661
                     _LCDWriteString
                   _LCD_Init_apdatat
                           _sms_text
 ---------------------------------------------------------------------------------
 (2) _sms_text                                             4     4      0    9249
                                             29 BANK0      4     4      0
                             _printf
                              _putch
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             10     6      4    3878
                                             19 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                               7     5      2    4275
                                             19 BANK0      7     5      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             21    18      3    3380
                                              6 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     0      1     894
                                              4 COMMON     1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     386
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (3) _LCD_Init_apdatat                                     2     2      0    2077
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDWriteString                                       4     2      2    3335
                                              9 COMMON     1     1      0
                                              0 BANK0      3     1      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     448
                                              2 COMMON     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _TMR1_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     108
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     108
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     108
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    2108
                                              9 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (4) _LCDByte                                              7     6      1    2077
                                              2 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Manager                                     0     0      0       0
                   _Check_KeyPressed
                  _Check_KeyReleased
 ---------------------------------------------------------------------------------
 (2) _Check_KeyReleased                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Check_KeyPressed                                     1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DHT_result                                          16    16      0     170
                                              6 COMMON     2     2      0
                                              0 BANK0     14    14      0
                           _ReadData
 ---------------------------------------------------------------------------------
 (2) _ReadData                                             4     4      0     167
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_conversii                                        9     7      2     750
                                              7 BANK0      9     7      2
                  _ADC_GetConversion
                _ADC_StartConversion
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     549
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                   10     8      2      31
                                              2 COMMON     3     1      2
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_StartConversion
   _ADC_conversii
     _ADC_GetConversion
     _ADC_StartConversion
     ___lwdiv
   _CheckResponse
   _DHT_result
     _ReadData
   _Keyboard_Manager
     _Check_KeyPressed
     _Check_KeyReleased
   _LCDByte
   _LCDInit
     _LCDByte
   _LCDWriteString
     _LCDByte
   _LCD_Init_apdatat
     _LCDByte
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   _StartSignal
   _TMR1_disable
   _TMR1_enable
   ___ftdiv
     _ADC_conversii (ARG)
       _ADC_GetConversion
       _ADC_StartConversion
       ___lwdiv
     ___ftmul (ARG)
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___ftpack (ARG)
   ___ftmul
     _ADC_conversii (ARG)
       _ADC_GetConversion
       _ADC_StartConversion
       ___lwdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___ftpack (ARG)
   ___fttol
   ___lwtoft
     _ADC_conversii (ARG)
       _ADC_GetConversion
       _ADC_StartConversion
       ___lwdiv
     ___ftpack (ARG)
   _check_status_incubator
     _LCDWriteString
       _LCDByte
     _LCD_Init_apdatat
       _LCDByte
     _sms_text
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART_Write
       _putch
         _EUSART_Write
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART_Write
   _command_turn
     _LCDWriteString
       _LCDByte
     _LCD_Init_apdatat
       _LCDByte
     _eeprom_read
     _eeprom_write
     _turn_egs
   _comparare
     ___awtoft
       ___ftpack
     ___bmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_conversii (ARG)
             _ADC_GetConversion
             _ADC_StartConversion
             ___lwdiv
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           _ADC_conversii (ARG)
             _ADC_GetConversion
             _ADC_StartConversion
             ___lwdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ADC_conversii (ARG)
               _ADC_GetConversion
               _ADC_StartConversion
               ___lwdiv
             ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___ftpack (ARG)
     ___ftdiv
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___ftmul (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_conversii (ARG)
             _ADC_GetConversion
             _ADC_StartConversion
             ___lwdiv
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___ftpack (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
     ___ftmul
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         _ADC_conversii (ARG)
           _ADC_GetConversion
           _ADC_StartConversion
           ___lwdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_conversii (ARG)
             _ADC_GetConversion
             _ADC_StartConversion
             ___lwdiv
           ___ftpack (ARG)
     ___fttol (ARG)
     ___lwtoft (ARG)
       _ADC_conversii (ARG)
         _ADC_GetConversion
         _ADC_StartConversion
         ___lwdiv
       ___ftpack (ARG)
     ___wmul (ARG)
   _eeprom_read
   _eeprom_write
   _int_gsm
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
     _putch
       _EUSART_Write
   _read_eeprom_int32
     _eeprom_read
   _state_of_button
     _Check_key
     _LCDByte
     _LCDWriteInt
       _LCDByte
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
     _LCD_Init_apdatat
       _LCDByte
     _afisare_inf_lcd
       _LCDByte
       _LCDGotoXY
         _LCDByte
       _LCDWriteInt
         _LCDByte
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
       _LCD_Init_apdatat
         _LCDByte
       ___awdiv
       ___awmod
     _eeprom_read
     _eeprom_write
     _setare_temperatura
       _LCDByte
       _LCDWriteInt
         _LCDByte
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
       _LCD_Init_apdatat
         _LCDByte
     _turn_egs
   _turn_egs

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1B7       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     43      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4F      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     2C      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      8      47      12       88.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      2A      14       52.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      4B      16       93.8%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1B7      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Jun 29 13:00:42 2018

                        _LCD_Init_apdatat 172F                           _afisare_inf_lcd 0CA4  
                           ?_command_turn 0070                            ___bmul@product 0074  
                             __CFG_CP$OFF 0000                         _Check_KeyReleased 15B4  
                                      _RD 0CA8                                        _RH 0164  
                                      _Ch 0166                                        _WR 0CA9  
                            ___awdiv@sign 0021                       ___wmul@multiplicand 0074  
                       ?_Check_KeyPressed 0070                               ?_DHT_result 0070  
                      ?_Check_KeyReleased 0070                              ___ftadd@exp1 0053  
                            ___ftadd@exp2 0052                               __CFG_LVP$ON 0000  
                            ___ftadd@sign 0051                                       l441 17A8  
                                     l169 166D                                       l633 03A7  
                                     l706 08F3                                       l911 17F4  
                                     l744 165B                                       l745 1644  
                                     l906 17CD                                       l917 0C91  
                                     l773 0AA5                                       l765 0A6A  
                           _strKey_Counts 007B                                       l769 0A89  
                                     l983 07C9                                       l979 0746  
                                     _GIE 005F                        ??_Check_KeyPressed 0072  
                                     _RD0 0078                                       _RD1 0079  
                                     _RD3 007B                              __CFG_CPD$OFF 0000  
         __size_of_check_status_incubator 0017                                       _Sum 0163  
                         _timer1ReloadVal 016B                                       _btn 01E5  
                         __end_of_ADC_ISR 1446                                       _val 0162  
                                     _rez 01BD                              ___awmod@sign 0078  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              __CFG_FOSC$HS 0000  
                     ??_Check_KeyReleased 0072                   LCDWriteInt@field_length 0026  
                         __end_of_LCDByte 0924                           __end_of_LCDInit 0B0B  
                           _count_1000_ms 01C1                              ?_LCDWriteInt 0024  
                             LCDByte@temp 0078                              ___ftdiv@cntr 004E  
                            ___ftdiv@sign 0053                                      l1040 150D  
                                    l1062 161B                                      l1320 0BAE  
                                    l1152 1547                                      l1321 0BB6  
                                    l1313 0B9B                             _count_4000_ms 01BF  
                                    l1404 0D93                                      l1344 0592  
                                    l5000 0A53                                      l5100 0858  
                                    l5012 08A2                                      l5030 08C7  
                                    l5024 08AF                                      l5016 08A9  
                                    l5120 0DD0                                      l5026 08BB  
                                    l5034 08D0                                      l5130 0E0D  
                                    l5122 0DFD                                      l6020 1507  
                                    l5132 0E1D                                      l5070 1648  
                                    l5038 08D8                                      l5126 0E01  
                                    l5128 0E05                                      l6200 03BA  
                                    l5402 078B                                      l5170 0B71  
                                    l5074 164D                                      l5092 0881  
                                    l5068 1646                                      l6132 0298  
                                    l5174 0B78                                      l6134 02A1  
                                    l6126 0283                                      l5096 0887  
                                    l4800 1683                                      l5184 0BA0  
                                    l5176 0B82                                      l5600 051B  
                                    l5352 1697                                      l5360 16AB  
                                    l5344 1689                                      l6128 028E  
                                    l6090 0DA4                                      l6058 0D3F  
                                    l5442 07DE                                      l5186 0BA8  
                                    l5178 0B87                                      l5610 0531  
                                    l6146 02CD                                      l6138 02A8  
                                    l5460 0A73                                      l6084 0D8A  
                                    l6076 0D6F                                      l5604 0522  
                                    l5356 169E                                      l5348 1690  
                                    l6172 030B                                      l4822 1785  
                                    l4814 1767                                      l5550 17FE  
                                    l5470 0A93                                      l6086 0D96  
                                    l6078 0D7D                                      l4902 0404  
                                    l4910 042E                                      l5446 07E5  
                                    l5630 0568                                      l5622 054B  
                                    l5710 0833                                      l5358 16A0  
                                    l6190 03A9                                      l6182 037A  
                                    l6158 02F1                                      l4816 1773  
                                    l5800 0934                                      l5544 17E6  
                                    l4840 1715                                      l5640 0584  
                                    l5632 056D                                      l4826 178E  
                                    l5810 0955                                      l5546 17F6  
                                    l4930 046A                                      l5570 148F  
                                    l5650 05B6                                      l5642 058E  
                                    l5634 0571                                      l5714 0849  
                                    l6186 0396                                      l4860 08F5  
                                    l4844 1721                                      l4940 0494  
                                    l4924 044B                                      l4908 0417  
                                    l5660 05D1                                      l5628 055E  
                                    l5732 0600                                      l5556 1541  
                                    l6196 03B2                                      l4838 1709  
                                    l4918 0445                                      l5590 15E0  
                                    l5574 1495                                      l5646 05A4  
                                    l5670 06B4                                      l5750 0651  
                                    l5902 0F0C                                      l5496 15CA  
                                    l5488 15BF                                      l4848 172A  
                                    l4952 0499                                      l4936 0482  
                                    l5912 0F32                                      l5920 0F5B  
                                    l4786 1662                                      l4954 03C3  
                                    l5690 070B                                      l5762 066D  
                                    l5754 0659                                      l5738 0616  
                                    l4948 04DD                                      l4956 04F0  
                                    l5676 06CA                                      l5860 0133  
                                    l5924 0F61                                      l5766 0675  
                                    l5846 00C0                                      l4974 0A1C  
                                    l4896 03EE                                      l5872 01AD  
                                    l5880 0225                                      l4992 0A42  
                                    l4984 0A24                                      l4968 0A11  
                                    l4898 03F0                                      l5698 0724  
                                    l5866 019D                                      l5882 0237  
                                    l4986 0A30                                      l4996 0A4B  
                                    l5878 0213                                      STR_1 18CF  
                                    STR_2 18DB                                      STR_3 18D8  
                                    STR_4 18C9                                      STR_5 185A  
                                    STR_6 1834                                      STR_7 18DB  
                                    STR_8 18DD                                      STR_9 1849  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _LATD 010F  
                                    _LATE 0110                                      u5205 170C  
                                    u5135 176A                                      u5225 171B  
                                    u5155 1774                                      u5235 1722  
                                    u5165 177E                                      u5325 0460  
                                    u6205 1548                                      u5175 1786  
                                    u5255 08E1                                      u6215 154D  
                                    u5425 0A27                                      u6154 17DE  
                                    u6155 17DD                                      u7035 0C84  
                                    u6164 17EE                                      u6165 17ED  
                                    u7125 0D70                                      u5445 0A31  
                                    u5525 08B2                                      u5630 0DB8  
                                    u6415 0572                                      u5455 0A3B  
                                    u5465 0A43                                      u5545 08C1  
                                    u7155 0D8B                                      u6355 054C  
                                    u6515 06DC                                      u5555 08C8  
                                    u7307 02C6                                      u5805 0BBD  
                                    u5725 0B7D                                      u6445 0585  
                                    u6525 06EC                                      u7317 0B64  
                                    u7095 0D46                                      u7407 0786  
                                    u6535 070C                                      u7327 0E54  
                                    u7417 079C                                      u5745 0B96  
                                    u6385 055F                                      u6545 071B  
                                    u6705 067C                                      u6625 0622  
                                    u7337 0E71                                      u7265 0375  
                                    u5835 17AE                                      u7507 14A5  
                                    u7427 07A9                                      u6555 0725  
                                    u6635 0632                                      u7347 0E8E  
                                    u7275 0392                                      u7517 14AD  
                                    u7437 07B6                                      u5765 0BA3  
                                    u6805 00BE                                      u7357 0EAB  
                                    u5685 0E2A                                      u7285 03A2  
                                    u6910 0F15                                      u6735 0932  
                                    u7607 091E                                      u7527 0AB4  
                                    u7447 07C3                                      u6655 065A  
                                    u6815 00D1                                      u7367 0EC8  
                                    u6920 0F1D                                      u6912 0F16  
                                    u6745 0953                                      u7617 17D1  
                                    u7537 0ADB                                      u7457 0F88  
                                    u7377 075F                                      u6665 0660  
                                    u6825 00E5                                      u6922 0F1E  
                                    u7627 14F7                                      u7547 0AEA  
                                    u7467 0FA4                                      u7387 076C  
                                    u6835 0131                                      u6755 0BE2  
                                    u6780 008E                                      u7637 14FE  
                                    u7557 0AF6                                      u7477 0FE2  
                                    u7397 0779                                      u6845 019B  
                                    u6765 0BFB                                      u6790 00AC  
                                    u6950 0F3B                                      u7647 1508  
                                    u7567 0B02                                      u7487 1737  
                                    u6695 0676                                      u6855 01AB  
                                    u6775 0C14                                      u6960 0F43  
                                    u6952 0F3C                                      u7657 17A3  
                                    u7577 08F6                                      u7497 1757  
                                    u6962 0F44                                      u7587 0904  
                                    u7597 090A                                      u6885 0223  
                                    u6895 0235                                      _WREN 0CAA  
                                    _WPUB 020D                            ??_eeprom_write 0073  
                                    _WPUE 0210                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _Temp 0165  
                                    _main 023D                              ___ftpack@arg 0072  
                      __size_of_LCDGotoXY 0024                              ___ftpack@exp 0075  
                                    _temp 015A                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                          _strKey_Pressed 006E                                      start 003C  
              ??_TMR1_SetInterruptHandler 0074                         ___bmul@multiplier 0075  
                           __CFG_MCLRE$ON 0000                              ___ftmul@cntr 0042  
                            ___ftmul@sign 0043                 __end_of_Check_KeyReleased 15D5  
                          ??_command_turn 0023                              ___fttol@exp1 0025  
                            ___fttol@lval 0021                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 145F  
                                   ?_main 0070                           __end_of___awdiv 0A58  
                                   _EEADR 0191                           __end_of___ftadd 05E9  
                                   STR_10 18A7                                     STR_11 186B  
                                   STR_20 1899                                     STR_12 1899  
                                   STR_21 188A                                     STR_13 1800  
                                   STR_22 1849                                     STR_14 1838  
                                   STR_15 1827                                     STR_16 18D5  
                                   STR_17 187B                             __CFG_WDTE$OFF 0000  
                                   STR_18 18BF                                     STR_19 1815  
                         __end_of___awmod 08DD                                     _CARRY 0018  
                         __end_of___ftdiv 0746                           _TMR1_StartTimer 1449  
                            LCDInit@style 0079                           __end_of___ftneg 1480  
                         __end_of___ftmul 069D                           ___awdiv@divisor 0072  
                                   _T1CON 0018                           __end_of___fttol 0DAD  
                         __end_of___lwdiv 1793                                     i1l181 15B1  
                                   i1l263 0037                                     i1l255 0015  
                                   i1l257 0021                           __end_of___lwmod 172F  
                                   i1l259 002D                           ___awdiv@counter 0020  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTB 000D                                     _PORTD 000F  
                         __end_of__doprnt 04F3                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _TRISD 008F                                     _TRISE 0090  
                                   _TXREG 019A                                     _TXSTA 019E  
                                   _Check 0169                   comparare@resistor_value 0054  
                        _Keyboard_Manager 145F                           _strKey_Released 016A  
                        __end_of_TMR1_ISR 081C                               DHT_result@x 0076  
                           ___awtoft@sign 0025                           __end_of_dpowers 18BF  
                          _WDT_Initialize 1452                                     _rcreg 0067  
                         __end_of_int_gsm 0ED0                             ___ftpack@sign 0076  
                                   _putch 1456                                     main@x 01DF  
                 __end_of_TMR1_Initialize 153F                            __CFG_BOREN$OFF 0000  
                                   pclath 000A                              comparare@dif 0058  
                            comparare@res 0120                                     status 0003  
                                   wtemp0 007E                            ADC_conversii@i 002E  
                         __end_of_sprintf 1594                    _check_status_incubator 14DD  
                     __size_of_DHT_result 0071                   __end_of_afisare_inf_lcd 0D26  
                         __initialization 003E                              __end_of_main 03C1  
                      __size_of_Check_key 0027                          __end_of_ReadData 1800  
                          ??_EUSART_Write 0072                                 ??_ADC_ISR 0070  
             ?_INTERRUPT_InterruptManager 0070                     read_eeprom_int32@addr 0028  
                                  ??_main 0060                             ___fttol@sign1 0020  
                       __end_of_LCDGotoXY 1661                             LCDByte@isdata 0072  
                               ??_LCDByte 0073                                 ??_LCDInit 0020  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 1456  
                            sms_text@umid 0040                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADRESH 009C  
                                  _ADRESL 009B                                    _EEDATA 0193  
                                  _EECON1 0195                                    _EECON2 0196  
                        ___awdiv@dividend 0074                                    _APFCON 011D  
                        __end_of___awtoft 15F7                                    _ANSELA 018C  
                                  ?_putch 0074                                    _ANSELB 018D  
                                  _ANSELD 018F                                    _ANSELE 0190  
                        __end_of___ftpack 0BCD                                    _T1GCON 0019  
                                  i1l4302 099A                                    i1l4312 09AD  
                                  i1l4314 09AF                                    i1l4308 09A4  
                                  i1l3710 09EF                                    i1l3704 09E4  
                                  i1l4284 0972                                    i1l3716 09FC  
                                  i1l4296 0990                                    i1l3698 09D9  
                                  _FVRCON 0117                          __end_of___lwtoft 14C7  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                          __CFG_PWRTE$OFF 0000                            _LCDWriteString 0858  
                    __size_of_eeprom_read 0018      __end_of_TMR1_DefaultInterruptHandler 1441  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 1440  
              __size_of_Check_KeyReleased 0021                                    ___bmul 148D  
                                  ___ftge 081C                   __end_of_TMR1_StartTimer 144C  
                                  ___wmul 153F                                 ??___awdiv 0076  
                               ??___ftadd 004D                            __CFG_STVREN$ON 0000  
                               ??___awmod 0076                                 ??___ftdiv 004A  
                               ??___ftneg 007A                                 ??___ftmul 003A  
                                  _flag_A 01D5                                    _flag_B 01D3  
                                  _flag_G 0150                                 ??___fttol 0076  
                                  _flag_N 0152                                 ??___lwdiv 0076  
                               ??___lwmod 0024                       _EUSART_Transmit_ISR 1594  
                               ??__doprnt 0029                          ___awdiv@quotient 0022  
                            ?_TMR1_enable 0070                           ___awmod@divisor 0072  
                    __end_of_eeprom_write 163D                              __doprnt@flag 002D  
                         ___awmod@counter 0077                                    _printf 14C7  
                            __doprnt@prec 002E                     ___ftmul@f3_as_product 003F  
                         _state_of_button 0ED0                    __size_of_CheckResponse 0018  
                               ??_int_gsm 003A                              LCDWriteInt@i 0030  
                            LCDWriteInt@j 002E                           ?_WDT_Initialize 0070  
                ADC_GetConversion@channel 0074                          __end_of_sms_text 1000  
                           comparare@step 005B                  __end_of_LCD_Init_apdatat 175F  
TMR1_SetInterruptHandler@InterruptHandler 0072                                 ??_sprintf 0037  
                    __end_of_command_turn 1702                         __end_of_Check_key 16AD  
                    ?_EUSART_Transmit_ISR 0070                     __end_of_TMR1_CallBack 0A06  
                        __end_of_turn_egs 07EE                          ?_TMR1_Initialize 0070  
                       _SYSTEM_Initialize 07EE                      __size_of_LCDWriteInt 0091  
                 __end_of__initialization 007F                           eeprom_read@addr 0075  
                              ___ftadd@f1 0047                                ___ftadd@f2 004A  
                              ___ftge@ff1 0026                                ___ftge@ff2 0029  
                      ?_SYSTEM_Initialize 0070                    __end_of_LCDWriteString 0898  
                        ?_afisare_inf_lcd 0070                                ___ftdiv@f1 0047  
                              ___ftdiv@f2 0044                                ___ftdiv@f3 004F  
                               LCDByte@hn 0075                                 LCDByte@ln 0076  
                              ___ftneg@f1 0044                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072                                ___ftmul@f1 0034  
                              ___ftmul@f2 0037                                ___fttol@f1 0072  
            __size_of_ADC_StartConversion 0003                            __pcstackCOMMON 0070  
                        main@flag_scriere 01DB                              __pidataBANK2 0002  
                            __pidataBANK3 1441                              __pidataBANK4 16AD  
                     ??_SYSTEM_Initialize 0074                             ??_StartSignal 0072  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                           __end_of_putch 145A                              _flag_1000_ms 01C9  
                            ??_DHT_result 0020                              _flag_4000_ms 01C7  
                              ___lwtoft@c 0030                            _OPTION_REGbits 0095  
                  __size_of_ADC_conversii 0049                         eeprom_write@value 0072  
                              __doprnt@ap 0028                                __doprnt@pb 0032  
                      __size_of_comparare 01BA                 __end_of_SYSTEM_Initialize 0800  
                   ??_EUSART_Transmit_ISR 0070                             sms_text@F3770 015D  
                           sms_text@F3772 015C                                   ??_putch 0075  
               __size_of_Check_KeyPressed 0057                                __pbssBANK0 0063  
                              __pbssBANK1 00EF                                __pbssBANK2 014C  
                              __pbssBANK3 01A0                                __pbssBANK5 02A0  
                       _read_eeprom_int32 0BCD                      __end_of_EUSART_Write 1686  
                               ?_ReadData 0070                __end_of_setare_temperatura 0B69  
                         __CFG_VCAPEN$OFF 0000                        ?_read_eeprom_int32 0076  
                           _CheckResponse 14F4               __size_of_EUSART_Receive_ISR 004C  
                         ?_LCDWriteString 0020                        __end_of_DHT_result 0CA4  
                              _flag_10_ms 01CF                                __pmaintext 023D  
                __end_of_Keyboard_Manager 1465                                   ?___bmul 0072  
                     ??_read_eeprom_int32 0020                                   ?___ftge 0026  
                         sms_text@smstext 003F                                   ?___wmul 0072  
                        ?_TMR1_StartTimer 0070                   __end_of_state_of_button 0F67  
                              ??_TMR1_ISR 0070                       _virgula_temp_setata 014C  
                              __pintentry 0004                         sms_text@sms_index 01B5  
                                 _ADC_ISR 1443                                   _BAUDCON 019F  
                               ?___awtoft 0020                                 ?___ftpack 0072  
                                 ?_printf 0033                   __size_of_ADC_Initialize 000D  
                               ?___lwtoft 0030                         Check_key@btn_mask 0072  
                           _eusartRxCount 00EF                                   _LCDByte 08DD  
                                 _LCDInit 0AAF                       __end_of_StartSignal 14B2  
                                 _OSCTUNE 0098                 __end_of_read_eeprom_int32 0C33  
                 ?_check_status_incubator 0070                                ??_ReadData 0072  
                          ?_CheckResponse 0070                             _ADC_conversii 0924  
                                 _T_byte1 006C                                   _T_byte2 0168  
                   __size_of_eeprom_write 0023                           __size_of___bmul 0011  
                         __size_of___ftge 003C                                   ___awdiv 0A06  
                                 ___ftadd 04F3                         __end_of_comparare 023D  
                                 ___awmod 0898                                   ___ftdiv 069D  
                                 ___ftneg 1477                           __size_of___wmul 001B  
                                 ___ftmul 05E9                                   ___fttol 0D26  
                               ?_sms_text 0070                                   ___lwdiv 175F  
                                 ___lwmod 1702                                   __doprnt 03C1  
                              ??___awtoft 0023                                ??___ftpack 0077  
                                 _flag_on 0156                                   __ptext1 0ED0  
                                 __ptext2 0B0B                                   __ptext3 0CA4  
                                 __ptext4 0DAD                                   __ptext5 0898  
                                 __ptext6 0A06                                   __ptext7 163D  
                                 __ptext8 1686                                   __ptext9 0BCD  
                               ?_turn_egs 0070                           __size_of_printf 0016  
                              ??___lwtoft 0033            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                      __size_of_TMR1_enable 0003  
                                 _dpowers 18B5                     _OSCILLATOR_Initialize 145A  
                   __size_of_command_turn 002B                                   _int_gsm 0E3E  
                        ___awmod@dividend 0074         __size_of_TMR1_SetInterruptHandler 0006  
                ??_PIN_MANAGER_Initialize 0072                 ?_TMR1_SetInterruptHandler 0072  
                           ?_TMR1_disable 0070                                   _valoare 01BB  
                               _LCDGotoXY 163D            __end_of_check_status_incubator 14F4  
                                 _step_nr 0065                __size_of_SYSTEM_Initialize 0012  
                                 _sprintf 1577                                   clrloop0 146C  
                    end_of_initialization 007F                            comparare@F3791 02A0  
                          comparare@F3786 0220                                   init_ram 1471  
                            _eeprom_write 161A                                   initloop 1472  
                          ?_ADC_conversii 0027                         _EUSART_Initialize 155A  
                          comparare@j_912 00ED                     ADC_conversii@rezultat 002A  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
                                 printf@f 0033                                _temp_real1 015F  
                          comparare@table 00A0                          ?_state_of_button 0070  
                              ??_sms_text 003D                               _StartSignal 149E  
                            _command_turn 16D7                       ??_EUSART_Initialize 0072  
                        ??_WDT_Initialize 0072                                 _PORTDbits 000F  
                              ??_turn_egs 0072                         LCDWriteString@msg 0020  
                          ??_TMR1_disable 0072                                 _TRISCbits 008E  
                               _TRISDbits 008F                     __size_of_EUSART_Write 0025  
                              ?_LCDGotoXY 0079                       _ADC_StartConversion 1446  
              __size_of_read_eeprom_int32 0066                         ?_LCD_Init_apdatat 0070  
                        _Check_KeyPressed 0A58                           ??_CheckResponse 0072  
                      ??_LCD_Init_apdatat 0020                 __end_of_EUSART_Initialize 1577  
                             ___ftdiv@exp 0052                                 ReadData@i 0074  
                               ReadData@j 0075                             ??_eeprom_read 0072  
                               _Check_key 1686                                LCDGotoXY@x 0021  
                              LCDGotoXY@y 0079                              _count_100_ms 01C5  
                            _count_500_ms 01C3                                comparare@i 014A  
                              comparare@j 00EB                               ___ftmul@exp 003E  
                    ?_ADC_StartConversion 0070                            __end_of___bmul 149E  
                          __end_of___ftge 0858                            __end_of___wmul 155A  
                            _EUSART_Write 1661                         __size_of_TMR1_ISR 001C  
                          _ADC_Initialize 1480                    ?_OSCILLATOR_Initialize 0070  
                          __end_of_printf 14DD                       start_initialization 003E  
         __size_of_PIN_MANAGER_Initialize 0023                             ??_LCDWriteInt 0027  
                             putch@txData 0074                          ??_LCDWriteString 0079  
                         ??_ADC_conversii 0029                                ?_Check_key 0070  
                       __size_of_ReadData 0038                     ??_ADC_StartConversion 0072  
                __size_of_TMR1_Initialize 001B                                  ??___bmul 0073  
                                ??___ftge 002C                         ?_Keyboard_Manager 0070  
                                ??___wmul 0076                       __end_of_eeprom_read 1524  
                  __end_of_ADC_Initialize 148D                               __doprnt@val 002F  
                 read_eeprom_int32@result 0024                  __size_of_afisare_inf_lcd 0082  
                             __pdataBANK2 016E                               __pdataBANK3 01E5  
                             __pdataBANK4 0220                        ??_Keyboard_Manager 0073  
                      _setare_temperatura 0B0B                                  ?_ADC_ISR 0070  
                  __size_of_TMR1_CallBack 004D                                  ??_printf 0035  
                                ?_LCDByte 0072                         __size_of___awtoft 0022  
                                ?_LCDInit 0070                         __size_of___ftpack 0064  
             __end_of_EUSART_Transmit_ISR 15B4                     TMR1_ISR@CountCallBack 014E  
                     ?_setare_temperatura 0070                           main@flag_citire 01DD  
                             __pbssCOMMON 007A                                  LCDByte@c 0077  
                               ___latbits 0002                         __size_of___lwtoft 0015  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120                             __pcstackBANK3 01DB  
                             ??_LCDGotoXY 0020                               _flag_100_ms 01CD  
                             _flag_500_ms 01CB                          eeprom_write@addr 0075  
              __end_of_EUSART_Receive_ISR 09B9                __size_of_EUSART_Initialize 001D  
                        LCDWriteInt@F3800 01B0                                 __doprnt@c 0031  
                               __doprnt@f 0026                       __end_of_LCDWriteInt 0E3E  
                               __pnvBANK2 016B                                 __pnvBANK3 01E3  
                    ??_setare_temperatura 0032                          ___lwdiv@dividend 0074  
                  _PIN_MANAGER_Initialize 15F7                      __end_of_TMR1_disable 144F  
                               _flag_1_ms 01D1          __end_of_TMR1_SetInterruptHandler 146B  
                                ?___awdiv 0072                                  ?___ftadd 0047  
                                ?___awmod 0072                                  ?___ftdiv 0044  
                                ?___ftneg 0044                                  ?___ftmul 0034  
                                ?___fttol 0072                                 _flag_step 01D7  
                                ?___lwdiv 0072                                  ?___lwmod 0020  
                         ?_ADC_Initialize 0070                              _eusartRxHead 0069  
                            _eusartTxHead 006B                              _eusartRxTail 0068  
                                ?__doprnt 0026                              _eusartTxTail 006A  
            ??_INTERRUPT_InterruptManager 0071                         __size_of_sms_text 0099  
                               _comparare 0083                   _eusartTxBufferRemaining 016D  
                __size_of_TMR1_StartTimer 0003                                  ?_int_gsm 0070  
                       __size_of_turn_egs 00A8                          ___lwdiv@quotient 0078  
                                ?_sprintf 0033                                 _menu_flag 007A  
                          __size_of_putch 0004                            _eusartRxBuffer 01A0  
                           _TMR1_CallBack 09B9                            _eusartTxBuffer 01A8  
                          ___wmul@product 0076                                  _LATAbits 010C  
                                _LATCbits 010E                               ??_Check_key 0072  
                               clear_ram0 146B                               _eeprom_read 150C  
                                _PIE1bits 0091       __size_of_INTERRUPT_InterruptManager 0038  
                                _PIR1bits 0011                                 _temp_real 0161  
                                _TMR1_ISR 0800                              ?_StartSignal 0070  
                __end_of_Check_KeyPressed 0AAF                          LCDWriteString@cc 0022  
                           ??_TMR1_enable 0072                                 _umiditate 0158  
                       ??_TMR1_Initialize 0074                          __size_of_ADC_ISR 0003  
                              _ADCON0bits 009D                                ?_comparare 0054  
                       ___wmul@multiplier 0072                                  _RH_byte1 006D  
                                _RH_byte2 0167                         ??_afisare_inf_lcd 0032  
                           _rez_conversie 01D9                          __size_of_LCDByte 0047  
                        __size_of_LCDInit 005C                               _LCDWriteInt 0DAD  
                          ?_TMR1_CallBack 0070                             _flag_directie 0063  
                                _ReadData 17C8                         _ADC_GetConversion 1793  
               __size_of_LCD_Init_apdatat 0030                   ??_OSCILLATOR_Initialize 0072  
                      ?_ADC_GetConversion 0072                             _temp_virgula1 015E  
                        __size_of___awdiv 0052                          __size_of___ftadd 00F6  
                        __size_of___awmod 0045                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0034  
                        __size_of___lwmod 002D                                  ___awtoft 15D5  
                                ___ftpack 0B69                          __size_of__doprnt 0132  
                _TMR1_SetInterruptHandler 1465                                  ___lwtoft 14B2  
                   _TMR1_InterruptHandler 01E3                       ??_ADC_GetConversion 0020  
                __size_of_state_of_button 0097                       __end_of_TMR1_enable 1452  
                        __size_of_int_gsm 0092                           ___lwdiv@divisor 0072  
                         ___lwdiv@counter 0077                                  __ptext10 0E3E  
                                __ptext11 0083                                  __ptext20 15D5  
                                __ptext12 153F                                  __ptext21 0B69  
                                __ptext13 14B2                                _T1GCONbits 0019  
                                __ptext30 03C1                                  __ptext22 16D7  
                                __ptext14 1477                                  __ptext31 1456  
                                __ptext23 0746                                  __ptext15 05E9  
                                __ptext40 07EE                                  __ptext32 1661  
                                __ptext24 161A                                  __ptext16 081C  
                                __ptext41 1452                                  __ptext33 1702  
                                __ptext25 150C                                  __ptext17 069D  
                                __ptext50 08DD                                  __ptext42 1524  
                                __ptext34 172F                                  __ptext26 14DD  
                                __ptext18 04F3                                  __ptext51 145F  
                                __ptext43 1449                                  __ptext35 0858  
                                __ptext27 0F67                                  __ptext19 148D  
                                __ptext60 1793                                  __ptext52 15B4  
                                __ptext44 1465                                  __ptext36 0D26  
                                __ptext28 1577                                  __ptext53 0A58  
                                __ptext45 15F7                                  __ptext37 144F  
                                __ptext29 14C7                                  __ptext62 0800  
                                __ptext54 0C33                                  __ptext46 145A  
                                __ptext38 144C                                  __ptext63 09B9  
                                __ptext55 17C8                                  __ptext47 155A  
                                __ptext39 149E                                  __ptext64 1440  
                                __ptext56 14F4                                  __ptext48 1480  
                                __ptext65 1594                                  __ptext57 0924  
                                __ptext49 0AAF                                  __ptext66 096D  
                                __ptext58 175F                                  __ptext67 1443  
                                __ptext59 1446                          _supplay_security 01B7  
                       ??_TMR1_StartTimer 0072                          __size_of_sprintf 001D  
                   __size_of_TMR1_disable 0003                      Check_key@btn_pressed 0073  
                   __end_of_CheckResponse 150C                             __size_of_main 0184  
               __end_of_ADC_GetConversion 17C8                       ADC_conversii@temper 002C  
                                int$flags 007E                                  _sms_text 0F67  
      __end_of_INTERRUPT_InterruptManager 003C                _INTERRUPT_InterruptManager 0004  
                                main@volt 01E0                                _DHT_result 0C33  
                             ??_comparare 0056                                  _turn_egs 0746  
                ??_check_status_incubator 007A                                _INTCONbits 000B  
                            _TMR1_disable 144C                 __size_of_Keyboard_Manager 0006  
                          __pstringtext10 188A                            __pstringtext11 1899  
                          __pstringtext20 0000                            __pstringtext12 18A7  
                          __pstringtext13 18BF                            __pstringtext14 18C9  
                          __pstringtext15 18CF                            __pstringtext16 18D5  
                          __pstringtext17 18D8                            __pstringtext18 18DB  
                          __pstringtext19 18DD                           ??_TMR1_CallBack 0070  
                            _temp_virgula 0160                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                                 sprintf@ap 0039  
                               sprintf@pb 003A                                 sprintf@wh 0038  
             __end_of_ADC_StartConversion 1449                          ___lwmod@dividend 0022  
                          LCDWriteInt@val 0024                            LCDWriteInt@str 0029  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
                   __end_of_ADC_conversii 096D                          ??_ADC_Initialize 0072  
                                printf@ap 0036                                  printf@pb 0037  
                      _EUSART_Receive_ISR 096D                               _TMR1_enable 144F  
                             _temp_setata 016E                           comparare@result 005E  
                           __pstringtext1 18B5                             __pstringtext2 1800  
                           __pstringtext3 1815                             __pstringtext4 1827  
                           __pstringtext5 1838                             __pstringtext6 1849  
                           __pstringtext7 185A                             __pstringtext8 186B  
                           __pstringtext9 187B                      __size_of_StartSignal 0014  
                                sprintf@f 0033                       ?_EUSART_Receive_ISR 0070  
                         ___lwmod@divisor 0020                           ___lwmod@counter 0025  
                             _test_eeprom 01B9                        EUSART_Write@txData 0073  
            __size_of_EUSART_Transmit_ISR 0020                         ??_state_of_button 0035  
          __end_of_PIN_MANAGER_Initialize 161A                             ?_eeprom_write 0072  
                      _flag_directie_read 0154                      ??_EUSART_Receive_ISR 0070  
                            ?_eeprom_read 0070                __size_of_ADC_GetConversion 0035  
             __size_of_setare_temperatura 005E                           _TMR1_Initialize 1524  
                 __size_of_LCDWriteString 0040  
