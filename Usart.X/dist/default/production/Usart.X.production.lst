

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Dec 02 15:51:54 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	cinit,global,class=CODE,merge=1,delta=2
    22                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    28                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    29                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,merge=1,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	text36,local,class=CODE,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,merge=1,delta=2
    75                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text41,local,class=CODE,merge=1,delta=2
    78                           	psect	text42,local,class=CODE,merge=1,delta=2
    79                           	psect	text43,local,class=CODE,merge=1,delta=2
    80                           	psect	text44,local,class=CODE,merge=1,delta=2
    81                           	psect	text45,local,class=CODE,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text48,local,class=CODE,merge=1,delta=2
    85                           	psect	text49,local,class=CODE,merge=1,delta=2
    86                           	psect	text50,local,class=CODE,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,merge=1,delta=2
    90                           	psect	text54,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     
    93                           ; Version 1.42
    94                           ; Generated 13/04/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC16F1937 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  008F                     	;# 
   162  0090                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0095                     	;# 
   167  0096                     	;# 
   168  0097                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009A                     	;# 
   172  009B                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  0110                     	;# 
   182  0111                     	;# 
   183  0112                     	;# 
   184  0113                     	;# 
   185  0114                     	;# 
   186  0115                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  0118                     	;# 
   190  0119                     	;# 
   191  011A                     	;# 
   192  011B                     	;# 
   193  011D                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  018F                     	;# 
   197  0190                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0194                     	;# 
   205  0195                     	;# 
   206  0196                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019F                     	;# 
   218  020D                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0215                     	;# 
   225  0215                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0291                     	;# 
   229  0291                     	;# 
   230  0292                     	;# 
   231  0293                     	;# 
   232  0294                     	;# 
   233  0295                     	;# 
   234  0295                     	;# 
   235  0296                     	;# 
   236  0298                     	;# 
   237  0298                     	;# 
   238  0299                     	;# 
   239  029A                     	;# 
   240  029B                     	;# 
   241  029C                     	;# 
   242  029C                     	;# 
   243  029D                     	;# 
   244  029E                     	;# 
   245  029F                     	;# 
   246  0311                     	;# 
   247  0311                     	;# 
   248  0312                     	;# 
   249  0313                     	;# 
   250  0314                     	;# 
   251  0315                     	;# 
   252  0315                     	;# 
   253  0316                     	;# 
   254  0318                     	;# 
   255  0318                     	;# 
   256  0319                     	;# 
   257  031A                     	;# 
   258  031C                     	;# 
   259  031C                     	;# 
   260  031D                     	;# 
   261  031E                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0415                     	;# 
   266  0416                     	;# 
   267  0417                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  0791                     	;# 
   272  0792                     	;# 
   273  0793                     	;# 
   274  0794                     	;# 
   275  0795                     	;# 
   276  0798                     	;# 
   277  0799                     	;# 
   278  079A                     	;# 
   279  07A0                     	;# 
   280  07A1                     	;# 
   281  07A2                     	;# 
   282  07A3                     	;# 
   283  07A4                     	;# 
   284  07A5                     	;# 
   285  07A6                     	;# 
   286  07A7                     	;# 
   287  07A8                     	;# 
   288  07A9                     	;# 
   289  07AA                     	;# 
   290  07AB                     	;# 
   291  0FE4                     	;# 
   292  0FE5                     	;# 
   293  0FE6                     	;# 
   294  0FE7                     	;# 
   295  0FE8                     	;# 
   296  0FE9                     	;# 
   297  0FEA                     	;# 
   298  0FEB                     	;# 
   299  0FED                     	;# 
   300  0FEE                     	;# 
   301  0FEF                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  008F                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  010F                     	;# 
   356  0110                     	;# 
   357  0111                     	;# 
   358  0112                     	;# 
   359  0113                     	;# 
   360  0114                     	;# 
   361  0115                     	;# 
   362  0116                     	;# 
   363  0117                     	;# 
   364  0118                     	;# 
   365  0119                     	;# 
   366  011A                     	;# 
   367  011B                     	;# 
   368  011D                     	;# 
   369  018C                     	;# 
   370  018D                     	;# 
   371  018F                     	;# 
   372  0190                     	;# 
   373  0191                     	;# 
   374  0191                     	;# 
   375  0192                     	;# 
   376  0193                     	;# 
   377  0193                     	;# 
   378  0193                     	;# 
   379  0194                     	;# 
   380  0195                     	;# 
   381  0196                     	;# 
   382  0199                     	;# 
   383  019A                     	;# 
   384  019B                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019C                     	;# 
   389  019C                     	;# 
   390  019D                     	;# 
   391  019E                     	;# 
   392  019F                     	;# 
   393  020D                     	;# 
   394  0210                     	;# 
   395  0211                     	;# 
   396  0212                     	;# 
   397  0213                     	;# 
   398  0214                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0216                     	;# 
   402  0217                     	;# 
   403  0291                     	;# 
   404  0291                     	;# 
   405  0292                     	;# 
   406  0293                     	;# 
   407  0294                     	;# 
   408  0295                     	;# 
   409  0295                     	;# 
   410  0296                     	;# 
   411  0298                     	;# 
   412  0298                     	;# 
   413  0299                     	;# 
   414  029A                     	;# 
   415  029B                     	;# 
   416  029C                     	;# 
   417  029C                     	;# 
   418  029D                     	;# 
   419  029E                     	;# 
   420  029F                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0314                     	;# 
   426  0315                     	;# 
   427  0315                     	;# 
   428  0316                     	;# 
   429  0318                     	;# 
   430  0318                     	;# 
   431  0319                     	;# 
   432  031A                     	;# 
   433  031C                     	;# 
   434  031C                     	;# 
   435  031D                     	;# 
   436  031E                     	;# 
   437  0394                     	;# 
   438  0395                     	;# 
   439  0396                     	;# 
   440  0415                     	;# 
   441  0416                     	;# 
   442  0417                     	;# 
   443  041C                     	;# 
   444  041D                     	;# 
   445  041E                     	;# 
   446  0791                     	;# 
   447  0792                     	;# 
   448  0793                     	;# 
   449  0794                     	;# 
   450  0795                     	;# 
   451  0798                     	;# 
   452  0799                     	;# 
   453  079A                     	;# 
   454  07A0                     	;# 
   455  07A1                     	;# 
   456  07A2                     	;# 
   457  07A3                     	;# 
   458  07A4                     	;# 
   459  07A5                     	;# 
   460  07A6                     	;# 
   461  07A7                     	;# 
   462  07A8                     	;# 
   463  07A9                     	;# 
   464  07AA                     	;# 
   465  07AB                     	;# 
   466  0FE4                     	;# 
   467  0FE5                     	;# 
   468  0FE6                     	;# 
   469  0FE7                     	;# 
   470  0FE8                     	;# 
   471  0FE9                     	;# 
   472  0FEA                     	;# 
   473  0FEB                     	;# 
   474  0FED                     	;# 
   475  0FEE                     	;# 
   476  0FEF                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000F                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0015                     	;# 
   498  0016                     	;# 
   499  0016                     	;# 
   500  0017                     	;# 
   501  0018                     	;# 
   502  0019                     	;# 
   503  001A                     	;# 
   504  001B                     	;# 
   505  001C                     	;# 
   506  001E                     	;# 
   507  001F                     	;# 
   508  008C                     	;# 
   509  008D                     	;# 
   510  008E                     	;# 
   511  008F                     	;# 
   512  0090                     	;# 
   513  0091                     	;# 
   514  0092                     	;# 
   515  0093                     	;# 
   516  0095                     	;# 
   517  0096                     	;# 
   518  0097                     	;# 
   519  0098                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009B                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  010F                     	;# 
   531  0110                     	;# 
   532  0111                     	;# 
   533  0112                     	;# 
   534  0113                     	;# 
   535  0114                     	;# 
   536  0115                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  0118                     	;# 
   540  0119                     	;# 
   541  011A                     	;# 
   542  011B                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018D                     	;# 
   546  018F                     	;# 
   547  0190                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0212                     	;# 
   572  0213                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0294                     	;# 
   583  0295                     	;# 
   584  0295                     	;# 
   585  0296                     	;# 
   586  0298                     	;# 
   587  0298                     	;# 
   588  0299                     	;# 
   589  029A                     	;# 
   590  029B                     	;# 
   591  029C                     	;# 
   592  029C                     	;# 
   593  029D                     	;# 
   594  029E                     	;# 
   595  029F                     	;# 
   596  0311                     	;# 
   597  0311                     	;# 
   598  0312                     	;# 
   599  0313                     	;# 
   600  0314                     	;# 
   601  0315                     	;# 
   602  0315                     	;# 
   603  0316                     	;# 
   604  0318                     	;# 
   605  0318                     	;# 
   606  0319                     	;# 
   607  031A                     	;# 
   608  031C                     	;# 
   609  031C                     	;# 
   610  031D                     	;# 
   611  031E                     	;# 
   612  0394                     	;# 
   613  0395                     	;# 
   614  0396                     	;# 
   615  0415                     	;# 
   616  0416                     	;# 
   617  0417                     	;# 
   618  041C                     	;# 
   619  041D                     	;# 
   620  041E                     	;# 
   621  0791                     	;# 
   622  0792                     	;# 
   623  0793                     	;# 
   624  0794                     	;# 
   625  0795                     	;# 
   626  0798                     	;# 
   627  0799                     	;# 
   628  079A                     	;# 
   629  07A0                     	;# 
   630  07A1                     	;# 
   631  07A2                     	;# 
   632  07A3                     	;# 
   633  07A4                     	;# 
   634  07A5                     	;# 
   635  07A6                     	;# 
   636  07A7                     	;# 
   637  07A8                     	;# 
   638  07A9                     	;# 
   639  07AA                     	;# 
   640  07AB                     	;# 
   641  0FE4                     	;# 
   642  0FE5                     	;# 
   643  0FE6                     	;# 
   644  0FE7                     	;# 
   645  0FE8                     	;# 
   646  0FE9                     	;# 
   647  0FEA                     	;# 
   648  0FEB                     	;# 
   649  0FED                     	;# 
   650  0FEE                     	;# 
   651  0FEF                     	;# 
   652  0000                     	;# 
   653  0001                     	;# 
   654  0002                     	;# 
   655  0003                     	;# 
   656  0004                     	;# 
   657  0005                     	;# 
   658  0006                     	;# 
   659  0007                     	;# 
   660  0008                     	;# 
   661  0009                     	;# 
   662  000A                     	;# 
   663  000B                     	;# 
   664  000C                     	;# 
   665  000D                     	;# 
   666  000E                     	;# 
   667  000F                     	;# 
   668  0010                     	;# 
   669  0011                     	;# 
   670  0012                     	;# 
   671  0013                     	;# 
   672  0015                     	;# 
   673  0016                     	;# 
   674  0016                     	;# 
   675  0017                     	;# 
   676  0018                     	;# 
   677  0019                     	;# 
   678  001A                     	;# 
   679  001B                     	;# 
   680  001C                     	;# 
   681  001E                     	;# 
   682  001F                     	;# 
   683  008C                     	;# 
   684  008D                     	;# 
   685  008E                     	;# 
   686  008F                     	;# 
   687  0090                     	;# 
   688  0091                     	;# 
   689  0092                     	;# 
   690  0093                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0098                     	;# 
   695  0099                     	;# 
   696  009A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  010C                     	;# 
   703  010D                     	;# 
   704  010E                     	;# 
   705  010F                     	;# 
   706  0110                     	;# 
   707  0111                     	;# 
   708  0112                     	;# 
   709  0113                     	;# 
   710  0114                     	;# 
   711  0115                     	;# 
   712  0116                     	;# 
   713  0117                     	;# 
   714  0118                     	;# 
   715  0119                     	;# 
   716  011A                     	;# 
   717  011B                     	;# 
   718  011D                     	;# 
   719  018C                     	;# 
   720  018D                     	;# 
   721  018F                     	;# 
   722  0190                     	;# 
   723  0191                     	;# 
   724  0191                     	;# 
   725  0192                     	;# 
   726  0193                     	;# 
   727  0193                     	;# 
   728  0193                     	;# 
   729  0194                     	;# 
   730  0195                     	;# 
   731  0196                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019B                     	;# 
   736  019B                     	;# 
   737  019B                     	;# 
   738  019C                     	;# 
   739  019C                     	;# 
   740  019D                     	;# 
   741  019E                     	;# 
   742  019F                     	;# 
   743  020D                     	;# 
   744  0210                     	;# 
   745  0211                     	;# 
   746  0212                     	;# 
   747  0213                     	;# 
   748  0214                     	;# 
   749  0215                     	;# 
   750  0215                     	;# 
   751  0216                     	;# 
   752  0217                     	;# 
   753  0291                     	;# 
   754  0291                     	;# 
   755  0292                     	;# 
   756  0293                     	;# 
   757  0294                     	;# 
   758  0295                     	;# 
   759  0295                     	;# 
   760  0296                     	;# 
   761  0298                     	;# 
   762  0298                     	;# 
   763  0299                     	;# 
   764  029A                     	;# 
   765  029B                     	;# 
   766  029C                     	;# 
   767  029C                     	;# 
   768  029D                     	;# 
   769  029E                     	;# 
   770  029F                     	;# 
   771  0311                     	;# 
   772  0311                     	;# 
   773  0312                     	;# 
   774  0313                     	;# 
   775  0314                     	;# 
   776  0315                     	;# 
   777  0315                     	;# 
   778  0316                     	;# 
   779  0318                     	;# 
   780  0318                     	;# 
   781  0319                     	;# 
   782  031A                     	;# 
   783  031C                     	;# 
   784  031C                     	;# 
   785  031D                     	;# 
   786  031E                     	;# 
   787  0394                     	;# 
   788  0395                     	;# 
   789  0396                     	;# 
   790  0415                     	;# 
   791  0416                     	;# 
   792  0417                     	;# 
   793  041C                     	;# 
   794  041D                     	;# 
   795  041E                     	;# 
   796  0791                     	;# 
   797  0792                     	;# 
   798  0793                     	;# 
   799  0794                     	;# 
   800  0795                     	;# 
   801  0798                     	;# 
   802  0799                     	;# 
   803  079A                     	;# 
   804  07A0                     	;# 
   805  07A1                     	;# 
   806  07A2                     	;# 
   807  07A3                     	;# 
   808  07A4                     	;# 
   809  07A5                     	;# 
   810  07A6                     	;# 
   811  07A7                     	;# 
   812  07A8                     	;# 
   813  07A9                     	;# 
   814  07AA                     	;# 
   815  07AB                     	;# 
   816  0FE4                     	;# 
   817  0FE5                     	;# 
   818  0FE6                     	;# 
   819  0FE7                     	;# 
   820  0FE8                     	;# 
   821  0FE9                     	;# 
   822  0FEA                     	;# 
   823  0FEB                     	;# 
   824  0FED                     	;# 
   825  0FEE                     	;# 
   826  0FEF                     	;# 
   827  0000                     	;# 
   828  0001                     	;# 
   829  0002                     	;# 
   830  0003                     	;# 
   831  0004                     	;# 
   832  0005                     	;# 
   833  0006                     	;# 
   834  0007                     	;# 
   835  0008                     	;# 
   836  0009                     	;# 
   837  000A                     	;# 
   838  000B                     	;# 
   839  000C                     	;# 
   840  000D                     	;# 
   841  000E                     	;# 
   842  000F                     	;# 
   843  0010                     	;# 
   844  0011                     	;# 
   845  0012                     	;# 
   846  0013                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  001E                     	;# 
   857  001F                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  008F                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0093                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0098                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  010F                     	;# 
   881  0110                     	;# 
   882  0111                     	;# 
   883  0112                     	;# 
   884  0113                     	;# 
   885  0114                     	;# 
   886  0115                     	;# 
   887  0116                     	;# 
   888  0117                     	;# 
   889  0118                     	;# 
   890  0119                     	;# 
   891  011A                     	;# 
   892  011B                     	;# 
   893  011D                     	;# 
   894  018C                     	;# 
   895  018D                     	;# 
   896  018F                     	;# 
   897  0190                     	;# 
   898  0191                     	;# 
   899  0191                     	;# 
   900  0192                     	;# 
   901  0193                     	;# 
   902  0193                     	;# 
   903  0193                     	;# 
   904  0194                     	;# 
   905  0195                     	;# 
   906  0196                     	;# 
   907  0199                     	;# 
   908  019A                     	;# 
   909  019B                     	;# 
   910  019B                     	;# 
   911  019B                     	;# 
   912  019B                     	;# 
   913  019C                     	;# 
   914  019C                     	;# 
   915  019D                     	;# 
   916  019E                     	;# 
   917  019F                     	;# 
   918  020D                     	;# 
   919  0210                     	;# 
   920  0211                     	;# 
   921  0212                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0216                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0294                     	;# 
   933  0295                     	;# 
   934  0295                     	;# 
   935  0296                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  029B                     	;# 
   941  029C                     	;# 
   942  029C                     	;# 
   943  029D                     	;# 
   944  029E                     	;# 
   945  029F                     	;# 
   946  0311                     	;# 
   947  0311                     	;# 
   948  0312                     	;# 
   949  0313                     	;# 
   950  0314                     	;# 
   951  0315                     	;# 
   952  0315                     	;# 
   953  0316                     	;# 
   954  0318                     	;# 
   955  0318                     	;# 
   956  0319                     	;# 
   957  031A                     	;# 
   958  031C                     	;# 
   959  031C                     	;# 
   960  031D                     	;# 
   961  031E                     	;# 
   962  0394                     	;# 
   963  0395                     	;# 
   964  0396                     	;# 
   965  0415                     	;# 
   966  0416                     	;# 
   967  0417                     	;# 
   968  041C                     	;# 
   969  041D                     	;# 
   970  041E                     	;# 
   971  0791                     	;# 
   972  0792                     	;# 
   973  0793                     	;# 
   974  0794                     	;# 
   975  0795                     	;# 
   976  0798                     	;# 
   977  0799                     	;# 
   978  079A                     	;# 
   979  07A0                     	;# 
   980  07A1                     	;# 
   981  07A2                     	;# 
   982  07A3                     	;# 
   983  07A4                     	;# 
   984  07A5                     	;# 
   985  07A6                     	;# 
   986  07A7                     	;# 
   987  07A8                     	;# 
   988  07A9                     	;# 
   989  07AA                     	;# 
   990  07AB                     	;# 
   991  0FE4                     	;# 
   992  0FE5                     	;# 
   993  0FE6                     	;# 
   994  0FE7                     	;# 
   995  0FE8                     	;# 
   996  0FE9                     	;# 
   997  0FEA                     	;# 
   998  0FEB                     	;# 
   999  0FED                     	;# 
  1000  0FEE                     	;# 
  1001  0FEF                     	;# 
  1002  0000                     	;# 
  1003  0001                     	;# 
  1004  0002                     	;# 
  1005  0003                     	;# 
  1006  0004                     	;# 
  1007  0005                     	;# 
  1008  0006                     	;# 
  1009  0007                     	;# 
  1010  0008                     	;# 
  1011  0009                     	;# 
  1012  000A                     	;# 
  1013  000B                     	;# 
  1014  000C                     	;# 
  1015  000D                     	;# 
  1016  000E                     	;# 
  1017  000F                     	;# 
  1018  0010                     	;# 
  1019  0011                     	;# 
  1020  0012                     	;# 
  1021  0013                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  001E                     	;# 
  1032  001F                     	;# 
  1033  008C                     	;# 
  1034  008D                     	;# 
  1035  008E                     	;# 
  1036  008F                     	;# 
  1037  0090                     	;# 
  1038  0091                     	;# 
  1039  0092                     	;# 
  1040  0093                     	;# 
  1041  0095                     	;# 
  1042  0096                     	;# 
  1043  0097                     	;# 
  1044  0098                     	;# 
  1045  0099                     	;# 
  1046  009A                     	;# 
  1047  009B                     	;# 
  1048  009B                     	;# 
  1049  009C                     	;# 
  1050  009D                     	;# 
  1051  009E                     	;# 
  1052  010C                     	;# 
  1053  010D                     	;# 
  1054  010E                     	;# 
  1055  010F                     	;# 
  1056  0110                     	;# 
  1057  0111                     	;# 
  1058  0112                     	;# 
  1059  0113                     	;# 
  1060  0114                     	;# 
  1061  0115                     	;# 
  1062  0116                     	;# 
  1063  0117                     	;# 
  1064  0118                     	;# 
  1065  0119                     	;# 
  1066  011A                     	;# 
  1067  011B                     	;# 
  1068  011D                     	;# 
  1069  018C                     	;# 
  1070  018D                     	;# 
  1071  018F                     	;# 
  1072  0190                     	;# 
  1073  0191                     	;# 
  1074  0191                     	;# 
  1075  0192                     	;# 
  1076  0193                     	;# 
  1077  0193                     	;# 
  1078  0193                     	;# 
  1079  0194                     	;# 
  1080  0195                     	;# 
  1081  0196                     	;# 
  1082  0199                     	;# 
  1083  019A                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019E                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  0210                     	;# 
  1095  0211                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0214                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0216                     	;# 
  1102  0217                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0294                     	;# 
  1108  0295                     	;# 
  1109  0295                     	;# 
  1110  0296                     	;# 
  1111  0298                     	;# 
  1112  0298                     	;# 
  1113  0299                     	;# 
  1114  029A                     	;# 
  1115  029B                     	;# 
  1116  029C                     	;# 
  1117  029C                     	;# 
  1118  029D                     	;# 
  1119  029E                     	;# 
  1120  029F                     	;# 
  1121  0311                     	;# 
  1122  0311                     	;# 
  1123  0312                     	;# 
  1124  0313                     	;# 
  1125  0314                     	;# 
  1126  0315                     	;# 
  1127  0315                     	;# 
  1128  0316                     	;# 
  1129  0318                     	;# 
  1130  0318                     	;# 
  1131  0319                     	;# 
  1132  031A                     	;# 
  1133  031C                     	;# 
  1134  031C                     	;# 
  1135  031D                     	;# 
  1136  031E                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  041C                     	;# 
  1144  041D                     	;# 
  1145  041E                     	;# 
  1146  0791                     	;# 
  1147  0792                     	;# 
  1148  0793                     	;# 
  1149  0794                     	;# 
  1150  0795                     	;# 
  1151  0798                     	;# 
  1152  0799                     	;# 
  1153  079A                     	;# 
  1154  07A0                     	;# 
  1155  07A1                     	;# 
  1156  07A2                     	;# 
  1157  07A3                     	;# 
  1158  07A4                     	;# 
  1159  07A5                     	;# 
  1160  07A6                     	;# 
  1161  07A7                     	;# 
  1162  07A8                     	;# 
  1163  07A9                     	;# 
  1164  07AA                     	;# 
  1165  07AB                     	;# 
  1166  0FE4                     	;# 
  1167  0FE5                     	;# 
  1168  0FE6                     	;# 
  1169  0FE7                     	;# 
  1170  0FE8                     	;# 
  1171  0FE9                     	;# 
  1172  0FEA                     	;# 
  1173  0FEB                     	;# 
  1174  0FED                     	;# 
  1175  0FEE                     	;# 
  1176  0FEF                     	;# 
  1177  0000                     	;# 
  1178  0001                     	;# 
  1179  0002                     	;# 
  1180  0003                     	;# 
  1181  0004                     	;# 
  1182  0005                     	;# 
  1183  0006                     	;# 
  1184  0007                     	;# 
  1185  0008                     	;# 
  1186  0009                     	;# 
  1187  000A                     	;# 
  1188  000B                     	;# 
  1189  000C                     	;# 
  1190  000D                     	;# 
  1191  000E                     	;# 
  1192  000F                     	;# 
  1193  0010                     	;# 
  1194  0011                     	;# 
  1195  0012                     	;# 
  1196  0013                     	;# 
  1197  0015                     	;# 
  1198  0016                     	;# 
  1199  0016                     	;# 
  1200  0017                     	;# 
  1201  0018                     	;# 
  1202  0019                     	;# 
  1203  001A                     	;# 
  1204  001B                     	;# 
  1205  001C                     	;# 
  1206  001E                     	;# 
  1207  001F                     	;# 
  1208  008C                     	;# 
  1209  008D                     	;# 
  1210  008E                     	;# 
  1211  008F                     	;# 
  1212  0090                     	;# 
  1213  0091                     	;# 
  1214  0092                     	;# 
  1215  0093                     	;# 
  1216  0095                     	;# 
  1217  0096                     	;# 
  1218  0097                     	;# 
  1219  0098                     	;# 
  1220  0099                     	;# 
  1221  009A                     	;# 
  1222  009B                     	;# 
  1223  009B                     	;# 
  1224  009C                     	;# 
  1225  009D                     	;# 
  1226  009E                     	;# 
  1227  010C                     	;# 
  1228  010D                     	;# 
  1229  010E                     	;# 
  1230  010F                     	;# 
  1231  0110                     	;# 
  1232  0111                     	;# 
  1233  0112                     	;# 
  1234  0113                     	;# 
  1235  0114                     	;# 
  1236  0115                     	;# 
  1237  0116                     	;# 
  1238  0117                     	;# 
  1239  0118                     	;# 
  1240  0119                     	;# 
  1241  011A                     	;# 
  1242  011B                     	;# 
  1243  011D                     	;# 
  1244  018C                     	;# 
  1245  018D                     	;# 
  1246  018F                     	;# 
  1247  0190                     	;# 
  1248  0191                     	;# 
  1249  0191                     	;# 
  1250  0192                     	;# 
  1251  0193                     	;# 
  1252  0193                     	;# 
  1253  0193                     	;# 
  1254  0194                     	;# 
  1255  0195                     	;# 
  1256  0196                     	;# 
  1257  0199                     	;# 
  1258  019A                     	;# 
  1259  019B                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019C                     	;# 
  1265  019D                     	;# 
  1266  019E                     	;# 
  1267  019F                     	;# 
  1268  020D                     	;# 
  1269  0210                     	;# 
  1270  0211                     	;# 
  1271  0212                     	;# 
  1272  0213                     	;# 
  1273  0214                     	;# 
  1274  0215                     	;# 
  1275  0215                     	;# 
  1276  0216                     	;# 
  1277  0217                     	;# 
  1278  0291                     	;# 
  1279  0291                     	;# 
  1280  0292                     	;# 
  1281  0293                     	;# 
  1282  0294                     	;# 
  1283  0295                     	;# 
  1284  0295                     	;# 
  1285  0296                     	;# 
  1286  0298                     	;# 
  1287  0298                     	;# 
  1288  0299                     	;# 
  1289  029A                     	;# 
  1290  029B                     	;# 
  1291  029C                     	;# 
  1292  029C                     	;# 
  1293  029D                     	;# 
  1294  029E                     	;# 
  1295  029F                     	;# 
  1296  0311                     	;# 
  1297  0311                     	;# 
  1298  0312                     	;# 
  1299  0313                     	;# 
  1300  0314                     	;# 
  1301  0315                     	;# 
  1302  0315                     	;# 
  1303  0316                     	;# 
  1304  0318                     	;# 
  1305  0318                     	;# 
  1306  0319                     	;# 
  1307  031A                     	;# 
  1308  031C                     	;# 
  1309  031C                     	;# 
  1310  031D                     	;# 
  1311  031E                     	;# 
  1312  0394                     	;# 
  1313  0395                     	;# 
  1314  0396                     	;# 
  1315  0415                     	;# 
  1316  0416                     	;# 
  1317  0417                     	;# 
  1318  041C                     	;# 
  1319  041D                     	;# 
  1320  041E                     	;# 
  1321  0791                     	;# 
  1322  0792                     	;# 
  1323  0793                     	;# 
  1324  0794                     	;# 
  1325  0795                     	;# 
  1326  0798                     	;# 
  1327  0799                     	;# 
  1328  079A                     	;# 
  1329  07A0                     	;# 
  1330  07A1                     	;# 
  1331  07A2                     	;# 
  1332  07A3                     	;# 
  1333  07A4                     	;# 
  1334  07A5                     	;# 
  1335  07A6                     	;# 
  1336  07A7                     	;# 
  1337  07A8                     	;# 
  1338  07A9                     	;# 
  1339  07AA                     	;# 
  1340  07AB                     	;# 
  1341  0FE4                     	;# 
  1342  0FE5                     	;# 
  1343  0FE6                     	;# 
  1344  0FE7                     	;# 
  1345  0FE8                     	;# 
  1346  0FE9                     	;# 
  1347  0FEA                     	;# 
  1348  0FEB                     	;# 
  1349  0FED                     	;# 
  1350  0FEE                     	;# 
  1351  0FEF                     	;# 
  1352  0000                     	;# 
  1353  0001                     	;# 
  1354  0002                     	;# 
  1355  0003                     	;# 
  1356  0004                     	;# 
  1357  0005                     	;# 
  1358  0006                     	;# 
  1359  0007                     	;# 
  1360  0008                     	;# 
  1361  0009                     	;# 
  1362  000A                     	;# 
  1363  000B                     	;# 
  1364  000C                     	;# 
  1365  000D                     	;# 
  1366  000E                     	;# 
  1367  000F                     	;# 
  1368  0010                     	;# 
  1369  0011                     	;# 
  1370  0012                     	;# 
  1371  0013                     	;# 
  1372  0015                     	;# 
  1373  0016                     	;# 
  1374  0016                     	;# 
  1375  0017                     	;# 
  1376  0018                     	;# 
  1377  0019                     	;# 
  1378  001A                     	;# 
  1379  001B                     	;# 
  1380  001C                     	;# 
  1381  001E                     	;# 
  1382  001F                     	;# 
  1383  008C                     	;# 
  1384  008D                     	;# 
  1385  008E                     	;# 
  1386  008F                     	;# 
  1387  0090                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0093                     	;# 
  1391  0095                     	;# 
  1392  0096                     	;# 
  1393  0097                     	;# 
  1394  0098                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  010F                     	;# 
  1406  0110                     	;# 
  1407  0111                     	;# 
  1408  0112                     	;# 
  1409  0113                     	;# 
  1410  0114                     	;# 
  1411  0115                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  0118                     	;# 
  1415  0119                     	;# 
  1416  011A                     	;# 
  1417  011B                     	;# 
  1418  011D                     	;# 
  1419  018C                     	;# 
  1420  018D                     	;# 
  1421  018F                     	;# 
  1422  0190                     	;# 
  1423  0191                     	;# 
  1424  0191                     	;# 
  1425  0192                     	;# 
  1426  0193                     	;# 
  1427  0193                     	;# 
  1428  0193                     	;# 
  1429  0194                     	;# 
  1430  0195                     	;# 
  1431  0196                     	;# 
  1432  0199                     	;# 
  1433  019A                     	;# 
  1434  019B                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019C                     	;# 
  1439  019C                     	;# 
  1440  019D                     	;# 
  1441  019E                     	;# 
  1442  019F                     	;# 
  1443  020D                     	;# 
  1444  0210                     	;# 
  1445  0211                     	;# 
  1446  0212                     	;# 
  1447  0213                     	;# 
  1448  0214                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0216                     	;# 
  1452  0217                     	;# 
  1453  0291                     	;# 
  1454  0291                     	;# 
  1455  0292                     	;# 
  1456  0293                     	;# 
  1457  0294                     	;# 
  1458  0295                     	;# 
  1459  0295                     	;# 
  1460  0296                     	;# 
  1461  0298                     	;# 
  1462  0298                     	;# 
  1463  0299                     	;# 
  1464  029A                     	;# 
  1465  029B                     	;# 
  1466  029C                     	;# 
  1467  029C                     	;# 
  1468  029D                     	;# 
  1469  029E                     	;# 
  1470  029F                     	;# 
  1471  0311                     	;# 
  1472  0311                     	;# 
  1473  0312                     	;# 
  1474  0313                     	;# 
  1475  0314                     	;# 
  1476  0315                     	;# 
  1477  0315                     	;# 
  1478  0316                     	;# 
  1479  0318                     	;# 
  1480  0318                     	;# 
  1481  0319                     	;# 
  1482  031A                     	;# 
  1483  031C                     	;# 
  1484  031C                     	;# 
  1485  031D                     	;# 
  1486  031E                     	;# 
  1487  0394                     	;# 
  1488  0395                     	;# 
  1489  0396                     	;# 
  1490  0415                     	;# 
  1491  0416                     	;# 
  1492  0417                     	;# 
  1493  041C                     	;# 
  1494  041D                     	;# 
  1495  041E                     	;# 
  1496  0791                     	;# 
  1497  0792                     	;# 
  1498  0793                     	;# 
  1499  0794                     	;# 
  1500  0795                     	;# 
  1501  0798                     	;# 
  1502  0799                     	;# 
  1503  079A                     	;# 
  1504  07A0                     	;# 
  1505  07A1                     	;# 
  1506  07A2                     	;# 
  1507  07A3                     	;# 
  1508  07A4                     	;# 
  1509  07A5                     	;# 
  1510  07A6                     	;# 
  1511  07A7                     	;# 
  1512  07A8                     	;# 
  1513  07A9                     	;# 
  1514  07AA                     	;# 
  1515  07AB                     	;# 
  1516  0FE4                     	;# 
  1517  0FE5                     	;# 
  1518  0FE6                     	;# 
  1519  0FE7                     	;# 
  1520  0FE8                     	;# 
  1521  0FE9                     	;# 
  1522  0FEA                     	;# 
  1523  0FEB                     	;# 
  1524  0FED                     	;# 
  1525  0FEE                     	;# 
  1526  0FEF                     	;# 
  1527  0000                     	;# 
  1528  0001                     	;# 
  1529  0002                     	;# 
  1530  0003                     	;# 
  1531  0004                     	;# 
  1532  0005                     	;# 
  1533  0006                     	;# 
  1534  0007                     	;# 
  1535  0008                     	;# 
  1536  0009                     	;# 
  1537  000A                     	;# 
  1538  000B                     	;# 
  1539  000C                     	;# 
  1540  000D                     	;# 
  1541  000E                     	;# 
  1542  000F                     	;# 
  1543  0010                     	;# 
  1544  0011                     	;# 
  1545  0012                     	;# 
  1546  0013                     	;# 
  1547  0015                     	;# 
  1548  0016                     	;# 
  1549  0016                     	;# 
  1550  0017                     	;# 
  1551  0018                     	;# 
  1552  0019                     	;# 
  1553  001A                     	;# 
  1554  001B                     	;# 
  1555  001C                     	;# 
  1556  001E                     	;# 
  1557  001F                     	;# 
  1558  008C                     	;# 
  1559  008D                     	;# 
  1560  008E                     	;# 
  1561  008F                     	;# 
  1562  0090                     	;# 
  1563  0091                     	;# 
  1564  0092                     	;# 
  1565  0093                     	;# 
  1566  0095                     	;# 
  1567  0096                     	;# 
  1568  0097                     	;# 
  1569  0098                     	;# 
  1570  0099                     	;# 
  1571  009A                     	;# 
  1572  009B                     	;# 
  1573  009B                     	;# 
  1574  009C                     	;# 
  1575  009D                     	;# 
  1576  009E                     	;# 
  1577  010C                     	;# 
  1578  010D                     	;# 
  1579  010E                     	;# 
  1580  010F                     	;# 
  1581  0110                     	;# 
  1582  0111                     	;# 
  1583  0112                     	;# 
  1584  0113                     	;# 
  1585  0114                     	;# 
  1586  0115                     	;# 
  1587  0116                     	;# 
  1588  0117                     	;# 
  1589  0118                     	;# 
  1590  0119                     	;# 
  1591  011A                     	;# 
  1592  011B                     	;# 
  1593  011D                     	;# 
  1594  018C                     	;# 
  1595  018D                     	;# 
  1596  018F                     	;# 
  1597  0190                     	;# 
  1598  0191                     	;# 
  1599  0191                     	;# 
  1600  0192                     	;# 
  1601  0193                     	;# 
  1602  0193                     	;# 
  1603  0193                     	;# 
  1604  0194                     	;# 
  1605  0195                     	;# 
  1606  0196                     	;# 
  1607  0199                     	;# 
  1608  019A                     	;# 
  1609  019B                     	;# 
  1610  019B                     	;# 
  1611  019B                     	;# 
  1612  019B                     	;# 
  1613  019C                     	;# 
  1614  019C                     	;# 
  1615  019D                     	;# 
  1616  019E                     	;# 
  1617  019F                     	;# 
  1618  020D                     	;# 
  1619  0210                     	;# 
  1620  0211                     	;# 
  1621  0212                     	;# 
  1622  0213                     	;# 
  1623  0214                     	;# 
  1624  0215                     	;# 
  1625  0215                     	;# 
  1626  0216                     	;# 
  1627  0217                     	;# 
  1628  0291                     	;# 
  1629  0291                     	;# 
  1630  0292                     	;# 
  1631  0293                     	;# 
  1632  0294                     	;# 
  1633  0295                     	;# 
  1634  0295                     	;# 
  1635  0296                     	;# 
  1636  0298                     	;# 
  1637  0298                     	;# 
  1638  0299                     	;# 
  1639  029A                     	;# 
  1640  029B                     	;# 
  1641  029C                     	;# 
  1642  029C                     	;# 
  1643  029D                     	;# 
  1644  029E                     	;# 
  1645  029F                     	;# 
  1646  0311                     	;# 
  1647  0311                     	;# 
  1648  0312                     	;# 
  1649  0313                     	;# 
  1650  0314                     	;# 
  1651  0315                     	;# 
  1652  0315                     	;# 
  1653  0316                     	;# 
  1654  0318                     	;# 
  1655  0318                     	;# 
  1656  0319                     	;# 
  1657  031A                     	;# 
  1658  031C                     	;# 
  1659  031C                     	;# 
  1660  031D                     	;# 
  1661  031E                     	;# 
  1662  0394                     	;# 
  1663  0395                     	;# 
  1664  0396                     	;# 
  1665  0415                     	;# 
  1666  0416                     	;# 
  1667  0417                     	;# 
  1668  041C                     	;# 
  1669  041D                     	;# 
  1670  041E                     	;# 
  1671  0791                     	;# 
  1672  0792                     	;# 
  1673  0793                     	;# 
  1674  0794                     	;# 
  1675  0795                     	;# 
  1676  0798                     	;# 
  1677  0799                     	;# 
  1678  079A                     	;# 
  1679  07A0                     	;# 
  1680  07A1                     	;# 
  1681  07A2                     	;# 
  1682  07A3                     	;# 
  1683  07A4                     	;# 
  1684  07A5                     	;# 
  1685  07A6                     	;# 
  1686  07A7                     	;# 
  1687  07A8                     	;# 
  1688  07A9                     	;# 
  1689  07AA                     	;# 
  1690  07AB                     	;# 
  1691  0FE4                     	;# 
  1692  0FE5                     	;# 
  1693  0FE6                     	;# 
  1694  0FE7                     	;# 
  1695  0FE8                     	;# 
  1696  0FE9                     	;# 
  1697  0FEA                     	;# 
  1698  0FEB                     	;# 
  1699  0FED                     	;# 
  1700  0FEE                     	;# 
  1701  0FEF                     	;# 
  1702  0000                     	;# 
  1703  0001                     	;# 
  1704  0002                     	;# 
  1705  0003                     	;# 
  1706  0004                     	;# 
  1707  0005                     	;# 
  1708  0006                     	;# 
  1709  0007                     	;# 
  1710  0008                     	;# 
  1711  0009                     	;# 
  1712  000A                     	;# 
  1713  000B                     	;# 
  1714  000C                     	;# 
  1715  000D                     	;# 
  1716  000E                     	;# 
  1717  000F                     	;# 
  1718  0010                     	;# 
  1719  0011                     	;# 
  1720  0012                     	;# 
  1721  0013                     	;# 
  1722  0015                     	;# 
  1723  0016                     	;# 
  1724  0016                     	;# 
  1725  0017                     	;# 
  1726  0018                     	;# 
  1727  0019                     	;# 
  1728  001A                     	;# 
  1729  001B                     	;# 
  1730  001C                     	;# 
  1731  001E                     	;# 
  1732  001F                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  008F                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0093                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0098                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  010F                     	;# 
  1756  0110                     	;# 
  1757  0111                     	;# 
  1758  0112                     	;# 
  1759  0113                     	;# 
  1760  0114                     	;# 
  1761  0115                     	;# 
  1762  0116                     	;# 
  1763  0117                     	;# 
  1764  0118                     	;# 
  1765  0119                     	;# 
  1766  011A                     	;# 
  1767  011B                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018F                     	;# 
  1772  0190                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0216                     	;# 
  1802  0217                     	;# 
  1803  0291                     	;# 
  1804  0291                     	;# 
  1805  0292                     	;# 
  1806  0293                     	;# 
  1807  0294                     	;# 
  1808  0295                     	;# 
  1809  0295                     	;# 
  1810  0296                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  029E                     	;# 
  1820  029F                     	;# 
  1821  0311                     	;# 
  1822  0311                     	;# 
  1823  0312                     	;# 
  1824  0313                     	;# 
  1825  0314                     	;# 
  1826  0315                     	;# 
  1827  0315                     	;# 
  1828  0316                     	;# 
  1829  0318                     	;# 
  1830  0318                     	;# 
  1831  0319                     	;# 
  1832  031A                     	;# 
  1833  031C                     	;# 
  1834  031C                     	;# 
  1835  031D                     	;# 
  1836  031E                     	;# 
  1837  0394                     	;# 
  1838  0395                     	;# 
  1839  0396                     	;# 
  1840  0415                     	;# 
  1841  0416                     	;# 
  1842  0417                     	;# 
  1843  041C                     	;# 
  1844  041D                     	;# 
  1845  041E                     	;# 
  1846  0791                     	;# 
  1847  0792                     	;# 
  1848  0793                     	;# 
  1849  0794                     	;# 
  1850  0795                     	;# 
  1851  0798                     	;# 
  1852  0799                     	;# 
  1853  079A                     	;# 
  1854  07A0                     	;# 
  1855  07A1                     	;# 
  1856  07A2                     	;# 
  1857  07A3                     	;# 
  1858  07A4                     	;# 
  1859  07A5                     	;# 
  1860  07A6                     	;# 
  1861  07A7                     	;# 
  1862  07A8                     	;# 
  1863  07A9                     	;# 
  1864  07AA                     	;# 
  1865  07AB                     	;# 
  1866  0FE4                     	;# 
  1867  0FE5                     	;# 
  1868  0FE6                     	;# 
  1869  0FE7                     	;# 
  1870  0FE8                     	;# 
  1871  0FE9                     	;# 
  1872  0FEA                     	;# 
  1873  0FEB                     	;# 
  1874  0FED                     	;# 
  1875  0FEE                     	;# 
  1876  0FEF                     	;# 
  1877  0000                     	;# 
  1878  0001                     	;# 
  1879  0002                     	;# 
  1880  0003                     	;# 
  1881  0004                     	;# 
  1882  0005                     	;# 
  1883  0006                     	;# 
  1884  0007                     	;# 
  1885  0008                     	;# 
  1886  0009                     	;# 
  1887  000A                     	;# 
  1888  000B                     	;# 
  1889  000C                     	;# 
  1890  000D                     	;# 
  1891  000E                     	;# 
  1892  000F                     	;# 
  1893  0010                     	;# 
  1894  0011                     	;# 
  1895  0012                     	;# 
  1896  0013                     	;# 
  1897  0015                     	;# 
  1898  0016                     	;# 
  1899  0016                     	;# 
  1900  0017                     	;# 
  1901  0018                     	;# 
  1902  0019                     	;# 
  1903  001A                     	;# 
  1904  001B                     	;# 
  1905  001C                     	;# 
  1906  001E                     	;# 
  1907  001F                     	;# 
  1908  008C                     	;# 
  1909  008D                     	;# 
  1910  008E                     	;# 
  1911  008F                     	;# 
  1912  0090                     	;# 
  1913  0091                     	;# 
  1914  0092                     	;# 
  1915  0093                     	;# 
  1916  0095                     	;# 
  1917  0096                     	;# 
  1918  0097                     	;# 
  1919  0098                     	;# 
  1920  0099                     	;# 
  1921  009A                     	;# 
  1922  009B                     	;# 
  1923  009B                     	;# 
  1924  009C                     	;# 
  1925  009D                     	;# 
  1926  009E                     	;# 
  1927  010C                     	;# 
  1928  010D                     	;# 
  1929  010E                     	;# 
  1930  010F                     	;# 
  1931  0110                     	;# 
  1932  0111                     	;# 
  1933  0112                     	;# 
  1934  0113                     	;# 
  1935  0114                     	;# 
  1936  0115                     	;# 
  1937  0116                     	;# 
  1938  0117                     	;# 
  1939  0118                     	;# 
  1940  0119                     	;# 
  1941  011A                     	;# 
  1942  011B                     	;# 
  1943  011D                     	;# 
  1944  018C                     	;# 
  1945  018D                     	;# 
  1946  018F                     	;# 
  1947  0190                     	;# 
  1948  0191                     	;# 
  1949  0191                     	;# 
  1950  0192                     	;# 
  1951  0193                     	;# 
  1952  0193                     	;# 
  1953  0193                     	;# 
  1954  0194                     	;# 
  1955  0195                     	;# 
  1956  0196                     	;# 
  1957  0199                     	;# 
  1958  019A                     	;# 
  1959  019B                     	;# 
  1960  019B                     	;# 
  1961  019B                     	;# 
  1962  019B                     	;# 
  1963  019C                     	;# 
  1964  019C                     	;# 
  1965  019D                     	;# 
  1966  019E                     	;# 
  1967  019F                     	;# 
  1968  020D                     	;# 
  1969  0210                     	;# 
  1970  0211                     	;# 
  1971  0212                     	;# 
  1972  0213                     	;# 
  1973  0214                     	;# 
  1974  0215                     	;# 
  1975  0215                     	;# 
  1976  0216                     	;# 
  1977  0217                     	;# 
  1978  0291                     	;# 
  1979  0291                     	;# 
  1980  0292                     	;# 
  1981  0293                     	;# 
  1982  0294                     	;# 
  1983  0295                     	;# 
  1984  0295                     	;# 
  1985  0296                     	;# 
  1986  0298                     	;# 
  1987  0298                     	;# 
  1988  0299                     	;# 
  1989  029A                     	;# 
  1990  029B                     	;# 
  1991  029C                     	;# 
  1992  029C                     	;# 
  1993  029D                     	;# 
  1994  029E                     	;# 
  1995  029F                     	;# 
  1996  0311                     	;# 
  1997  0311                     	;# 
  1998  0312                     	;# 
  1999  0313                     	;# 
  2000  0314                     	;# 
  2001  0315                     	;# 
  2002  0315                     	;# 
  2003  0316                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  0394                     	;# 
  2013  0395                     	;# 
  2014  0396                     	;# 
  2015  0415                     	;# 
  2016  0416                     	;# 
  2017  0417                     	;# 
  2018  041C                     	;# 
  2019  041D                     	;# 
  2020  041E                     	;# 
  2021  0791                     	;# 
  2022  0792                     	;# 
  2023  0793                     	;# 
  2024  0794                     	;# 
  2025  0795                     	;# 
  2026  0798                     	;# 
  2027  0799                     	;# 
  2028  079A                     	;# 
  2029  07A0                     	;# 
  2030  07A1                     	;# 
  2031  07A2                     	;# 
  2032  07A3                     	;# 
  2033  07A4                     	;# 
  2034  07A5                     	;# 
  2035  07A6                     	;# 
  2036  07A7                     	;# 
  2037  07A8                     	;# 
  2038  07A9                     	;# 
  2039  07AA                     	;# 
  2040  07AB                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  000F                     	;# 
  2068  0010                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0013                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  001E                     	;# 
  2082  001F                     	;# 
  2083  008C                     	;# 
  2084  008D                     	;# 
  2085  008E                     	;# 
  2086  008F                     	;# 
  2087  0090                     	;# 
  2088  0091                     	;# 
  2089  0092                     	;# 
  2090  0093                     	;# 
  2091  0095                     	;# 
  2092  0096                     	;# 
  2093  0097                     	;# 
  2094  0098                     	;# 
  2095  0099                     	;# 
  2096  009A                     	;# 
  2097  009B                     	;# 
  2098  009B                     	;# 
  2099  009C                     	;# 
  2100  009D                     	;# 
  2101  009E                     	;# 
  2102  010C                     	;# 
  2103  010D                     	;# 
  2104  010E                     	;# 
  2105  010F                     	;# 
  2106  0110                     	;# 
  2107  0111                     	;# 
  2108  0112                     	;# 
  2109  0113                     	;# 
  2110  0114                     	;# 
  2111  0115                     	;# 
  2112  0116                     	;# 
  2113  0117                     	;# 
  2114  0118                     	;# 
  2115  0119                     	;# 
  2116  011A                     	;# 
  2117  011B                     	;# 
  2118  011D                     	;# 
  2119  018C                     	;# 
  2120  018D                     	;# 
  2121  018F                     	;# 
  2122  0190                     	;# 
  2123  0191                     	;# 
  2124  0191                     	;# 
  2125  0192                     	;# 
  2126  0193                     	;# 
  2127  0193                     	;# 
  2128  0193                     	;# 
  2129  0194                     	;# 
  2130  0195                     	;# 
  2131  0196                     	;# 
  2132  0199                     	;# 
  2133  019A                     	;# 
  2134  019B                     	;# 
  2135  019B                     	;# 
  2136  019B                     	;# 
  2137  019B                     	;# 
  2138  019C                     	;# 
  2139  019C                     	;# 
  2140  019D                     	;# 
  2141  019E                     	;# 
  2142  019F                     	;# 
  2143  020D                     	;# 
  2144  0210                     	;# 
  2145  0211                     	;# 
  2146  0212                     	;# 
  2147  0213                     	;# 
  2148  0214                     	;# 
  2149  0215                     	;# 
  2150  0215                     	;# 
  2151  0216                     	;# 
  2152  0217                     	;# 
  2153  0291                     	;# 
  2154  0291                     	;# 
  2155  0292                     	;# 
  2156  0293                     	;# 
  2157  0294                     	;# 
  2158  0295                     	;# 
  2159  0295                     	;# 
  2160  0296                     	;# 
  2161  0298                     	;# 
  2162  0298                     	;# 
  2163  0299                     	;# 
  2164  029A                     	;# 
  2165  029B                     	;# 
  2166  029C                     	;# 
  2167  029C                     	;# 
  2168  029D                     	;# 
  2169  029E                     	;# 
  2170  029F                     	;# 
  2171  0311                     	;# 
  2172  0311                     	;# 
  2173  0312                     	;# 
  2174  0313                     	;# 
  2175  0314                     	;# 
  2176  0315                     	;# 
  2177  0315                     	;# 
  2178  0316                     	;# 
  2179  0318                     	;# 
  2180  0318                     	;# 
  2181  0319                     	;# 
  2182  031A                     	;# 
  2183  031C                     	;# 
  2184  031C                     	;# 
  2185  031D                     	;# 
  2186  031E                     	;# 
  2187  0394                     	;# 
  2188  0395                     	;# 
  2189  0396                     	;# 
  2190  0415                     	;# 
  2191  0416                     	;# 
  2192  0417                     	;# 
  2193  041C                     	;# 
  2194  041D                     	;# 
  2195  041E                     	;# 
  2196  0791                     	;# 
  2197  0792                     	;# 
  2198  0793                     	;# 
  2199  0794                     	;# 
  2200  0795                     	;# 
  2201  0798                     	;# 
  2202  0799                     	;# 
  2203  079A                     	;# 
  2204  07A0                     	;# 
  2205  07A1                     	;# 
  2206  07A2                     	;# 
  2207  07A3                     	;# 
  2208  07A4                     	;# 
  2209  07A5                     	;# 
  2210  07A6                     	;# 
  2211  07A7                     	;# 
  2212  07A8                     	;# 
  2213  07A9                     	;# 
  2214  07AA                     	;# 
  2215  07AB                     	;# 
  2216  0FE4                     	;# 
  2217  0FE5                     	;# 
  2218  0FE6                     	;# 
  2219  0FE7                     	;# 
  2220  0FE8                     	;# 
  2221  0FE9                     	;# 
  2222  0FEA                     	;# 
  2223  0FEB                     	;# 
  2224  0FED                     	;# 
  2225  0FEE                     	;# 
  2226  0FEF                     	;# 
  2227                           
  2228                           	psect	idataBANK2
  2229  0002                     __pidataBANK2:	
  2230                           
  2231                           ;initializer for turn_egs@step_nr
  2232  0002  3401               	retlw	1
  2233  0003  3400               	retlw	0
  2234                           
  2235                           	psect	idataBANK3
  2236  0A8A                     __pidataBANK3:	
  2237                           
  2238                           ;initializer for comparare@F3749
  2239  0A8A  34BA               	retlw	186
  2240  0A8B  340B               	retlw	11
  2241  0A8C  3481               	retlw	129
  2242  0A8D  340A               	retlw	10
  2243  0A8E  3449               	retlw	73
  2244  0A8F  3409               	retlw	9
  2245  0A90  3458               	retlw	88
  2246  0A91  3408               	retlw	8
  2247  0A92  3467               	retlw	103
  2248  0A93  3407               	retlw	7
  2249  0A94  34AB               	retlw	171
  2250  0A95  3406               	retlw	6
  2251  0A96  34F0               	retlw	240
  2252  0A97  3405               	retlw	5
  2253  0A98  345E               	retlw	94
  2254  0A99  3405               	retlw	5
  2255  0A9A  34CC               	retlw	204
  2256  0A9B  3404               	retlw	4
  2257  0A9C  345A               	retlw	90
  2258  0A9D  3404               	retlw	4
  2259  0A9E  34E8               	retlw	232
  2260  0A9F  3403               	retlw	3
  2261  0AA0  348C               	retlw	140
  2262  0AA1  3403               	retlw	3
  2263  0AA2  3431               	retlw	49
  2264  0AA3  3403               	retlw	3
  2265  0AA4  34E9               	retlw	233
  2266  0AA5  3402               	retlw	2
  2267  0AA6  34A1               	retlw	161
  2268  0AA7  3402               	retlw	2
  2269  0AA8  3467               	retlw	103
  2270  0AA9  3402               	retlw	2
  2271  0AAA  342D               	retlw	45
  2272  0AAB  3402               	retlw	2
  2273  0AAC  34FE               	retlw	254
  2274  0AAD  3401               	retlw	1
  2275  0AAE  34CF               	retlw	207
  2276  0AAF  3401               	retlw	1
  2277  0AB0  34A7               	retlw	167
  2278  0AB1  3401               	retlw	1
  2279  0AB2  347F               	retlw	127
  2280  0AB3  3401               	retlw	1
  2281                           
  2282                           	psect	stringtext1
  2283  1066                     __pstringtext1:	
  2284  1066                     _dpowers:	
  2285  1066  3401               	retlw	1
  2286  1067  3400               	retlw	0
  2287  1068  340A               	retlw	10
  2288  1069  3400               	retlw	0
  2289  106A  3464               	retlw	100
  2290  106B  3400               	retlw	0
  2291  106C  34E8               	retlw	232
  2292  106D  3403               	retlw	3
  2293  106E  3410               	retlw	16
  2294  106F  3427               	retlw	39
  2295  1070                     __end_of_dpowers:	
  2296                           
  2297                           	psect	nvBANK0
  2298  006E                     __pnvBANK0:	
  2299  006E                     _timer1ReloadVal:	
  2300  006E                     	ds	2
  2301                           
  2302                           	psect	nvBANK2
  2303  016B                     __pnvBANK2:	
  2304  016B                     _flag_directie:	
  2305  016B                     	ds	2
  2306  016D                     _eusartTxBufferRemaining:	
  2307  016D                     	ds	1
  2308                           
  2309                           	psect	nvBANK3
  2310  01E7                     __pnvBANK3:	
  2311  01E7                     _TMR1_InterruptHandler:	
  2312  01E7                     	ds	2
  2313  000F                     _PORTDbits	set	15
  2314  000F                     _PORTD	set	15
  2315  000D                     _PORTB	set	13
  2316  0019                     _T1GCONbits	set	25
  2317  0018                     _T1CONbits	set	24
  2318  0016                     _TMR1L	set	22
  2319  0017                     _TMR1H	set	23
  2320  0019                     _T1GCON	set	25
  2321  0018                     _T1CON	set	24
  2322  0011                     _PIR1bits	set	17
  2323  000B                     _INTCONbits	set	11
  2324  0079                     _RD1	set	121
  2325  0078                     _RD0	set	120
  2326  007B                     _RD3	set	123
  2327  008F                     _TRISDbits	set	143
  2328  008E                     _TRISCbits	set	142
  2329  009D                     _ADCON0bits	set	157
  2330  009C                     _ADRESH	set	156
  2331  009B                     _ADRESL	set	155
  2332  009E                     _ADCON1	set	158
  2333  009D                     _ADCON0	set	157
  2334  0091                     _PIE1bits	set	145
  2335  0095                     _OPTION_REGbits	set	149
  2336  008F                     _TRISD	set	143
  2337  008E                     _TRISC	set	142
  2338  008D                     _TRISB	set	141
  2339  008C                     _TRISA	set	140
  2340  0090                     _TRISE	set	144
  2341  0097                     _WDTCON	set	151
  2342  0098                     _OSCTUNE	set	152
  2343  0099                     _OSCCON	set	153
  2344  010E                     _LATCbits	set	270
  2345  011D                     _APFCON	set	285
  2346  010E                     _LATC	set	270
  2347  010D                     _LATB	set	269
  2348  010C                     _LATA	set	268
  2349  010F                     _LATD	set	271
  2350  0110                     _LATE	set	272
  2351  0199                     _RCREG	set	409
  2352  019D                     _RCSTAbits	set	413
  2353  019A                     _TXREG	set	410
  2354  019C                     _SPBRGH	set	412
  2355  019B                     _SPBRGL	set	411
  2356  019E                     _TXSTA	set	414
  2357  019D                     _RCSTA	set	413
  2358  019F                     _BAUDCON	set	415
  2359  018C                     _ANSELA	set	396
  2360  0190                     _ANSELE	set	400
  2361  018F                     _ANSELD	set	399
  2362  018D                     _ANSELB	set	397
  2363  020D                     _WPUB	set	525
  2364  0210                     _WPUE	set	528
  2365                           
  2366                           	psect	stringtext2
  2367  1000                     __pstringtext2:	
  2368  1000                     STR_4:	
  2369  1000  3441               	retlw	65	;'A'
  2370  1001  3454               	retlw	84	;'T'
  2371  1002  342B               	retlw	43	;'+'
  2372  1003  3443               	retlw	67	;'C'
  2373  1004  344D               	retlw	77	;'M'
  2374  1005  3447               	retlw	71	;'G'
  2375  1006  3453               	retlw	83	;'S'
  2376  1007  343D               	retlw	61	;'='
  2377  1008  3422               	retlw	34	;'"'
  2378  1009  3430               	retlw	48	;'0'
  2379  100A  3437               	retlw	55	;'7'
  2380  100B  3435               	retlw	53	;'5'
  2381  100C  3437               	retlw	55	;'7'
  2382  100D  3434               	retlw	52	;'4'
  2383  100E  3439               	retlw	57	;'9'
  2384  100F  3434               	retlw	52	;'4'
  2385  1010  3438               	retlw	56	;'8'
  2386  1011  3432               	retlw	50	;'2'
  2387  1012  3433               	retlw	51	;'3'
  2388  1013  3422               	retlw	34	;'"'
  2389  1014  3400               	retlw	0
  2390                           
  2391                           	psect	stringtext3
  2392  1015                     __pstringtext3:	
  2393  1015                     STR_10:	
  2394  1015  3441               	retlw	65	;'A'
  2395  1016  3454               	retlw	84	;'T'
  2396  1017  342B               	retlw	43	;'+'
  2397  1018  3443               	retlw	67	;'C'
  2398  1019  344E               	retlw	78	;'N'
  2399  101A  344D               	retlw	77	;'M'
  2400  101B  3449               	retlw	73	;'I'
  2401  101C  343D               	retlw	61	;'='
  2402  101D  3431               	retlw	49	;'1'
  2403  101E  342C               	retlw	44	;','
  2404  101F  3432               	retlw	50	;'2'
  2405  1020  342C               	retlw	44	;','
  2406  1021  3430               	retlw	48	;'0'
  2407  1022  342C               	retlw	44	;','
  2408  1023  3430               	retlw	48	;'0'
  2409  1024  342C               	retlw	44	;','
  2410  1025  3430               	retlw	48	;'0'
  2411  1026  3400               	retlw	0
  2412                           
  2413                           	psect	stringtext4
  2414  1027                     __pstringtext4:	
  2415  1027                     STR_6:	
  2416  1027  3420               	retlw	32	;' '
  2417  1028  3455               	retlw	85	;'U'
  2418  1029  346D               	retlw	109	;'m'
  2419  102A  3469               	retlw	105	;'i'
  2420  102B  3464               	retlw	100	;'d'
  2421  102C  343D               	retlw	61	;'='
  2422  102D  3425               	retlw	37	;'%'
  2423  102E  3464               	retlw	100	;'d'
  2424  102F  3420               	retlw	32	;' '
  2425  1030  3420               	retlw	32	;' '
  2426  1031  3420               	retlw	32	;' '
  2427  1032  3420               	retlw	32	;' '
  2428  1033  3420               	retlw	32	;' '
  2429  1034  3420               	retlw	32	;' '
  2430  1035  3420               	retlw	32	;' '
  2431  1036  3420               	retlw	32	;' '
  2432  1037  3400               	retlw	0
  2433                           
  2434                           	psect	stringtext5
  2435  1038                     __pstringtext5:	
  2436  1038                     STR_5:	
  2437  1038  3420               	retlw	32	;' '
  2438  1039  3454               	retlw	84	;'T'
  2439  103A  3465               	retlw	101	;'e'
  2440  103B  346D               	retlw	109	;'m'
  2441  103C  3470               	retlw	112	;'p'
  2442  103D  3465               	retlw	101	;'e'
  2443  103E  3472               	retlw	114	;'r'
  2444  103F  343D               	retlw	61	;'='
  2445  1040  3425               	retlw	37	;'%'
  2446  1041  3464               	retlw	100	;'d'
  2447  1042  3420               	retlw	32	;' '
  2448  1043  3420               	retlw	32	;' '
  2449  1044  3420               	retlw	32	;' '
  2450  1045  3420               	retlw	32	;' '
  2451  1046  3420               	retlw	32	;' '
  2452  1047  3420               	retlw	32	;' '
  2453  1048  3400               	retlw	0
  2454                           
  2455                           	psect	stringtext6
  2456  1049                     __pstringtext6:	
  2457  1049                     STR_8:	
  2458  1049  3441               	retlw	65	;'A'
  2459  104A  3454               	retlw	84	;'T'
  2460  104B  342B               	retlw	43	;'+'
  2461  104C  3443               	retlw	67	;'C'
  2462  104D  3450               	retlw	80	;'P'
  2463  104E  3449               	retlw	73	;'I'
  2464  104F  344E               	retlw	78	;'N'
  2465  1050  343D               	retlw	61	;'='
  2466  1051  3422               	retlw	34	;'"'
  2467  1052  3431               	retlw	49	;'1'
  2468  1053  3432               	retlw	50	;'2'
  2469  1054  3433               	retlw	51	;'3'
  2470  1055  3434               	retlw	52	;'4'
  2471  1056  3422               	retlw	34	;'"'
  2472  1057  3400               	retlw	0
  2473                           
  2474                           	psect	stringtext7
  2475  1058                     __pstringtext7:	
  2476  1058                     STR_3:	
  2477  1058  3441               	retlw	65	;'A'
  2478  1059  3454               	retlw	84	;'T'
  2479  105A  342B               	retlw	43	;'+'
  2480  105B  3443               	retlw	67	;'C'
  2481  105C  3453               	retlw	83	;'S'
  2482  105D  3443               	retlw	67	;'C'
  2483  105E  3453               	retlw	83	;'S'
  2484  105F  343D               	retlw	61	;'='
  2485  1060  3422               	retlw	34	;'"'
  2486  1061  3447               	retlw	71	;'G'
  2487  1062  3453               	retlw	83	;'S'
  2488  1063  344D               	retlw	77	;'M'
  2489  1064  3422               	retlw	34	;'"'
  2490  1065  3400               	retlw	0
  2491                           
  2492                           	psect	stringtext8
  2493  1070                     __pstringtext8:	
  2494  1070                     STR_9:	
  2495  1070  3441               	retlw	65	;'A'
  2496  1071  3454               	retlw	84	;'T'
  2497  1072  342B               	retlw	43	;'+'
  2498  1073  3443               	retlw	67	;'C'
  2499  1074  344D               	retlw	77	;'M'
  2500  1075  3447               	retlw	71	;'G'
  2501  1076  3446               	retlw	70	;'F'
  2502  1077  343D               	retlw	61	;'='
  2503  1078  3431               	retlw	49	;'1'
  2504  1079  3400               	retlw	0
  2505                           
  2506                           	psect	stringtext9
  2507  107A                     __pstringtext9:	
  2508  107A                     STR_1:	
  2509  107A  3454               	retlw	84	;'T'
  2510  107B  3465               	retlw	101	;'e'
  2511  107C  346D               	retlw	109	;'m'
  2512  107D  3470               	retlw	112	;'p'
  2513  107E  3465               	retlw	101	;'e'
  2514  107F  3472               	retlw	114	;'r'
  2515  1080  343D               	retlw	61	;'='
  2516  1081  3420               	retlw	32	;' '
  2517  1082  3420               	retlw	32	;' '
  2518  1083  3400               	retlw	0
  2519                           
  2520                           	psect	stringtext10
  2521  1084                     __pstringtext10:	
  2522  1084                     STR_2:	
  2523  1084  3455               	retlw	85	;'U'
  2524  1085  346D               	retlw	109	;'m'
  2525  1086  3469               	retlw	105	;'i'
  2526  1087  3464               	retlw	100	;'d'
  2527  1088  343D               	retlw	61	;'='
  2528  1089  3420               	retlw	32	;' '
  2529  108A  3420               	retlw	32	;' '
  2530  108B  3400               	retlw	0
  2531                           
  2532                           	psect	stringtext11
  2533  108C                     __pstringtext11:	
  2534  108C                     STR_7:	
  2535  108C  3441               	retlw	65	;'A'
  2536  108D  3454               	retlw	84	;'T'
  2537  108E  3400               	retlw	0
  2538                           
  2539                           	psect	stringtext12
  2540  0000                     __pstringtext12:	
  2541  1058                     
  2542                           ; #config settings
  2543  0000                     
  2544                           	psect	cinit
  2545  003E                     start_initialization:	
  2546  003E                     __initialization:	
  2547                           
  2548                           ; Initialize objects allocated to BANK2
  2549  003E  0022               	movlb	2	; select bank2
  2550  003F  3180  2002  3180   	fcall	__pidataBANK2	;fetch initializer
  2551  0042  00EE               	movwf	__pdataBANK2& (0+127)
  2552  0043  3180  2003  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2553  0046  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  2554                           
  2555                           ; Initialize objects allocated to BANK3
  2556  0047  308A               	movlw	low __pidataBANK3
  2557  0048  0084               	movwf	4
  2558  0049  308A               	movlw	(high __pidataBANK3)| (0+128)
  2559  004A  0085               	movwf	5
  2560  004B  30A0               	movlw	low __pdataBANK3
  2561  004C  0086               	movwf	6
  2562  004D  3001               	movlw	high __pdataBANK3
  2563  004E  0087               	movwf	7
  2564  004F  302A               	movlw	42
  2565  0050  3188  20C2  3180   	fcall	init_ram
  2566                           
  2567                           ; Clear objects allocated to COMMON
  2568  0053  01FA               	clrf	__pbssCOMMON& (0+127)
  2569  0054  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2570  0055  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2571  0056  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  2572                           
  2573                           ; Clear objects allocated to BANK0
  2574  0057  3063               	movlw	low __pbssBANK0
  2575  0058  0084               	movwf	4
  2576  0059  3000               	movlw	high __pbssBANK0
  2577  005A  0085               	movwf	5
  2578  005B  300B               	movlw	11
  2579  005C  3188  20BC  3180   	fcall	clear_ram0
  2580                           
  2581                           ; Clear objects allocated to BANK1
  2582  005F  0021               	movlb	1	; select bank1
  2583  0060  01ED               	clrf	__pbssBANK1& (0+127)
  2584  0061  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  2585  0062  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  2586                           
  2587                           ; Clear objects allocated to BANK2
  2588  0063  304A               	movlw	low __pbssBANK2
  2589  0064  0084               	movwf	4
  2590  0065  3001               	movlw	high __pbssBANK2
  2591  0066  0085               	movwf	5
  2592  0067  3021               	movlw	33
  2593  0068  3188  20BC  3180   	fcall	clear_ram0
  2594                           
  2595                           ; Clear objects allocated to BANK3
  2596  006B  30CA               	movlw	low __pbssBANK3
  2597  006C  0084               	movwf	4
  2598  006D  3001               	movlw	high __pbssBANK3
  2599  006E  0085               	movwf	5
  2600  006F  301D               	movlw	29
  2601  0070  3188  20BC  3180   	fcall	clear_ram0
  2602                           
  2603                           ; Clear objects allocated to BANK4
  2604  0073  3020               	movlw	low __pbssBANK4
  2605  0074  0084               	movwf	4
  2606  0075  3002               	movlw	high __pbssBANK4
  2607  0076  0085               	movwf	5
  2608  0077  304B               	movlw	75
  2609  0078  3188  20BC         	fcall	clear_ram0
  2610  007A                     end_of_initialization:	
  2611                           ;End of C runtime variable initialization code
  2612                           
  2613  007A                     __end_of__initialization:	
  2614  007A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2615  007B  0020               	movlb	0
  2616  007C  3184  2C50         	ljmp	_main	;jump to C main() function
  2617                           
  2618                           	psect	bssCOMMON
  2619  007A                     __pbssCOMMON:	
  2620  007A                     turn_egs@step_index:	
  2621  007A                     	ds	1
  2622  007B                     _rcreg:	
  2623  007B                     	ds	1
  2624  007C                     _strKey_Counts:	
  2625  007C                     	ds	1
  2626  007D                     _strKey_Pressed:	
  2627  007D                     	ds	1
  2628                           
  2629                           	psect	bssBANK0
  2630  0063                     __pbssBANK0:	
  2631  0063                     _eusartRxCount:	
  2632  0063                     	ds	1
  2633  0064                     _eusartRxTail:	
  2634  0064                     	ds	1
  2635  0065                     _eusartRxHead:	
  2636  0065                     	ds	1
  2637  0066                     _eusartTxTail:	
  2638  0066                     	ds	1
  2639  0067                     _eusartTxHead:	
  2640  0067                     	ds	1
  2641  0068                     _Sum:	
  2642  0068                     	ds	1
  2643  0069                     _RH_byte2:	
  2644  0069                     	ds	1
  2645  006A                     _T_byte2:	
  2646  006A                     	ds	1
  2647  006B                     _T_byte1:	
  2648  006B                     	ds	1
  2649  006C                     _Check:	
  2650  006C                     	ds	1
  2651  006D                     _RH_byte1:	
  2652  006D                     	ds	1
  2653                           
  2654                           	psect	bssBANK1
  2655  00ED                     __pbssBANK1:	
  2656  00ED                     sms_text@F3614:	
  2657  00ED                     	ds	1
  2658  00EE                     sms_text@F3612:	
  2659  00EE                     	ds	1
  2660  00EF                     _strKey_Released:	
  2661  00EF                     	ds	1
  2662                           
  2663                           	psect	bssBANK2
  2664  014A                     __pbssBANK2:	
  2665  014A                     TMR1_ISR@CountCallBack:	
  2666  014A                     	ds	2
  2667  014C                     _count_4000_ms:	
  2668  014C                     	ds	2
  2669  014E                     _count_1000_ms:	
  2670  014E                     	ds	2
  2671  0150                     _count_500_ms:	
  2672  0150                     	ds	2
  2673  0152                     _count_100_ms:	
  2674  0152                     	ds	2
  2675  0154                     _flag_1000_ms:	
  2676  0154                     	ds	2
  2677  0156                     _flag_10_ms:	
  2678  0156                     	ds	2
  2679  0158                     _flag_1_ms:	
  2680  0158                     	ds	2
  2681  015A                     _flag_B:	
  2682  015A                     	ds	2
  2683  015C                     _flag_A:	
  2684  015C                     	ds	2
  2685  015E                     _flag_G:	
  2686  015E                     	ds	2
  2687  0160                     _flag_N:	
  2688  0160                     	ds	2
  2689  0162                     _umiditate:	
  2690  0162                     	ds	2
  2691  0164                     _temp:	
  2692  0164                     	ds	2
  2693  0166                     _rez_conversie:	
  2694  0166                     	ds	2
  2695  0168                     _RH:	
  2696  0168                     	ds	1
  2697  0169                     _Temp:	
  2698  0169                     	ds	1
  2699  016A                     _Ch:	
  2700  016A                     	ds	1
  2701                           
  2702                           	psect	dataBANK2
  2703  016E                     __pdataBANK2:	
  2704  016E                     turn_egs@step_nr:	
  2705  016E                     	ds	2
  2706                           
  2707                           	psect	bssBANK3
  2708  01CA                     __pbssBANK3:	
  2709  01CA                     _eusartRxBuffer:	
  2710  01CA                     	ds	8
  2711  01D2                     _eusartTxBuffer:	
  2712  01D2                     	ds	8
  2713  01DA                     LCDWriteInt@F3767:	
  2714  01DA                     	ds	5
  2715  01DF                     sms_text@sms_index:	
  2716  01DF                     	ds	2
  2717  01E1                     _flag_4000_ms:	
  2718  01E1                     	ds	2
  2719  01E3                     _flag_500_ms:	
  2720  01E3                     	ds	2
  2721  01E5                     _flag_100_ms:	
  2722  01E5                     	ds	2
  2723                           
  2724                           	psect	dataBANK3
  2725  01A0                     __pdataBANK3:	
  2726  01A0                     comparare@F3749:	
  2727  01A0                     	ds	42
  2728                           
  2729                           	psect	bssBANK4
  2730  0220                     __pbssBANK4:	
  2731  0220                     comparare@F3754:	
  2732  0220                     	ds	75
  2733                           
  2734                           	psect	inittext
  2735  08C2                     init_ram:	
  2736  08C2  00FE               	movwf	126
  2737  08C3                     initloop:	
  2738  08C3  0012               	moviw fsr0++
  2739  08C4  001E               	movwi fsr1++
  2740  08C5  0BFE               	decfsz	126,f
  2741  08C6  28C3               	goto	initloop
  2742  08C7  3400               	retlw	0
  2743                           
  2744                           	psect	clrtext
  2745  08BC                     clear_ram0:	
  2746                           ;	Called with FSR0 containing the base address, and
  2747                           ;	WREG with the size to clear
  2748                           
  2749  08BC  0064               	clrwdt	;clear the watchdog before getting into this loop
  2750  08BD                     clrloop0:	
  2751  08BD  0180               	clrf	0	;clear RAM location pointed to by FSR
  2752  08BE  3101               	addfsr 0,1
  2753  08BF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2754  08C0  28BD               	goto	clrloop0	;have we reached the end yet?
  2755  08C1  3400               	retlw	0	;all done for this memory range, return
  2756                           
  2757                           	psect	cstackBANK2
  2758  0120                     __pcstackBANK2:	
  2759  0120                     comparare@res:	
  2760                           
  2761                           ; 42 bytes @ 0x0
  2762  0120                     	ds	42
  2763                           
  2764                           	psect	cstackBANK1
  2765  00A0                     __pcstackBANK1:	
  2766  00A0                     comparare@table:	
  2767                           
  2768                           ; 75 bytes @ 0x0
  2769  00A0                     	ds	75
  2770  00EB                     comparare@i:	
  2771                           
  2772                           ; 2 bytes @ 0x4B
  2773  00EB                     	ds	2
  2774                           
  2775                           	psect	cstackCOMMON
  2776  0070                     __pcstackCOMMON:	
  2777  0070                     ?_PIN_MANAGER_Initialize:	
  2778  0070                     ?_OSCILLATOR_Initialize:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_WDT_Initialize:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_TMR1_Initialize:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_ADC_Initialize:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_EUSART_Initialize:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_ADC_ISR:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_TMR1_ISR:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ??_TMR1_ISR:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_TMR1_DefaultInterruptHandler:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ??_TMR1_DefaultInterruptHandler:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_TMR1_StartTimer:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ?_TMR1_CallBack:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ??_TMR1_CallBack:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ?_int_gsm:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_LCDInit:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_StartSignal:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ?_CheckResponse:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_DHT_result:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ?_command_turn:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_check_status_incubator:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_SYSTEM_Initialize:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_EUSART_Write:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_EUSART_Transmit_ISR:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ??_EUSART_Transmit_ISR:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_EUSART_Receive_ISR:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ??_EUSART_Receive_ISR:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_INTERRUPT_InterruptManager:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_TMR1_disable:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_TMR1_enable:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_ADC_StartConversion:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_main:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_sms_text:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_ReadData:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_turn_egs:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_ADC_GetConversionResult:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883                           
  2884                           ; 2 bytes @ 0x0
  2885  0070                     	ds	2
  2886  0072                     ??_ADC_GetConversionResult:	
  2887                           
  2888                           ; 1 bytes @ 0x2
  2889  0072                     	ds	7
  2890  0079                     ??_ADC_ISR:	
  2891  0079                     ??_INTERRUPT_InterruptManager:	
  2892                           ; 1 bytes @ 0x9
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x9
  2896  0079                     	ds	1
  2897                           
  2898                           	psect	cstackBANK0
  2899  0020                     __pcstackBANK0:	
  2900  0020                     ??_PIN_MANAGER_Initialize:	
  2901  0020                     ??_OSCILLATOR_Initialize:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0020                     ??_WDT_Initialize:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0020                     ??_ADC_Initialize:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     ??_EUSART_Initialize:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     ?_TMR1_SetInterruptHandler:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ??_TMR1_StartTimer:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     ??_StartSignal:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     ??_CheckResponse:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     ?_LCDByte:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     ??_EUSART_Write:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     ??_TMR1_disable:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     ??_TMR1_enable:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     ??_ADC_StartConversion:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     ??_ReadData:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     ??_turn_egs:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     ?___bmul:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     ?___wmul:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ?___awdiv:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ?___awmod:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958  0020                     ?___lwdiv:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     ?___ftpack:	
  2962                           ; 2 bytes @ 0x0
  2963                           
  2964  0020                     ?___fttol:	
  2965                           ; 3 bytes @ 0x0
  2966                           
  2967  0020                     LCDByte@isdata:	
  2968                           ; 4 bytes @ 0x0
  2969                           
  2970  0020                     ___bmul@multiplicand:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0020                     ___wmul@multiplier:	
  2977                           ; 2 bytes @ 0x0
  2978                           
  2979  0020                     ___awdiv@divisor:	
  2980                           ; 2 bytes @ 0x0
  2981                           
  2982  0020                     ___awmod@divisor:	
  2983                           ; 2 bytes @ 0x0
  2984                           
  2985  0020                     ___lwdiv@divisor:	
  2986                           ; 2 bytes @ 0x0
  2987                           
  2988  0020                     ___ftpack@arg:	
  2989                           ; 2 bytes @ 0x0
  2990                           
  2991  0020                     ___fttol@f1:	
  2992                           ; 3 bytes @ 0x0
  2993                           
  2994                           
  2995                           ; 3 bytes @ 0x0
  2996  0020                     	ds	1
  2997  0021                     ??_LCDByte:	
  2998  0021                     ??_command_turn:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     ??___bmul:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     EUSART_Write@txData:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007                           
  3008                           ; 1 bytes @ 0x1
  3009  0021                     	ds	1
  3010  0022                     ??_TMR1_Initialize:	
  3011  0022                     ??_TMR1_SetInterruptHandler:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     ??_SYSTEM_Initialize:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     ?_putch:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     putch@txData:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     ReadData@i:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     ___bmul@product:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     ___wmul@multiplicand:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     ___awdiv@dividend:	
  3033                           ; 2 bytes @ 0x2
  3034                           
  3035  0022                     ___awmod@dividend:	
  3036                           ; 2 bytes @ 0x2
  3037                           
  3038  0022                     ___lwdiv@dividend:	
  3039                           ; 2 bytes @ 0x2
  3040                           
  3041                           
  3042                           ; 2 bytes @ 0x2
  3043  0022                     	ds	1
  3044  0023                     ??_putch:	
  3045  0023                     LCDByte@hn:	
  3046                           ; 1 bytes @ 0x3
  3047                           
  3048  0023                     ReadData@j:	
  3049                           ; 1 bytes @ 0x3
  3050                           
  3051  0023                     ___bmul@multiplier:	
  3052                           ; 1 bytes @ 0x3
  3053                           
  3054  0023                     ___ftpack@exp:	
  3055                           ; 1 bytes @ 0x3
  3056                           
  3057                           
  3058                           ; 1 bytes @ 0x3
  3059  0023                     	ds	1
  3060  0024                     ??_DHT_result:	
  3061  0024                     ??___wmul:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0024                     ??___awdiv:	
  3065                           ; 1 bytes @ 0x4
  3066                           
  3067  0024                     ??___awmod:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0024                     ??___fttol:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0024                     ??___lwdiv:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0024                     LCDByte@ln:	
  3077                           ; 1 bytes @ 0x4
  3078                           
  3079  0024                     ___ftpack@sign:	
  3080                           ; 1 bytes @ 0x4
  3081                           
  3082  0024                     ___wmul@product:	
  3083                           ; 1 bytes @ 0x4
  3084                           
  3085                           
  3086                           ; 2 bytes @ 0x4
  3087  0024                     	ds	1
  3088  0025                     ??___ftpack:	
  3089  0025                     LCDByte@c:	
  3090                           ; 1 bytes @ 0x5
  3091                           
  3092  0025                     ___awdiv@counter:	
  3093                           ; 1 bytes @ 0x5
  3094                           
  3095  0025                     ___awmod@counter:	
  3096                           ; 1 bytes @ 0x5
  3097                           
  3098  0025                     ___lwdiv@quotient:	
  3099                           ; 1 bytes @ 0x5
  3100                           
  3101                           
  3102                           ; 2 bytes @ 0x5
  3103  0025                     	ds	1
  3104  0026                     LCDByte@temp:	
  3105  0026                     ___awdiv@sign:	
  3106                           ; 1 bytes @ 0x6
  3107                           
  3108  0026                     ___awmod@sign:	
  3109                           ; 1 bytes @ 0x6
  3110                           
  3111                           
  3112                           ; 1 bytes @ 0x6
  3113  0026                     	ds	1
  3114  0027                     ??_LCDInit:	
  3115  0027                     ?_LCDWriteString:	
  3116                           ; 1 bytes @ 0x7
  3117                           
  3118  0027                     ___lwdiv@counter:	
  3119                           ; 1 bytes @ 0x7
  3120                           
  3121  0027                     LCDWriteString@msg:	
  3122                           ; 1 bytes @ 0x7
  3123                           
  3124  0027                     ___awdiv@quotient:	
  3125                           ; 2 bytes @ 0x7
  3126                           
  3127                           
  3128                           ; 2 bytes @ 0x7
  3129  0027                     	ds	1
  3130  0028                     ?___lwmod:	
  3131  0028                     ?___awtoft:	
  3132                           ; 2 bytes @ 0x8
  3133                           
  3134  0028                     ?___lwtoft:	
  3135                           ; 3 bytes @ 0x8
  3136                           
  3137  0028                     LCDInit@style:	
  3138                           ; 3 bytes @ 0x8
  3139                           
  3140  0028                     ___fttol@sign1:	
  3141                           ; 1 bytes @ 0x8
  3142                           
  3143  0028                     ___awtoft@c:	
  3144                           ; 1 bytes @ 0x8
  3145                           
  3146  0028                     ___lwmod@divisor:	
  3147                           ; 2 bytes @ 0x8
  3148                           
  3149  0028                     ___lwtoft@c:	
  3150                           ; 2 bytes @ 0x8
  3151                           
  3152                           
  3153                           ; 2 bytes @ 0x8
  3154  0028                     	ds	1
  3155  0029                     ??_LCDWriteString:	
  3156  0029                     ?_LCDWriteInt:	
  3157                           ; 1 bytes @ 0x9
  3158                           
  3159  0029                     LCDWriteInt@val:	
  3160                           ; 1 bytes @ 0x9
  3161                           
  3162  0029                     ___fttol@lval:	
  3163                           ; 2 bytes @ 0x9
  3164                           
  3165                           
  3166                           ; 4 bytes @ 0x9
  3167  0029                     	ds	1
  3168  002A                     LCDWriteString@cc:	
  3169  002A                     ___lwmod@dividend:	
  3170                           ; 1 bytes @ 0xA
  3171                           
  3172                           
  3173                           ; 2 bytes @ 0xA
  3174  002A                     	ds	1
  3175  002B                     ??___awtoft:	
  3176  002B                     ??___lwtoft:	
  3177                           ; 1 bytes @ 0xB
  3178                           
  3179  002B                     LCDWriteInt@field_length:	
  3180                           ; 1 bytes @ 0xB
  3181                           
  3182                           
  3183                           ; 1 bytes @ 0xB
  3184  002B                     	ds	1
  3185  002C                     ??_LCDWriteInt:	
  3186  002C                     ??___lwmod:	
  3187                           ; 1 bytes @ 0xC
  3188                           
  3189                           
  3190                           ; 1 bytes @ 0xC
  3191  002C                     	ds	1
  3192  002D                     ___awtoft@sign:	
  3193  002D                     ___fttol@exp1:	
  3194                           ; 1 bytes @ 0xD
  3195                           
  3196  002D                     ___lwmod@counter:	
  3197                           ; 1 bytes @ 0xD
  3198                           
  3199                           
  3200                           ; 1 bytes @ 0xD
  3201  002D                     	ds	1
  3202  002E                     ?___ftge:	
  3203  002E                     ?__doprnt:	
  3204                           ; 1 bit 
  3205                           
  3206  002E                     ?___ftmul:	
  3207                           ; 2 bytes @ 0xE
  3208                           
  3209  002E                     __doprnt@f:	
  3210                           ; 3 bytes @ 0xE
  3211                           
  3212  002E                     ___ftge@ff1:	
  3213                           ; 2 bytes @ 0xE
  3214                           
  3215  002E                     ___ftmul@f1:	
  3216                           ; 3 bytes @ 0xE
  3217                           
  3218  002E                     LCDWriteInt@str:	
  3219                           ; 3 bytes @ 0xE
  3220                           
  3221                           
  3222                           ; 5 bytes @ 0xE
  3223  002E                     	ds	2
  3224  0030                     __doprnt@ap:	
  3225                           
  3226                           ; 1 bytes @ 0x10
  3227  0030                     	ds	1
  3228  0031                     ??__doprnt:	
  3229  0031                     ___ftge@ff2:	
  3230                           ; 1 bytes @ 0x11
  3231                           
  3232  0031                     ___ftmul@f2:	
  3233                           ; 3 bytes @ 0x11
  3234                           
  3235                           
  3236                           ; 3 bytes @ 0x11
  3237  0031                     	ds	1
  3238  0032                     DHT_result@x:	
  3239                           
  3240                           ; 2 bytes @ 0x12
  3241  0032                     	ds	1
  3242  0033                     LCDWriteInt@j:	
  3243                           
  3244                           ; 2 bytes @ 0x13
  3245  0033                     	ds	1
  3246  0034                     ??___ftge:	
  3247  0034                     ??___ftmul:	
  3248                           ; 1 bytes @ 0x14
  3249                           
  3250                           
  3251                           ; 1 bytes @ 0x14
  3252  0034                     	ds	1
  3253  0035                     __doprnt@flag:	
  3254  0035                     LCDWriteInt@i:	
  3255                           ; 1 bytes @ 0x15
  3256                           
  3257                           
  3258                           ; 2 bytes @ 0x15
  3259  0035                     	ds	1
  3260  0036                     __doprnt@prec:	
  3261                           
  3262                           ; 1 bytes @ 0x16
  3263  0036                     	ds	1
  3264  0037                     __doprnt@val:	
  3265                           
  3266                           ; 2 bytes @ 0x17
  3267  0037                     	ds	1
  3268  0038                     ___ftmul@exp:	
  3269                           
  3270                           ; 1 bytes @ 0x18
  3271  0038                     	ds	1
  3272  0039                     __doprnt@c:	
  3273  0039                     ___ftmul@f3_as_product:	
  3274                           ; 1 bytes @ 0x19
  3275                           
  3276                           
  3277                           ; 3 bytes @ 0x19
  3278  0039                     	ds	1
  3279  003A                     __doprnt@pb:	
  3280                           
  3281                           ; 1 bytes @ 0x1A
  3282  003A                     	ds	1
  3283  003B                     ?_printf:	
  3284  003B                     ?_sprintf:	
  3285                           ; 2 bytes @ 0x1B
  3286                           
  3287  003B                     printf@f:	
  3288                           ; 2 bytes @ 0x1B
  3289                           
  3290  003B                     sprintf@f:	
  3291                           ; 2 bytes @ 0x1B
  3292                           
  3293                           
  3294                           ; 2 bytes @ 0x1B
  3295  003B                     	ds	1
  3296  003C                     ___ftmul@cntr:	
  3297                           
  3298                           ; 1 bytes @ 0x1C
  3299  003C                     	ds	1
  3300  003D                     ??_printf:	
  3301  003D                     ___ftmul@sign:	
  3302                           ; 1 bytes @ 0x1D
  3303                           
  3304                           
  3305                           ; 1 bytes @ 0x1D
  3306  003D                     	ds	1
  3307  003E                     ?___ftdiv:	
  3308  003E                     ?___ftneg:	
  3309                           ; 3 bytes @ 0x1E
  3310                           
  3311  003E                     printf@ap:	
  3312                           ; 3 bytes @ 0x1E
  3313                           
  3314  003E                     ___ftdiv@f2:	
  3315                           ; 1 bytes @ 0x1E
  3316                           
  3317  003E                     ___ftneg@f1:	
  3318                           ; 3 bytes @ 0x1E
  3319                           
  3320                           
  3321                           ; 3 bytes @ 0x1E
  3322  003E                     	ds	1
  3323  003F                     ??_sprintf:	
  3324  003F                     printf@pb:	
  3325                           ; 1 bytes @ 0x1F
  3326                           
  3327                           
  3328                           ; 3 bytes @ 0x1F
  3329  003F                     	ds	1
  3330  0040                     sprintf@wh:	
  3331                           
  3332                           ; 1 bytes @ 0x20
  3333  0040                     	ds	1
  3334  0041                     ??___ftneg:	
  3335  0041                     ?___ftadd:	
  3336                           ; 1 bytes @ 0x21
  3337                           
  3338  0041                     sprintf@ap:	
  3339                           ; 3 bytes @ 0x21
  3340                           
  3341  0041                     ___ftadd@f1:	
  3342                           ; 1 bytes @ 0x21
  3343                           
  3344  0041                     ___ftdiv@f1:	
  3345                           ; 3 bytes @ 0x21
  3346                           
  3347                           
  3348                           ; 3 bytes @ 0x21
  3349  0041                     	ds	1
  3350  0042                     ??_int_gsm:	
  3351  0042                     sprintf@pb:	
  3352                           ; 1 bytes @ 0x22
  3353                           
  3354                           
  3355                           ; 3 bytes @ 0x22
  3356  0042                     	ds	2
  3357  0044                     ??___ftdiv:	
  3358  0044                     ___ftadd@f2:	
  3359                           ; 1 bytes @ 0x24
  3360                           
  3361                           
  3362                           ; 3 bytes @ 0x24
  3363  0044                     	ds	1
  3364  0045                     ??_sms_text:	
  3365                           
  3366                           ; 1 bytes @ 0x25
  3367  0045                     	ds	2
  3368  0047                     ??___ftadd:	
  3369  0047                     sms_text@smstext:	
  3370                           ; 1 bytes @ 0x27
  3371                           
  3372                           
  3373                           ; 1 bytes @ 0x27
  3374  0047                     	ds	1
  3375  0048                     sms_text@umid:	
  3376  0048                     ___ftdiv@cntr:	
  3377                           ; 1 bytes @ 0x28
  3378                           
  3379                           
  3380                           ; 1 bytes @ 0x28
  3381  0048                     	ds	1
  3382  0049                     ??_check_status_incubator:	
  3383  0049                     ___ftdiv@f3:	
  3384                           ; 1 bytes @ 0x29
  3385                           
  3386                           
  3387                           ; 3 bytes @ 0x29
  3388  0049                     	ds	2
  3389  004B                     ___ftadd@sign:	
  3390                           
  3391                           ; 1 bytes @ 0x2B
  3392  004B                     	ds	1
  3393  004C                     ___ftadd@exp2:	
  3394  004C                     ___ftdiv@exp:	
  3395                           ; 1 bytes @ 0x2C
  3396                           
  3397                           
  3398                           ; 1 bytes @ 0x2C
  3399  004C                     	ds	1
  3400  004D                     ___ftadd@exp1:	
  3401  004D                     ___ftdiv@sign:	
  3402                           ; 1 bytes @ 0x2D
  3403                           
  3404                           
  3405                           ; 1 bytes @ 0x2D
  3406  004D                     	ds	1
  3407  004E                     ?_comparare:	
  3408  004E                     comparare@resistor_value:	
  3409                           ; 2 bytes @ 0x2E
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x2E
  3413  004E                     	ds	2
  3414  0050                     ??_comparare:	
  3415                           
  3416                           ; 1 bytes @ 0x30
  3417  0050                     	ds	2
  3418  0052                     comparare@dif:	
  3419                           
  3420                           ; 3 bytes @ 0x32
  3421  0052                     	ds	3
  3422  0055                     comparare@step:	
  3423                           
  3424                           ; 3 bytes @ 0x35
  3425  0055                     	ds	3
  3426  0058                     comparare@result:	
  3427                           
  3428                           ; 2 bytes @ 0x38
  3429  0058                     	ds	2
  3430  005A                     comparare@j:	
  3431                           
  3432                           ; 2 bytes @ 0x3A
  3433  005A                     	ds	2
  3434  005C                     comparare@j_805:	
  3435                           
  3436                           ; 2 bytes @ 0x3C
  3437  005C                     	ds	2
  3438  005E                     ??_main:	
  3439                           
  3440                           ; 1 bytes @ 0x3E
  3441  005E                     	ds	1
  3442  005F                     main@x:	
  3443                           
  3444                           ; 1 bytes @ 0x3F
  3445  005F                     	ds	1
  3446  0060                     main@volt:	
  3447                           
  3448                           ; 3 bytes @ 0x40
  3449  0060                     	ds	3
  3450                           
  3451                           	psect	maintext
  3452  0450                     __pmaintext:	
  3453 ;;
  3454 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3455 ;;
  3456 ;; *************** function _main *****************
  3457 ;; Defined at:
  3458 ;;		line 108 in file "main.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  volt            3   64[BANK0 ] float 
  3463 ;;  x               1   63[BANK0 ] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : B1F/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3473 ;;      Params:         0       0       0       0       0       0       0       0
  3474 ;;      Locals:         0       4       0       0       0       0       0       0
  3475 ;;      Temps:          0       1       0       0       0       0       0       0
  3476 ;;      Totals:         0       5       0       0       0       0       0       0
  3477 ;;Total ram usage:        5 bytes
  3478 ;; Hardware stack levels required when called:   10
  3479 ;; This function calls:
  3480 ;;		_ADC_StartConversion
  3481 ;;		_CheckResponse
  3482 ;;		_DHT_result
  3483 ;;		_LCDByte
  3484 ;;		_LCDInit
  3485 ;;		_LCDWriteInt
  3486 ;;		_LCDWriteString
  3487 ;;		_SYSTEM_Initialize
  3488 ;;		_StartSignal
  3489 ;;		_TMR1_disable
  3490 ;;		_TMR1_enable
  3491 ;;		___ftdiv
  3492 ;;		___ftmul
  3493 ;;		___fttol
  3494 ;;		___lwtoft
  3495 ;;		_check_status_incubator
  3496 ;;		_command_turn
  3497 ;;		_comparare
  3498 ;;		_int_gsm
  3499 ;; This function is called by:
  3500 ;;		Startup code after reset
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _main
  3506  0450                     _main:	
  3507                           
  3508                           ;main.c: 110: char x=0;
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3512  0450  0020               	movlb	0	; select bank0
  3513  0451  01DF               	clrf	main@x
  3514                           
  3515                           ;main.c: 113: SYSTEM_Initialize();
  3516  0452  3189  2105  3184   	fcall	_SYSTEM_Initialize
  3517                           
  3518                           ;main.c: 114: TRISCbits.TRISC2=0;
  3519  0455  0021               	movlb	1	; select bank1
  3520  0456  110E               	bcf	14,2	;volatile
  3521                           
  3522                           ;main.c: 115: ADC_StartConversion();
  3523  0457  3188  20A2  3184   	fcall	_ADC_StartConversion
  3524                           
  3525                           ;main.c: 123: (INTCONbits.GIE = 1);
  3526  045A  178B               	bsf	11,7	;volatile
  3527                           
  3528                           ;main.c: 126: (INTCONbits.PEIE = 1);
  3529  045B  170B               	bsf	11,6	;volatile
  3530                           
  3531                           ;main.c: 134: flag_directie=1;
  3532  045C  3001               	movlw	1
  3533  045D  0022               	movlb	2	; select bank2
  3534  045E  00EB               	movwf	_flag_directie^(0+256)
  3535  045F  3000               	movlw	0
  3536  0460  00EC               	movwf	(_flag_directie^(0+256)+1)
  3537                           
  3538                           ;main.c: 135: int_gsm();
  3539  0461  318F  276E  3184   	fcall	_int_gsm
  3540                           
  3541                           ;main.c: 136: float volt;
  3542                           ;main.c: 137: LCDInit(1);
  3543  0464  3001               	movlw	1
  3544  0465  318C  240C  3184   	fcall	_LCDInit
  3545  0468                     l5140:	
  3546                           ;main.c: 141: while (1)
  3547                           
  3548                           
  3549                           ;main.c: 142: {
  3550                           ;main.c: 168: if (flag_1000_ms==1)
  3551  0468  0022               	movlb	2	; select bank2
  3552  0469  0354               	decf	_flag_1000_ms^(0+256),w
  3553  046A  0455               	iorwf	(_flag_1000_ms+1)^(0+256),w
  3554  046B  1D03               	btfss	3,2
  3555  046C  2D24               	goto	l5176
  3556                           
  3557                           ;main.c: 169: {
  3558                           ;main.c: 170: TMR1_disable();
  3559  046D  3188  20A8  3184   	fcall	_TMR1_disable
  3560                           
  3561                           ;main.c: 171: StartSignal();
  3562  0470  3189  2129  3184   	fcall	_StartSignal
  3563                           
  3564                           ;main.c: 172: CheckResponse();
  3565  0473  3189  2168  3184   	fcall	_CheckResponse
  3566                           
  3567                           ;main.c: 173: if(Check == 1)
  3568  0476  0020               	movlb	0	; select bank0
  3569  0477  036C               	decf	_Check,w
  3570  0478  1D03               	btfss	3,2
  3571  0479  2C7D               	goto	l5152
  3572                           
  3573                           ;main.c: 174: {
  3574                           ;main.c: 175: DHT_result();
  3575  047A  318D  25ED  3184   	fcall	_DHT_result
  3576  047D                     l5152:	
  3577                           
  3578                           ;main.c: 177: }
  3579                           ;main.c: 178: ADC_StartConversion();
  3580  047D  3188  20A2  3184   	fcall	_ADC_StartConversion
  3581                           
  3582                           ;main.c: 179: volt=(rez_conversie*4.887)/1.492;
  3583  0480  30FA               	movlw	250
  3584  0481  0020               	movlb	0	; select bank0
  3585  0482  00BE               	movwf	___ftdiv@f2
  3586  0483  30BE               	movlw	190
  3587  0484  00BF               	movwf	___ftdiv@f2+1
  3588  0485  303F               	movlw	63
  3589  0486  00C0               	movwf	___ftdiv@f2+2
  3590  0487  3062               	movlw	98
  3591  0488  00AE               	movwf	___ftmul@f1
  3592  0489  309C               	movlw	156
  3593  048A  00AF               	movwf	___ftmul@f1+1
  3594  048B  3040               	movlw	64
  3595  048C  00B0               	movwf	___ftmul@f1+2
  3596  048D  0022               	movlb	2	; select bank2
  3597  048E  0867               	movf	(_rez_conversie+1)^(0+256),w
  3598  048F  0020               	movlb	0	; select bank0
  3599  0490  00A9               	movwf	___lwtoft@c+1
  3600  0491  0022               	movlb	2	; select bank2
  3601  0492  0866               	movf	_rez_conversie^(0+256),w
  3602  0493  0020               	movlb	0	; select bank0
  3603  0494  00A8               	movwf	___lwtoft@c
  3604  0495  3189  213D  3184   	fcall	___lwtoft
  3605  0498  0020               	movlb	0	; select bank0
  3606  0499  0828               	movf	?___lwtoft,w
  3607  049A  00B1               	movwf	___ftmul@f2
  3608  049B  0829               	movf	?___lwtoft+1,w
  3609  049C  00B2               	movwf	___ftmul@f2+1
  3610  049D  082A               	movf	?___lwtoft+2,w
  3611  049E  00B3               	movwf	___ftmul@f2+2
  3612  049F  3185  25E1  3184   	fcall	___ftmul
  3613  04A2  0020               	movlb	0	; select bank0
  3614  04A3  082E               	movf	?___ftmul,w
  3615  04A4  00C1               	movwf	___ftdiv@f1
  3616  04A5  082F               	movf	?___ftmul+1,w
  3617  04A6  00C2               	movwf	___ftdiv@f1+1
  3618  04A7  0830               	movf	?___ftmul+2,w
  3619  04A8  00C3               	movwf	___ftdiv@f1+2
  3620  04A9  3186  2695  3184   	fcall	___ftdiv
  3621  04AC  0020               	movlb	0	; select bank0
  3622  04AD  083E               	movf	?___ftdiv,w
  3623  04AE  00E0               	movwf	main@volt
  3624  04AF  083F               	movf	?___ftdiv+1,w
  3625  04B0  00E1               	movwf	main@volt+1
  3626  04B1  0840               	movf	?___ftdiv+2,w
  3627  04B2  00E2               	movwf	main@volt+2
  3628                           
  3629                           ;main.c: 181: temp=comparare(volt);
  3630  04B3  0860               	movf	main@volt,w
  3631  04B4  00A0               	movwf	___fttol@f1
  3632  04B5  0861               	movf	main@volt+1,w
  3633  04B6  00A1               	movwf	___fttol@f1+1
  3634  04B7  0862               	movf	main@volt+2,w
  3635  04B8  00A2               	movwf	___fttol@f1+2
  3636  04B9  318E  2656  3184   	fcall	___fttol
  3637  04BC  0020               	movlb	0	; select bank0
  3638  04BD  0821               	movf	?___fttol+1,w
  3639  04BE  00CF               	movwf	comparare@resistor_value+1
  3640  04BF  0820               	movf	?___fttol,w
  3641  04C0  00CE               	movwf	comparare@resistor_value
  3642  04C1  3180  207E  3184   	fcall	_comparare
  3643  04C4  0020               	movlb	0	; select bank0
  3644  04C5  084F               	movf	?_comparare+1,w
  3645  04C6  0022               	movlb	2	; select bank2
  3646  04C7  00E5               	movwf	(_temp+1)^(0+256)
  3647  04C8  0020               	movlb	0	; select bank0
  3648  04C9  084E               	movf	?_comparare,w
  3649  04CA  0022               	movlb	2	; select bank2
  3650  04CB  00E4               	movwf	_temp^(0+256)
  3651                           
  3652                           ;main.c: 182: if (temp<300)
  3653  04CC  0865               	movf	(_temp+1)^(0+256),w
  3654  04CD  3A80               	xorlw	128
  3655  04CE  0020               	movlb	0	; select bank0
  3656  04CF  00DE               	movwf	??_main
  3657  04D0  3081               	movlw	129
  3658  04D1  025E               	subwf	??_main,w
  3659  04D2  1D03               	skipz
  3660  04D3  2CD7               	goto	u5845
  3661  04D4  302C               	movlw	44
  3662  04D5  0022               	movlb	2	; select bank2
  3663  04D6  0264               	subwf	_temp^(0+256),w
  3664  04D7                     u5845:	
  3665  04D7  1803               	skipnc
  3666  04D8  2CDC               	goto	l510
  3667                           
  3668                           ;main.c: 184: LATCbits.LATC2=1;
  3669  04D9  0022               	movlb	2	; select bank2
  3670  04DA  150E               	bsf	14,2	;volatile
  3671  04DB  2CDE               	goto	l5162
  3672  04DC                     l510:	
  3673                           
  3674                           ;main.c: 185: else
  3675                           ;main.c: 186: LATCbits.LATC2=0;
  3676  04DC  0022               	movlb	2	; select bank2
  3677  04DD  110E               	bcf	14,2	;volatile
  3678  04DE                     l5162:	
  3679                           
  3680                           ;main.c: 187: (LCDByte(0b00000001,0));
  3681  04DE  0020               	movlb	0	; select bank0
  3682  04DF  01A0               	clrf	LCDByte@isdata
  3683  04E0  3001               	movlw	1
  3684  04E1  318B  238A  3184   	fcall	_LCDByte
  3685                           
  3686                           ;main.c: 188: (LCDByte(0xB0,0));
  3687  04E4  0020               	movlb	0	; select bank0
  3688  04E5  01A0               	clrf	LCDByte@isdata
  3689  04E6  30B0               	movlw	176
  3690  04E7  318B  238A  3184   	fcall	_LCDByte
  3691                           
  3692                           ;main.c: 189: LCDWriteString("Temper=  ");
  3693  04EA  307A               	movlw	low (STR_1| (0+32768))
  3694  04EB  0020               	movlb	0	; select bank0
  3695  04EC  00A7               	movwf	LCDWriteString@msg
  3696  04ED  3090               	movlw	high (STR_1| (0+32768))
  3697  04EE  00A8               	movwf	LCDWriteString@msg+1
  3698  04EF  318B  23CB  3184   	fcall	_LCDWriteString
  3699                           
  3700                           ;main.c: 191: LCDWriteInt(temp,3);
  3701  04F2  0022               	movlb	2	; select bank2
  3702  04F3  0865               	movf	(_temp+1)^(0+256),w
  3703  04F4  0020               	movlb	0	; select bank0
  3704  04F5  00AA               	movwf	LCDWriteInt@val+1
  3705  04F6  0022               	movlb	2	; select bank2
  3706  04F7  0864               	movf	_temp^(0+256),w
  3707  04F8  0020               	movlb	0	; select bank0
  3708  04F9  00A9               	movwf	LCDWriteInt@val
  3709  04FA  3003               	movlw	3
  3710  04FB  00DE               	movwf	??_main
  3711  04FC  085E               	movf	??_main,w
  3712  04FD  00AB               	movwf	LCDWriteInt@field_length
  3713  04FE  318E  26DD  3184   	fcall	_LCDWriteInt
  3714                           
  3715                           ;main.c: 192: (LCDByte(0xC0,0));
  3716  0501  0020               	movlb	0	; select bank0
  3717  0502  01A0               	clrf	LCDByte@isdata
  3718  0503  30C0               	movlw	192
  3719  0504  318B  238A  3184   	fcall	_LCDByte
  3720                           
  3721                           ;main.c: 193: LCDWriteString("Umid=  ");
  3722  0507  3084               	movlw	low (STR_2| (0+32768))
  3723  0508  0020               	movlb	0	; select bank0
  3724  0509  00A7               	movwf	LCDWriteString@msg
  3725  050A  3090               	movlw	high (STR_2| (0+32768))
  3726  050B  00A8               	movwf	LCDWriteString@msg+1
  3727  050C  318B  23CB  3184   	fcall	_LCDWriteString
  3728                           
  3729                           ;main.c: 195: LCDWriteInt(umiditate,3);
  3730  050F  0022               	movlb	2	; select bank2
  3731  0510  0863               	movf	(_umiditate+1)^(0+256),w
  3732  0511  0020               	movlb	0	; select bank0
  3733  0512  00AA               	movwf	LCDWriteInt@val+1
  3734  0513  0022               	movlb	2	; select bank2
  3735  0514  0862               	movf	_umiditate^(0+256),w
  3736  0515  0020               	movlb	0	; select bank0
  3737  0516  00A9               	movwf	LCDWriteInt@val
  3738  0517  3003               	movlw	3
  3739  0518  00DE               	movwf	??_main
  3740  0519  085E               	movf	??_main,w
  3741  051A  00AB               	movwf	LCDWriteInt@field_length
  3742  051B  318E  26DD  3184   	fcall	_LCDWriteInt
  3743                           
  3744                           ;main.c: 197: flag_1000_ms=0;
  3745  051E  0022               	movlb	2	; select bank2
  3746  051F  01D4               	clrf	_flag_1000_ms^(0+256)
  3747  0520  01D5               	clrf	(_flag_1000_ms+1)^(0+256)
  3748                           
  3749                           ;main.c: 198: TMR1_enable();
  3750  0521  3188  20AB  3184   	fcall	_TMR1_enable
  3751  0524                     l5176:	
  3752                           
  3753                           ;main.c: 200: }
  3754                           ;main.c: 201: command_turn();
  3755  0524  3188  20F9  3184   	fcall	_command_turn
  3756                           
  3757                           ;main.c: 202: check_status_incubator();
  3758  0527  3188  20ED  3184   	fcall	_check_status_incubator
  3759  052A  2C68               	goto	l5140
  3760  052B                     __end_of_main:	
  3761                           ;main.c: 206: }
  3762                           ;main.c: 209: return;
  3763                           
  3764                           
  3765                           	psect	text1
  3766  0F6E                     __ptext1:	
  3767 ;; *************** function _int_gsm *****************
  3768 ;; Defined at:
  3769 ;;		line 34 in file "gsm.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3783 ;;      Params:         0       0       0       0       0       0       0       0
  3784 ;;      Locals:         0       0       0       0       0       0       0       0
  3785 ;;      Temps:          0       2       0       0       0       0       0       0
  3786 ;;      Totals:         0       2       0       0       0       0       0       0
  3787 ;;Total ram usage:        2 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    8
  3790 ;; This function calls:
  3791 ;;		_printf
  3792 ;;		_putch
  3793 ;; This function is called by:
  3794 ;;		_main
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           
  3799                           ;psect for function _int_gsm
  3800  0F6E                     _int_gsm:	
  3801                           
  3802                           ;gsm.c: 37: printf("AT");
  3803                           
  3804                           ;incstack = 0
  3805                           ; Regs used in _int_gsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3806  0F6E  308C               	movlw	low (STR_7| (0+32768))
  3807  0F6F  0020               	movlb	0	; select bank0
  3808  0F70  00BB               	movwf	printf@f
  3809  0F71  3090               	movlw	high (STR_7| (0+32768))
  3810  0F72  00BC               	movwf	printf@f+1
  3811  0F73  3189  2152  318F   	fcall	_printf
  3812                           
  3813                           ;gsm.c: 38: putch(0x0d);
  3814  0F76  300D               	movlw	13
  3815  0F77  0020               	movlb	0	; select bank0
  3816  0F78  00C2               	movwf	??_int_gsm
  3817  0F79  0842               	movf	??_int_gsm,w
  3818  0F7A  00A2               	movwf	putch@txData
  3819  0F7B  3188  20B7  318F   	fcall	_putch
  3820                           
  3821                           ;gsm.c: 39: _delay((unsigned long)((3000)*(18432000/4000.0)));
  3822  0F7E  3047               	movlw	71
  3823  0F7F  0020               	movlb	0	; select bank0
  3824  0F80  00C3               	movwf	??_int_gsm+1
  3825  0F81  3022               	movlw	34
  3826  0F82  00C2               	movwf	??_int_gsm
  3827  0F83  300D               	movlw	13
  3828  0F84                     u5857:	
  3829  0F84  0B89               	decfsz	9,f
  3830  0F85  2F84               	goto	u5857
  3831  0F86  0BC2               	decfsz	??_int_gsm,f
  3832  0F87  2F84               	goto	u5857
  3833  0F88  0BC3               	decfsz	??_int_gsm+1,f
  3834  0F89  2F84               	goto	u5857
  3835  0F8A  3200               	nop2
  3836                           
  3837                           ;gsm.c: 40: printf("AT+CPIN=\"1234\"");
  3838  0F8B  3049               	movlw	low (STR_8| (0+32768))
  3839  0F8C  0020               	movlb	0	; select bank0
  3840  0F8D  00BB               	movwf	printf@f
  3841  0F8E  3090               	movlw	high (STR_8| (0+32768))
  3842  0F8F  00BC               	movwf	printf@f+1
  3843  0F90  3189  2152  318F   	fcall	_printf
  3844                           
  3845                           ;gsm.c: 41: putch(0x0d);
  3846  0F93  300D               	movlw	13
  3847  0F94  0020               	movlb	0	; select bank0
  3848  0F95  00C2               	movwf	??_int_gsm
  3849  0F96  0842               	movf	??_int_gsm,w
  3850  0F97  00A2               	movwf	putch@txData
  3851  0F98  3188  20B7  318F   	fcall	_putch
  3852                           
  3853                           ;gsm.c: 42: _delay((unsigned long)((5000)*(18432000/4000.0)));
  3854  0F9B  3075               	movlw	117
  3855  0F9C  0020               	movlb	0	; select bank0
  3856  0F9D  00C3               	movwf	??_int_gsm+1
  3857  0F9E  30E2               	movlw	226
  3858  0F9F  00C2               	movwf	??_int_gsm
  3859  0FA0  30C4               	movlw	196
  3860  0FA1                     u5867:	
  3861  0FA1  0B89               	decfsz	9,f
  3862  0FA2  2FA1               	goto	u5867
  3863  0FA3  0BC2               	decfsz	??_int_gsm,f
  3864  0FA4  2FA1               	goto	u5867
  3865  0FA5  0BC3               	decfsz	??_int_gsm+1,f
  3866  0FA6  2FA1               	goto	u5867
  3867  0FA7  0000               	nop
  3868                           
  3869                           ;gsm.c: 43: printf("AT+CMGF=1");
  3870  0FA8  3070               	movlw	low (STR_9| (0+32768))
  3871  0FA9  0020               	movlb	0	; select bank0
  3872  0FAA  00BB               	movwf	printf@f
  3873  0FAB  3090               	movlw	high (STR_9| (0+32768))
  3874  0FAC  00BC               	movwf	printf@f+1
  3875  0FAD  3189  2152  318F   	fcall	_printf
  3876                           
  3877                           ;gsm.c: 44: putch(0x0d);
  3878  0FB0  300D               	movlw	13
  3879  0FB1  0020               	movlb	0	; select bank0
  3880  0FB2  00C2               	movwf	??_int_gsm
  3881  0FB3  0842               	movf	??_int_gsm,w
  3882  0FB4  00A2               	movwf	putch@txData
  3883  0FB5  3188  20B7  318F   	fcall	_putch
  3884                           
  3885                           ;gsm.c: 45: _delay((unsigned long)((5000)*(18432000/4000.0)));
  3886  0FB8  3075               	movlw	117
  3887  0FB9  0020               	movlb	0	; select bank0
  3888  0FBA  00C3               	movwf	??_int_gsm+1
  3889  0FBB  30E2               	movlw	226
  3890  0FBC  00C2               	movwf	??_int_gsm
  3891  0FBD  30C4               	movlw	196
  3892  0FBE                     u5877:	
  3893  0FBE  0B89               	decfsz	9,f
  3894  0FBF  2FBE               	goto	u5877
  3895  0FC0  0BC2               	decfsz	??_int_gsm,f
  3896  0FC1  2FBE               	goto	u5877
  3897  0FC2  0BC3               	decfsz	??_int_gsm+1,f
  3898  0FC3  2FBE               	goto	u5877
  3899  0FC4  0000               	nop
  3900                           
  3901                           ;gsm.c: 46: printf("AT+CNMI=1,2,0,0,0");
  3902  0FC5  3015               	movlw	low (STR_10| (0+32768))
  3903  0FC6  0020               	movlb	0	; select bank0
  3904  0FC7  00BB               	movwf	printf@f
  3905  0FC8  3090               	movlw	high (STR_10| (0+32768))
  3906  0FC9  00BC               	movwf	printf@f+1
  3907  0FCA  3189  2152  318F   	fcall	_printf
  3908                           
  3909                           ;gsm.c: 47: putch(0x0d);
  3910  0FCD  300D               	movlw	13
  3911  0FCE  0020               	movlb	0	; select bank0
  3912  0FCF  00C2               	movwf	??_int_gsm
  3913  0FD0  0842               	movf	??_int_gsm,w
  3914  0FD1  00A2               	movwf	putch@txData
  3915  0FD2  3188  20B7  318F   	fcall	_putch
  3916                           
  3917                           ;gsm.c: 48: _delay((unsigned long)((5000)*(18432000/4000.0)));
  3918  0FD5  3075               	movlw	117
  3919  0FD6  0020               	movlb	0	; select bank0
  3920  0FD7  00C3               	movwf	??_int_gsm+1
  3921  0FD8  30E2               	movlw	226
  3922  0FD9  00C2               	movwf	??_int_gsm
  3923  0FDA  30C4               	movlw	196
  3924  0FDB                     u5887:	
  3925  0FDB  0B89               	decfsz	9,f
  3926  0FDC  2FDB               	goto	u5887
  3927  0FDD  0BC2               	decfsz	??_int_gsm,f
  3928  0FDE  2FDB               	goto	u5887
  3929  0FDF  0BC3               	decfsz	??_int_gsm+1,f
  3930  0FE0  2FDB               	goto	u5887
  3931  0FE1  0000               	nop
  3932                           
  3933                           ;gsm.c: 49: printf("AT+CSCS=\"GSM\"");
  3934  0FE2  3058               	movlw	low (STR_3| (0+32768))
  3935  0FE3  0020               	movlb	0	; select bank0
  3936  0FE4  00BB               	movwf	printf@f
  3937  0FE5  3090               	movlw	high (STR_3| (0+32768))
  3938  0FE6  00BC               	movwf	printf@f+1
  3939  0FE7  3189  2152  318F   	fcall	_printf
  3940                           
  3941                           ;gsm.c: 50: putch(0x0d);
  3942  0FEA  300D               	movlw	13
  3943  0FEB  0020               	movlb	0	; select bank0
  3944  0FEC  00C2               	movwf	??_int_gsm
  3945  0FED  0842               	movf	??_int_gsm,w
  3946  0FEE  00A2               	movwf	putch@txData
  3947  0FEF  3188  20B7  318F   	fcall	_putch
  3948                           
  3949                           ;gsm.c: 51: _delay((unsigned long)((5000)*(18432000/4000.0)));
  3950  0FF2  3075               	movlw	117
  3951  0FF3  0020               	movlb	0	; select bank0
  3952  0FF4  00C3               	movwf	??_int_gsm+1
  3953  0FF5  30E2               	movlw	226
  3954  0FF6  00C2               	movwf	??_int_gsm
  3955  0FF7  30C4               	movlw	196
  3956  0FF8                     u5897:	
  3957  0FF8  0B89               	decfsz	9,f
  3958  0FF9  2FF8               	goto	u5897
  3959  0FFA  0BC2               	decfsz	??_int_gsm,f
  3960  0FFB  2FF8               	goto	u5897
  3961  0FFC  0BC3               	decfsz	??_int_gsm+1,f
  3962  0FFD  2FF8               	goto	u5897
  3963  0FFE  0000               	nop
  3964  0FFF  0008               	return
  3965  1000                     __end_of_int_gsm:	
  3966                           
  3967                           	psect	text2
  3968  007E                     __ptext2:	
  3969 ;; *************** function _comparare *****************
  3970 ;; Defined at:
  3971 ;;		line 69 in file "main.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  resistor_val    2   46[BANK0 ] int 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  j               2   60[BANK0 ] int 
  3976 ;;  j               2   58[BANK0 ] int 
  3977 ;;  i               2   75[BANK1 ] int 
  3978 ;;  table          75    0[BANK1 ] float [25]
  3979 ;;  res            42    0[BANK2 ] unsigned int [21]
  3980 ;;  step            3   53[BANK0 ] float 
  3981 ;;  dif             3   50[BANK0 ] float 
  3982 ;;  result          2   56[BANK0 ] int 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  2   46[BANK0 ] int 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3992 ;;      Params:         0       2       0       0       0       0       0       0
  3993 ;;      Locals:         0      12      77      42       0       0       0       0
  3994 ;;      Temps:          0       2       0       0       0       0       0       0
  3995 ;;      Totals:         0      16      77      42       0       0       0       0
  3996 ;;Total ram usage:      135 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    6
  3999 ;; This function calls:
  4000 ;;		___awtoft
  4001 ;;		___bmul
  4002 ;;		___ftadd
  4003 ;;		___ftdiv
  4004 ;;		___ftge
  4005 ;;		___ftmul
  4006 ;;		___ftneg
  4007 ;;		___lwtoft
  4008 ;;		___wmul
  4009 ;; This function is called by:
  4010 ;;		_main
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           
  4015                           ;psect for function _comparare
  4016  007E                     _comparare:	
  4017                           
  4018                           ;main.c: 71: unsigned int res[]={3002,2689,2377,2136,1895,1707,1520,1374,1228,1114,1000,
      +                          908,817,745,673,615,557,510,463,423,383};
  4019                           
  4020                           ;incstack = 0
  4021                           ; Regs used in _comparare: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4022  007E  30A0               	movlw	low comparare@F3749
  4023  007F  0086               	movwf	6
  4024  0080  3001               	movlw	high comparare@F3749
  4025  0081  0087               	movwf	7
  4026  0082  3020               	movlw	low comparare@res
  4027  0083  0084               	movwf	4
  4028  0084  3001               	movlw	high comparare@res
  4029  0085  0085               	movwf	5
  4030  0086  302A               	movlw	42
  4031  0087  0020               	movlb	0	; select bank0
  4032  0088  00D0               	movwf	??_comparare
  4033  0089                     u3890:	
  4034  0089  0016               	moviw fsr1++
  4035  008A  001A               	movwi fsr0++
  4036  008B  0BD0               	decfsz	??_comparare,f
  4037  008C  2889               	goto	u3890
  4038                           
  4039                           ;main.c: 72: int result=1000;
  4040  008D  30E8               	movlw	232
  4041  008E  00D8               	movwf	comparare@result
  4042  008F  3003               	movlw	3
  4043  0090  00D9               	movwf	comparare@result+1
  4044                           
  4045                           ;main.c: 73: float dif=0,step=0;
  4046  0091  3000               	movlw	0
  4047  0092  00D2               	movwf	comparare@dif
  4048  0093  3000               	movlw	0
  4049  0094  00D3               	movwf	comparare@dif+1
  4050  0095  3000               	movlw	0
  4051  0096  00D4               	movwf	comparare@dif+2
  4052  0097  3000               	movlw	0
  4053  0098  00D5               	movwf	comparare@step
  4054  0099  3000               	movlw	0
  4055  009A  00D6               	movwf	comparare@step+1
  4056  009B  3000               	movlw	0
  4057  009C  00D7               	movwf	comparare@step+2
  4058                           
  4059                           ;main.c: 74: float table[25]={};
  4060  009D  3020               	movlw	low comparare@F3754
  4061  009E  0086               	movwf	6
  4062  009F  3002               	movlw	high comparare@F3754
  4063  00A0  0087               	movwf	7
  4064  00A1  30A0               	movlw	low comparare@table
  4065  00A2  0084               	movwf	4
  4066  00A3  3000               	movlw	high comparare@table
  4067  00A4  0085               	movwf	5
  4068  00A5  304B               	movlw	75
  4069  00A6  00D0               	movwf	??_comparare
  4070  00A7                     u3900:	
  4071  00A7  0016               	moviw fsr1++
  4072  00A8  001A               	movwi fsr0++
  4073  00A9  0BD0               	decfsz	??_comparare,f
  4074  00AA  28A7               	goto	u3900
  4075                           
  4076                           ;main.c: 75: for(int i=0;i<21;i++)
  4077  00AB  0021               	movlb	1	; select bank1
  4078  00AC  01EB               	clrf	comparare@i^(0+128)
  4079  00AD  01EC               	clrf	(comparare@i+1)^(0+128)
  4080  00AE  086C               	movf	(comparare@i+1)^(0+128),w
  4081  00AF  3A80               	xorlw	128
  4082  00B0  0020               	movlb	0	; select bank0
  4083  00B1  00D0               	movwf	??_comparare
  4084  00B2  3080               	movlw	128
  4085  00B3  0250               	subwf	??_comparare,w
  4086  00B4  1D03               	skipz
  4087  00B5  28B9               	goto	u3915
  4088  00B6  3015               	movlw	21
  4089  00B7  0021               	movlb	1	; select bank1
  4090  00B8  026B               	subwf	comparare@i^(0+128),w
  4091  00B9                     u3915:	
  4092  00B9  1803               	btfsc	3,0
  4093  00BA  2A22               	goto	l3714
  4094  00BB                     l3678:	
  4095                           
  4096                           ;main.c: 76: {
  4097                           ;main.c: 77: if((resistor_value<=res[i])&(resistor_value>=res[i+1]))
  4098  00BB  0021               	movlb	1	; select bank1
  4099  00BC  356B               	lslf	comparare@i^(0+128),w
  4100  00BD  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4101  00BE  0086               	movwf	6
  4102  00BF  3001               	movlw	1	; select bank2/3
  4103  00C0  0087               	movwf	7
  4104  00C1  3F40               	moviw [0]fsr1
  4105  00C2  0020               	movlb	0	; select bank0
  4106  00C3  00D0               	movwf	??_comparare
  4107  00C4  3F41               	moviw [1]fsr1
  4108  00C5  00D1               	movwf	??_comparare+1
  4109  00C6  084F               	movf	comparare@resistor_value+1,w
  4110  00C7  0251               	subwf	??_comparare+1,w
  4111  00C8  1D03               	skipz
  4112  00C9  28CC               	goto	u3925
  4113  00CA  084E               	movf	comparare@resistor_value,w
  4114  00CB  0250               	subwf	??_comparare,w
  4115  00CC                     u3925:	
  4116  00CC  1C03               	skipc
  4117  00CD  2A10               	goto	l3712
  4118  00CE  0021               	movlb	1	; select bank1
  4119  00CF  356B               	lslf	comparare@i^(0+128),w
  4120  00D0  3E02               	addlw	2
  4121  00D1  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4122  00D2  0086               	movwf	6
  4123  00D3  3001               	movlw	1	; select bank2/3
  4124  00D4  0087               	movwf	7
  4125  00D5  3F40               	moviw [0]fsr1
  4126  00D6  0020               	movlb	0	; select bank0
  4127  00D7  00D0               	movwf	??_comparare
  4128  00D8  3F41               	moviw [1]fsr1
  4129  00D9  00D1               	movwf	??_comparare+1
  4130  00DA  0851               	movf	??_comparare+1,w
  4131  00DB  024F               	subwf	comparare@resistor_value+1,w
  4132  00DC  1D03               	skipz
  4133  00DD  28E0               	goto	u3935
  4134  00DE  0850               	movf	??_comparare,w
  4135  00DF  024E               	subwf	comparare@resistor_value,w
  4136  00E0                     u3935:	
  4137  00E0  1C03               	skipc
  4138  00E1  2A10               	goto	l3712
  4139                           
  4140                           ;main.c: 78: {
  4141                           ;main.c: 79: dif=res[i]-res[i+1];
  4142  00E2  0021               	movlb	1	; select bank1
  4143  00E3  356B               	lslf	comparare@i^(0+128),w
  4144  00E4  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4145  00E5  0086               	movwf	6
  4146  00E6  3001               	movlw	1	; select bank2/3
  4147  00E7  0087               	movwf	7
  4148  00E8  356B               	lslf	comparare@i^(0+128),w
  4149  00E9  3E02               	addlw	2
  4150  00EA  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4151  00EB  0084               	movwf	4
  4152  00EC  3001               	movlw	1	; select bank2/3
  4153  00ED  0085               	movwf	5
  4154  00EE  3F00               	moviw [0]fsr0
  4155  00EF  0020               	movlb	0	; select bank0
  4156  00F0  00D0               	movwf	??_comparare
  4157  00F1  3F01               	moviw [1]fsr0
  4158  00F2  00D1               	movwf	??_comparare+1
  4159  00F3  09D0               	comf	??_comparare,f
  4160  00F4  09D1               	comf	??_comparare+1,f
  4161  00F5  0AD0               	incf	??_comparare,f
  4162  00F6  1903               	skipnz
  4163  00F7  0AD1               	incf	??_comparare+1,f
  4164  00F8  3F40               	moviw [0]fsr1
  4165  00F9  0750               	addwf	??_comparare,w
  4166  00FA  00A8               	movwf	___lwtoft@c
  4167  00FB  3F41               	moviw [1]fsr1
  4168  00FC  3D51               	addwfc	??_comparare+1,w
  4169  00FD  00A9               	movwf	___lwtoft@c+1
  4170  00FE  3189  213D  3180   	fcall	___lwtoft
  4171  0101  0020               	movlb	0	; select bank0
  4172  0102  0828               	movf	?___lwtoft,w
  4173  0103  00D2               	movwf	comparare@dif
  4174  0104  0829               	movf	?___lwtoft+1,w
  4175  0105  00D3               	movwf	comparare@dif+1
  4176  0106  082A               	movf	?___lwtoft+2,w
  4177  0107  00D4               	movwf	comparare@dif+2
  4178                           
  4179                           ;main.c: 80: step=dif/25;
  4180  0108  3000               	movlw	0
  4181  0109  00BE               	movwf	___ftdiv@f2
  4182  010A  30C8               	movlw	200
  4183  010B  00BF               	movwf	___ftdiv@f2+1
  4184  010C  3041               	movlw	65
  4185  010D  00C0               	movwf	___ftdiv@f2+2
  4186  010E  0852               	movf	comparare@dif,w
  4187  010F  00C1               	movwf	___ftdiv@f1
  4188  0110  0853               	movf	comparare@dif+1,w
  4189  0111  00C2               	movwf	___ftdiv@f1+1
  4190  0112  0854               	movf	comparare@dif+2,w
  4191  0113  00C3               	movwf	___ftdiv@f1+2
  4192  0114  3186  2695  3180   	fcall	___ftdiv
  4193  0117  0020               	movlb	0	; select bank0
  4194  0118  083E               	movf	?___ftdiv,w
  4195  0119  00D5               	movwf	comparare@step
  4196  011A  083F               	movf	?___ftdiv+1,w
  4197  011B  00D6               	movwf	comparare@step+1
  4198  011C  0840               	movf	?___ftdiv+2,w
  4199  011D  00D7               	movwf	comparare@step+2
  4200                           
  4201                           ;main.c: 81: for(int j=0;j<25;j++)
  4202  011E  01DA               	clrf	comparare@j
  4203  011F  01DB               	clrf	comparare@j+1
  4204  0120  085B               	movf	comparare@j+1,w
  4205  0121  3A80               	xorlw	128
  4206  0122  00D0               	movwf	??_comparare
  4207  0123  3080               	movlw	128
  4208  0124  0250               	subwf	??_comparare,w
  4209  0125  1D03               	skipz
  4210  0126  2929               	goto	u3945
  4211  0127  3019               	movlw	25
  4212  0128  025A               	subwf	comparare@j,w
  4213  0129                     u3945:	
  4214  0129  1803               	btfsc	3,0
  4215  012A  298E               	goto	l3698
  4216  012B                     l3692:	
  4217                           
  4218                           ;main.c: 82: {
  4219                           ;main.c: 84: table[j]=res[i]-j*step;
  4220  012B  3003               	movlw	3
  4221  012C  0020               	movlb	0	; select bank0
  4222  012D  00D0               	movwf	??_comparare
  4223  012E  0850               	movf	??_comparare,w
  4224  012F  00A0               	movwf	___bmul@multiplicand
  4225  0130  085A               	movf	comparare@j,w
  4226  0131  3189  2117  3180   	fcall	___bmul
  4227  0134  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4228  0135  0086               	movwf	6
  4229  0136  0187               	clrf	7
  4230  0137  0020               	movlb	0	; select bank0
  4231  0138  085B               	movf	comparare@j+1,w
  4232  0139  00A9               	movwf	___awtoft@c+1
  4233  013A  085A               	movf	comparare@j,w
  4234  013B  00A8               	movwf	___awtoft@c
  4235  013C  318A  2245  3180   	fcall	___awtoft
  4236  013F  0020               	movlb	0	; select bank0
  4237  0140  0828               	movf	?___awtoft,w
  4238  0141  00B1               	movwf	___ftmul@f2
  4239  0142  0829               	movf	?___awtoft+1,w
  4240  0143  00B2               	movwf	___ftmul@f2+1
  4241  0144  082A               	movf	?___awtoft+2,w
  4242  0145  00B3               	movwf	___ftmul@f2+2
  4243  0146  0855               	movf	comparare@step,w
  4244  0147  00AE               	movwf	___ftmul@f1
  4245  0148  0856               	movf	comparare@step+1,w
  4246  0149  00AF               	movwf	___ftmul@f1+1
  4247  014A  0857               	movf	comparare@step+2,w
  4248  014B  00B0               	movwf	___ftmul@f1+2
  4249  014C  3185  25E1  3180   	fcall	___ftmul
  4250  014F  0020               	movlb	0	; select bank0
  4251  0150  082E               	movf	?___ftmul,w
  4252  0151  00BE               	movwf	___ftneg@f1
  4253  0152  082F               	movf	?___ftmul+1,w
  4254  0153  00BF               	movwf	___ftneg@f1+1
  4255  0154  0830               	movf	?___ftmul+2,w
  4256  0155  00C0               	movwf	___ftneg@f1+2
  4257  0156  3188  20DA  3180   	fcall	___ftneg
  4258  0159  0020               	movlb	0	; select bank0
  4259  015A  083E               	movf	?___ftneg,w
  4260  015B  00C1               	movwf	___ftadd@f1
  4261  015C  083F               	movf	?___ftneg+1,w
  4262  015D  00C2               	movwf	___ftadd@f1+1
  4263  015E  0840               	movf	?___ftneg+2,w
  4264  015F  00C3               	movwf	___ftadd@f1+2
  4265  0160  0021               	movlb	1	; select bank1
  4266  0161  356B               	lslf	comparare@i^(0+128),w
  4267  0162  3E20               	addlw	(low (comparare@res| (0+256)))& (0+255)
  4268  0163  0084               	movwf	4
  4269  0164  3001               	movlw	1	; select bank2/3
  4270  0165  0085               	movwf	5
  4271  0166  3F00               	moviw [0]fsr0
  4272  0167  0020               	movlb	0	; select bank0
  4273  0168  00A8               	movwf	___lwtoft@c
  4274  0169  3F01               	moviw [1]fsr0
  4275  016A  00A9               	movwf	___lwtoft@c+1
  4276  016B  3189  213D  3180   	fcall	___lwtoft
  4277  016E  0020               	movlb	0	; select bank0
  4278  016F  0828               	movf	?___lwtoft,w
  4279  0170  00C4               	movwf	___ftadd@f2
  4280  0171  0829               	movf	?___lwtoft+1,w
  4281  0172  00C5               	movwf	___ftadd@f2+1
  4282  0173  082A               	movf	?___lwtoft+2,w
  4283  0174  00C6               	movwf	___ftadd@f2+2
  4284  0175  3183  235A  3180   	fcall	___ftadd
  4285  0178  0020               	movlb	0	; select bank0
  4286  0179  0841               	movf	?___ftadd,w
  4287  017A  3FC0               	movwi [0]fsr1
  4288  017B  0842               	movf	?___ftadd+1,w
  4289  017C  3FC1               	movwi [1]fsr1
  4290  017D  0843               	movf	?___ftadd+2,w
  4291  017E  3FC2               	movwi [2]fsr1
  4292  017F  3001               	movlw	1
  4293  0180  07DA               	addwf	comparare@j,f
  4294  0181  3000               	movlw	0
  4295  0182  3DDB               	addwfc	comparare@j+1,f
  4296  0183  085B               	movf	comparare@j+1,w
  4297  0184  3A80               	xorlw	128
  4298  0185  00D0               	movwf	??_comparare
  4299  0186  3080               	movlw	128
  4300  0187  0250               	subwf	??_comparare,w
  4301  0188  1D03               	skipz
  4302  0189  298C               	goto	u3955
  4303  018A  3019               	movlw	25
  4304  018B  025A               	subwf	comparare@j,w
  4305  018C                     u3955:	
  4306  018C  1C03               	skipc
  4307  018D  292B               	goto	l3692
  4308  018E                     l3698:	
  4309                           
  4310                           ;main.c: 86: }
  4311                           ;main.c: 87: for(int j=0;j<25;j++)
  4312  018E  0020               	movlb	0	; select bank0
  4313  018F  01DC               	clrf	comparare@j_805
  4314  0190  01DD               	clrf	comparare@j_805+1
  4315  0191  085D               	movf	comparare@j_805+1,w
  4316  0192  3A80               	xorlw	128
  4317  0193  00D0               	movwf	??_comparare
  4318  0194  3080               	movlw	128
  4319  0195  0250               	subwf	??_comparare,w
  4320  0196  1D03               	skipz
  4321  0197  299A               	goto	u3965
  4322  0198  3019               	movlw	25
  4323  0199  025C               	subwf	comparare@j_805,w
  4324  019A                     u3965:	
  4325  019A  1803               	btfsc	3,0
  4326  019B  2A10               	goto	l3712
  4327  019C                     l3704:	
  4328                           
  4329                           ;main.c: 88: {
  4330                           ;main.c: 89: if((resistor_value<=table[j])&(resistor_value>=table[j+1]))
  4331  019C  3003               	movlw	3
  4332  019D  0020               	movlb	0	; select bank0
  4333  019E  00D0               	movwf	??_comparare
  4334  019F  0850               	movf	??_comparare,w
  4335  01A0  00A0               	movwf	___bmul@multiplicand
  4336  01A1  085C               	movf	comparare@j_805,w
  4337  01A2  3189  2117  3180   	fcall	___bmul
  4338  01A5  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4339  01A6  0086               	movwf	6
  4340  01A7  0187               	clrf	7
  4341  01A8  3F40               	moviw [0]fsr1
  4342  01A9  0020               	movlb	0	; select bank0
  4343  01AA  00AE               	movwf	___ftge@ff1
  4344  01AB  3F41               	moviw [1]fsr1
  4345  01AC  00AF               	movwf	___ftge@ff1+1
  4346  01AD  3F42               	moviw [2]fsr1
  4347  01AE  00B0               	movwf	___ftge@ff1+2
  4348  01AF  084F               	movf	comparare@resistor_value+1,w
  4349  01B0  00A9               	movwf	___awtoft@c+1
  4350  01B1  084E               	movf	comparare@resistor_value,w
  4351  01B2  00A8               	movwf	___awtoft@c
  4352  01B3  318A  2245  3180   	fcall	___awtoft
  4353  01B6  0020               	movlb	0	; select bank0
  4354  01B7  0828               	movf	?___awtoft,w
  4355  01B8  00B1               	movwf	___ftge@ff2
  4356  01B9  0829               	movf	?___awtoft+1,w
  4357  01BA  00B2               	movwf	___ftge@ff2+1
  4358  01BB  082A               	movf	?___awtoft+2,w
  4359  01BC  00B3               	movwf	___ftge@ff2+2
  4360  01BD  318B  234E  3180   	fcall	___ftge
  4361  01C0  1C03               	btfss	3,0
  4362  01C1  2A00               	goto	l3710
  4363  01C2  0020               	movlb	0	; select bank0
  4364  01C3  084F               	movf	comparare@resistor_value+1,w
  4365  01C4  00A9               	movwf	___awtoft@c+1
  4366  01C5  084E               	movf	comparare@resistor_value,w
  4367  01C6  00A8               	movwf	___awtoft@c
  4368  01C7  318A  2245  3180   	fcall	___awtoft
  4369  01CA  0020               	movlb	0	; select bank0
  4370  01CB  0828               	movf	?___awtoft,w
  4371  01CC  00AE               	movwf	___ftge@ff1
  4372  01CD  0829               	movf	?___awtoft+1,w
  4373  01CE  00AF               	movwf	___ftge@ff1+1
  4374  01CF  082A               	movf	?___awtoft+2,w
  4375  01D0  00B0               	movwf	___ftge@ff1+2
  4376  01D1  3003               	movlw	3
  4377  01D2  00D0               	movwf	??_comparare
  4378  01D3  0850               	movf	??_comparare,w
  4379  01D4  00A0               	movwf	___bmul@multiplicand
  4380  01D5  085C               	movf	comparare@j_805,w
  4381  01D6  3E01               	addlw	1
  4382  01D7  3189  2117  3180   	fcall	___bmul
  4383  01DA  3EA0               	addlw	(low (comparare@table| 0))& (0+255)
  4384  01DB  0086               	movwf	6
  4385  01DC  0187               	clrf	7
  4386  01DD  3F40               	moviw [0]fsr1
  4387  01DE  0020               	movlb	0	; select bank0
  4388  01DF  00B1               	movwf	___ftge@ff2
  4389  01E0  3F41               	moviw [1]fsr1
  4390  01E1  00B2               	movwf	___ftge@ff2+1
  4391  01E2  3F42               	moviw [2]fsr1
  4392  01E3  00B3               	movwf	___ftge@ff2+2
  4393  01E4  318B  234E  3180   	fcall	___ftge
  4394  01E7  1C03               	btfss	3,0
  4395  01E8  2A00               	goto	l3710
  4396                           
  4397                           ;main.c: 90: {
  4398                           ;main.c: 91: result=(i*25+1*j);
  4399  01E9  0021               	movlb	1	; select bank1
  4400  01EA  086C               	movf	(comparare@i+1)^(0+128),w
  4401  01EB  0020               	movlb	0	; select bank0
  4402  01EC  00A1               	movwf	___wmul@multiplier+1
  4403  01ED  0021               	movlb	1	; select bank1
  4404  01EE  086B               	movf	comparare@i^(0+128),w
  4405  01EF  0020               	movlb	0	; select bank0
  4406  01F0  00A0               	movwf	___wmul@multiplier
  4407  01F1  3019               	movlw	25
  4408  01F2  00A2               	movwf	___wmul@multiplicand
  4409  01F3  3000               	movlw	0
  4410  01F4  00A3               	movwf	___wmul@multiplicand+1
  4411  01F5  3189  21CF  3180   	fcall	___wmul
  4412  01F8  0020               	movlb	0	; select bank0
  4413  01F9  085C               	movf	comparare@j_805,w
  4414  01FA  0720               	addwf	?___wmul,w
  4415  01FB  00D8               	movwf	comparare@result
  4416  01FC  085D               	movf	comparare@j_805+1,w
  4417  01FD  3D21               	addwfc	?___wmul+1,w
  4418  01FE  00D9               	movwf	comparare@result+1
  4419                           
  4420                           ;main.c: 92: break;
  4421  01FF  2A10               	goto	l3712
  4422  0200                     l3710:	
  4423  0200  3001               	movlw	1
  4424  0201  0020               	movlb	0	; select bank0
  4425  0202  07DC               	addwf	comparare@j_805,f
  4426  0203  3000               	movlw	0
  4427  0204  3DDD               	addwfc	comparare@j_805+1,f
  4428  0205  085D               	movf	comparare@j_805+1,w
  4429  0206  3A80               	xorlw	128
  4430  0207  00D0               	movwf	??_comparare
  4431  0208  3080               	movlw	128
  4432  0209  0250               	subwf	??_comparare,w
  4433  020A  1D03               	skipz
  4434  020B  2A0E               	goto	u3995
  4435  020C  3019               	movlw	25
  4436  020D  025C               	subwf	comparare@j_805,w
  4437  020E                     u3995:	
  4438  020E  1C03               	skipc
  4439  020F  299C               	goto	l3704
  4440  0210                     l3712:	
  4441  0210  3001               	movlw	1
  4442  0211  0021               	movlb	1	; select bank1
  4443  0212  07EB               	addwf	comparare@i^(0+128),f
  4444  0213  3000               	movlw	0
  4445  0214  3DEC               	addwfc	(comparare@i+1)^(0+128),f
  4446  0215  086C               	movf	(comparare@i+1)^(0+128),w
  4447  0216  3A80               	xorlw	128
  4448  0217  0020               	movlb	0	; select bank0
  4449  0218  00D0               	movwf	??_comparare
  4450  0219  3080               	movlw	128
  4451  021A  0250               	subwf	??_comparare,w
  4452  021B  1D03               	skipz
  4453  021C  2A20               	goto	u4005
  4454  021D  3015               	movlw	21
  4455  021E  0021               	movlb	1	; select bank1
  4456  021F  026B               	subwf	comparare@i^(0+128),w
  4457  0220                     u4005:	
  4458  0220  1C03               	skipc
  4459  0221  28BB               	goto	l3678
  4460  0222                     l3714:	
  4461                           
  4462                           ;main.c: 93: }
  4463                           ;main.c: 94: }
  4464                           ;main.c: 95: }
  4465                           ;main.c: 96: }
  4466                           ;main.c: 97: return result;
  4467  0222  0020               	movlb	0	; select bank0
  4468  0223  0859               	movf	comparare@result+1,w
  4469  0224  00CF               	movwf	?_comparare+1
  4470  0225  0858               	movf	comparare@result,w
  4471  0226  00CE               	movwf	?_comparare
  4472  0227  0008               	return
  4473  0228                     __end_of_comparare:	
  4474                           
  4475                           	psect	text3
  4476  09CF                     __ptext3:	
  4477 ;; *************** function ___wmul *****************
  4478 ;; Defined at:
  4479 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4482 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  product         2    4[BANK0 ] unsigned int 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  2    0[BANK0 ] unsigned int 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4494 ;;      Params:         0       4       0       0       0       0       0       0
  4495 ;;      Locals:         0       2       0       0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0       0
  4497 ;;      Totals:         0       6       0       0       0       0       0       0
  4498 ;;Total ram usage:        6 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    4
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		_comparare
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function ___wmul
  4510  09CF                     ___wmul:	
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4514  09CF  0020               	movlb	0	; select bank0
  4515  09D0  01A4               	clrf	___wmul@product
  4516  09D1  01A5               	clrf	___wmul@product+1
  4517  09D2                     l3248:	
  4518  09D2  1C20               	btfss	___wmul@multiplier,0
  4519  09D3  29D8               	goto	l902
  4520  09D4  0822               	movf	___wmul@multiplicand,w
  4521  09D5  07A4               	addwf	___wmul@product,f
  4522  09D6  0823               	movf	___wmul@multiplicand+1,w
  4523  09D7  3DA5               	addwfc	___wmul@product+1,f
  4524  09D8                     l902:	
  4525  09D8  3001               	movlw	1
  4526  09D9                     u3065:	
  4527  09D9  35A2               	lslf	___wmul@multiplicand,f
  4528  09DA  0DA3               	rlf	___wmul@multiplicand+1,f
  4529  09DB  0B89               	decfsz	9,f
  4530  09DC  29D9               	goto	u3065
  4531  09DD  3001               	movlw	1
  4532  09DE                     u3075:	
  4533  09DE  36A1               	lsrf	___wmul@multiplier+1,f
  4534  09DF  0CA0               	rrf	___wmul@multiplier,f
  4535  09E0  0B89               	decfsz	9,f
  4536  09E1  29DE               	goto	u3075
  4537  09E2  0820               	movf	___wmul@multiplier,w
  4538  09E3  0421               	iorwf	___wmul@multiplier+1,w
  4539  09E4  1D03               	btfss	3,2
  4540  09E5  29D2               	goto	l3248
  4541  09E6  0825               	movf	___wmul@product+1,w
  4542  09E7  00A1               	movwf	?___wmul+1
  4543  09E8  0824               	movf	___wmul@product,w
  4544  09E9  00A0               	movwf	?___wmul
  4545  09EA  0008               	return
  4546  09EB                     __end_of___wmul:	
  4547                           
  4548                           	psect	text4
  4549  093D                     __ptext4:	
  4550 ;; *************** function ___lwtoft *****************
  4551 ;; Defined at:
  4552 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  c               2    8[BANK0 ] unsigned int 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  3    8[BANK0 ] float 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4566 ;;      Params:         0       3       0       0       0       0       0       0
  4567 ;;      Locals:         0       0       0       0       0       0       0       0
  4568 ;;      Temps:          0       1       0       0       0       0       0       0
  4569 ;;      Totals:         0       4       0       0       0       0       0       0
  4570 ;;Total ram usage:        4 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    5
  4573 ;; This function calls:
  4574 ;;		___ftpack
  4575 ;; This function is called by:
  4576 ;;		_comparare
  4577 ;;		_main
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function ___lwtoft
  4583  093D                     ___lwtoft:	
  4584                           
  4585                           ;incstack = 0
  4586                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4587  093D  0020               	movlb	0	; select bank0
  4588  093E  0828               	movf	___lwtoft@c,w
  4589  093F  00A0               	movwf	___ftpack@arg
  4590  0940  0829               	movf	___lwtoft@c+1,w
  4591  0941  00A1               	movwf	___ftpack@arg+1
  4592  0942  01A2               	clrf	___ftpack@arg+2
  4593  0943  308E               	movlw	142
  4594  0944  00AB               	movwf	??___lwtoft
  4595  0945  082B               	movf	??___lwtoft,w
  4596  0946  00A3               	movwf	___ftpack@exp
  4597  0947  01A4               	clrf	___ftpack@sign
  4598  0948  318D  2588         	fcall	___ftpack
  4599  094A  0020               	movlb	0	; select bank0
  4600  094B  0820               	movf	?___ftpack,w
  4601  094C  00A8               	movwf	?___lwtoft
  4602  094D  0821               	movf	?___ftpack+1,w
  4603  094E  00A9               	movwf	?___lwtoft+1
  4604  094F  0822               	movf	?___ftpack+2,w
  4605  0950  00AA               	movwf	?___lwtoft+2
  4606  0951  0008               	return
  4607  0952                     __end_of___lwtoft:	
  4608                           
  4609                           	psect	text5
  4610  08DA                     __ptext5:	
  4611 ;; *************** function ___ftneg *****************
  4612 ;; Defined at:
  4613 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  f1              3   30[BANK0 ] float 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  3   30[BANK0 ] float 
  4620 ;; Registers used:
  4621 ;;		wreg
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4627 ;;      Params:         0       3       0       0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0
  4630 ;;      Totals:         0       3       0       0       0       0       0       0
  4631 ;;Total ram usage:        3 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    4
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_comparare
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function ___ftneg
  4643  08DA                     ___ftneg:	
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in ___ftneg: [wreg]
  4647  08DA  0020               	movlb	0	; select bank0
  4648  08DB  0840               	movf	___ftneg@f1+2,w
  4649  08DC  043F               	iorwf	___ftneg@f1+1,w
  4650  08DD  043E               	iorwf	___ftneg@f1,w
  4651  08DE  1903               	skipnz
  4652  08DF  0008               	return
  4653  08E0  3080               	movlw	128
  4654  08E1  06C0               	xorwf	___ftneg@f1+2,f
  4655  08E2  0008               	return
  4656  08E3                     __end_of___ftneg:	
  4657                           
  4658                           	psect	text6
  4659  05E1                     __ptext6:	
  4660 ;; *************** function ___ftmul *****************
  4661 ;; Defined at:
  4662 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  f1              3   14[BANK0 ] float 
  4665 ;;  f2              3   17[BANK0 ] float 
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  4668 ;;  sign            1   29[BANK0 ] unsigned char 
  4669 ;;  cntr            1   28[BANK0 ] unsigned char 
  4670 ;;  exp             1   24[BANK0 ] unsigned char 
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  3   14[BANK0 ] float 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2, status,0, pclath, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4680 ;;      Params:         0       6       0       0       0       0       0       0
  4681 ;;      Locals:         0       6       0       0       0       0       0       0
  4682 ;;      Temps:          0       4       0       0       0       0       0       0
  4683 ;;      Totals:         0      16       0       0       0       0       0       0
  4684 ;;Total ram usage:       16 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:    5
  4687 ;; This function calls:
  4688 ;;		___ftpack
  4689 ;; This function is called by:
  4690 ;;		_comparare
  4691 ;;		_main
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           
  4696                           ;psect for function ___ftmul
  4697  05E1                     ___ftmul:	
  4698                           
  4699                           ;incstack = 0
  4700                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4701  05E1  0020               	movlb	0	; select bank0
  4702  05E2  082E               	movf	___ftmul@f1,w
  4703  05E3  00B4               	movwf	??___ftmul
  4704  05E4  082F               	movf	___ftmul@f1+1,w
  4705  05E5  00B5               	movwf	??___ftmul+1
  4706  05E6  0830               	movf	___ftmul@f1+2,w
  4707  05E7  00B6               	movwf	??___ftmul+2
  4708  05E8  1003               	clrc
  4709  05E9  0D35               	rlf	??___ftmul+1,w
  4710  05EA  0D36               	rlf	??___ftmul+2,w
  4711  05EB  00B7               	movwf	??___ftmul+3
  4712  05EC  0837               	movf	??___ftmul+3,w
  4713  05ED  00B8               	movwf	___ftmul@exp
  4714  05EE  0838               	movf	___ftmul@exp,w
  4715  05EF  1D03               	btfss	3,2
  4716  05F0  2DF8               	goto	l3506
  4717  05F1  3000               	movlw	0
  4718  05F2  00AE               	movwf	?___ftmul
  4719  05F3  3000               	movlw	0
  4720  05F4  00AF               	movwf	?___ftmul+1
  4721  05F5  3000               	movlw	0
  4722  05F6  00B0               	movwf	?___ftmul+2
  4723  05F7  0008               	return
  4724  05F8                     l3506:	
  4725  05F8  0831               	movf	___ftmul@f2,w
  4726  05F9  00B4               	movwf	??___ftmul
  4727  05FA  0832               	movf	___ftmul@f2+1,w
  4728  05FB  00B5               	movwf	??___ftmul+1
  4729  05FC  0833               	movf	___ftmul@f2+2,w
  4730  05FD  00B6               	movwf	??___ftmul+2
  4731  05FE  1003               	clrc
  4732  05FF  0D35               	rlf	??___ftmul+1,w
  4733  0600  0D36               	rlf	??___ftmul+2,w
  4734  0601  00B7               	movwf	??___ftmul+3
  4735  0602  0837               	movf	??___ftmul+3,w
  4736  0603  00BD               	movwf	___ftmul@sign
  4737  0604  083D               	movf	___ftmul@sign,w
  4738  0605  1D03               	btfss	3,2
  4739  0606  2E0E               	goto	l3512
  4740  0607  3000               	movlw	0
  4741  0608  00AE               	movwf	?___ftmul
  4742  0609  3000               	movlw	0
  4743  060A  00AF               	movwf	?___ftmul+1
  4744  060B  3000               	movlw	0
  4745  060C  00B0               	movwf	?___ftmul+2
  4746  060D  0008               	return
  4747  060E                     l3512:	
  4748  060E  083D               	movf	___ftmul@sign,w
  4749  060F  3E7B               	addlw	123
  4750  0610  00B4               	movwf	??___ftmul
  4751  0611  0834               	movf	??___ftmul,w
  4752  0612  07B8               	addwf	___ftmul@exp,f
  4753  0613  082E               	movf	___ftmul@f1,w
  4754  0614  00B4               	movwf	??___ftmul
  4755  0615  082F               	movf	___ftmul@f1+1,w
  4756  0616  00B5               	movwf	??___ftmul+1
  4757  0617  0830               	movf	___ftmul@f1+2,w
  4758  0618  00B6               	movwf	??___ftmul+2
  4759  0619  3010               	movlw	16
  4760  061A                     u3675:	
  4761  061A  36B6               	lsrf	??___ftmul+2,f
  4762  061B  0CB5               	rrf	??___ftmul+1,f
  4763  061C  0CB4               	rrf	??___ftmul,f
  4764  061D  0B89               	decfsz	9,f
  4765  061E  2E1A               	goto	u3675
  4766  061F  0834               	movf	??___ftmul,w
  4767  0620  00B7               	movwf	??___ftmul+3
  4768  0621  0837               	movf	??___ftmul+3,w
  4769  0622  00BD               	movwf	___ftmul@sign
  4770  0623  0831               	movf	___ftmul@f2,w
  4771  0624  00B4               	movwf	??___ftmul
  4772  0625  0832               	movf	___ftmul@f2+1,w
  4773  0626  00B5               	movwf	??___ftmul+1
  4774  0627  0833               	movf	___ftmul@f2+2,w
  4775  0628  00B6               	movwf	??___ftmul+2
  4776  0629  3010               	movlw	16
  4777  062A                     u3685:	
  4778  062A  36B6               	lsrf	??___ftmul+2,f
  4779  062B  0CB5               	rrf	??___ftmul+1,f
  4780  062C  0CB4               	rrf	??___ftmul,f
  4781  062D  0B89               	decfsz	9,f
  4782  062E  2E2A               	goto	u3685
  4783  062F  0834               	movf	??___ftmul,w
  4784  0630  00B7               	movwf	??___ftmul+3
  4785  0631  0837               	movf	??___ftmul+3,w
  4786  0632  06BD               	xorwf	___ftmul@sign,f
  4787  0633  3080               	movlw	128
  4788  0634  00B4               	movwf	??___ftmul
  4789  0635  0834               	movf	??___ftmul,w
  4790  0636  05BD               	andwf	___ftmul@sign,f
  4791  0637  17AF               	bsf	___ftmul@f1+1,7
  4792  0638  17B2               	bsf	___ftmul@f2+1,7
  4793  0639  30FF               	movlw	255
  4794  063A  05B1               	andwf	___ftmul@f2,f
  4795  063B  30FF               	movlw	255
  4796  063C  05B2               	andwf	___ftmul@f2+1,f
  4797  063D  3000               	movlw	0
  4798  063E  05B3               	andwf	___ftmul@f2+2,f
  4799  063F  3000               	movlw	0
  4800  0640  00B9               	movwf	___ftmul@f3_as_product
  4801  0641  3000               	movlw	0
  4802  0642  00BA               	movwf	___ftmul@f3_as_product+1
  4803  0643  3000               	movlw	0
  4804  0644  00BB               	movwf	___ftmul@f3_as_product+2
  4805  0645  3007               	movlw	7
  4806  0646  00B4               	movwf	??___ftmul
  4807  0647  0834               	movf	??___ftmul,w
  4808  0648  00BC               	movwf	___ftmul@cntr
  4809  0649                     l3524:	
  4810  0649  1C2E               	btfss	___ftmul@f1,0
  4811  064A  2E51               	goto	l3528
  4812  064B  0831               	movf	___ftmul@f2,w
  4813  064C  07B9               	addwf	___ftmul@f3_as_product,f
  4814  064D  0832               	movf	___ftmul@f2+1,w
  4815  064E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  4816  064F  0833               	movf	___ftmul@f2+2,w
  4817  0650  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  4818  0651                     l3528:	
  4819  0651  3001               	movlw	1
  4820  0652                     u3705:	
  4821  0652  36B0               	lsrf	___ftmul@f1+2,f
  4822  0653  0CAF               	rrf	___ftmul@f1+1,f
  4823  0654  0CAE               	rrf	___ftmul@f1,f
  4824  0655  0B89               	decfsz	9,f
  4825  0656  2E52               	goto	u3705
  4826  0657  3001               	movlw	1
  4827  0658                     u3715:	
  4828  0658  35B1               	lslf	___ftmul@f2,f
  4829  0659  0DB2               	rlf	___ftmul@f2+1,f
  4830  065A  0DB3               	rlf	___ftmul@f2+2,f
  4831  065B  0B89               	decfsz	9,f
  4832  065C  2E58               	goto	u3715
  4833  065D  3001               	movlw	1
  4834  065E  02BC               	subwf	___ftmul@cntr,f
  4835  065F  1D03               	btfss	3,2
  4836  0660  2E49               	goto	l3524
  4837  0661  3009               	movlw	9
  4838  0662  00B4               	movwf	??___ftmul
  4839  0663  0834               	movf	??___ftmul,w
  4840  0664  00BC               	movwf	___ftmul@cntr
  4841  0665                     l3536:	
  4842  0665  1C2E               	btfss	___ftmul@f1,0
  4843  0666  2E6D               	goto	l3540
  4844  0667  0831               	movf	___ftmul@f2,w
  4845  0668  07B9               	addwf	___ftmul@f3_as_product,f
  4846  0669  0832               	movf	___ftmul@f2+1,w
  4847  066A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  4848  066B  0833               	movf	___ftmul@f2+2,w
  4849  066C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  4850  066D                     l3540:	
  4851  066D  3001               	movlw	1
  4852  066E                     u3745:	
  4853  066E  36B0               	lsrf	___ftmul@f1+2,f
  4854  066F  0CAF               	rrf	___ftmul@f1+1,f
  4855  0670  0CAE               	rrf	___ftmul@f1,f
  4856  0671  0B89               	decfsz	9,f
  4857  0672  2E6E               	goto	u3745
  4858  0673  3001               	movlw	1
  4859  0674                     u3755:	
  4860  0674  36BB               	lsrf	___ftmul@f3_as_product+2,f
  4861  0675  0CBA               	rrf	___ftmul@f3_as_product+1,f
  4862  0676  0CB9               	rrf	___ftmul@f3_as_product,f
  4863  0677  0B89               	decfsz	9,f
  4864  0678  2E74               	goto	u3755
  4865  0679  3001               	movlw	1
  4866  067A  02BC               	subwf	___ftmul@cntr,f
  4867  067B  1D03               	btfss	3,2
  4868  067C  2E65               	goto	l3536
  4869  067D  0839               	movf	___ftmul@f3_as_product,w
  4870  067E  00A0               	movwf	___ftpack@arg
  4871  067F  083A               	movf	___ftmul@f3_as_product+1,w
  4872  0680  00A1               	movwf	___ftpack@arg+1
  4873  0681  083B               	movf	___ftmul@f3_as_product+2,w
  4874  0682  00A2               	movwf	___ftpack@arg+2
  4875  0683  0838               	movf	___ftmul@exp,w
  4876  0684  00B4               	movwf	??___ftmul
  4877  0685  0834               	movf	??___ftmul,w
  4878  0686  00A3               	movwf	___ftpack@exp
  4879  0687  083D               	movf	___ftmul@sign,w
  4880  0688  00B5               	movwf	??___ftmul+1
  4881  0689  0835               	movf	??___ftmul+1,w
  4882  068A  00A4               	movwf	___ftpack@sign
  4883  068B  318D  2588         	fcall	___ftpack
  4884  068D  0020               	movlb	0	; select bank0
  4885  068E  0820               	movf	?___ftpack,w
  4886  068F  00AE               	movwf	?___ftmul
  4887  0690  0821               	movf	?___ftpack+1,w
  4888  0691  00AF               	movwf	?___ftmul+1
  4889  0692  0822               	movf	?___ftpack+2,w
  4890  0693  00B0               	movwf	?___ftmul+2
  4891  0694  0008               	return
  4892  0695                     __end_of___ftmul:	
  4893                           
  4894                           	psect	text7
  4895  0B4E                     __ptext7:	
  4896 ;; *************** function ___ftge *****************
  4897 ;; Defined at:
  4898 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;  ff1             3   14[BANK0 ] float 
  4901 ;;  ff2             3   17[BANK0 ] float 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;		None
  4904 ;; Return value:  Size  Location     Type
  4905 ;;		None               void
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4913 ;;      Params:         0       6       0       0       0       0       0       0
  4914 ;;      Locals:         0       0       0       0       0       0       0       0
  4915 ;;      Temps:          0       3       0       0       0       0       0       0
  4916 ;;      Totals:         0       9       0       0       0       0       0       0
  4917 ;;Total ram usage:        9 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    4
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_comparare
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function ___ftge
  4929  0B4E                     ___ftge:	
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4933  0B4E  0020               	movlb	0	; select bank0
  4934  0B4F  1FB0               	btfss	___ftge@ff1+2,7
  4935  0B50  2B65               	goto	l3484
  4936  0B51  092E               	comf	___ftge@ff1,w
  4937  0B52  00B4               	movwf	??___ftge
  4938  0B53  092F               	comf	___ftge@ff1+1,w
  4939  0B54  00B5               	movwf	??___ftge+1
  4940  0B55  0930               	comf	___ftge@ff1+2,w
  4941  0B56  00B6               	movwf	??___ftge+2
  4942  0B57  0AB4               	incf	??___ftge,f
  4943  0B58  1903               	skipnz
  4944  0B59  0AB5               	incf	??___ftge+1,f
  4945  0B5A  1903               	skipnz
  4946  0B5B  0AB6               	incf	??___ftge+2,f
  4947  0B5C  3000               	movlw	0
  4948  0B5D  0734               	addwf	??___ftge,w
  4949  0B5E  00AE               	movwf	___ftge@ff1
  4950  0B5F  3000               	movlw	0
  4951  0B60  3D35               	addwfc	??___ftge+1,w
  4952  0B61  00AF               	movwf	___ftge@ff1+1
  4953  0B62  3080               	movlw	128
  4954  0B63  3D36               	addwfc	??___ftge+2,w
  4955  0B64  00B0               	movwf	___ftge@ff1+2
  4956  0B65                     l3484:	
  4957  0B65  1FB3               	btfss	___ftge@ff2+2,7
  4958  0B66  2B7B               	goto	l3488
  4959  0B67  0931               	comf	___ftge@ff2,w
  4960  0B68  00B4               	movwf	??___ftge
  4961  0B69  0932               	comf	___ftge@ff2+1,w
  4962  0B6A  00B5               	movwf	??___ftge+1
  4963  0B6B  0933               	comf	___ftge@ff2+2,w
  4964  0B6C  00B6               	movwf	??___ftge+2
  4965  0B6D  0AB4               	incf	??___ftge,f
  4966  0B6E  1903               	skipnz
  4967  0B6F  0AB5               	incf	??___ftge+1,f
  4968  0B70  1903               	skipnz
  4969  0B71  0AB6               	incf	??___ftge+2,f
  4970  0B72  3000               	movlw	0
  4971  0B73  0734               	addwf	??___ftge,w
  4972  0B74  00B1               	movwf	___ftge@ff2
  4973  0B75  3000               	movlw	0
  4974  0B76  3D35               	addwfc	??___ftge+1,w
  4975  0B77  00B2               	movwf	___ftge@ff2+1
  4976  0B78  3080               	movlw	128
  4977  0B79  3D36               	addwfc	??___ftge+2,w
  4978  0B7A  00B3               	movwf	___ftge@ff2+2
  4979  0B7B                     l3488:	
  4980  0B7B  3080               	movlw	128
  4981  0B7C  06B0               	xorwf	___ftge@ff1+2,f
  4982  0B7D  3080               	movlw	128
  4983  0B7E  06B3               	xorwf	___ftge@ff2+2,f
  4984  0B7F  0833               	movf	___ftge@ff2+2,w
  4985  0B80  0230               	subwf	___ftge@ff1+2,w
  4986  0B81  1D03               	skipz
  4987  0B82  0008               	return
  4988  0B83  0832               	movf	___ftge@ff2+1,w
  4989  0B84  022F               	subwf	___ftge@ff1+1,w
  4990  0B85  1D03               	skipz
  4991  0B86  0008               	return
  4992  0B87  0831               	movf	___ftge@ff2,w
  4993  0B88  022E               	subwf	___ftge@ff1,w
  4994  0B89  0008               	return
  4995  0B8A                     __end_of___ftge:	
  4996                           
  4997                           	psect	text8
  4998  0695                     __ptext8:	
  4999 ;; *************** function ___ftdiv *****************
  5000 ;; Defined at:
  5001 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  f2              3   30[BANK0 ] float 
  5004 ;;  f1              3   33[BANK0 ] float 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;  f3              3   41[BANK0 ] float 
  5007 ;;  sign            1   45[BANK0 ] unsigned char 
  5008 ;;  exp             1   44[BANK0 ] unsigned char 
  5009 ;;  cntr            1   40[BANK0 ] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  3   30[BANK0 ] float 
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0, pclath, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5019 ;;      Params:         0       6       0       0       0       0       0       0
  5020 ;;      Locals:         0       6       0       0       0       0       0       0
  5021 ;;      Temps:          0       4       0       0       0       0       0       0
  5022 ;;      Totals:         0      16       0       0       0       0       0       0
  5023 ;;Total ram usage:       16 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    5
  5026 ;; This function calls:
  5027 ;;		___ftpack
  5028 ;; This function is called by:
  5029 ;;		_comparare
  5030 ;;		_main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function ___ftdiv
  5036  0695                     ___ftdiv:	
  5037                           
  5038                           ;incstack = 0
  5039                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5040  0695  0020               	movlb	0	; select bank0
  5041  0696  0841               	movf	___ftdiv@f1,w
  5042  0697  00C4               	movwf	??___ftdiv
  5043  0698  0842               	movf	___ftdiv@f1+1,w
  5044  0699  00C5               	movwf	??___ftdiv+1
  5045  069A  0843               	movf	___ftdiv@f1+2,w
  5046  069B  00C6               	movwf	??___ftdiv+2
  5047  069C  1003               	clrc
  5048  069D  0D45               	rlf	??___ftdiv+1,w
  5049  069E  0D46               	rlf	??___ftdiv+2,w
  5050  069F  00C7               	movwf	??___ftdiv+3
  5051  06A0  0847               	movf	??___ftdiv+3,w
  5052  06A1  00CC               	movwf	___ftdiv@exp
  5053  06A2  084C               	movf	___ftdiv@exp,w
  5054  06A3  1D03               	btfss	3,2
  5055  06A4  2EAC               	goto	l3444
  5056  06A5  3000               	movlw	0
  5057  06A6  00BE               	movwf	?___ftdiv
  5058  06A7  3000               	movlw	0
  5059  06A8  00BF               	movwf	?___ftdiv+1
  5060  06A9  3000               	movlw	0
  5061  06AA  00C0               	movwf	?___ftdiv+2
  5062  06AB  0008               	return
  5063  06AC                     l3444:	
  5064  06AC  083E               	movf	___ftdiv@f2,w
  5065  06AD  00C4               	movwf	??___ftdiv
  5066  06AE  083F               	movf	___ftdiv@f2+1,w
  5067  06AF  00C5               	movwf	??___ftdiv+1
  5068  06B0  0840               	movf	___ftdiv@f2+2,w
  5069  06B1  00C6               	movwf	??___ftdiv+2
  5070  06B2  1003               	clrc
  5071  06B3  0D45               	rlf	??___ftdiv+1,w
  5072  06B4  0D46               	rlf	??___ftdiv+2,w
  5073  06B5  00C7               	movwf	??___ftdiv+3
  5074  06B6  0847               	movf	??___ftdiv+3,w
  5075  06B7  00CD               	movwf	___ftdiv@sign
  5076  06B8  084D               	movf	___ftdiv@sign,w
  5077  06B9  1D03               	btfss	3,2
  5078  06BA  2EC2               	goto	l3450
  5079  06BB  3000               	movlw	0
  5080  06BC  00BE               	movwf	?___ftdiv
  5081  06BD  3000               	movlw	0
  5082  06BE  00BF               	movwf	?___ftdiv+1
  5083  06BF  3000               	movlw	0
  5084  06C0  00C0               	movwf	?___ftdiv+2
  5085  06C1  0008               	return
  5086  06C2                     l3450:	
  5087  06C2  3000               	movlw	0
  5088  06C3  00C9               	movwf	___ftdiv@f3
  5089  06C4  3000               	movlw	0
  5090  06C5  00CA               	movwf	___ftdiv@f3+1
  5091  06C6  3000               	movlw	0
  5092  06C7  00CB               	movwf	___ftdiv@f3+2
  5093  06C8  3089               	movlw	137
  5094  06C9  074D               	addwf	___ftdiv@sign,w
  5095  06CA  00C4               	movwf	??___ftdiv
  5096  06CB  0844               	movf	??___ftdiv,w
  5097  06CC  02CC               	subwf	___ftdiv@exp,f
  5098  06CD  0841               	movf	___ftdiv@f1,w
  5099  06CE  00C4               	movwf	??___ftdiv
  5100  06CF  0842               	movf	___ftdiv@f1+1,w
  5101  06D0  00C5               	movwf	??___ftdiv+1
  5102  06D1  0843               	movf	___ftdiv@f1+2,w
  5103  06D2  00C6               	movwf	??___ftdiv+2
  5104  06D3  3010               	movlw	16
  5105  06D4                     u3565:	
  5106  06D4  36C6               	lsrf	??___ftdiv+2,f
  5107  06D5  0CC5               	rrf	??___ftdiv+1,f
  5108  06D6  0CC4               	rrf	??___ftdiv,f
  5109  06D7  0B89               	decfsz	9,f
  5110  06D8  2ED4               	goto	u3565
  5111  06D9  0844               	movf	??___ftdiv,w
  5112  06DA  00C7               	movwf	??___ftdiv+3
  5113  06DB  0847               	movf	??___ftdiv+3,w
  5114  06DC  00CD               	movwf	___ftdiv@sign
  5115  06DD  083E               	movf	___ftdiv@f2,w
  5116  06DE  00C4               	movwf	??___ftdiv
  5117  06DF  083F               	movf	___ftdiv@f2+1,w
  5118  06E0  00C5               	movwf	??___ftdiv+1
  5119  06E1  0840               	movf	___ftdiv@f2+2,w
  5120  06E2  00C6               	movwf	??___ftdiv+2
  5121  06E3  3010               	movlw	16
  5122  06E4                     u3575:	
  5123  06E4  36C6               	lsrf	??___ftdiv+2,f
  5124  06E5  0CC5               	rrf	??___ftdiv+1,f
  5125  06E6  0CC4               	rrf	??___ftdiv,f
  5126  06E7  0B89               	decfsz	9,f
  5127  06E8  2EE4               	goto	u3575
  5128  06E9  0844               	movf	??___ftdiv,w
  5129  06EA  00C7               	movwf	??___ftdiv+3
  5130  06EB  0847               	movf	??___ftdiv+3,w
  5131  06EC  06CD               	xorwf	___ftdiv@sign,f
  5132  06ED  3080               	movlw	128
  5133  06EE  00C4               	movwf	??___ftdiv
  5134  06EF  0844               	movf	??___ftdiv,w
  5135  06F0  05CD               	andwf	___ftdiv@sign,f
  5136  06F1  17C2               	bsf	___ftdiv@f1+1,7
  5137  06F2  30FF               	movlw	255
  5138  06F3  05C1               	andwf	___ftdiv@f1,f
  5139  06F4  30FF               	movlw	255
  5140  06F5  05C2               	andwf	___ftdiv@f1+1,f
  5141  06F6  3000               	movlw	0
  5142  06F7  05C3               	andwf	___ftdiv@f1+2,f
  5143  06F8  17BF               	bsf	___ftdiv@f2+1,7
  5144  06F9  30FF               	movlw	255
  5145  06FA  05BE               	andwf	___ftdiv@f2,f
  5146  06FB  30FF               	movlw	255
  5147  06FC  05BF               	andwf	___ftdiv@f2+1,f
  5148  06FD  3000               	movlw	0
  5149  06FE  05C0               	andwf	___ftdiv@f2+2,f
  5150  06FF  3018               	movlw	24
  5151  0700  00C4               	movwf	??___ftdiv
  5152  0701  0844               	movf	??___ftdiv,w
  5153  0702  00C8               	movwf	___ftdiv@cntr
  5154  0703                     l3464:	
  5155  0703  3001               	movlw	1
  5156  0704                     u3585:	
  5157  0704  35C9               	lslf	___ftdiv@f3,f
  5158  0705  0DCA               	rlf	___ftdiv@f3+1,f
  5159  0706  0DCB               	rlf	___ftdiv@f3+2,f
  5160  0707  0B89               	decfsz	9,f
  5161  0708  2F04               	goto	u3585
  5162  0709  0840               	movf	___ftdiv@f2+2,w
  5163  070A  0243               	subwf	___ftdiv@f1+2,w
  5164  070B  1D03               	skipz
  5165  070C  2F13               	goto	u3595
  5166  070D  083F               	movf	___ftdiv@f2+1,w
  5167  070E  0242               	subwf	___ftdiv@f1+1,w
  5168  070F  1D03               	skipz
  5169  0710  2F13               	goto	u3595
  5170  0711  083E               	movf	___ftdiv@f2,w
  5171  0712  0241               	subwf	___ftdiv@f1,w
  5172  0713                     u3595:	
  5173  0713  1C03               	skipc
  5174  0714  2F1C               	goto	l3472
  5175  0715  083E               	movf	___ftdiv@f2,w
  5176  0716  02C1               	subwf	___ftdiv@f1,f
  5177  0717  083F               	movf	___ftdiv@f2+1,w
  5178  0718  3BC2               	subwfb	___ftdiv@f1+1,f
  5179  0719  0840               	movf	___ftdiv@f2+2,w
  5180  071A  3BC3               	subwfb	___ftdiv@f1+2,f
  5181  071B  1449               	bsf	___ftdiv@f3,0
  5182  071C                     l3472:	
  5183  071C  3001               	movlw	1
  5184  071D                     u3605:	
  5185  071D  35C1               	lslf	___ftdiv@f1,f
  5186  071E  0DC2               	rlf	___ftdiv@f1+1,f
  5187  071F  0DC3               	rlf	___ftdiv@f1+2,f
  5188  0720  0B89               	decfsz	9,f
  5189  0721  2F1D               	goto	u3605
  5190  0722  3001               	movlw	1
  5191  0723  02C8               	subwf	___ftdiv@cntr,f
  5192  0724  1D03               	btfss	3,2
  5193  0725  2F03               	goto	l3464
  5194  0726  0849               	movf	___ftdiv@f3,w
  5195  0727  00A0               	movwf	___ftpack@arg
  5196  0728  084A               	movf	___ftdiv@f3+1,w
  5197  0729  00A1               	movwf	___ftpack@arg+1
  5198  072A  084B               	movf	___ftdiv@f3+2,w
  5199  072B  00A2               	movwf	___ftpack@arg+2
  5200  072C  084C               	movf	___ftdiv@exp,w
  5201  072D  00C4               	movwf	??___ftdiv
  5202  072E  0844               	movf	??___ftdiv,w
  5203  072F  00A3               	movwf	___ftpack@exp
  5204  0730  084D               	movf	___ftdiv@sign,w
  5205  0731  00C5               	movwf	??___ftdiv+1
  5206  0732  0845               	movf	??___ftdiv+1,w
  5207  0733  00A4               	movwf	___ftpack@sign
  5208  0734  318D  2588         	fcall	___ftpack
  5209  0736  0020               	movlb	0	; select bank0
  5210  0737  0820               	movf	?___ftpack,w
  5211  0738  00BE               	movwf	?___ftdiv
  5212  0739  0821               	movf	?___ftpack+1,w
  5213  073A  00BF               	movwf	?___ftdiv+1
  5214  073B  0822               	movf	?___ftpack+2,w
  5215  073C  00C0               	movwf	?___ftdiv+2
  5216  073D  0008               	return
  5217  073E                     __end_of___ftdiv:	
  5218                           
  5219                           	psect	text9
  5220  035A                     __ptext9:	
  5221 ;; *************** function ___ftadd *****************
  5222 ;; Defined at:
  5223 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  f1              3   33[BANK0 ] float 
  5226 ;;  f2              3   36[BANK0 ] float 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  exp1            1   45[BANK0 ] unsigned char 
  5229 ;;  exp2            1   44[BANK0 ] unsigned char 
  5230 ;;  sign            1   43[BANK0 ] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  3   33[BANK0 ] float 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5240 ;;      Params:         0       6       0       0       0       0       0       0
  5241 ;;      Locals:         0       3       0       0       0       0       0       0
  5242 ;;      Temps:          0       4       0       0       0       0       0       0
  5243 ;;      Totals:         0      13       0       0       0       0       0       0
  5244 ;;Total ram usage:       13 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    5
  5247 ;; This function calls:
  5248 ;;		___ftpack
  5249 ;; This function is called by:
  5250 ;;		_comparare
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           
  5255                           ;psect for function ___ftadd
  5256  035A                     ___ftadd:	
  5257                           
  5258                           ;incstack = 0
  5259                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5260  035A  0020               	movlb	0	; select bank0
  5261  035B  0841               	movf	___ftadd@f1,w
  5262  035C  00C7               	movwf	??___ftadd
  5263  035D  0842               	movf	___ftadd@f1+1,w
  5264  035E  00C8               	movwf	??___ftadd+1
  5265  035F  0843               	movf	___ftadd@f1+2,w
  5266  0360  00C9               	movwf	??___ftadd+2
  5267  0361  1003               	clrc
  5268  0362  0D48               	rlf	??___ftadd+1,w
  5269  0363  0D49               	rlf	??___ftadd+2,w
  5270  0364  00CA               	movwf	??___ftadd+3
  5271  0365  084A               	movf	??___ftadd+3,w
  5272  0366  00CD               	movwf	___ftadd@exp1
  5273  0367  0844               	movf	___ftadd@f2,w
  5274  0368  00C7               	movwf	??___ftadd
  5275  0369  0845               	movf	___ftadd@f2+1,w
  5276  036A  00C8               	movwf	??___ftadd+1
  5277  036B  0846               	movf	___ftadd@f2+2,w
  5278  036C  00C9               	movwf	??___ftadd+2
  5279  036D  1003               	clrc
  5280  036E  0D48               	rlf	??___ftadd+1,w
  5281  036F  0D49               	rlf	??___ftadd+2,w
  5282  0370  00CA               	movwf	??___ftadd+3
  5283  0371  084A               	movf	??___ftadd+3,w
  5284  0372  00CC               	movwf	___ftadd@exp2
  5285  0373  084D               	movf	___ftadd@exp1,w
  5286  0374  1903               	btfsc	3,2
  5287  0375  2B82               	goto	l3374
  5288  0376  084C               	movf	___ftadd@exp2,w
  5289  0377  024D               	subwf	___ftadd@exp1,w
  5290  0378  1803               	skipnc
  5291  0379  2B89               	goto	l3378
  5292  037A  034D               	decf	___ftadd@exp1,w
  5293  037B  3AFF               	xorlw	255
  5294  037C  074C               	addwf	___ftadd@exp2,w
  5295  037D  00C7               	movwf	??___ftadd
  5296  037E  3019               	movlw	25
  5297  037F  0247               	subwf	??___ftadd,w
  5298  0380  1C03               	skipc
  5299  0381  2B89               	goto	l3378
  5300  0382                     l3374:	
  5301  0382  0844               	movf	___ftadd@f2,w
  5302  0383  00C1               	movwf	?___ftadd
  5303  0384  0845               	movf	___ftadd@f2+1,w
  5304  0385  00C2               	movwf	?___ftadd+1
  5305  0386  0846               	movf	___ftadd@f2+2,w
  5306  0387  00C3               	movwf	?___ftadd+2
  5307  0388  0008               	return
  5308  0389                     l3378:	
  5309  0389  084C               	movf	___ftadd@exp2,w
  5310  038A  1903               	btfsc	3,2
  5311  038B  0008               	return
  5312  038C  084D               	movf	___ftadd@exp1,w
  5313  038D  024C               	subwf	___ftadd@exp2,w
  5314  038E  1803               	skipnc
  5315  038F  2B98               	goto	l3384
  5316  0390  034C               	decf	___ftadd@exp2,w
  5317  0391  3AFF               	xorlw	255
  5318  0392  074D               	addwf	___ftadd@exp1,w
  5319  0393  00C7               	movwf	??___ftadd
  5320  0394  3019               	movlw	25
  5321  0395  0247               	subwf	??___ftadd,w
  5322  0396  1803               	btfsc	3,0
  5323  0397  0008               	return
  5324  0398                     l3384:	
  5325  0398  3006               	movlw	6
  5326  0399  00C7               	movwf	??___ftadd
  5327  039A  0847               	movf	??___ftadd,w
  5328  039B  00CB               	movwf	___ftadd@sign
  5329  039C  1BC3               	btfsc	___ftadd@f1+2,7
  5330  039D  17CB               	bsf	___ftadd@sign,7
  5331  039E  1BC6               	btfsc	___ftadd@f2+2,7
  5332  039F  174B               	bsf	___ftadd@sign,6
  5333  03A0  17C2               	bsf	___ftadd@f1+1,7
  5334  03A1  30FF               	movlw	255
  5335  03A2  05C1               	andwf	___ftadd@f1,f
  5336  03A3  30FF               	movlw	255
  5337  03A4  05C2               	andwf	___ftadd@f1+1,f
  5338  03A5  3000               	movlw	0
  5339  03A6  05C3               	andwf	___ftadd@f1+2,f
  5340  03A7  17C5               	bsf	___ftadd@f2+1,7
  5341  03A8  30FF               	movlw	255
  5342  03A9  05C4               	andwf	___ftadd@f2,f
  5343  03AA  30FF               	movlw	255
  5344  03AB  05C5               	andwf	___ftadd@f2+1,f
  5345  03AC  3000               	movlw	0
  5346  03AD  05C6               	andwf	___ftadd@f2+2,f
  5347  03AE  084C               	movf	___ftadd@exp2,w
  5348  03AF  024D               	subwf	___ftadd@exp1,w
  5349  03B0  1803               	skipnc
  5350  03B1  2BD4               	goto	l3406
  5351  03B2                     l3396:	
  5352  03B2  3001               	movlw	1
  5353  03B3                     u3405:	
  5354  03B3  35C4               	lslf	___ftadd@f2,f
  5355  03B4  0DC5               	rlf	___ftadd@f2+1,f
  5356  03B5  0DC6               	rlf	___ftadd@f2+2,f
  5357  03B6  0B89               	decfsz	9,f
  5358  03B7  2BB3               	goto	u3405
  5359  03B8  3001               	movlw	1
  5360  03B9  02CC               	subwf	___ftadd@exp2,f
  5361  03BA  084C               	movf	___ftadd@exp2,w
  5362  03BB  064D               	xorwf	___ftadd@exp1,w
  5363  03BC  1903               	skipnz
  5364  03BD  2BCF               	goto	l3404
  5365  03BE  3001               	movlw	1
  5366  03BF  02CB               	subwf	___ftadd@sign,f
  5367  03C0  084B               	movf	___ftadd@sign,w
  5368  03C1  3907               	andlw	7
  5369  03C2  1903               	btfsc	3,2
  5370  03C3  2BCF               	goto	l3404
  5371  03C4  2BB2               	goto	l3396
  5372  03C5                     l3402:	
  5373  03C5  3001               	movlw	1
  5374  03C6                     u3435:	
  5375  03C6  36C3               	lsrf	___ftadd@f1+2,f
  5376  03C7  0CC2               	rrf	___ftadd@f1+1,f
  5377  03C8  0CC1               	rrf	___ftadd@f1,f
  5378  03C9  0B89               	decfsz	9,f
  5379  03CA  2BC6               	goto	u3435
  5380  03CB  3001               	movlw	1
  5381  03CC  00C7               	movwf	??___ftadd
  5382  03CD  0847               	movf	??___ftadd,w
  5383  03CE  07CD               	addwf	___ftadd@exp1,f
  5384  03CF                     l3404:	
  5385  03CF  084D               	movf	___ftadd@exp1,w
  5386  03D0  064C               	xorwf	___ftadd@exp2,w
  5387  03D1  1903               	btfsc	3,2
  5388  03D2  2BF9               	goto	l1094
  5389  03D3  2BC5               	goto	l3402
  5390  03D4                     l3406:	
  5391  03D4  084D               	movf	___ftadd@exp1,w
  5392  03D5  024C               	subwf	___ftadd@exp2,w
  5393  03D6  1803               	skipnc
  5394  03D7  2BF9               	goto	l1094
  5395  03D8                     l3408:	
  5396  03D8  3001               	movlw	1
  5397  03D9                     u3465:	
  5398  03D9  35C1               	lslf	___ftadd@f1,f
  5399  03DA  0DC2               	rlf	___ftadd@f1+1,f
  5400  03DB  0DC3               	rlf	___ftadd@f1+2,f
  5401  03DC  0B89               	decfsz	9,f
  5402  03DD  2BD9               	goto	u3465
  5403  03DE  3001               	movlw	1
  5404  03DF  02CD               	subwf	___ftadd@exp1,f
  5405  03E0  084C               	movf	___ftadd@exp2,w
  5406  03E1  064D               	xorwf	___ftadd@exp1,w
  5407  03E2  1903               	skipnz
  5408  03E3  2BF5               	goto	l3416
  5409  03E4  3001               	movlw	1
  5410  03E5  02CB               	subwf	___ftadd@sign,f
  5411  03E6  084B               	movf	___ftadd@sign,w
  5412  03E7  3907               	andlw	7
  5413  03E8  1903               	btfsc	3,2
  5414  03E9  2BF5               	goto	l3416
  5415  03EA  2BD8               	goto	l3408
  5416  03EB                     l3414:	
  5417  03EB  3001               	movlw	1
  5418  03EC                     u3495:	
  5419  03EC  36C6               	lsrf	___ftadd@f2+2,f
  5420  03ED  0CC5               	rrf	___ftadd@f2+1,f
  5421  03EE  0CC4               	rrf	___ftadd@f2,f
  5422  03EF  0B89               	decfsz	9,f
  5423  03F0  2BEC               	goto	u3495
  5424  03F1  3001               	movlw	1
  5425  03F2  00C7               	movwf	??___ftadd
  5426  03F3  0847               	movf	??___ftadd,w
  5427  03F4  07CC               	addwf	___ftadd@exp2,f
  5428  03F5                     l3416:	
  5429  03F5  084D               	movf	___ftadd@exp1,w
  5430  03F6  064C               	xorwf	___ftadd@exp2,w
  5431  03F7  1D03               	skipz
  5432  03F8  2BEB               	goto	l3414
  5433  03F9                     l1094:	
  5434  03F9  1FCB               	btfss	___ftadd@sign,7
  5435  03FA  2C0B               	goto	l3420
  5436  03FB  30FF               	movlw	255
  5437  03FC  06C1               	xorwf	___ftadd@f1,f
  5438  03FD  30FF               	movlw	255
  5439  03FE  06C2               	xorwf	___ftadd@f1+1,f
  5440  03FF  30FF               	movlw	255
  5441  0400  06C3               	xorwf	___ftadd@f1+2,f
  5442  0401  3001               	movlw	1
  5443  0402  07C1               	addwf	___ftadd@f1,f
  5444  0403  3000               	movlw	0
  5445  0404  1803               	skipnc
  5446  0405  3001               	movlw	1
  5447  0406  07C2               	addwf	___ftadd@f1+1,f
  5448  0407  3000               	movlw	0
  5449  0408  1803               	skipnc
  5450  0409  3001               	movlw	1
  5451  040A  07C3               	addwf	___ftadd@f1+2,f
  5452  040B                     l3420:	
  5453  040B  1F4B               	btfss	___ftadd@sign,6
  5454  040C  2C1D               	goto	l3424
  5455  040D  30FF               	movlw	255
  5456  040E  06C4               	xorwf	___ftadd@f2,f
  5457  040F  30FF               	movlw	255
  5458  0410  06C5               	xorwf	___ftadd@f2+1,f
  5459  0411  30FF               	movlw	255
  5460  0412  06C6               	xorwf	___ftadd@f2+2,f
  5461  0413  3001               	movlw	1
  5462  0414  07C4               	addwf	___ftadd@f2,f
  5463  0415  3000               	movlw	0
  5464  0416  1803               	skipnc
  5465  0417  3001               	movlw	1
  5466  0418  07C5               	addwf	___ftadd@f2+1,f
  5467  0419  3000               	movlw	0
  5468  041A  1803               	skipnc
  5469  041B  3001               	movlw	1
  5470  041C  07C6               	addwf	___ftadd@f2+2,f
  5471  041D                     l3424:	
  5472  041D  01CB               	clrf	___ftadd@sign
  5473  041E  0841               	movf	___ftadd@f1,w
  5474  041F  07C4               	addwf	___ftadd@f2,f
  5475  0420  0842               	movf	___ftadd@f1+1,w
  5476  0421  3DC5               	addwfc	___ftadd@f2+1,f
  5477  0422  0843               	movf	___ftadd@f1+2,w
  5478  0423  3DC6               	addwfc	___ftadd@f2+2,f
  5479  0424  1FC6               	btfss	___ftadd@f2+2,7
  5480  0425  2C38               	goto	l3434
  5481  0426  30FF               	movlw	255
  5482  0427  06C4               	xorwf	___ftadd@f2,f
  5483  0428  30FF               	movlw	255
  5484  0429  06C5               	xorwf	___ftadd@f2+1,f
  5485  042A  30FF               	movlw	255
  5486  042B  06C6               	xorwf	___ftadd@f2+2,f
  5487  042C  3001               	movlw	1
  5488  042D  07C4               	addwf	___ftadd@f2,f
  5489  042E  3000               	movlw	0
  5490  042F  1803               	skipnc
  5491  0430  3001               	movlw	1
  5492  0431  07C5               	addwf	___ftadd@f2+1,f
  5493  0432  3000               	movlw	0
  5494  0433  1803               	skipnc
  5495  0434  3001               	movlw	1
  5496  0435  07C6               	addwf	___ftadd@f2+2,f
  5497  0436  01CB               	clrf	___ftadd@sign
  5498  0437  0ACB               	incf	___ftadd@sign,f
  5499  0438                     l3434:	
  5500  0438  0844               	movf	___ftadd@f2,w
  5501  0439  00A0               	movwf	___ftpack@arg
  5502  043A  0845               	movf	___ftadd@f2+1,w
  5503  043B  00A1               	movwf	___ftpack@arg+1
  5504  043C  0846               	movf	___ftadd@f2+2,w
  5505  043D  00A2               	movwf	___ftpack@arg+2
  5506  043E  084D               	movf	___ftadd@exp1,w
  5507  043F  00C7               	movwf	??___ftadd
  5508  0440  0847               	movf	??___ftadd,w
  5509  0441  00A3               	movwf	___ftpack@exp
  5510  0442  084B               	movf	___ftadd@sign,w
  5511  0443  00C8               	movwf	??___ftadd+1
  5512  0444  0848               	movf	??___ftadd+1,w
  5513  0445  00A4               	movwf	___ftpack@sign
  5514  0446  318D  2588         	fcall	___ftpack
  5515  0448  0020               	movlb	0	; select bank0
  5516  0449  0820               	movf	?___ftpack,w
  5517  044A  00C1               	movwf	?___ftadd
  5518  044B  0821               	movf	?___ftpack+1,w
  5519  044C  00C2               	movwf	?___ftadd+1
  5520  044D  0822               	movf	?___ftpack+2,w
  5521  044E  00C3               	movwf	?___ftadd+2
  5522  044F  0008               	return
  5523  0450                     __end_of___ftadd:	
  5524                           
  5525                           	psect	text10
  5526  0917                     __ptext10:	
  5527 ;; *************** function ___bmul *****************
  5528 ;; Defined at:
  5529 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  multiplier      1    wreg     unsigned char 
  5532 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  multiplier      1    3[BANK0 ] unsigned char 
  5535 ;;  product         1    2[BANK0 ] unsigned char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      unsigned char 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5545 ;;      Params:         0       1       0       0       0       0       0       0
  5546 ;;      Locals:         0       2       0       0       0       0       0       0
  5547 ;;      Temps:          0       1       0       0       0       0       0       0
  5548 ;;      Totals:         0       4       0       0       0       0       0       0
  5549 ;;Total ram usage:        4 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    4
  5552 ;; This function calls:
  5553 ;;		Nothing
  5554 ;; This function is called by:
  5555 ;;		_comparare
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function ___bmul
  5561  0917                     ___bmul:	
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5565                           ;___bmul@multiplier stored from wreg
  5566  0917  0020               	movlb	0	; select bank0
  5567  0918  00A3               	movwf	___bmul@multiplier
  5568  0919  01A2               	clrf	___bmul@product
  5569  091A                     l3262:	
  5570  091A  1C23               	btfss	___bmul@multiplier,0
  5571  091B  2920               	goto	l3266
  5572  091C  0820               	movf	___bmul@multiplicand,w
  5573  091D  00A1               	movwf	??___bmul
  5574  091E  0821               	movf	??___bmul,w
  5575  091F  07A2               	addwf	___bmul@product,f
  5576  0920                     l3266:	
  5577  0920  1003               	clrc
  5578  0921  0DA0               	rlf	___bmul@multiplicand,f
  5579  0922  1003               	clrc
  5580  0923  0CA3               	rrf	___bmul@multiplier,f
  5581  0924  0823               	movf	___bmul@multiplier,w
  5582  0925  1D03               	btfss	3,2
  5583  0926  291A               	goto	l3262
  5584  0927  0822               	movf	___bmul@product,w
  5585  0928  0008               	return
  5586  0929                     __end_of___bmul:	
  5587                           
  5588                           	psect	text11
  5589  0A45                     __ptext11:	
  5590 ;; *************** function ___awtoft *****************
  5591 ;; Defined at:
  5592 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  c               2    8[BANK0 ] int 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  sign            1   13[BANK0 ] unsigned char 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  3    8[BANK0 ] float 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5606 ;;      Params:         0       3       0       0       0       0       0       0
  5607 ;;      Locals:         0       1       0       0       0       0       0       0
  5608 ;;      Temps:          0       2       0       0       0       0       0       0
  5609 ;;      Totals:         0       6       0       0       0       0       0       0
  5610 ;;Total ram usage:        6 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    5
  5613 ;; This function calls:
  5614 ;;		___ftpack
  5615 ;; This function is called by:
  5616 ;;		_comparare
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function ___awtoft
  5622  0A45                     ___awtoft:	
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5626  0A45  0020               	movlb	0	; select bank0
  5627  0A46  01AD               	clrf	___awtoft@sign
  5628  0A47  1FA9               	btfss	___awtoft@c+1,7
  5629  0A48  2A50               	goto	l3364
  5630  0A49  09A8               	comf	___awtoft@c,f
  5631  0A4A  09A9               	comf	___awtoft@c+1,f
  5632  0A4B  0AA8               	incf	___awtoft@c,f
  5633  0A4C  1903               	skipnz
  5634  0A4D  0AA9               	incf	___awtoft@c+1,f
  5635  0A4E  01AD               	clrf	___awtoft@sign
  5636  0A4F  0AAD               	incf	___awtoft@sign,f
  5637  0A50                     l3364:	
  5638  0A50  0828               	movf	___awtoft@c,w
  5639  0A51  00A0               	movwf	___ftpack@arg
  5640  0A52  0829               	movf	___awtoft@c+1,w
  5641  0A53  00A1               	movwf	___ftpack@arg+1
  5642  0A54  01A2               	clrf	___ftpack@arg+2
  5643  0A55  308E               	movlw	142
  5644  0A56  00AB               	movwf	??___awtoft
  5645  0A57  082B               	movf	??___awtoft,w
  5646  0A58  00A3               	movwf	___ftpack@exp
  5647  0A59  082D               	movf	___awtoft@sign,w
  5648  0A5A  00AC               	movwf	??___awtoft+1
  5649  0A5B  082C               	movf	??___awtoft+1,w
  5650  0A5C  00A4               	movwf	___ftpack@sign
  5651  0A5D  318D  2588         	fcall	___ftpack
  5652  0A5F  0020               	movlb	0	; select bank0
  5653  0A60  0820               	movf	?___ftpack,w
  5654  0A61  00A8               	movwf	?___awtoft
  5655  0A62  0821               	movf	?___ftpack+1,w
  5656  0A63  00A9               	movwf	?___awtoft+1
  5657  0A64  0822               	movf	?___ftpack+2,w
  5658  0A65  00AA               	movwf	?___awtoft+2
  5659  0A66  0008               	return
  5660  0A67                     __end_of___awtoft:	
  5661                           
  5662                           	psect	text12
  5663  0D88                     __ptext12:	
  5664 ;; *************** function ___ftpack *****************
  5665 ;; Defined at:
  5666 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  arg             3    0[BANK0 ] unsigned um
  5669 ;;  exp             1    3[BANK0 ] unsigned char 
  5670 ;;  sign            1    4[BANK0 ] unsigned char 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;		None
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  3    0[BANK0 ] float 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5682 ;;      Params:         0       5       0       0       0       0       0       0
  5683 ;;      Locals:         0       0       0       0       0       0       0       0
  5684 ;;      Temps:          0       3       0       0       0       0       0       0
  5685 ;;      Totals:         0       8       0       0       0       0       0       0
  5686 ;;Total ram usage:        8 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    4
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		___awtoft
  5693 ;;		___ftadd
  5694 ;;		___ftdiv
  5695 ;;		___ftmul
  5696 ;;		___lwtoft
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function ___ftpack
  5702  0D88                     ___ftpack:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5706  0D88  0020               	movlb	0	; select bank0
  5707  0D89  0823               	movf	___ftpack@exp,w
  5708  0D8A  1903               	btfsc	3,2
  5709  0D8B  2D91               	goto	l2910
  5710  0D8C  0822               	movf	___ftpack@arg+2,w
  5711  0D8D  0421               	iorwf	___ftpack@arg+1,w
  5712  0D8E  0420               	iorwf	___ftpack@arg,w
  5713  0D8F  1D03               	skipz
  5714  0D90  2DA2               	goto	l2916
  5715  0D91                     l2910:	
  5716  0D91  3000               	movlw	0
  5717  0D92  00A0               	movwf	?___ftpack
  5718  0D93  3000               	movlw	0
  5719  0D94  00A1               	movwf	?___ftpack+1
  5720  0D95  3000               	movlw	0
  5721  0D96  00A2               	movwf	?___ftpack+2
  5722  0D97  0008               	return
  5723  0D98                     l2914:	
  5724  0D98  3001               	movlw	1
  5725  0D99  00A5               	movwf	??___ftpack
  5726  0D9A  0825               	movf	??___ftpack,w
  5727  0D9B  07A3               	addwf	___ftpack@exp,f
  5728  0D9C  3001               	movlw	1
  5729  0D9D                     u2635:	
  5730  0D9D  36A2               	lsrf	___ftpack@arg+2,f
  5731  0D9E  0CA1               	rrf	___ftpack@arg+1,f
  5732  0D9F  0CA0               	rrf	___ftpack@arg,f
  5733  0DA0  0B89               	decfsz	9,f
  5734  0DA1  2D9D               	goto	u2635
  5735  0DA2                     l2916:	
  5736  0DA2  30FE               	movlw	254
  5737  0DA3  0522               	andwf	___ftpack@arg+2,w
  5738  0DA4  1903               	btfsc	3,2
  5739  0DA5  2DBB               	goto	l1063
  5740  0DA6  2D98               	goto	l2914
  5741  0DA7                     l2918:	
  5742  0DA7  3001               	movlw	1
  5743  0DA8  00A5               	movwf	??___ftpack
  5744  0DA9  0825               	movf	??___ftpack,w
  5745  0DAA  07A3               	addwf	___ftpack@exp,f
  5746  0DAB  3001               	movlw	1
  5747  0DAC  07A0               	addwf	___ftpack@arg,f
  5748  0DAD  3000               	movlw	0
  5749  0DAE  1803               	skipnc
  5750  0DAF  3001               	movlw	1
  5751  0DB0  07A1               	addwf	___ftpack@arg+1,f
  5752  0DB1  3000               	movlw	0
  5753  0DB2  1803               	skipnc
  5754  0DB3  3001               	movlw	1
  5755  0DB4  07A2               	addwf	___ftpack@arg+2,f
  5756  0DB5  3001               	movlw	1
  5757  0DB6                     u2655:	
  5758  0DB6  36A2               	lsrf	___ftpack@arg+2,f
  5759  0DB7  0CA1               	rrf	___ftpack@arg+1,f
  5760  0DB8  0CA0               	rrf	___ftpack@arg,f
  5761  0DB9  0B89               	decfsz	9,f
  5762  0DBA  2DB6               	goto	u2655
  5763  0DBB                     l1063:	
  5764  0DBB  30FF               	movlw	255
  5765  0DBC  0522               	andwf	___ftpack@arg+2,w
  5766  0DBD  1903               	btfsc	3,2
  5767  0DBE  2DC8               	goto	l2926
  5768  0DBF  2DA7               	goto	l2918
  5769  0DC0                     l2924:	
  5770  0DC0  3001               	movlw	1
  5771  0DC1  02A3               	subwf	___ftpack@exp,f
  5772  0DC2  3001               	movlw	1
  5773  0DC3                     u2675:	
  5774  0DC3  35A0               	lslf	___ftpack@arg,f
  5775  0DC4  0DA1               	rlf	___ftpack@arg+1,f
  5776  0DC5  0DA2               	rlf	___ftpack@arg+2,f
  5777  0DC6  0B89               	decfsz	9,f
  5778  0DC7  2DC3               	goto	u2675
  5779  0DC8                     l2926:	
  5780  0DC8  1BA1               	btfsc	___ftpack@arg+1,7
  5781  0DC9  2DCE               	goto	l1070
  5782  0DCA  3002               	movlw	2
  5783  0DCB  0223               	subwf	___ftpack@exp,w
  5784  0DCC  1803               	skipnc
  5785  0DCD  2DC0               	goto	l2924
  5786  0DCE                     l1070:	
  5787  0DCE  1823               	btfsc	___ftpack@exp,0
  5788  0DCF  2DD6               	goto	l1071
  5789  0DD0  30FF               	movlw	255
  5790  0DD1  05A0               	andwf	___ftpack@arg,f
  5791  0DD2  307F               	movlw	127
  5792  0DD3  05A1               	andwf	___ftpack@arg+1,f
  5793  0DD4  30FF               	movlw	255
  5794  0DD5  05A2               	andwf	___ftpack@arg+2,f
  5795  0DD6                     l1071:	
  5796  0DD6  1003               	clrc
  5797  0DD7  0CA3               	rrf	___ftpack@exp,f
  5798  0DD8  0823               	movf	___ftpack@exp,w
  5799  0DD9  00A5               	movwf	??___ftpack
  5800  0DDA  01A6               	clrf	??___ftpack+1
  5801  0DDB  01A7               	clrf	??___ftpack+2
  5802  0DDC  3010               	movlw	16
  5803  0DDD                     u2715:	
  5804  0DDD  35A5               	lslf	??___ftpack,f
  5805  0DDE  0DA6               	rlf	??___ftpack+1,f
  5806  0DDF  0DA7               	rlf	??___ftpack+2,f
  5807  0DE0  0B89               	decfsz	9,f
  5808  0DE1  2DDD               	goto	u2715
  5809  0DE2  0825               	movf	??___ftpack,w
  5810  0DE3  04A0               	iorwf	___ftpack@arg,f
  5811  0DE4  0826               	movf	??___ftpack+1,w
  5812  0DE5  04A1               	iorwf	___ftpack@arg+1,f
  5813  0DE6  0827               	movf	??___ftpack+2,w
  5814  0DE7  04A2               	iorwf	___ftpack@arg+2,f
  5815  0DE8  0824               	movf	___ftpack@sign,w
  5816  0DE9  1903               	btfsc	3,2
  5817  0DEA  0008               	return
  5818  0DEB  17A2               	bsf	___ftpack@arg+2,7
  5819  0DEC  0008               	return
  5820  0DED                     __end_of___ftpack:	
  5821                           
  5822                           	psect	text13
  5823  08F9                     __ptext13:	
  5824 ;; *************** function _command_turn *****************
  5825 ;; Defined at:
  5826 ;;		line 122 in file "step_motor.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;		None
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5840 ;;      Params:         0       0       0       0       0       0       0       0
  5841 ;;      Locals:         0       0       0       0       0       0       0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0       0
  5843 ;;      Totals:         0       0       0       0       0       0       0       0
  5844 ;;Total ram usage:        0 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    5
  5847 ;; This function calls:
  5848 ;;		_turn_egs
  5849 ;; This function is called by:
  5850 ;;		_main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _command_turn
  5856  08F9                     _command_turn:	
  5857                           
  5858                           ;step_motor.c: 124: if (flag_G==1)
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in _command_turn: [wreg+status,2+status,0+pclath+cstack]
  5862  08F9  0022               	movlb	2	; select bank2
  5863  08FA  035E               	decf	_flag_G^(0+256),w
  5864  08FB  045F               	iorwf	(_flag_G+1)^(0+256),w
  5865  08FC  1D03               	btfss	3,2
  5866  08FD  0008               	return
  5867                           
  5868                           ;step_motor.c: 125: {
  5869                           ;step_motor.c: 126: if (flag_N==1)
  5870  08FE  0360               	decf	_flag_N^(0+256),w
  5871  08FF  0461               	iorwf	(_flag_N+1)^(0+256),w
  5872  0900  1D03               	btfss	3,2
  5873  0901  0008               	return
  5874                           
  5875                           ;step_motor.c: 127: {
  5876                           ;step_motor.c: 129: turn_egs();
  5877  0902  3185  252B         	fcall	_turn_egs
  5878  0904  0008               	return
  5879  0905                     __end_of_command_turn:	
  5880                           
  5881                           	psect	text14
  5882  052B                     __ptext14:	
  5883 ;; *************** function _turn_egs *****************
  5884 ;; Defined at:
  5885 ;;		line 6 in file "step_motor.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5899 ;;      Params:         0       0       0       0       0       0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0
  5901 ;;      Temps:          0       1       0       0       0       0       0       0
  5902 ;;      Totals:         0       1       0       0       0       0       0       0
  5903 ;;Total ram usage:        1 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    4
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_command_turn
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function _turn_egs
  5915  052B                     _turn_egs:	
  5916                           
  5917                           ;step_motor.c: 8: static unsigned char step_index;
  5918                           ;step_motor.c: 9: static unsigned int step_nr=1;
  5919                           ;step_motor.c: 16: if((step_nr<1000)&&(flag_10_ms==1))
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in _turn_egs: [wreg+status,2+status,0]
  5923  052B  3003               	movlw	3
  5924  052C  0022               	movlb	2	; select bank2
  5925  052D  026F               	subwf	(turn_egs@step_nr+1)^(0+256),w
  5926  052E  30E8               	movlw	232
  5927  052F  1903               	skipnz
  5928  0530  026E               	subwf	turn_egs@step_nr^(0+256),w
  5929  0531  1803               	skipnc
  5930  0532  2DC3               	goto	l3232
  5931  0533  0356               	decf	_flag_10_ms^(0+256),w
  5932  0534  0457               	iorwf	(_flag_10_ms+1)^(0+256),w
  5933  0535  1D03               	btfss	3,2
  5934  0536  2DC3               	goto	l3232
  5935                           
  5936                           ;step_motor.c: 17: {
  5937                           ;step_motor.c: 18: if(flag_directie==1)
  5938  0537  036B               	decf	_flag_directie^(0+256),w
  5939  0538  046C               	iorwf	(_flag_directie+1)^(0+256),w
  5940  0539  1D03               	btfss	3,2
  5941  053A  2D7D               	goto	l3176
  5942                           
  5943                           ;step_motor.c: 19: {
  5944                           ;step_motor.c: 20: step_nr++;
  5945  053B  3001               	movlw	1
  5946  053C  07EE               	addwf	turn_egs@step_nr^(0+256),f
  5947  053D  3000               	movlw	0
  5948  053E  3DEF               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  5949                           
  5950                           ;step_motor.c: 21: if(step_index==0)
  5951  053F  087A               	movf	turn_egs@step_index,w
  5952  0540  1D03               	btfss	3,2
  5953  0541  2D4B               	goto	l3136
  5954                           
  5955                           ;step_motor.c: 22: {
  5956                           ;step_motor.c: 23: step_index++;
  5957  0542  3001               	movlw	1
  5958  0543  0020               	movlb	0	; select bank0
  5959  0544  00A0               	movwf	??_turn_egs
  5960  0545  0820               	movf	??_turn_egs,w
  5961  0546  07FA               	addwf	turn_egs@step_index,f
  5962                           
  5963                           ;step_motor.c: 24: LATCbits.LATC0=1;
  5964  0547  0022               	movlb	2	; select bank2
  5965  0548  140E               	bsf	14,0	;volatile
  5966                           
  5967                           ;step_motor.c: 25: LATCbits.LATC3=0;
  5968  0549  118E               	bcf	14,3	;volatile
  5969  054A  2D56               	goto	L2
  5970  054B                     l3136:	
  5971                           ;step_motor.c: 28: }
  5972                           
  5973                           ;step_motor.c: 27: LATCbits.LATC5=0;
  5974                           
  5975                           ;step_motor.c: 26: LATCbits.LATC4=0;
  5976                           
  5977                           
  5978                           ;step_motor.c: 29: else if(step_index==1)
  5979  054B  037A               	decf	turn_egs@step_index,w
  5980  054C  1D03               	btfss	3,2
  5981  054D  2D58               	goto	l3148
  5982                           
  5983                           ;step_motor.c: 30: {
  5984                           ;step_motor.c: 31: step_index++;
  5985  054E  3001               	movlw	1
  5986  054F  0020               	movlb	0	; select bank0
  5987  0550  00A0               	movwf	??_turn_egs
  5988  0551  0820               	movf	??_turn_egs,w
  5989  0552  07FA               	addwf	turn_egs@step_index,f
  5990                           
  5991                           ;step_motor.c: 32: LATCbits.LATC0=0;
  5992  0553  0022               	movlb	2	; select bank2
  5993  0554  100E               	bcf	14,0	;volatile
  5994                           
  5995                           ;step_motor.c: 33: LATCbits.LATC3=1;
  5996  0555  158E               	bsf	14,3	;volatile
  5997  0556                     L2:	
  5998                           
  5999                           ;step_motor.c: 34: LATCbits.LATC4=0;
  6000  0556  120E               	bcf	14,4	;volatile
  6001  0557  2D65               	goto	l3158
  6002  0558                     l3148:	
  6003                           ;step_motor.c: 36: }
  6004                           
  6005                           ;step_motor.c: 35: LATCbits.LATC5=0;
  6006                           
  6007                           
  6008                           ;step_motor.c: 37: else if(step_index==2)
  6009  0558  3002               	movlw	2
  6010  0559  067A               	xorwf	turn_egs@step_index,w
  6011  055A  1D03               	btfss	3,2
  6012  055B  2D67               	goto	l3160
  6013                           
  6014                           ;step_motor.c: 38: {
  6015                           ;step_motor.c: 39: step_index++;
  6016  055C  3001               	movlw	1
  6017  055D  0020               	movlb	0	; select bank0
  6018  055E  00A0               	movwf	??_turn_egs
  6019  055F  0820               	movf	??_turn_egs,w
  6020  0560  07FA               	addwf	turn_egs@step_index,f
  6021                           
  6022                           ;step_motor.c: 40: LATCbits.LATC0=0;
  6023  0561  0022               	movlb	2	; select bank2
  6024  0562  100E               	bcf	14,0	;volatile
  6025                           
  6026                           ;step_motor.c: 41: LATCbits.LATC3=0;
  6027  0563  118E               	bcf	14,3	;volatile
  6028                           
  6029                           ;step_motor.c: 42: LATCbits.LATC4=1;
  6030  0564  160E               	bsf	14,4	;volatile
  6031  0565                     l3158:	
  6032                           
  6033                           ;step_motor.c: 43: LATCbits.LATC5=0;
  6034  0565  128E               	bcf	14,5	;volatile
  6035                           
  6036                           ;step_motor.c: 44: }
  6037  0566  2D7A               	goto	l755
  6038  0567                     l3160:	
  6039                           
  6040                           ;step_motor.c: 45: else if(step_index==3)
  6041  0567  3003               	movlw	3
  6042  0568  067A               	xorwf	turn_egs@step_index,w
  6043  0569  1D03               	btfss	3,2
  6044  056A  2D76               	goto	l3172
  6045                           
  6046                           ;step_motor.c: 46: {
  6047                           ;step_motor.c: 47: step_index++;
  6048  056B  3001               	movlw	1
  6049  056C  0020               	movlb	0	; select bank0
  6050  056D  00A0               	movwf	??_turn_egs
  6051  056E  0820               	movf	??_turn_egs,w
  6052  056F  07FA               	addwf	turn_egs@step_index,f
  6053                           
  6054                           ;step_motor.c: 48: LATCbits.LATC0=0;
  6055  0570  0022               	movlb	2	; select bank2
  6056  0571  100E               	bcf	14,0	;volatile
  6057                           
  6058                           ;step_motor.c: 49: LATCbits.LATC3=0;
  6059  0572  118E               	bcf	14,3	;volatile
  6060                           
  6061                           ;step_motor.c: 50: LATCbits.LATC4=0;
  6062  0573  120E               	bcf	14,4	;volatile
  6063                           
  6064                           ;step_motor.c: 51: LATCbits.LATC5=1;
  6065  0574  168E               	bsf	14,5	;volatile
  6066                           
  6067                           ;step_motor.c: 52: }
  6068  0575  2D7A               	goto	l755
  6069  0576                     l3172:	
  6070                           
  6071                           ;step_motor.c: 53: else if(step_index==4)
  6072  0576  3004               	movlw	4
  6073  0577  067A               	xorwf	turn_egs@step_index,w
  6074  0578  1903               	btfsc	3,2
  6075                           
  6076                           ;step_motor.c: 54: {
  6077                           ;step_motor.c: 55: step_index=0;
  6078  0579  01FA               	clrf	turn_egs@step_index
  6079  057A                     l755:	
  6080                           
  6081                           ;step_motor.c: 56: }
  6082                           ;step_motor.c: 58: flag_10_ms=0;
  6083  057A  01D6               	clrf	_flag_10_ms^(0+256)
  6084  057B  01D7               	clrf	(_flag_10_ms+1)^(0+256)
  6085                           
  6086                           ;step_motor.c: 59: }
  6087  057C  0008               	return
  6088  057D                     l3176:	
  6089                           
  6090                           ;step_motor.c: 60: else if(flag_directie==0)
  6091  057D  086B               	movf	_flag_directie^(0+256),w
  6092  057E  046C               	iorwf	(_flag_directie+1)^(0+256),w
  6093  057F  1D03               	btfss	3,2
  6094  0580  0008               	return
  6095                           
  6096                           ;step_motor.c: 61: {
  6097                           ;step_motor.c: 62: step_nr++;
  6098  0581  3001               	movlw	1
  6099  0582  07EE               	addwf	turn_egs@step_nr^(0+256),f
  6100  0583  3000               	movlw	0
  6101  0584  3DEF               	addwfc	(turn_egs@step_nr+1)^(0+256),f
  6102                           
  6103                           ;step_motor.c: 63: if(step_index==0)
  6104  0585  087A               	movf	turn_egs@step_index,w
  6105  0586  1D03               	btfss	3,2
  6106  0587  2D91               	goto	l3192
  6107                           
  6108                           ;step_motor.c: 64: {
  6109                           ;step_motor.c: 65: step_index++;
  6110  0588  3001               	movlw	1
  6111  0589  0020               	movlb	0	; select bank0
  6112  058A  00A0               	movwf	??_turn_egs
  6113  058B  0820               	movf	??_turn_egs,w
  6114  058C  07FA               	addwf	turn_egs@step_index,f
  6115                           
  6116                           ;step_motor.c: 66: LATCbits.LATC5=1;
  6117  058D  0022               	movlb	2	; select bank2
  6118  058E  168E               	bsf	14,5	;volatile
  6119                           
  6120                           ;step_motor.c: 67: LATCbits.LATC4=0;
  6121  058F  120E               	bcf	14,4	;volatile
  6122  0590  2D9C               	goto	L3
  6123  0591                     l3192:	
  6124                           ;step_motor.c: 70: }
  6125                           
  6126                           ;step_motor.c: 69: LATCbits.LATC0=0;
  6127                           
  6128                           ;step_motor.c: 68: LATCbits.LATC3=0;
  6129                           
  6130                           
  6131                           ;step_motor.c: 71: else if(step_index==1)
  6132  0591  037A               	decf	turn_egs@step_index,w
  6133  0592  1D03               	btfss	3,2
  6134  0593  2D9E               	goto	l3204
  6135                           
  6136                           ;step_motor.c: 72: {
  6137                           ;step_motor.c: 73: step_index++;
  6138  0594  3001               	movlw	1
  6139  0595  0020               	movlb	0	; select bank0
  6140  0596  00A0               	movwf	??_turn_egs
  6141  0597  0820               	movf	??_turn_egs,w
  6142  0598  07FA               	addwf	turn_egs@step_index,f
  6143                           
  6144                           ;step_motor.c: 74: LATCbits.LATC5=0;
  6145  0599  0022               	movlb	2	; select bank2
  6146  059A  128E               	bcf	14,5	;volatile
  6147                           
  6148                           ;step_motor.c: 75: LATCbits.LATC4=1;
  6149  059B  160E               	bsf	14,4	;volatile
  6150  059C                     L3:	
  6151                           
  6152                           ;step_motor.c: 76: LATCbits.LATC3=0;
  6153  059C  118E               	bcf	14,3	;volatile
  6154  059D  2DAB               	goto	l3214
  6155  059E                     l3204:	
  6156                           ;step_motor.c: 78: }
  6157                           
  6158                           ;step_motor.c: 77: LATCbits.LATC0=0;
  6159                           
  6160                           
  6161                           ;step_motor.c: 79: else if(step_index==2)
  6162  059E  3002               	movlw	2
  6163  059F  067A               	xorwf	turn_egs@step_index,w
  6164  05A0  1D03               	btfss	3,2
  6165  05A1  2DAD               	goto	l3216
  6166                           
  6167                           ;step_motor.c: 80: {
  6168                           ;step_motor.c: 81: step_index++;
  6169  05A2  3001               	movlw	1
  6170  05A3  0020               	movlb	0	; select bank0
  6171  05A4  00A0               	movwf	??_turn_egs
  6172  05A5  0820               	movf	??_turn_egs,w
  6173  05A6  07FA               	addwf	turn_egs@step_index,f
  6174                           
  6175                           ;step_motor.c: 82: LATCbits.LATC5=0;
  6176  05A7  0022               	movlb	2	; select bank2
  6177  05A8  128E               	bcf	14,5	;volatile
  6178                           
  6179                           ;step_motor.c: 83: LATCbits.LATC4=0;
  6180  05A9  120E               	bcf	14,4	;volatile
  6181                           
  6182                           ;step_motor.c: 84: LATCbits.LATC3=1;
  6183  05AA  158E               	bsf	14,3	;volatile
  6184  05AB                     l3214:	
  6185                           
  6186                           ;step_motor.c: 85: LATCbits.LATC0=0;
  6187  05AB  100E               	bcf	14,0	;volatile
  6188                           
  6189                           ;step_motor.c: 86: }
  6190  05AC  2DC0               	goto	l766
  6191  05AD                     l3216:	
  6192                           
  6193                           ;step_motor.c: 87: else if(step_index==3)
  6194  05AD  3003               	movlw	3
  6195  05AE  067A               	xorwf	turn_egs@step_index,w
  6196  05AF  1D03               	btfss	3,2
  6197  05B0  2DBC               	goto	l3228
  6198                           
  6199                           ;step_motor.c: 88: {
  6200                           ;step_motor.c: 89: step_index++;
  6201  05B1  3001               	movlw	1
  6202  05B2  0020               	movlb	0	; select bank0
  6203  05B3  00A0               	movwf	??_turn_egs
  6204  05B4  0820               	movf	??_turn_egs,w
  6205  05B5  07FA               	addwf	turn_egs@step_index,f
  6206                           
  6207                           ;step_motor.c: 90: LATCbits.LATC5=0;
  6208  05B6  0022               	movlb	2	; select bank2
  6209  05B7  128E               	bcf	14,5	;volatile
  6210                           
  6211                           ;step_motor.c: 91: LATCbits.LATC4=0;
  6212  05B8  120E               	bcf	14,4	;volatile
  6213                           
  6214                           ;step_motor.c: 92: LATCbits.LATC3=0;
  6215  05B9  118E               	bcf	14,3	;volatile
  6216                           
  6217                           ;step_motor.c: 93: LATCbits.LATC0=1;
  6218  05BA  140E               	bsf	14,0	;volatile
  6219                           
  6220                           ;step_motor.c: 94: }
  6221  05BB  2DC0               	goto	l766
  6222  05BC                     l3228:	
  6223                           
  6224                           ;step_motor.c: 95: else if(step_index==4)
  6225  05BC  3004               	movlw	4
  6226  05BD  067A               	xorwf	turn_egs@step_index,w
  6227  05BE  1903               	btfsc	3,2
  6228                           
  6229                           ;step_motor.c: 96: {
  6230                           ;step_motor.c: 97: step_index=0;
  6231  05BF  01FA               	clrf	turn_egs@step_index
  6232  05C0                     l766:	
  6233                           
  6234                           ;step_motor.c: 98: }
  6235                           ;step_motor.c: 100: flag_10_ms=0;
  6236  05C0  01D6               	clrf	_flag_10_ms^(0+256)
  6237  05C1  01D7               	clrf	(_flag_10_ms+1)^(0+256)
  6238                           
  6239                           ;step_motor.c: 101: }
  6240                           ;step_motor.c: 102: }
  6241  05C2  0008               	return
  6242  05C3                     l3232:	
  6243                           
  6244                           ;step_motor.c: 103: else if(step_nr==1000)
  6245  05C3  30E8               	movlw	232
  6246  05C4  066E               	xorwf	turn_egs@step_nr^(0+256),w
  6247  05C5  3003               	movlw	3
  6248  05C6  1903               	skipnz
  6249  05C7  066F               	xorwf	(turn_egs@step_nr+1)^(0+256),w
  6250  05C8  1D03               	btfss	3,2
  6251  05C9  0008               	return
  6252                           
  6253                           ;step_motor.c: 104: {
  6254                           ;step_motor.c: 105: flag_N=0;
  6255  05CA  01E0               	clrf	_flag_N^(0+256)
  6256  05CB  01E1               	clrf	(_flag_N+1)^(0+256)
  6257                           
  6258                           ;step_motor.c: 106: flag_G=0;
  6259  05CC  01DE               	clrf	_flag_G^(0+256)
  6260  05CD  01DF               	clrf	(_flag_G+1)^(0+256)
  6261                           
  6262                           ;step_motor.c: 107: step_nr=0;
  6263  05CE  01EE               	clrf	turn_egs@step_nr^(0+256)
  6264  05CF  01EF               	clrf	(turn_egs@step_nr+1)^(0+256)
  6265                           
  6266                           ;step_motor.c: 108: if(flag_directie==1)
  6267  05D0  036B               	decf	_flag_directie^(0+256),w
  6268  05D1  046C               	iorwf	(_flag_directie+1)^(0+256),w
  6269  05D2  1D03               	btfss	3,2
  6270  05D3  2DD7               	goto	l3240
  6271                           
  6272                           ;step_motor.c: 109: {
  6273                           ;step_motor.c: 110: flag_directie=0;
  6274  05D4  01EB               	clrf	_flag_directie^(0+256)
  6275  05D5  01EC               	clrf	(_flag_directie+1)^(0+256)
  6276                           
  6277                           ;step_motor.c: 111: }
  6278  05D6  2DDF               	goto	l3244
  6279  05D7                     l3240:	
  6280                           
  6281                           ;step_motor.c: 112: else if(flag_directie==0)
  6282  05D7  086B               	movf	_flag_directie^(0+256),w
  6283  05D8  046C               	iorwf	(_flag_directie+1)^(0+256),w
  6284  05D9  1D03               	btfss	3,2
  6285  05DA  2DDF               	goto	l3244
  6286                           
  6287                           ;step_motor.c: 113: {
  6288                           ;step_motor.c: 114: flag_directie=1;
  6289  05DB  3001               	movlw	1
  6290  05DC  00EB               	movwf	_flag_directie^(0+256)
  6291  05DD  3000               	movlw	0
  6292  05DE  00EC               	movwf	(_flag_directie^(0+256)+1)
  6293  05DF                     l3244:	
  6294                           
  6295                           ;step_motor.c: 115: }
  6296                           ;step_motor.c: 116: step_index=0;
  6297  05DF  01FA               	clrf	turn_egs@step_index
  6298  05E0  0008               	return
  6299  05E1                     __end_of_turn_egs:	
  6300                           
  6301                           	psect	text15
  6302  08ED                     __ptext15:	
  6303 ;; *************** function _check_status_incubator *****************
  6304 ;; Defined at:
  6305 ;;		line 56 in file "gsm.c"
  6306 ;; Parameters:    Size  Location     Type
  6307 ;;		None
  6308 ;; Auto vars:     Size  Location     Type
  6309 ;;		None
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  1    wreg      void 
  6312 ;; Registers used:
  6313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/0
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6319 ;;      Params:         0       0       0       0       0       0       0       0
  6320 ;;      Locals:         0       0       0       0       0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0
  6322 ;;      Totals:         0       0       0       0       0       0       0       0
  6323 ;;Total ram usage:        0 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    9
  6326 ;; This function calls:
  6327 ;;		_sms_text
  6328 ;; This function is called by:
  6329 ;;		_main
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _check_status_incubator
  6335  08ED                     _check_status_incubator:	
  6336                           
  6337                           ;gsm.c: 58: if (flag_A==1)
  6338                           
  6339                           ;incstack = 0
  6340                           ; Regs used in _check_status_incubator: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6341  08ED  0022               	movlb	2	; select bank2
  6342  08EE  035C               	decf	_flag_A^(0+256),w
  6343  08EF  045D               	iorwf	(_flag_A+1)^(0+256),w
  6344  08F0  1D03               	btfss	3,2
  6345  08F1  0008               	return
  6346                           
  6347                           ;gsm.c: 59: {
  6348                           ;gsm.c: 60: if (flag_B==1)
  6349  08F2  035A               	decf	_flag_B^(0+256),w
  6350  08F3  045B               	iorwf	(_flag_B+1)^(0+256),w
  6351  08F4  1D03               	btfss	3,2
  6352  08F5  0008               	return
  6353                           
  6354                           ;gsm.c: 61: {
  6355                           ;gsm.c: 63: sms_text();
  6356  08F6  3187  273E         	fcall	_sms_text
  6357  08F8  0008               	return
  6358  08F9                     __end_of_check_status_incubator:	
  6359                           
  6360                           	psect	text16
  6361  073E                     __ptext16:	
  6362 ;; *************** function _sms_text *****************
  6363 ;; Defined at:
  6364 ;;		line 6 in file "gsm.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  umid            1   40[BANK0 ] unsigned char 
  6369 ;;  smstext         1   39[BANK0 ] unsigned char 
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6379 ;;      Params:         0       0       0       0       0       0       0       0
  6380 ;;      Locals:         0       2       0       0       0       0       0       0
  6381 ;;      Temps:          0       2       0       0       0       0       0       0
  6382 ;;      Totals:         0       4       0       0       0       0       0       0
  6383 ;;Total ram usage:        4 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    8
  6386 ;; This function calls:
  6387 ;;		_printf
  6388 ;;		_putch
  6389 ;;		_sprintf
  6390 ;; This function is called by:
  6391 ;;		_check_status_incubator
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _sms_text
  6397  073E                     _sms_text:	
  6398                           
  6399                           ;gsm.c: 8: char smstext[]="";
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _sms_text: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6403  073E  0021               	movlb	1	; select bank1
  6404  073F  086E               	movf	sms_text@F3612^(0+128),w
  6405  0740  0020               	movlb	0	; select bank0
  6406  0741  00C5               	movwf	??_sms_text
  6407  0742  0845               	movf	??_sms_text,w
  6408  0743  00C7               	movwf	sms_text@smstext
  6409                           
  6410                           ;gsm.c: 9: char umid[]="";
  6411  0744  0021               	movlb	1	; select bank1
  6412  0745  086D               	movf	sms_text@F3614^(0+128),w
  6413  0746  0020               	movlb	0	; select bank0
  6414  0747  00C5               	movwf	??_sms_text
  6415  0748  0845               	movf	??_sms_text,w
  6416  0749  00C8               	movwf	sms_text@umid
  6417                           
  6418                           ;gsm.c: 10: static int sms_index=0;
  6419                           ;gsm.c: 12: printf("AT+CSCS=\"GSM\"");
  6420  074A  3058               	movlw	low (STR_3| (0+32768))
  6421  074B  00BB               	movwf	printf@f
  6422  074C  3090               	movlw	high (STR_3| (0+32768))
  6423  074D  00BC               	movwf	printf@f+1
  6424  074E  3189  2152  3187   	fcall	_printf
  6425                           
  6426                           ;gsm.c: 13: putch(0x0d);
  6427  0751  300D               	movlw	13
  6428  0752  0020               	movlb	0	; select bank0
  6429  0753  00C5               	movwf	??_sms_text
  6430  0754  0845               	movf	??_sms_text,w
  6431  0755  00A2               	movwf	putch@txData
  6432  0756  3188  20B7  3187   	fcall	_putch
  6433                           
  6434                           ;gsm.c: 14: _delay((unsigned long)((200)*(18432000/4000.0)));
  6435  0759  3005               	movlw	5
  6436  075A  0020               	movlb	0	; select bank0
  6437  075B  00C6               	movwf	??_sms_text+1
  6438  075C  30AD               	movlw	173
  6439  075D  00C5               	movwf	??_sms_text
  6440  075E  30DD               	movlw	221
  6441  075F                     u5907:	
  6442  075F  0B89               	decfsz	9,f
  6443  0760  2F5F               	goto	u5907
  6444  0761  0BC5               	decfsz	??_sms_text,f
  6445  0762  2F5F               	goto	u5907
  6446  0763  0BC6               	decfsz	??_sms_text+1,f
  6447  0764  2F5F               	goto	u5907
  6448                           
  6449                           ;gsm.c: 15: printf("AT+CMGS=\"0757494823\"");
  6450  0765  3000               	movlw	low (STR_4| (0+32768))
  6451  0766  0020               	movlb	0	; select bank0
  6452  0767  00BB               	movwf	printf@f
  6453  0768  3090               	movlw	high (STR_4| (0+32768))
  6454  0769  00BC               	movwf	printf@f+1
  6455  076A  3189  2152  3187   	fcall	_printf
  6456                           
  6457                           ;gsm.c: 16: putch(0x0d);
  6458  076D  300D               	movlw	13
  6459  076E  0020               	movlb	0	; select bank0
  6460  076F  00C5               	movwf	??_sms_text
  6461  0770  0845               	movf	??_sms_text,w
  6462  0771  00A2               	movwf	putch@txData
  6463  0772  3188  20B7  3187   	fcall	_putch
  6464                           
  6465                           ;gsm.c: 17: _delay((unsigned long)((600)*(18432000/4000.0)));
  6466  0775  300F               	movlw	15
  6467  0776  0020               	movlb	0	; select bank0
  6468  0777  00C6               	movwf	??_sms_text+1
  6469  0778  3007               	movlw	7
  6470  0779  00C5               	movwf	??_sms_text
  6471  077A  309A               	movlw	154
  6472  077B                     u5917:	
  6473  077B  0B89               	decfsz	9,f
  6474  077C  2F7B               	goto	u5917
  6475  077D  0BC5               	decfsz	??_sms_text,f
  6476  077E  2F7B               	goto	u5917
  6477  077F  0BC6               	decfsz	??_sms_text+1,f
  6478  0780  2F7B               	goto	u5917
  6479  0781  0000               	nop
  6480                           
  6481                           ;gsm.c: 19: sprintf(smstext," Temper=%d      ", temp);
  6482  0782  3038               	movlw	low (STR_5| (0+32768))
  6483  0783  0020               	movlb	0	; select bank0
  6484  0784  00BB               	movwf	sprintf@f
  6485  0785  3090               	movlw	high (STR_5| (0+32768))
  6486  0786  00BC               	movwf	sprintf@f+1
  6487  0787  0022               	movlb	2	; select bank2
  6488  0788  0865               	movf	(_temp+1)^(0+256),w
  6489  0789  0020               	movlb	0	; select bank0
  6490  078A  00BE               	movwf	?_sprintf+3
  6491  078B  0022               	movlb	2	; select bank2
  6492  078C  0864               	movf	_temp^(0+256),w
  6493  078D  0020               	movlb	0	; select bank0
  6494  078E  00BD               	movwf	?_sprintf+2
  6495  078F  3047               	movlw	(low (sms_text@smstext| 0))& (0+255)
  6496  0790  318A  2208  3187   	fcall	_sprintf
  6497                           
  6498                           ;gsm.c: 20: printf(smstext);
  6499  0793  3047               	movlw	low sms_text@smstext
  6500  0794  0020               	movlb	0	; select bank0
  6501  0795  00BB               	movwf	printf@f
  6502  0796  3000               	movlw	high sms_text@smstext
  6503  0797  00BC               	movwf	printf@f+1
  6504  0798  3189  2152  3187   	fcall	_printf
  6505                           
  6506                           ;gsm.c: 22: sprintf(umid," Umid=%d        ",RH_byte1);
  6507  079B  3027               	movlw	low (STR_6| (0+32768))
  6508  079C  0020               	movlb	0	; select bank0
  6509  079D  00BB               	movwf	sprintf@f
  6510  079E  3090               	movlw	high (STR_6| (0+32768))
  6511  079F  00BC               	movwf	sprintf@f+1
  6512  07A0  086D               	movf	_RH_byte1,w
  6513  07A1  00C5               	movwf	??_sms_text
  6514  07A2  01C6               	clrf	??_sms_text+1
  6515  07A3  0845               	movf	??_sms_text,w
  6516  07A4  00BD               	movwf	?_sprintf+2
  6517  07A5  0846               	movf	??_sms_text+1,w
  6518  07A6  00BE               	movwf	?_sprintf+3
  6519  07A7  3048               	movlw	(low (sms_text@umid| 0))& (0+255)
  6520  07A8  318A  2208  3187   	fcall	_sprintf
  6521                           
  6522                           ;gsm.c: 23: printf(umid);
  6523  07AB  3048               	movlw	low sms_text@umid
  6524  07AC  0020               	movlb	0	; select bank0
  6525  07AD  00BB               	movwf	printf@f
  6526  07AE  3000               	movlw	high sms_text@umid
  6527  07AF  00BC               	movwf	printf@f+1
  6528  07B0  3189  2152  3187   	fcall	_printf
  6529                           
  6530                           ;gsm.c: 24: _delay((unsigned long)((400)*(18432000/4000.0)));
  6531  07B3  300A               	movlw	10
  6532  07B4  0020               	movlb	0	; select bank0
  6533  07B5  00C6               	movwf	??_sms_text+1
  6534  07B6  305A               	movlw	90
  6535  07B7  00C5               	movwf	??_sms_text
  6536  07B8  30BB               	movlw	187
  6537  07B9                     u5927:	
  6538  07B9  0B89               	decfsz	9,f
  6539  07BA  2FB9               	goto	u5927
  6540  07BB  0BC5               	decfsz	??_sms_text,f
  6541  07BC  2FB9               	goto	u5927
  6542  07BD  0BC6               	decfsz	??_sms_text+1,f
  6543  07BE  2FB9               	goto	u5927
  6544  07BF  3200               	nop2
  6545                           
  6546                           ;gsm.c: 25: putch(26);
  6547  07C0  301A               	movlw	26
  6548  07C1  0020               	movlb	0	; select bank0
  6549  07C2  00C5               	movwf	??_sms_text
  6550  07C3  0845               	movf	??_sms_text,w
  6551  07C4  00A2               	movwf	putch@txData
  6552  07C5  3188  20B7  3187   	fcall	_putch
  6553                           
  6554                           ;gsm.c: 26: putch(0x0d);
  6555  07C8  300D               	movlw	13
  6556  07C9  0020               	movlb	0	; select bank0
  6557  07CA  00C5               	movwf	??_sms_text
  6558  07CB  0845               	movf	??_sms_text,w
  6559  07CC  00A2               	movwf	putch@txData
  6560  07CD  3188  20B7         	fcall	_putch
  6561                           
  6562                           ;gsm.c: 28: sms_index=0;
  6563  07CF  0023               	movlb	3	; select bank3
  6564  07D0  01DF               	clrf	sms_text@sms_index^(0+384)
  6565  07D1  01E0               	clrf	(sms_text@sms_index+1)^(0+384)
  6566                           
  6567                           ;gsm.c: 29: flag_A=0;
  6568  07D2  0022               	movlb	2	; select bank2
  6569  07D3  01DC               	clrf	_flag_A^(0+256)
  6570  07D4  01DD               	clrf	(_flag_A+1)^(0+256)
  6571                           
  6572                           ;gsm.c: 30: flag_B=0;
  6573  07D5  01DA               	clrf	_flag_B^(0+256)
  6574  07D6  01DB               	clrf	(_flag_B+1)^(0+256)
  6575  07D7  0008               	return
  6576  07D8                     __end_of_sms_text:	
  6577                           
  6578                           	psect	text17
  6579  0A08                     __ptext17:	
  6580 ;; *************** function _sprintf *****************
  6581 ;; Defined at:
  6582 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprintf.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  wh              1    wreg     PTR unsigned char 
  6585 ;;		 -> sms_text@umid(1), sms_text@smstext(1), 
  6586 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6587 ;;		 -> STR_6(17), STR_5(17), 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  wh              1   32[BANK0 ] PTR unsigned char 
  6590 ;;		 -> sms_text@umid(1), sms_text@smstext(1), 
  6591 ;;  pb              3   34[BANK0 ] struct __prbuf
  6592 ;;  ap              1   33[BANK0 ] PTR void [1]
  6593 ;;		 -> ?_sprintf(2), ?_printf(2), 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  2   27[BANK0 ] int 
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6603 ;;      Params:         0       4       0       0       0       0       0       0
  6604 ;;      Locals:         0       5       0       0       0       0       0       0
  6605 ;;      Temps:          0       1       0       0       0       0       0       0
  6606 ;;      Totals:         0      10       0       0       0       0       0       0
  6607 ;;Total ram usage:       10 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    7
  6610 ;; This function calls:
  6611 ;;		__doprnt
  6612 ;; This function is called by:
  6613 ;;		_sms_text
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _sprintf
  6619  0A08                     _sprintf:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6623                           ;sprintf@wh stored from wreg
  6624  0A08  0020               	movlb	0	; select bank0
  6625  0A09  00C0               	movwf	sprintf@wh
  6626  0A0A  0840               	movf	sprintf@wh,w
  6627  0A0B  00BF               	movwf	??_sprintf
  6628  0A0C  083F               	movf	??_sprintf,w
  6629  0A0D  00C2               	movwf	sprintf@pb
  6630  0A0E  01C3               	clrf	low ((sprintf@pb| 0+1))
  6631  0A0F  01C4               	clrf	(low ((sprintf@pb| 0+1))+1)
  6632  0A10  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6633  0A11  00BF               	movwf	??_sprintf
  6634  0A12  083F               	movf	??_sprintf,w
  6635  0A13  00C1               	movwf	sprintf@ap
  6636  0A14  083C               	movf	sprintf@f+1,w
  6637  0A15  00AF               	movwf	__doprnt@f+1
  6638  0A16  083B               	movf	sprintf@f,w
  6639  0A17  00AE               	movwf	__doprnt@f
  6640  0A18  3041               	movlw	(low (sprintf@ap| 0))& (0+255)
  6641  0A19  00BF               	movwf	??_sprintf
  6642  0A1A  083F               	movf	??_sprintf,w
  6643  0A1B  00B0               	movwf	__doprnt@ap
  6644  0A1C  3042               	movlw	(low (sprintf@pb| 0))& (0+255)
  6645  0A1D  3182  2228         	fcall	__doprnt
  6646  0A1F  0020               	movlb	0	; select bank0
  6647  0A20  0842               	movf	sprintf@pb,w
  6648  0A21  0086               	movwf	6
  6649  0A22  0187               	clrf	7
  6650  0A23  0181               	clrf	1
  6651  0A24  0008               	return
  6652  0A25                     __end_of_sprintf:	
  6653                           ;	Return value of _sprintf is never used
  6654                           
  6655                           
  6656                           	psect	text18
  6657  0952                     __ptext18:	
  6658 ;; *************** function _printf *****************
  6659 ;; Defined at:
  6660 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\printf.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  6663 ;;		 -> STR_11(14), STR_10(18), STR_9(10), STR_8(15), 
  6664 ;;		 -> STR_7(3), STR_4(21), STR_3(14), sms_text@umid(1), 
  6665 ;;		 -> sms_text@smstext(1), 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  pb              3   31[BANK0 ] struct __prbuf
  6668 ;;  ap              1   30[BANK0 ] PTR void [1]
  6669 ;;		 -> ?_sprintf(2), ?_printf(2), 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  2   27[BANK0 ] int 
  6672 ;; Registers used:
  6673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6679 ;;      Params:         0       2       0       0       0       0       0       0
  6680 ;;      Locals:         0       4       0       0       0       0       0       0
  6681 ;;      Temps:          0       1       0       0       0       0       0       0
  6682 ;;      Totals:         0       7       0       0       0       0       0       0
  6683 ;;Total ram usage:        7 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    7
  6686 ;; This function calls:
  6687 ;;		__doprnt
  6688 ;; This function is called by:
  6689 ;;		_sms_text
  6690 ;;		_int_gsm
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _printf
  6696  0952                     _printf:	
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6700  0952  0020               	movlb	0	; select bank0
  6701  0953  01BF               	clrf	printf@pb
  6702  0954  30B7               	movlw	low _putch
  6703  0955  00C0               	movwf	low ((printf@pb| 0+1))
  6704  0956  3008               	movlw	high _putch
  6705  0957  00C1               	movwf	(low ((printf@pb| 0+1))+1)
  6706  0958  303D               	movlw	(low ((?_printf| 0+2)))& (0+255)
  6707  0959  00BD               	movwf	??_printf
  6708  095A  083D               	movf	??_printf,w
  6709  095B  00BE               	movwf	printf@ap
  6710                           
  6711                           ;	Return value of _printf is never used
  6712  095C  083C               	movf	printf@f+1,w
  6713  095D  00AF               	movwf	__doprnt@f+1
  6714  095E  083B               	movf	printf@f,w
  6715  095F  00AE               	movwf	__doprnt@f
  6716  0960  303E               	movlw	(low (printf@ap| 0))& (0+255)
  6717  0961  00BD               	movwf	??_printf
  6718  0962  083D               	movf	??_printf,w
  6719  0963  00B0               	movwf	__doprnt@ap
  6720  0964  303F               	movlw	(low (printf@pb| 0))& (0+255)
  6721  0965  3182  2228         	fcall	__doprnt
  6722  0967  0008               	return
  6723  0968                     __end_of_printf:	
  6724                           
  6725                           	psect	text19
  6726  0228                     __ptext19:	
  6727 ;; *************** function __doprnt *****************
  6728 ;; Defined at:
  6729 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  pb              1    wreg     PTR struct __prbuf
  6732 ;;		 -> sprintf@pb(3), printf@pb(3), 
  6733 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6734 ;;		 -> STR_11(14), STR_10(18), STR_9(10), STR_8(15), 
  6735 ;;		 -> STR_7(3), STR_6(17), STR_5(17), STR_4(21), 
  6736 ;;		 -> STR_3(14), sms_text@umid(1), sms_text@smstext(1), 
  6737 ;;  ap              1   16[BANK0 ] PTR PTR void 
  6738 ;;		 -> sprintf@ap(1), printf@ap(1), 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  pb              1   26[BANK0 ] PTR struct __prbuf
  6741 ;;		 -> sprintf@pb(3), printf@pb(3), 
  6742 ;;  tmpval          4    0        struct .
  6743 ;;  val             2   23[BANK0 ] unsigned int 
  6744 ;;  cp              2    0        PTR const unsigned char 
  6745 ;;  len             2    0        unsigned int 
  6746 ;;  c               1   25[BANK0 ] char 
  6747 ;;  prec            1   22[BANK0 ] char 
  6748 ;;  flag            1   21[BANK0 ] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  2   14[BANK0 ] int 
  6751 ;; Registers used:
  6752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6758 ;;      Params:         0       3       0       0       0       0       0       0
  6759 ;;      Locals:         0       6       0       0       0       0       0       0
  6760 ;;      Temps:          0       4       0       0       0       0       0       0
  6761 ;;      Totals:         0      13       0       0       0       0       0       0
  6762 ;;Total ram usage:       13 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    6
  6765 ;; This function calls:
  6766 ;;		Absolute function
  6767 ;;		___lwdiv
  6768 ;;		___lwmod
  6769 ;;		_putch
  6770 ;; This function is called by:
  6771 ;;		_printf
  6772 ;;		_sprintf
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function __doprnt
  6778  0228                     __doprnt:	
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6782                           ;__doprnt@pb stored from wreg
  6783  0228  0020               	movlb	0	; select bank0
  6784  0229  00BA               	movwf	__doprnt@pb
  6785  022A                     l4964:	
  6786                           ;doprnt.c: 499: signed char c;
  6787                           ;doprnt.c: 506: signed char prec;
  6788                           ;doprnt.c: 508: unsigned char flag;
  6789                           ;doprnt.c: 523: union {
  6790                           ;doprnt.c: 524: unsigned long vd;
  6791                           ;doprnt.c: 525: double integ;
  6792                           ;doprnt.c: 526: } tmpval;
  6793                           ;doprnt.c: 528: unsigned int val;
  6794                           ;doprnt.c: 529: unsigned len;
  6795                           ;doprnt.c: 530: const char * cp;
  6796                           ;doprnt.c: 536: while(c = *f++) {
  6797                           
  6798  022A  0020               	movlb	0	; select bank0
  6799  022B  082F               	movf	__doprnt@f+1,w
  6800  022C  00B2               	movwf	??__doprnt+1
  6801  022D  082E               	movf	__doprnt@f,w
  6802  022E  00B1               	movwf	??__doprnt
  6803  022F  0AAE               	incf	__doprnt@f,f
  6804  0230  1903               	skipnz
  6805  0231  0AAF               	incf	__doprnt@f+1,f
  6806  0232  0831               	movf	??__doprnt,w
  6807  0233  0084               	movwf	4
  6808  0234  0832               	movf	??__doprnt+1,w
  6809  0235  0085               	movwf	5
  6810  0236  0800               	movf	0,w	;code access
  6811  0237  00B3               	movwf	??__doprnt+2
  6812  0238  0833               	movf	??__doprnt+2,w
  6813  0239  00B9               	movwf	__doprnt@c
  6814  023A  0839               	movf	__doprnt@c,w
  6815  023B  1903               	btfsc	3,2
  6816  023C  2B57               	goto	l4966
  6817                           
  6818                           ;doprnt.c: 538: if(c != '%')
  6819  023D  3025               	movlw	37
  6820  023E  0639               	xorwf	__doprnt@c,w
  6821  023F  1903               	btfsc	3,2
  6822  0240  2A55               	goto	l4906
  6823                           
  6824                           ;doprnt.c: 540: {
  6825                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6826  0241  0A3A               	incf	__doprnt@pb,w
  6827  0242  0086               	movwf	6
  6828  0243  0187               	clrf	7
  6829  0244  0016               	moviw fsr1++
  6830  0245  0401               	iorwf	1,w
  6831  0246  1903               	btfsc	3,2
  6832  0247  2A6B               	goto	l4912
  6833  0248  0839               	movf	__doprnt@c,w
  6834  0249  00B1               	movwf	??__doprnt
  6835  024A  0831               	movf	??__doprnt,w
  6836  024B  00A2               	movwf	putch@txData
  6837  024C  0A3A               	incf	__doprnt@pb,w
  6838  024D  0086               	movwf	6
  6839  024E  0187               	clrf	7
  6840  024F  3F41               	moviw [1]fsr1
  6841  0250  008A               	movwf	10
  6842  0251  3F40               	moviw [0]fsr1
  6843  0252  000A               	callw
  6844  0253  3182               	pagesel	$
  6845  0254  2A2A               	goto	l4964
  6846  0255                     l4906:	
  6847                           ;doprnt.c: 542: continue;
  6848                           
  6849                           
  6850                           ;doprnt.c: 543: }
  6851                           ;doprnt.c: 548: flag = 0;
  6852  0255  01B5               	clrf	__doprnt@flag
  6853                           
  6854                           ;doprnt.c: 635: switch(c = *f++) {
  6855  0256  2A7E               	goto	l4918
  6856  0257                     l4908:	
  6857                           ;doprnt.c: 802: default:
  6858                           
  6859                           ;doprnt.c: 698: case 'i':
  6860                           ;doprnt.c: 699: break;
  6861                           
  6862                           ;doprnt.c: 697: case 'd':
  6863                           
  6864                           ;doprnt.c: 638: goto alldone;
  6865                           
  6866                           ;doprnt.c: 637: case 0:
  6867                           
  6868                           
  6869                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6870  0257  0A3A               	incf	__doprnt@pb,w
  6871  0258  0086               	movwf	6
  6872  0259  0187               	clrf	7
  6873  025A  0016               	moviw fsr1++
  6874  025B  0401               	iorwf	1,w
  6875  025C  1903               	btfsc	3,2
  6876  025D  2A6B               	goto	l4912
  6877  025E  0839               	movf	__doprnt@c,w
  6878  025F  00B1               	movwf	??__doprnt
  6879  0260  0831               	movf	??__doprnt,w
  6880  0261  00A2               	movwf	putch@txData
  6881  0262  0A3A               	incf	__doprnt@pb,w
  6882  0263  0086               	movwf	6
  6883  0264  0187               	clrf	7
  6884  0265  3F41               	moviw [1]fsr1
  6885  0266  008A               	movwf	10
  6886  0267  3F40               	moviw [0]fsr1
  6887  0268  000A               	callw
  6888  0269  3182               	pagesel	$
  6889  026A  2A2A               	goto	l4964
  6890  026B                     l4912:	
  6891  026B  0020               	movlb	0	; select bank0
  6892  026C  0839               	movf	__doprnt@c,w
  6893  026D  00B1               	movwf	??__doprnt
  6894  026E  083A               	movf	__doprnt@pb,w
  6895  026F  0086               	movwf	6
  6896  0270  0187               	clrf	7
  6897  0271  0801               	movf	1,w
  6898  0272  0086               	movwf	6
  6899  0273  0187               	clrf	7
  6900  0274  0831               	movf	??__doprnt,w
  6901  0275  0081               	movwf	1
  6902  0276  3001               	movlw	1
  6903  0277  00B1               	movwf	??__doprnt
  6904  0278  083A               	movf	__doprnt@pb,w
  6905  0279  0086               	movwf	6
  6906  027A  0187               	clrf	7
  6907  027B  0831               	movf	??__doprnt,w
  6908  027C  0781               	addwf	1,f
  6909                           
  6910                           ;doprnt.c: 810: continue;
  6911  027D  2A2A               	goto	l4964
  6912  027E                     l4918:	
  6913                           ;doprnt.c: 822: }
  6914                           
  6915  027E  082F               	movf	__doprnt@f+1,w
  6916  027F  00B2               	movwf	??__doprnt+1
  6917  0280  082E               	movf	__doprnt@f,w
  6918  0281  00B1               	movwf	??__doprnt
  6919  0282  0AAE               	incf	__doprnt@f,f
  6920  0283  1903               	skipnz
  6921  0284  0AAF               	incf	__doprnt@f+1,f
  6922  0285  0831               	movf	??__doprnt,w
  6923  0286  0084               	movwf	4
  6924  0287  0832               	movf	??__doprnt+1,w
  6925  0288  0085               	movwf	5
  6926  0289  0800               	movf	0,w	;code access
  6927  028A  00B9               	movwf	__doprnt@c
  6928                           
  6929                           ; Switch size 1, requested type "space"
  6930                           ; Number of cases is 3, Range of values is 0 to 105
  6931                           ; switch strategies available:
  6932                           ; Name         Instructions Cycles
  6933                           ; simple_byte           10     6 (average)
  6934                           ; direct_byte          218     6 (fixed)
  6935                           ; jumptable            260     6 (fixed)
  6936                           ;	Chosen strategy is simple_byte
  6937  028B  3A00               	xorlw	0	; case 0
  6938  028C  1903               	skipnz
  6939  028D  2B57               	goto	l4966
  6940  028E  3A64               	xorlw	100	; case 100
  6941  028F  1903               	skipnz
  6942  0290  2A95               	goto	l4920
  6943  0291  3A0D               	xorlw	13	; case 105
  6944  0292  1903               	skipnz
  6945  0293  2A95               	goto	l4920
  6946  0294  2A57               	goto	l4908
  6947  0295                     l4920:	
  6948                           
  6949                           ;doprnt.c: 1253: {
  6950                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6951  0295  0830               	movf	__doprnt@ap,w
  6952  0296  0086               	movwf	6
  6953  0297  0187               	clrf	7
  6954  0298  0801               	movf	1,w
  6955  0299  0084               	movwf	4
  6956  029A  0185               	clrf	5
  6957  029B  3002               	movlw	2
  6958  029C  0781               	addwf	1,f
  6959  029D  3F00               	moviw [0]fsr0
  6960  029E  00B7               	movwf	__doprnt@val
  6961  029F  3F01               	moviw [1]fsr0
  6962  02A0  00B8               	movwf	__doprnt@val+1
  6963                           
  6964                           ;doprnt.c: 1261: if((int)val < 0) {
  6965  02A1  1FB8               	btfss	__doprnt@val+1,7
  6966  02A2  2AAC               	goto	l4928
  6967                           
  6968                           ;doprnt.c: 1262: flag |= 0x03;
  6969  02A3  3003               	movlw	3
  6970  02A4  00B1               	movwf	??__doprnt
  6971  02A5  0831               	movf	??__doprnt,w
  6972  02A6  04B5               	iorwf	__doprnt@flag,f
  6973                           
  6974                           ;doprnt.c: 1263: val = -val;
  6975  02A7  09B7               	comf	__doprnt@val,f
  6976  02A8  09B8               	comf	__doprnt@val+1,f
  6977  02A9  0AB7               	incf	__doprnt@val,f
  6978  02AA  1903               	skipnz
  6979  02AB  0AB8               	incf	__doprnt@val+1,f
  6980  02AC                     l4928:	
  6981                           
  6982                           ;doprnt.c: 1264: }
  6983                           ;doprnt.c: 1266: }
  6984                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6985  02AC  01B9               	clrf	__doprnt@c
  6986  02AD  0AB9               	incf	__doprnt@c,f
  6987  02AE  3005               	movlw	5
  6988  02AF  0639               	xorwf	__doprnt@c,w
  6989  02B0  1903               	btfsc	3,2
  6990  02B1  2AD1               	goto	l4940
  6991  02B2                     l4934:	
  6992                           
  6993                           ;doprnt.c: 1306: if(val < dpowers[c])
  6994  02B2  0839               	movf	__doprnt@c,w
  6995  02B3  00B1               	movwf	??__doprnt
  6996  02B4  01B2               	clrf	??__doprnt+1
  6997  02B5  35B1               	lslf	??__doprnt,f
  6998  02B6  0DB2               	rlf	??__doprnt+1,f
  6999  02B7  3066               	movlw	low (_dpowers| (0+32768))
  7000  02B8  0731               	addwf	??__doprnt,w
  7001  02B9  0084               	movwf	4
  7002  02BA  3090               	movlw	high (_dpowers| (0+32768))
  7003  02BB  3D32               	addwfc	??__doprnt+1,w
  7004  02BC  0085               	movwf	5
  7005  02BD  3F00               	moviw [0]fsr0
  7006  02BE  00B3               	movwf	??__doprnt+2
  7007  02BF  3F01               	moviw [1]fsr0
  7008  02C0  00B4               	movwf	??__doprnt+3
  7009  02C1  0834               	movf	??__doprnt+3,w
  7010  02C2  0238               	subwf	__doprnt@val+1,w
  7011  02C3  1D03               	skipz
  7012  02C4  2AC7               	goto	u5555
  7013  02C5  0833               	movf	??__doprnt+2,w
  7014  02C6  0237               	subwf	__doprnt@val,w
  7015  02C7                     u5555:	
  7016  02C7  1C03               	btfss	3,0
  7017  02C8  2AD1               	goto	l4940
  7018                           
  7019                           ;doprnt.c: 1307: break;
  7020  02C9  3001               	movlw	1
  7021  02CA  00B1               	movwf	??__doprnt
  7022  02CB  0831               	movf	??__doprnt,w
  7023  02CC  07B9               	addwf	__doprnt@c,f
  7024  02CD  3005               	movlw	5
  7025  02CE  0639               	xorwf	__doprnt@c,w
  7026  02CF  1D03               	btfss	3,2
  7027  02D0  2AB2               	goto	l4934
  7028  02D1                     l4940:	
  7029                           
  7030                           ;doprnt.c: 1422: {
  7031                           ;doprnt.c: 1438: if(flag & 0x03)
  7032  02D1  0835               	movf	__doprnt@flag,w
  7033  02D2  3903               	andlw	3
  7034  02D3  1903               	btfsc	3,2
  7035  02D4  2AFB               	goto	l4950
  7036                           
  7037                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  7038  02D5  0A3A               	incf	__doprnt@pb,w
  7039  02D6  0086               	movwf	6
  7040  02D7  0187               	clrf	7
  7041  02D8  0016               	moviw fsr1++
  7042  02D9  0401               	iorwf	1,w
  7043  02DA  1903               	btfsc	3,2
  7044  02DB  2AE9               	goto	l4946
  7045  02DC  302D               	movlw	45
  7046  02DD  00B1               	movwf	??__doprnt
  7047  02DE  0831               	movf	??__doprnt,w
  7048  02DF  00A2               	movwf	putch@txData
  7049  02E0  0A3A               	incf	__doprnt@pb,w
  7050  02E1  0086               	movwf	6
  7051  02E2  0187               	clrf	7
  7052  02E3  3F41               	moviw [1]fsr1
  7053  02E4  008A               	movwf	10
  7054  02E5  3F40               	moviw [0]fsr1
  7055  02E6  000A               	callw
  7056  02E7  3182               	pagesel	$
  7057  02E8  2AFB               	goto	l4950
  7058  02E9                     l4946:	
  7059  02E9  302D               	movlw	45
  7060  02EA  0020               	movlb	0	; select bank0
  7061  02EB  00B1               	movwf	??__doprnt
  7062  02EC  083A               	movf	__doprnt@pb,w
  7063  02ED  0086               	movwf	6
  7064  02EE  0187               	clrf	7
  7065  02EF  0801               	movf	1,w
  7066  02F0  0086               	movwf	6
  7067  02F1  0187               	clrf	7
  7068  02F2  0831               	movf	??__doprnt,w
  7069  02F3  0081               	movwf	1
  7070  02F4  3001               	movlw	1
  7071  02F5  00B1               	movwf	??__doprnt
  7072  02F6  083A               	movf	__doprnt@pb,w
  7073  02F7  0086               	movwf	6
  7074  02F8  0187               	clrf	7
  7075  02F9  0831               	movf	??__doprnt,w
  7076  02FA  0781               	addwf	1,f
  7077  02FB                     l4950:	
  7078                           
  7079                           ;doprnt.c: 1469: }
  7080                           ;doprnt.c: 1472: prec = c;
  7081  02FB  0020               	movlb	0	; select bank0
  7082  02FC  0839               	movf	__doprnt@c,w
  7083  02FD  00B1               	movwf	??__doprnt
  7084  02FE  0831               	movf	??__doprnt,w
  7085  02FF  00B6               	movwf	__doprnt@prec
  7086  0300                     l4962:	
  7087                           ;doprnt.c: 1474: while(prec--) {
  7088                           
  7089  0300  30FF               	movlw	255
  7090  0301  0020               	movlb	0	; select bank0
  7091  0302  00B1               	movwf	??__doprnt
  7092  0303  0831               	movf	??__doprnt,w
  7093  0304  07B6               	addwf	__doprnt@prec,f
  7094  0305  0A36               	incf	__doprnt@prec,w
  7095  0306  1903               	btfsc	3,2
  7096  0307  2A2A               	goto	l4964
  7097                           
  7098                           ;doprnt.c: 1478: {
  7099                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7100  0308  300A               	movlw	10
  7101  0309  00A8               	movwf	___lwmod@divisor
  7102  030A  3000               	movlw	0
  7103  030B  00A9               	movwf	___lwmod@divisor+1
  7104  030C  0836               	movf	__doprnt@prec,w
  7105  030D  00B1               	movwf	??__doprnt
  7106  030E  01B2               	clrf	??__doprnt+1
  7107  030F  35B1               	lslf	??__doprnt,f
  7108  0310  0DB2               	rlf	??__doprnt+1,f
  7109  0311  3066               	movlw	low (_dpowers| (0+32768))
  7110  0312  0731               	addwf	??__doprnt,w
  7111  0313  0084               	movwf	4
  7112  0314  3090               	movlw	high (_dpowers| (0+32768))
  7113  0315  3D32               	addwfc	??__doprnt+1,w
  7114  0316  0085               	movwf	5
  7115  0317  3F00               	moviw [0]fsr0
  7116  0318  00A0               	movwf	___lwdiv@divisor
  7117  0319  3F01               	moviw [1]fsr0
  7118  031A  00A1               	movwf	___lwdiv@divisor+1
  7119  031B  0838               	movf	__doprnt@val+1,w
  7120  031C  00A3               	movwf	___lwdiv@dividend+1
  7121  031D  0837               	movf	__doprnt@val,w
  7122  031E  00A2               	movwf	___lwdiv@dividend
  7123  031F  318A  22E1  3182   	fcall	___lwdiv
  7124  0322  0020               	movlb	0	; select bank0
  7125  0323  0821               	movf	?___lwdiv+1,w
  7126  0324  00AB               	movwf	___lwmod@dividend+1
  7127  0325  0820               	movf	?___lwdiv,w
  7128  0326  00AA               	movwf	___lwmod@dividend
  7129  0327  318A  22B4  3182   	fcall	___lwmod
  7130  032A  0020               	movlb	0	; select bank0
  7131  032B  0828               	movf	?___lwmod,w
  7132  032C  3E30               	addlw	48
  7133  032D  00B3               	movwf	??__doprnt+2
  7134  032E  0833               	movf	??__doprnt+2,w
  7135  032F  00B9               	movwf	__doprnt@c
  7136                           
  7137                           ;doprnt.c: 1523: }
  7138                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  7139  0330  0A3A               	incf	__doprnt@pb,w
  7140  0331  0086               	movwf	6
  7141  0332  0187               	clrf	7
  7142  0333  0016               	moviw fsr1++
  7143  0334  0401               	iorwf	1,w
  7144  0335  1903               	btfsc	3,2
  7145  0336  2B44               	goto	l4958
  7146  0337  0839               	movf	__doprnt@c,w
  7147  0338  00B1               	movwf	??__doprnt
  7148  0339  0831               	movf	??__doprnt,w
  7149  033A  00A2               	movwf	putch@txData
  7150  033B  0A3A               	incf	__doprnt@pb,w
  7151  033C  0086               	movwf	6
  7152  033D  0187               	clrf	7
  7153  033E  3F41               	moviw [1]fsr1
  7154  033F  008A               	movwf	10
  7155  0340  3F40               	moviw [0]fsr1
  7156  0341  000A               	callw
  7157  0342  3182               	pagesel	$
  7158  0343  2B00               	goto	l4962
  7159  0344                     l4958:	
  7160  0344  0020               	movlb	0	; select bank0
  7161  0345  0839               	movf	__doprnt@c,w
  7162  0346  00B1               	movwf	??__doprnt
  7163  0347  083A               	movf	__doprnt@pb,w
  7164  0348  0086               	movwf	6
  7165  0349  0187               	clrf	7
  7166  034A  0801               	movf	1,w
  7167  034B  0086               	movwf	6
  7168  034C  0187               	clrf	7
  7169  034D  0831               	movf	??__doprnt,w
  7170  034E  0081               	movwf	1
  7171  034F  3001               	movlw	1
  7172  0350  00B1               	movwf	??__doprnt
  7173  0351  083A               	movf	__doprnt@pb,w
  7174  0352  0086               	movwf	6
  7175  0353  0187               	clrf	7
  7176  0354  0831               	movf	??__doprnt,w
  7177  0355  0781               	addwf	1,f
  7178  0356  2B00               	goto	l4962
  7179  0357                     l4966:	
  7180                           ;doprnt.c: 1525: }
  7181                           ;doprnt.c: 1533: }
  7182                           ;doprnt.c: 1535: alldone:
  7183                           
  7184                           
  7185                           ;doprnt.c: 1540: return 0;
  7186  0357  01AE               	clrf	?__doprnt
  7187  0358  01AF               	clrf	?__doprnt+1
  7188  0359  0008               	return
  7189  035A                     __end_of__doprnt:	
  7190                           
  7191                           	psect	text20
  7192  08B7                     __ptext20:	
  7193 ;; *************** function _putch *****************
  7194 ;; Defined at:
  7195 ;;		line 161 in file "mcc_generated_files/eusart.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  txData          1    2[BANK0 ] unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;		None
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      void 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7209 ;;      Params:         0       1       0       0       0       0       0       0
  7210 ;;      Locals:         0       0       0       0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0
  7212 ;;      Totals:         0       1       0       0       0       0       0       0
  7213 ;;Total ram usage:        1 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    5
  7216 ;; This function calls:
  7217 ;;		_EUSART_Write
  7218 ;; This function is called by:
  7219 ;;		_sms_text
  7220 ;;		_int_gsm
  7221 ;;		_printf
  7222 ;;		__doprnt
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           
  7227                           ;psect for function _putch
  7228  08B7                     _putch:	
  7229                           
  7230                           ;eusart.c: 163: EUSART_Write(txData);
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7234  08B7  0020               	movlb	0	; select bank0
  7235  08B8  0822               	movf	putch@txData,w
  7236  08B9  3187  27D8         	fcall	_EUSART_Write
  7237  08BB  0008               	return
  7238  08BC                     __end_of_putch:	
  7239                           
  7240                           	psect	text21
  7241  07D8                     __ptext21:	
  7242 ;; *************** function _EUSART_Write *****************
  7243 ;; Defined at:
  7244 ;;		line 133 in file "mcc_generated_files/eusart.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;  txData          1    wreg     unsigned char 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;  txData          1    1[BANK0 ] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7258 ;;      Params:         0       0       0       0       0       0       0       0
  7259 ;;      Locals:         0       1       0       0       0       0       0       0
  7260 ;;      Temps:          0       1       0       0       0       0       0       0
  7261 ;;      Totals:         0       2       0       0       0       0       0       0
  7262 ;;Total ram usage:        2 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    4
  7265 ;; This function calls:
  7266 ;;		Nothing
  7267 ;; This function is called by:
  7268 ;;		_putch
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           
  7273                           ;psect for function _EUSART_Write
  7274  07D8                     _EUSART_Write:	
  7275                           
  7276                           ;incstack = 0
  7277                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  7278                           ;EUSART_Write@txData stored from wreg
  7279  07D8  0020               	movlb	0	; select bank0
  7280  07D9  00A1               	movwf	EUSART_Write@txData
  7281  07DA                     l2738:	
  7282                           ;eusart.c: 136: {
  7283                           
  7284                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  7285                           
  7286  07DA  0022               	movlb	2	; select bank2
  7287  07DB  086D               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  7288  07DC  1903               	btfsc	3,2
  7289  07DD  2FDA               	goto	l2738
  7290                           
  7291                           ;eusart.c: 137: }
  7292                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  7293  07DE  0021               	movlb	1	; select bank1
  7294  07DF  1A11               	btfsc	17,4	;volatile
  7295  07E0  2FE6               	goto	l161
  7296                           
  7297                           ;eusart.c: 140: {
  7298                           ;eusart.c: 141: TXREG = txData;
  7299  07E1  0020               	movlb	0	; select bank0
  7300  07E2  0821               	movf	EUSART_Write@txData,w
  7301  07E3  0023               	movlb	3	; select bank3
  7302  07E4  009A               	movwf	26	;volatile
  7303                           
  7304                           ;eusart.c: 142: }
  7305  07E5  2FFC               	goto	l2752
  7306  07E6                     l161:	
  7307                           
  7308                           ;eusart.c: 143: else
  7309                           ;eusart.c: 144: {
  7310                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  7311  07E6  1211               	bcf	17,4	;volatile
  7312                           
  7313                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  7314  07E7  0020               	movlb	0	; select bank0
  7315  07E8  0821               	movf	EUSART_Write@txData,w
  7316  07E9  00A0               	movwf	??_EUSART_Write
  7317  07EA  0867               	movf	_eusartTxHead,w
  7318  07EB  3ED2               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  7319  07EC  0086               	movwf	6
  7320  07ED  3001               	movlw	1	; select bank3/4
  7321  07EE  0087               	movwf	7
  7322  07EF  0820               	movf	??_EUSART_Write,w
  7323  07F0  0081               	movwf	1
  7324  07F1  3001               	movlw	1
  7325  07F2  00A0               	movwf	??_EUSART_Write
  7326  07F3  0820               	movf	??_EUSART_Write,w
  7327  07F4  07E7               	addwf	_eusartTxHead,f	;volatile
  7328                           
  7329                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  7330  07F5  3008               	movlw	8
  7331  07F6  0267               	subwf	_eusartTxHead,w	;volatile
  7332  07F7  1803               	btfsc	3,0
  7333                           
  7334                           ;eusart.c: 148: {
  7335                           ;eusart.c: 149: eusartTxHead = 0;
  7336  07F8  01E7               	clrf	_eusartTxHead	;volatile
  7337                           
  7338                           ;eusart.c: 150: }
  7339                           ;eusart.c: 151: eusartTxBufferRemaining--;
  7340  07F9  3001               	movlw	1
  7341  07FA  0022               	movlb	2	; select bank2
  7342  07FB  02ED               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  7343  07FC                     l2752:	
  7344                           
  7345                           ;eusart.c: 152: }
  7346                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  7347  07FC  0021               	movlb	1	; select bank1
  7348  07FD  1611               	bsf	17,4	;volatile
  7349  07FE  0008               	return
  7350  07FF                     __end_of_EUSART_Write:	
  7351                           
  7352                           	psect	text22
  7353  0AB4                     __ptext22:	
  7354 ;; *************** function ___lwmod *****************
  7355 ;; Defined at:
  7356 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  divisor         2    8[BANK0 ] unsigned int 
  7359 ;;  dividend        2   10[BANK0 ] unsigned int 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  counter         1   13[BANK0 ] unsigned char 
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  2    8[BANK0 ] unsigned int 
  7364 ;; Registers used:
  7365 ;;		wreg, status,2, status,0
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7371 ;;      Params:         0       4       0       0       0       0       0       0
  7372 ;;      Locals:         0       1       0       0       0       0       0       0
  7373 ;;      Temps:          0       1       0       0       0       0       0       0
  7374 ;;      Totals:         0       6       0       0       0       0       0       0
  7375 ;;Total ram usage:        6 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    4
  7378 ;; This function calls:
  7379 ;;		Nothing
  7380 ;; This function is called by:
  7381 ;;		__doprnt
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function ___lwmod
  7387  0AB4                     ___lwmod:	
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7391  0AB4  0020               	movlb	0	; select bank0
  7392  0AB5  0828               	movf	___lwmod@divisor,w
  7393  0AB6  0429               	iorwf	___lwmod@divisor+1,w
  7394  0AB7  1903               	btfsc	3,2
  7395  0AB8  2ADC               	goto	l2800
  7396  0AB9  01AD               	clrf	___lwmod@counter
  7397  0ABA  0AAD               	incf	___lwmod@counter,f
  7398  0ABB                     l2790:	
  7399  0ABB  1BA9               	btfsc	___lwmod@divisor+1,7
  7400  0ABC  2AC7               	goto	l2792
  7401  0ABD  3001               	movlw	1
  7402  0ABE                     u2445:	
  7403  0ABE  35A8               	lslf	___lwmod@divisor,f
  7404  0ABF  0DA9               	rlf	___lwmod@divisor+1,f
  7405  0AC0  0B89               	decfsz	9,f
  7406  0AC1  2ABE               	goto	u2445
  7407  0AC2  3001               	movlw	1
  7408  0AC3  00AC               	movwf	??___lwmod
  7409  0AC4  082C               	movf	??___lwmod,w
  7410  0AC5  07AD               	addwf	___lwmod@counter,f
  7411  0AC6  2ABB               	goto	l2790
  7412  0AC7                     l2792:	
  7413  0AC7  0829               	movf	___lwmod@divisor+1,w
  7414  0AC8  022B               	subwf	___lwmod@dividend+1,w
  7415  0AC9  1D03               	skipz
  7416  0ACA  2ACD               	goto	u2465
  7417  0ACB  0828               	movf	___lwmod@divisor,w
  7418  0ACC  022A               	subwf	___lwmod@dividend,w
  7419  0ACD                     u2465:	
  7420  0ACD  1C03               	skipc
  7421  0ACE  2AD3               	goto	l2796
  7422  0ACF  0828               	movf	___lwmod@divisor,w
  7423  0AD0  02AA               	subwf	___lwmod@dividend,f
  7424  0AD1  0829               	movf	___lwmod@divisor+1,w
  7425  0AD2  3BAB               	subwfb	___lwmod@dividend+1,f
  7426  0AD3                     l2796:	
  7427  0AD3  3001               	movlw	1
  7428  0AD4                     u2475:	
  7429  0AD4  36A9               	lsrf	___lwmod@divisor+1,f
  7430  0AD5  0CA8               	rrf	___lwmod@divisor,f
  7431  0AD6  0B89               	decfsz	9,f
  7432  0AD7  2AD4               	goto	u2475
  7433  0AD8  3001               	movlw	1
  7434  0AD9  02AD               	subwf	___lwmod@counter,f
  7435  0ADA  1D03               	btfss	3,2
  7436  0ADB  2AC7               	goto	l2792
  7437  0ADC                     l2800:	
  7438  0ADC  082B               	movf	___lwmod@dividend+1,w
  7439  0ADD  00A9               	movwf	?___lwmod+1
  7440  0ADE  082A               	movf	___lwmod@dividend,w
  7441  0ADF  00A8               	movwf	?___lwmod
  7442  0AE0  0008               	return
  7443  0AE1                     __end_of___lwmod:	
  7444                           
  7445                           	psect	text23
  7446  0AE1                     __ptext23:	
  7447 ;; *************** function ___lwdiv *****************
  7448 ;; Defined at:
  7449 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  divisor         2    0[BANK0 ] unsigned int 
  7452 ;;  dividend        2    2[BANK0 ] unsigned int 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  quotient        2    5[BANK0 ] unsigned int 
  7455 ;;  counter         1    7[BANK0 ] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  2    0[BANK0 ] unsigned int 
  7458 ;; Registers used:
  7459 ;;		wreg, status,2, status,0
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7465 ;;      Params:         0       4       0       0       0       0       0       0
  7466 ;;      Locals:         0       3       0       0       0       0       0       0
  7467 ;;      Temps:          0       1       0       0       0       0       0       0
  7468 ;;      Totals:         0       8       0       0       0       0       0       0
  7469 ;;Total ram usage:        8 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    4
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		__doprnt
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function ___lwdiv
  7481  0AE1                     ___lwdiv:	
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7485  0AE1  0020               	movlb	0	; select bank0
  7486  0AE2  01A5               	clrf	___lwdiv@quotient
  7487  0AE3  01A6               	clrf	___lwdiv@quotient+1
  7488  0AE4  0820               	movf	___lwdiv@divisor,w
  7489  0AE5  0421               	iorwf	___lwdiv@divisor+1,w
  7490  0AE6  1903               	btfsc	3,2
  7491  0AE7  2B11               	goto	l2778
  7492  0AE8  01A7               	clrf	___lwdiv@counter
  7493  0AE9  0AA7               	incf	___lwdiv@counter,f
  7494  0AEA                     l2766:	
  7495  0AEA  1BA1               	btfsc	___lwdiv@divisor+1,7
  7496  0AEB  2AF6               	goto	l2768
  7497  0AEC  3001               	movlw	1
  7498  0AED                     u2375:	
  7499  0AED  35A0               	lslf	___lwdiv@divisor,f
  7500  0AEE  0DA1               	rlf	___lwdiv@divisor+1,f
  7501  0AEF  0B89               	decfsz	9,f
  7502  0AF0  2AED               	goto	u2375
  7503  0AF1  3001               	movlw	1
  7504  0AF2  00A4               	movwf	??___lwdiv
  7505  0AF3  0824               	movf	??___lwdiv,w
  7506  0AF4  07A7               	addwf	___lwdiv@counter,f
  7507  0AF5  2AEA               	goto	l2766
  7508  0AF6                     l2768:	
  7509  0AF6  3001               	movlw	1
  7510  0AF7                     u2395:	
  7511  0AF7  35A5               	lslf	___lwdiv@quotient,f
  7512  0AF8  0DA6               	rlf	___lwdiv@quotient+1,f
  7513  0AF9  0B89               	decfsz	9,f
  7514  0AFA  2AF7               	goto	u2395
  7515  0AFB  0821               	movf	___lwdiv@divisor+1,w
  7516  0AFC  0223               	subwf	___lwdiv@dividend+1,w
  7517  0AFD  1D03               	skipz
  7518  0AFE  2B01               	goto	u2405
  7519  0AFF  0820               	movf	___lwdiv@divisor,w
  7520  0B00  0222               	subwf	___lwdiv@dividend,w
  7521  0B01                     u2405:	
  7522  0B01  1C03               	skipc
  7523  0B02  2B08               	goto	l2774
  7524  0B03  0820               	movf	___lwdiv@divisor,w
  7525  0B04  02A2               	subwf	___lwdiv@dividend,f
  7526  0B05  0821               	movf	___lwdiv@divisor+1,w
  7527  0B06  3BA3               	subwfb	___lwdiv@dividend+1,f
  7528  0B07  1425               	bsf	___lwdiv@quotient,0
  7529  0B08                     l2774:	
  7530  0B08  3001               	movlw	1
  7531  0B09                     u2415:	
  7532  0B09  36A1               	lsrf	___lwdiv@divisor+1,f
  7533  0B0A  0CA0               	rrf	___lwdiv@divisor,f
  7534  0B0B  0B89               	decfsz	9,f
  7535  0B0C  2B09               	goto	u2415
  7536  0B0D  3001               	movlw	1
  7537  0B0E  02A7               	subwf	___lwdiv@counter,f
  7538  0B0F  1D03               	btfss	3,2
  7539  0B10  2AF6               	goto	l2768
  7540  0B11                     l2778:	
  7541  0B11  0826               	movf	___lwdiv@quotient+1,w
  7542  0B12  00A1               	movwf	?___lwdiv+1
  7543  0B13  0825               	movf	___lwdiv@quotient,w
  7544  0B14  00A0               	movwf	?___lwdiv
  7545  0B15  0008               	return
  7546  0B16                     __end_of___lwdiv:	
  7547                           
  7548                           	psect	text24
  7549  0E56                     __ptext24:	
  7550 ;; *************** function ___fttol *****************
  7551 ;; Defined at:
  7552 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  f1              3    0[BANK0 ] float 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  lval            4    9[BANK0 ] unsigned long 
  7557 ;;  exp1            1   13[BANK0 ] unsigned char 
  7558 ;;  sign1           1    8[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  4    0[BANK0 ] long 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7568 ;;      Params:         0       4       0       0       0       0       0       0
  7569 ;;      Locals:         0       6       0       0       0       0       0       0
  7570 ;;      Temps:          0       4       0       0       0       0       0       0
  7571 ;;      Totals:         0      14       0       0       0       0       0       0
  7572 ;;Total ram usage:       14 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    4
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function ___fttol
  7584  0E56                     ___fttol:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7588  0E56  0020               	movlb	0	; select bank0
  7589  0E57  0820               	movf	___fttol@f1,w
  7590  0E58  00A4               	movwf	??___fttol
  7591  0E59  0821               	movf	___fttol@f1+1,w
  7592  0E5A  00A5               	movwf	??___fttol+1
  7593  0E5B  0822               	movf	___fttol@f1+2,w
  7594  0E5C  00A6               	movwf	??___fttol+2
  7595  0E5D  1003               	clrc
  7596  0E5E  0D25               	rlf	??___fttol+1,w
  7597  0E5F  0D26               	rlf	??___fttol+2,w
  7598  0E60  00A7               	movwf	??___fttol+3
  7599  0E61  0827               	movf	??___fttol+3,w
  7600  0E62  00AD               	movwf	___fttol@exp1
  7601  0E63  082D               	movf	___fttol@exp1,w
  7602  0E64  1D03               	btfss	3,2
  7603  0E65  2E6F               	goto	l3894
  7604  0E66  3000               	movlw	0
  7605  0E67  00A3               	movwf	?___fttol+3
  7606  0E68  3000               	movlw	0
  7607  0E69  00A2               	movwf	?___fttol+2
  7608  0E6A  3000               	movlw	0
  7609  0E6B  00A1               	movwf	?___fttol+1
  7610  0E6C  3000               	movlw	0
  7611  0E6D  00A0               	movwf	?___fttol
  7612  0E6E  0008               	return
  7613  0E6F                     l3894:	
  7614  0E6F  0820               	movf	___fttol@f1,w
  7615  0E70  00A4               	movwf	??___fttol
  7616  0E71  0821               	movf	___fttol@f1+1,w
  7617  0E72  00A5               	movwf	??___fttol+1
  7618  0E73  0822               	movf	___fttol@f1+2,w
  7619  0E74  00A6               	movwf	??___fttol+2
  7620  0E75  3017               	movlw	23
  7621  0E76                     u4205:	
  7622  0E76  36A6               	lsrf	??___fttol+2,f
  7623  0E77  0CA5               	rrf	??___fttol+1,f
  7624  0E78  0CA4               	rrf	??___fttol,f
  7625  0E79  0B89               	decfsz	9,f
  7626  0E7A  2E76               	goto	u4205
  7627  0E7B  0824               	movf	??___fttol,w
  7628  0E7C  00A7               	movwf	??___fttol+3
  7629  0E7D  0827               	movf	??___fttol+3,w
  7630  0E7E  00A8               	movwf	___fttol@sign1
  7631  0E7F  17A1               	bsf	___fttol@f1+1,7
  7632  0E80  30FF               	movlw	255
  7633  0E81  05A0               	andwf	___fttol@f1,f
  7634  0E82  30FF               	movlw	255
  7635  0E83  05A1               	andwf	___fttol@f1+1,f
  7636  0E84  3000               	movlw	0
  7637  0E85  05A2               	andwf	___fttol@f1+2,f
  7638  0E86  0820               	movf	___fttol@f1,w
  7639  0E87  00A9               	movwf	___fttol@lval
  7640  0E88  0821               	movf	___fttol@f1+1,w
  7641  0E89  00AA               	movwf	___fttol@lval+1
  7642  0E8A  0822               	movf	___fttol@f1+2,w
  7643  0E8B  00AB               	movwf	___fttol@lval+2
  7644  0E8C  01AC               	clrf	___fttol@lval+3
  7645  0E8D  308E               	movlw	142
  7646  0E8E  02AD               	subwf	___fttol@exp1,f
  7647  0E8F  1FAD               	btfss	___fttol@exp1,7
  7648  0E90  2EAD               	goto	l3914
  7649  0E91  082D               	movf	___fttol@exp1,w
  7650  0E92  3A80               	xorlw	128
  7651  0E93  3E8F               	addlw	143
  7652  0E94  1803               	skipnc
  7653  0E95  2E9F               	goto	l3912
  7654  0E96  3000               	movlw	0
  7655  0E97  00A3               	movwf	?___fttol+3
  7656  0E98  3000               	movlw	0
  7657  0E99  00A2               	movwf	?___fttol+2
  7658  0E9A  3000               	movlw	0
  7659  0E9B  00A1               	movwf	?___fttol+1
  7660  0E9C  3000               	movlw	0
  7661  0E9D  00A0               	movwf	?___fttol
  7662  0E9E  0008               	return
  7663  0E9F                     l3912:	
  7664  0E9F  3001               	movlw	1
  7665  0EA0                     u4235:	
  7666  0EA0  36AC               	lsrf	___fttol@lval+3,f
  7667  0EA1  0CAB               	rrf	___fttol@lval+2,f
  7668  0EA2  0CAA               	rrf	___fttol@lval+1,f
  7669  0EA3  0CA9               	rrf	___fttol@lval,f
  7670  0EA4  0B89               	decfsz	9,f
  7671  0EA5  2EA0               	goto	u4235
  7672  0EA6  3001               	movlw	1
  7673  0EA7  00A4               	movwf	??___fttol
  7674  0EA8  0824               	movf	??___fttol,w
  7675  0EA9  07AD               	addwf	___fttol@exp1,f
  7676  0EAA  1903               	btfsc	3,2
  7677  0EAB  2EC6               	goto	l3922
  7678  0EAC  2E9F               	goto	l3912
  7679  0EAD                     l3914:	
  7680  0EAD  3018               	movlw	24
  7681  0EAE  022D               	subwf	___fttol@exp1,w
  7682  0EAF  1C03               	skipc
  7683  0EB0  2EC3               	goto	l1154
  7684  0EB1  3000               	movlw	0
  7685  0EB2  00A3               	movwf	?___fttol+3
  7686  0EB3  3000               	movlw	0
  7687  0EB4  00A2               	movwf	?___fttol+2
  7688  0EB5  3000               	movlw	0
  7689  0EB6  00A1               	movwf	?___fttol+1
  7690  0EB7  3000               	movlw	0
  7691  0EB8  00A0               	movwf	?___fttol
  7692  0EB9  0008               	return
  7693  0EBA                     l3920:	
  7694  0EBA  3001               	movlw	1
  7695  0EBB                     u4265:	
  7696  0EBB  35A9               	lslf	___fttol@lval,f
  7697  0EBC  0DAA               	rlf	___fttol@lval+1,f
  7698  0EBD  0DAB               	rlf	___fttol@lval+2,f
  7699  0EBE  0DAC               	rlf	___fttol@lval+3,f
  7700  0EBF  0B89               	decfsz	9,f
  7701  0EC0  2EBB               	goto	u4265
  7702  0EC1  3001               	movlw	1
  7703  0EC2  02AD               	subwf	___fttol@exp1,f
  7704  0EC3                     l1154:	
  7705  0EC3  082D               	movf	___fttol@exp1,w
  7706  0EC4  1D03               	btfss	3,2
  7707  0EC5  2EBA               	goto	l3920
  7708  0EC6                     l3922:	
  7709  0EC6  0828               	movf	___fttol@sign1,w
  7710  0EC7  1903               	btfsc	3,2
  7711  0EC8  2ED4               	goto	l3926
  7712  0EC9  09A9               	comf	___fttol@lval,f
  7713  0ECA  09AA               	comf	___fttol@lval+1,f
  7714  0ECB  09AB               	comf	___fttol@lval+2,f
  7715  0ECC  09AC               	comf	___fttol@lval+3,f
  7716  0ECD  0AA9               	incf	___fttol@lval,f
  7717  0ECE  1903               	skipnz
  7718  0ECF  0AAA               	incf	___fttol@lval+1,f
  7719  0ED0  1903               	skipnz
  7720  0ED1  0AAB               	incf	___fttol@lval+2,f
  7721  0ED2  1903               	skipnz
  7722  0ED3  0AAC               	incf	___fttol@lval+3,f
  7723  0ED4                     l3926:	
  7724  0ED4  082C               	movf	___fttol@lval+3,w
  7725  0ED5  00A3               	movwf	?___fttol+3
  7726  0ED6  082B               	movf	___fttol@lval+2,w
  7727  0ED7  00A2               	movwf	?___fttol+2
  7728  0ED8  082A               	movf	___fttol@lval+1,w
  7729  0ED9  00A1               	movwf	?___fttol+1
  7730  0EDA  0829               	movf	___fttol@lval,w
  7731  0EDB  00A0               	movwf	?___fttol
  7732  0EDC  0008               	return
  7733  0EDD                     __end_of___fttol:	
  7734                           
  7735                           	psect	text25
  7736  08AB                     __ptext25:	
  7737 ;; *************** function _TMR1_enable *****************
  7738 ;; Defined at:
  7739 ;;		line 69 in file "mcc_generated_files/tmr1.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		None
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7753 ;;      Params:         0       0       0       0       0       0       0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0
  7756 ;;      Totals:         0       0       0       0       0       0       0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    4
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_main
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function _TMR1_enable
  7769  08AB                     _TMR1_enable:	
  7770                           
  7771                           ;tmr1.c: 71: PIE1bits.TMR1IE = 1;
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _TMR1_enable: []
  7775  08AB  0021               	movlb	1	; select bank1
  7776  08AC  1411               	bsf	17,0	;volatile
  7777  08AD  0008               	return
  7778  08AE                     __end_of_TMR1_enable:	
  7779                           
  7780                           	psect	text26
  7781  08A8                     __ptext26:	
  7782 ;; *************** function _TMR1_disable *****************
  7783 ;; Defined at:
  7784 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		None
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7798 ;;      Params:         0       0       0       0       0       0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0
  7801 ;;      Totals:         0       0       0       0       0       0       0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    4
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_main
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function _TMR1_disable
  7814  08A8                     _TMR1_disable:	
  7815                           
  7816                           ;tmr1.c: 66: PIE1bits.TMR1IE = 0;
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in _TMR1_disable: []
  7820  08A8  0021               	movlb	1	; select bank1
  7821  08A9  1011               	bcf	17,0	;volatile
  7822  08AA  0008               	return
  7823  08AB                     __end_of_TMR1_disable:	
  7824                           
  7825                           	psect	text27
  7826  0929                     __ptext27:	
  7827 ;; *************** function _StartSignal *****************
  7828 ;; Defined at:
  7829 ;;		line 5 in file "dht11.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;		None
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      void 
  7836 ;; Registers used:
  7837 ;;		wreg
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7843 ;;      Params:         0       0       0       0       0       0       0       0
  7844 ;;      Locals:         0       0       0       0       0       0       0       0
  7845 ;;      Temps:          0       1       0       0       0       0       0       0
  7846 ;;      Totals:         0       1       0       0       0       0       0       0
  7847 ;;Total ram usage:        1 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    4
  7850 ;; This function calls:
  7851 ;;		Nothing
  7852 ;; This function is called by:
  7853 ;;		_main
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _StartSignal
  7859  0929                     _StartSignal:	
  7860                           
  7861                           ;dht11.c: 7: TRISDbits.TRISD2 = 0;
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _StartSignal: [wreg]
  7865  0929  0021               	movlb	1	; select bank1
  7866  092A  110F               	bcf	15,2	;volatile
  7867                           
  7868                           ;dht11.c: 8: PORTDbits.RD2 = 0;
  7869  092B  0020               	movlb	0	; select bank0
  7870  092C  110F               	bcf	15,2	;volatile
  7871                           
  7872                           ;dht11.c: 9: _delay((unsigned long)((18)*(18432000/4000.0)));
  7873  092D  306C               	movlw	108
  7874  092E  0020               	movlb	0	; select bank0
  7875  092F  00A0               	movwf	??_StartSignal
  7876  0930  30B7               	movlw	183
  7877  0931                     u5937:	
  7878  0931  0B89               	decfsz	9,f
  7879  0932  2931               	goto	u5937
  7880  0933  0BA0               	decfsz	??_StartSignal,f
  7881  0934  2931               	goto	u5937
  7882                           
  7883                           ;dht11.c: 10: PORTDbits.RD2 = 1;
  7884  0935  0020               	movlb	0	; select bank0
  7885  0936  150F               	bsf	15,2	;volatile
  7886                           
  7887                           ;dht11.c: 11: _delay((unsigned long)((30)*(18432000/4000000.0)));
  7888  0937  302E               	movlw	46
  7889  0938                     u5947:	
  7890  0938  0B89               	decfsz	9,f
  7891  0939  2938               	goto	u5947
  7892                           
  7893                           ;dht11.c: 12: TRISDbits.TRISD2 = 1;
  7894  093A  0021               	movlb	1	; select bank1
  7895  093B  150F               	bsf	15,2	;volatile
  7896  093C  0008               	return
  7897  093D                     __end_of_StartSignal:	
  7898                           
  7899                           	psect	text28
  7900  0905                     __ptext28:	
  7901 ;; *************** function _SYSTEM_Initialize *****************
  7902 ;; Defined at:
  7903 ;;		line 70 in file "mcc_generated_files/mcc.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;		None
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;		None
  7908 ;; Return value:  Size  Location     Type
  7909 ;;                  1    wreg      void 
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7917 ;;      Params:         0       0       0       0       0       0       0       0
  7918 ;;      Locals:         0       0       0       0       0       0       0       0
  7919 ;;      Temps:          0       0       0       0       0       0       0       0
  7920 ;;      Totals:         0       0       0       0       0       0       0       0
  7921 ;;Total ram usage:        0 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    6
  7924 ;; This function calls:
  7925 ;;		_ADC_Initialize
  7926 ;;		_EUSART_Initialize
  7927 ;;		_OSCILLATOR_Initialize
  7928 ;;		_PIN_MANAGER_Initialize
  7929 ;;		_TMR1_Initialize
  7930 ;;		_WDT_Initialize
  7931 ;; This function is called by:
  7932 ;;		_main
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           
  7937                           ;psect for function _SYSTEM_Initialize
  7938  0905                     _SYSTEM_Initialize:	
  7939                           
  7940                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  7941                           
  7942                           ;incstack = 0
  7943                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7944  0905  318A  2267  3189   	fcall	_PIN_MANAGER_Initialize
  7945                           
  7946                           ;mcc.c: 74: OSCILLATOR_Initialize();
  7947  0908  3188  20B2  3189   	fcall	_OSCILLATOR_Initialize
  7948                           
  7949                           ;mcc.c: 75: WDT_Initialize();
  7950  090B  3188  20AE  3189   	fcall	_WDT_Initialize
  7951                           
  7952                           ;mcc.c: 76: TMR1_Initialize();
  7953  090E  3189  217F  3189   	fcall	_TMR1_Initialize
  7954                           
  7955                           ;mcc.c: 77: ADC_Initialize();
  7956  0911  3188  20C8  3189   	fcall	_ADC_Initialize
  7957                           
  7958                           ;mcc.c: 78: EUSART_Initialize();
  7959  0914  3189  21EB         	fcall	_EUSART_Initialize
  7960  0916  0008               	return
  7961  0917                     __end_of_SYSTEM_Initialize:	
  7962                           
  7963                           	psect	text29
  7964  08AE                     __ptext29:	
  7965 ;; *************** function _WDT_Initialize *****************
  7966 ;; Defined at:
  7967 ;;		line 89 in file "mcc_generated_files/mcc.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;		None
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;		None
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  1    wreg      void 
  7974 ;; Registers used:
  7975 ;;		wreg
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7981 ;;      Params:         0       0       0       0       0       0       0       0
  7982 ;;      Locals:         0       0       0       0       0       0       0       0
  7983 ;;      Temps:          0       0       0       0       0       0       0       0
  7984 ;;      Totals:         0       0       0       0       0       0       0       0
  7985 ;;Total ram usage:        0 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; Hardware stack levels required when called:    4
  7988 ;; This function calls:
  7989 ;;		Nothing
  7990 ;; This function is called by:
  7991 ;;		_SYSTEM_Initialize
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function _WDT_Initialize
  7997  08AE                     _WDT_Initialize:	
  7998                           
  7999                           ;mcc.c: 92: WDTCON = 0x16;
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _WDT_Initialize: [wreg]
  8003  08AE  3016               	movlw	22
  8004  08AF  0021               	movlb	1	; select bank1
  8005  08B0  0097               	movwf	23	;volatile
  8006  08B1  0008               	return
  8007  08B2                     __end_of_WDT_Initialize:	
  8008                           
  8009                           	psect	text30
  8010  097F                     __ptext30:	
  8011 ;; *************** function _TMR1_Initialize *****************
  8012 ;; Defined at:
  8013 ;;		line 74 in file "mcc_generated_files/tmr1.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;		None
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      void 
  8020 ;; Registers used:
  8021 ;;		wreg, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8027 ;;      Params:         0       0       0       0       0       0       0       0
  8028 ;;      Locals:         0       0       0       0       0       0       0       0
  8029 ;;      Temps:          0       0       0       0       0       0       0       0
  8030 ;;      Totals:         0       0       0       0       0       0       0       0
  8031 ;;Total ram usage:        0 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    5
  8034 ;; This function calls:
  8035 ;;		_TMR1_SetInterruptHandler
  8036 ;;		_TMR1_StartTimer
  8037 ;; This function is called by:
  8038 ;;		_SYSTEM_Initialize
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _TMR1_Initialize
  8044  097F                     _TMR1_Initialize:	
  8045                           
  8046                           ;tmr1.c: 79: T1CON = 0x00;
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8050  097F  0020               	movlb	0	; select bank0
  8051  0980  0198               	clrf	24	;volatile
  8052                           
  8053                           ;tmr1.c: 82: T1GCON = 0x00;
  8054  0981  0199               	clrf	25	;volatile
  8055                           
  8056                           ;tmr1.c: 85: TMR1H = 0xEE;
  8057  0982  30EE               	movlw	238
  8058  0983  0097               	movwf	23	;volatile
  8059                           
  8060                           ;tmr1.c: 88: TMR1L = 0x00;
  8061  0984  0196               	clrf	22	;volatile
  8062                           
  8063                           ;tmr1.c: 91: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  8064  0985  0817               	movf	23,w	;volatile
  8065  0986  00EF               	movwf	_timer1ReloadVal+1	;volatile
  8066  0987  0816               	movf	22,w	;volatile
  8067  0988  00EE               	movwf	_timer1ReloadVal	;volatile
  8068                           
  8069                           ;tmr1.c: 94: PIR1bits.TMR1IF = 0;
  8070  0989  1011               	bcf	17,0	;volatile
  8071                           
  8072                           ;tmr1.c: 97: PIE1bits.TMR1IE = 1;
  8073  098A  0021               	movlb	1	; select bank1
  8074  098B  1411               	bsf	17,0	;volatile
  8075                           
  8076                           ;tmr1.c: 100: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  8077  098C  30FF               	movlw	low _TMR1_DefaultInterruptHandler
  8078  098D  0020               	movlb	0	; select bank0
  8079  098E  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8080  098F  3007               	movlw	high _TMR1_DefaultInterruptHandler
  8081  0990  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8082  0991  3188  20D1  3189   	fcall	_TMR1_SetInterruptHandler
  8083                           
  8084                           ;tmr1.c: 103: TMR1_StartTimer();
  8085  0994  3188  20A5         	fcall	_TMR1_StartTimer
  8086  0996  0008               	return
  8087  0997                     __end_of_TMR1_Initialize:	
  8088                           
  8089                           	psect	text31
  8090  08A5                     __ptext31:	
  8091 ;; *************** function _TMR1_StartTimer *****************
  8092 ;; Defined at:
  8093 ;;		line 106 in file "mcc_generated_files/tmr1.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		None
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8107 ;;      Params:         0       0       0       0       0       0       0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0       0
  8110 ;;      Totals:         0       0       0       0       0       0       0       0
  8111 ;;Total ram usage:        0 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    4
  8114 ;; This function calls:
  8115 ;;		Nothing
  8116 ;; This function is called by:
  8117 ;;		_TMR1_Initialize
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _TMR1_StartTimer
  8123  08A5                     _TMR1_StartTimer:	
  8124                           
  8125                           ;tmr1.c: 109: T1CONbits.TMR1ON = 1;
  8126                           
  8127                           ;incstack = 0
  8128                           ; Regs used in _TMR1_StartTimer: []
  8129  08A5  0020               	movlb	0	; select bank0
  8130  08A6  1418               	bsf	24,0	;volatile
  8131  08A7  0008               	return
  8132  08A8                     __end_of_TMR1_StartTimer:	
  8133                           
  8134                           	psect	text32
  8135  08D1                     __ptext32:	
  8136 ;; *************** function _TMR1_SetInterruptHandler *****************
  8137 ;; Defined at:
  8138 ;;		line 227 in file "mcc_generated_files/tmr1.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  8141 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8153 ;;      Params:         0       2       0       0       0       0       0       0
  8154 ;;      Locals:         0       0       0       0       0       0       0       0
  8155 ;;      Temps:          0       0       0       0       0       0       0       0
  8156 ;;      Totals:         0       2       0       0       0       0       0       0
  8157 ;;Total ram usage:        2 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    4
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_TMR1_Initialize
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _TMR1_SetInterruptHandler
  8169  08D1                     _TMR1_SetInterruptHandler:	
  8170                           
  8171                           ;tmr1.c: 228: TMR1_InterruptHandler = InterruptHandler;
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8175  08D1  0020               	movlb	0	; select bank0
  8176  08D2  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8177  08D3  0023               	movlb	3	; select bank3
  8178  08D4  00E8               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
  8179  08D5  0020               	movlb	0	; select bank0
  8180  08D6  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8181  08D7  0023               	movlb	3	; select bank3
  8182  08D8  00E7               	movwf	_TMR1_InterruptHandler^(0+384)
  8183  08D9  0008               	return
  8184  08DA                     __end_of_TMR1_SetInterruptHandler:	
  8185                           
  8186                           	psect	text33
  8187  0A67                     __ptext33:	
  8188 ;; *************** function _PIN_MANAGER_Initialize *****************
  8189 ;; Defined at:
  8190 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8204 ;;      Params:         0       0       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    4
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_SYSTEM_Initialize
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _PIN_MANAGER_Initialize
  8220  0A67                     _PIN_MANAGER_Initialize:	
  8221                           
  8222                           ;pin_manager.c: 57: LATE = 0x00;
  8223                           
  8224                           ;incstack = 0
  8225                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8226  0A67  0022               	movlb	2	; select bank2
  8227  0A68  0190               	clrf	16	;volatile
  8228                           
  8229                           ;pin_manager.c: 58: LATD = 0x00;
  8230  0A69  018F               	clrf	15	;volatile
  8231                           
  8232                           ;pin_manager.c: 59: LATA = 0x00;
  8233  0A6A  018C               	clrf	12	;volatile
  8234                           
  8235                           ;pin_manager.c: 60: LATB = 0x00;
  8236  0A6B  018D               	clrf	13	;volatile
  8237                           
  8238                           ;pin_manager.c: 61: LATC = 0x00;
  8239  0A6C  018E               	clrf	14	;volatile
  8240                           
  8241                           ;pin_manager.c: 66: TRISE = 0x0F;
  8242  0A6D  300F               	movlw	15
  8243  0A6E  0021               	movlb	1	; select bank1
  8244  0A6F  0090               	movwf	16	;volatile
  8245                           
  8246                           ;pin_manager.c: 67: TRISA = 0xFF;
  8247  0A70  30FF               	movlw	255
  8248  0A71  008C               	movwf	12	;volatile
  8249                           
  8250                           ;pin_manager.c: 68: TRISB = 0x00;
  8251  0A72  018D               	clrf	13	;volatile
  8252                           
  8253                           ;pin_manager.c: 69: TRISC = 0x86;
  8254  0A73  3086               	movlw	134
  8255  0A74  008E               	movwf	14	;volatile
  8256                           
  8257                           ;pin_manager.c: 70: TRISD = 0xF4;
  8258  0A75  30F4               	movlw	244
  8259  0A76  008F               	movwf	15	;volatile
  8260                           
  8261                           ;pin_manager.c: 75: ANSELB = 0x0F;
  8262  0A77  300F               	movlw	15
  8263  0A78  0023               	movlb	3	; select bank3
  8264  0A79  008D               	movwf	13	;volatile
  8265                           
  8266                           ;pin_manager.c: 76: ANSELD = 0x10;
  8267  0A7A  3010               	movlw	16
  8268  0A7B  008F               	movwf	15	;volatile
  8269                           
  8270                           ;pin_manager.c: 77: ANSELE = 0x07;
  8271  0A7C  3007               	movlw	7
  8272  0A7D  0090               	movwf	16	;volatile
  8273                           
  8274                           ;pin_manager.c: 78: ANSELA = 0x3F;
  8275  0A7E  303F               	movlw	63
  8276  0A7F  008C               	movwf	12	;volatile
  8277                           
  8278                           ;pin_manager.c: 83: WPUE = 0x08;
  8279  0A80  3008               	movlw	8
  8280  0A81  0024               	movlb	4	; select bank4
  8281  0A82  0090               	movwf	16	;volatile
  8282                           
  8283                           ;pin_manager.c: 84: WPUB = 0xFF;
  8284  0A83  30FF               	movlw	255
  8285  0A84  008D               	movwf	13	;volatile
  8286                           
  8287                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
  8288  0A85  0021               	movlb	1	; select bank1
  8289  0A86  1395               	bcf	21,7	;volatile
  8290                           
  8291                           ;pin_manager.c: 91: APFCON = 0x00;
  8292  0A87  0022               	movlb	2	; select bank2
  8293  0A88  019D               	clrf	29	;volatile
  8294  0A89  0008               	return
  8295  0A8A                     __end_of_PIN_MANAGER_Initialize:	
  8296                           
  8297                           	psect	text34
  8298  08B2                     __ptext34:	
  8299 ;; *************** function _OSCILLATOR_Initialize *****************
  8300 ;; Defined at:
  8301 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8315 ;;      Params:         0       0       0       0       0       0       0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0
  8318 ;;      Totals:         0       0       0       0       0       0       0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    4
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_SYSTEM_Initialize
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           
  8330                           ;psect for function _OSCILLATOR_Initialize
  8331  08B2                     _OSCILLATOR_Initialize:	
  8332                           
  8333                           ;mcc.c: 84: OSCCON = 0x78;
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8337  08B2  3078               	movlw	120
  8338  08B3  0021               	movlb	1	; select bank1
  8339  08B4  0099               	movwf	25	;volatile
  8340                           
  8341                           ;mcc.c: 86: OSCTUNE = 0x00;
  8342  08B5  0198               	clrf	24	;volatile
  8343  08B6  0008               	return
  8344  08B7                     __end_of_OSCILLATOR_Initialize:	
  8345                           
  8346                           	psect	text35
  8347  09EB                     __ptext35:	
  8348 ;; *************** function _EUSART_Initialize *****************
  8349 ;; Defined at:
  8350 ;;		line 76 in file "mcc_generated_files/eusart.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;		None
  8353 ;; Auto vars:     Size  Location     Type
  8354 ;;		None
  8355 ;; Return value:  Size  Location     Type
  8356 ;;                  1    wreg      void 
  8357 ;; Registers used:
  8358 ;;		wreg, status,2
  8359 ;; Tracked objects:
  8360 ;;		On entry : 0/0
  8361 ;;		On exit  : 0/0
  8362 ;;		Unchanged: 0/0
  8363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8364 ;;      Params:         0       0       0       0       0       0       0       0
  8365 ;;      Locals:         0       0       0       0       0       0       0       0
  8366 ;;      Temps:          0       1       0       0       0       0       0       0
  8367 ;;      Totals:         0       1       0       0       0       0       0       0
  8368 ;;Total ram usage:        1 bytes
  8369 ;; Hardware stack levels used:    1
  8370 ;; Hardware stack levels required when called:    4
  8371 ;; This function calls:
  8372 ;;		Nothing
  8373 ;; This function is called by:
  8374 ;;		_SYSTEM_Initialize
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _EUSART_Initialize
  8380  09EB                     _EUSART_Initialize:	
  8381                           
  8382                           ;eusart.c: 79: PIE1bits.RCIE = 0;
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8386  09EB  0021               	movlb	1	; select bank1
  8387  09EC  1291               	bcf	17,5	;volatile
  8388                           
  8389                           ;eusart.c: 80: PIE1bits.TXIE = 0;
  8390  09ED  1211               	bcf	17,4	;volatile
  8391                           
  8392                           ;eusart.c: 85: BAUDCON = 0x08;
  8393  09EE  3008               	movlw	8
  8394  09EF  0023               	movlb	3	; select bank3
  8395  09F0  009F               	movwf	31	;volatile
  8396                           
  8397                           ;eusart.c: 88: RCSTA = 0x90;
  8398  09F1  3090               	movlw	144
  8399  09F2  009D               	movwf	29	;volatile
  8400                           
  8401                           ;eusart.c: 91: TXSTA = 0x24;
  8402  09F3  3024               	movlw	36
  8403  09F4  009E               	movwf	30	;volatile
  8404                           
  8405                           ;eusart.c: 94: SPBRGL = 0xDF;
  8406  09F5  30DF               	movlw	223
  8407  09F6  009B               	movwf	27	;volatile
  8408                           
  8409                           ;eusart.c: 97: SPBRGH = 0x01;
  8410  09F7  3001               	movlw	1
  8411  09F8  009C               	movwf	28	;volatile
  8412                           
  8413                           ;eusart.c: 101: eusartTxHead = 0;
  8414  09F9  0020               	movlb	0	; select bank0
  8415  09FA  01E7               	clrf	_eusartTxHead	;volatile
  8416                           
  8417                           ;eusart.c: 102: eusartTxTail = 0;
  8418  09FB  01E6               	clrf	_eusartTxTail	;volatile
  8419                           
  8420                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8421  09FC  3008               	movlw	8
  8422  09FD  00A0               	movwf	??_EUSART_Initialize
  8423  09FE  0820               	movf	??_EUSART_Initialize,w
  8424  09FF  0022               	movlb	2	; select bank2
  8425  0A00  00ED               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  8426                           
  8427                           ;eusart.c: 105: eusartRxHead = 0;
  8428  0A01  0020               	movlb	0	; select bank0
  8429  0A02  01E5               	clrf	_eusartRxHead	;volatile
  8430                           
  8431                           ;eusart.c: 106: eusartRxTail = 0;
  8432  0A03  01E4               	clrf	_eusartRxTail	;volatile
  8433                           
  8434                           ;eusart.c: 107: eusartRxCount = 0;
  8435  0A04  01E3               	clrf	_eusartRxCount	;volatile
  8436                           
  8437                           ;eusart.c: 110: PIE1bits.RCIE = 1;
  8438  0A05  0021               	movlb	1	; select bank1
  8439  0A06  1691               	bsf	17,5	;volatile
  8440  0A07  0008               	return
  8441  0A08                     __end_of_EUSART_Initialize:	
  8442                           
  8443                           	psect	text36
  8444  08C8                     __ptext36:	
  8445 ;; *************** function _ADC_Initialize *****************
  8446 ;; Defined at:
  8447 ;;		line 64 in file "mcc_generated_files/adc.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;		None
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8461 ;;      Params:         0       0       0       0       0       0       0       0
  8462 ;;      Locals:         0       0       0       0       0       0       0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0
  8464 ;;      Totals:         0       0       0       0       0       0       0       0
  8465 ;;Total ram usage:        0 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    4
  8468 ;; This function calls:
  8469 ;;		Nothing
  8470 ;; This function is called by:
  8471 ;;		_SYSTEM_Initialize
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _ADC_Initialize
  8477  08C8                     _ADC_Initialize:	
  8478                           
  8479                           ;adc.c: 69: ADCON0 = 0x01;
  8480                           
  8481                           ;incstack = 0
  8482                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8483  08C8  3001               	movlw	1
  8484  08C9  0021               	movlb	1	; select bank1
  8485  08CA  009D               	movwf	29	;volatile
  8486                           
  8487                           ;adc.c: 72: ADCON1 = 0x60;
  8488  08CB  3060               	movlw	96
  8489  08CC  009E               	movwf	30	;volatile
  8490                           
  8491                           ;adc.c: 75: ADRESL = 0x00;
  8492  08CD  019B               	clrf	27	;volatile
  8493                           
  8494                           ;adc.c: 78: ADRESH = 0x00;
  8495  08CE  019C               	clrf	28	;volatile
  8496                           
  8497                           ;adc.c: 81: PIE1bits.ADIE = 1;
  8498  08CF  1711               	bsf	17,6	;volatile
  8499  08D0  0008               	return
  8500  08D1                     __end_of_ADC_Initialize:	
  8501                           
  8502                           	psect	text37
  8503  0BCB                     __ptext37:	
  8504 ;; *************** function _LCDWriteString *****************
  8505 ;; Defined at:
  8506 ;;		line 192 in file "lcd_hd44780_pic16.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  msg             2    7[BANK0 ] PTR const unsigned char 
  8509 ;;		 -> STR_2(8), STR_1(10), 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  cc              1   10[BANK0 ] char 
  8512 ;; Return value:  Size  Location     Type
  8513 ;;                  1    wreg      void 
  8514 ;; Registers used:
  8515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8516 ;; Tracked objects:
  8517 ;;		On entry : 0/0
  8518 ;;		On exit  : 0/0
  8519 ;;		Unchanged: 0/0
  8520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8521 ;;      Params:         0       2       0       0       0       0       0       0
  8522 ;;      Locals:         0       1       0       0       0       0       0       0
  8523 ;;      Temps:          0       1       0       0       0       0       0       0
  8524 ;;      Totals:         0       4       0       0       0       0       0       0
  8525 ;;Total ram usage:        4 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    5
  8528 ;; This function calls:
  8529 ;;		_LCDByte
  8530 ;; This function is called by:
  8531 ;;		_main
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function _LCDWriteString
  8537  0BCB                     _LCDWriteString:	
  8538  0BCB                     l3832:	
  8539                           ;lcd_hd44780_pic16.c: 222: while(*msg!='\0')
  8540                           
  8541                           ;incstack = 0
  8542                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8543                           
  8544  0BCB  0020               	movlb	0	; select bank0
  8545  0BCC  0827               	movf	LCDWriteString@msg,w
  8546  0BCD  0084               	movwf	4
  8547  0BCE  0828               	movf	LCDWriteString@msg+1,w
  8548  0BCF  0085               	movwf	5
  8549  0BD0  0012               	moviw fsr0++
  8550  0BD1  1903               	btfsc	3,2
  8551  0BD2  0008               	return
  8552                           
  8553                           ;lcd_hd44780_pic16.c: 223: {
  8554                           ;lcd_hd44780_pic16.c: 225: if(*msg=='%')
  8555  0BD3  0020               	movlb	0	; select bank0
  8556  0BD4  0827               	movf	LCDWriteString@msg,w
  8557  0BD5  0084               	movwf	4
  8558  0BD6  0828               	movf	LCDWriteString@msg+1,w
  8559  0BD7  0085               	movwf	5
  8560  0BD8  0012               	moviw fsr0++
  8561  0BD9  3A25               	xorlw	37
  8562  0BDA  1D03               	btfss	3,2
  8563  0BDB  2BFB               	goto	l3828
  8564                           
  8565                           ;lcd_hd44780_pic16.c: 226: {
  8566                           ;lcd_hd44780_pic16.c: 227: msg++;
  8567  0BDC  3001               	movlw	1
  8568  0BDD  07A7               	addwf	LCDWriteString@msg,f
  8569  0BDE  3000               	movlw	0
  8570  0BDF  3DA8               	addwfc	LCDWriteString@msg+1,f
  8571                           
  8572                           ;lcd_hd44780_pic16.c: 228: int8_t cc=*msg-'0';
  8573  0BE0  0827               	movf	LCDWriteString@msg,w
  8574  0BE1  0084               	movwf	4
  8575  0BE2  0828               	movf	LCDWriteString@msg+1,w
  8576  0BE3  0085               	movwf	5
  8577  0BE4  0800               	movf	0,w	;code access
  8578  0BE5  3ED0               	addlw	-48
  8579  0BE6  00A9               	movwf	??_LCDWriteString
  8580  0BE7  0829               	movf	??_LCDWriteString,w
  8581  0BE8  00AA               	movwf	LCDWriteString@cc
  8582                           
  8583                           ;lcd_hd44780_pic16.c: 230: if(cc>=0 && cc<=7)
  8584  0BE9  1BAA               	btfsc	LCDWriteString@cc,7
  8585  0BEA  2BF4               	goto	l3824
  8586  0BEB  082A               	movf	LCDWriteString@cc,w
  8587  0BEC  3A80               	xorlw	128
  8588  0BED  3E78               	addlw	-136
  8589  0BEE  1803               	skipnc
  8590  0BEF  2BF4               	goto	l3824
  8591                           
  8592                           ;lcd_hd44780_pic16.c: 231: {
  8593                           ;lcd_hd44780_pic16.c: 232: (LCDByte(cc,1));
  8594  0BF0  01A0               	clrf	LCDByte@isdata
  8595  0BF1  0AA0               	incf	LCDByte@isdata,f
  8596  0BF2  082A               	movf	LCDWriteString@cc,w
  8597  0BF3  2C03               	goto	L5
  8598  0BF4                     l3824:	
  8599                           ;lcd_hd44780_pic16.c: 233: }
  8600                           
  8601                           
  8602                           ;lcd_hd44780_pic16.c: 234: else
  8603                           ;lcd_hd44780_pic16.c: 235: {
  8604                           ;lcd_hd44780_pic16.c: 236: (LCDByte('%',1));
  8605  0BF4  0020               	movlb	0	; select bank0
  8606  0BF5  01A0               	clrf	LCDByte@isdata
  8607  0BF6  0AA0               	incf	LCDByte@isdata,f
  8608  0BF7  3025               	movlw	37
  8609  0BF8  318B  238A  318B   	fcall	_LCDByte
  8610  0BFB                     l3828:	
  8611                           ;lcd_hd44780_pic16.c: 238: }
  8612                           ;lcd_hd44780_pic16.c: 239: }
  8613                           
  8614                           ;lcd_hd44780_pic16.c: 237: (LCDByte(*msg,1));
  8615                           
  8616                           
  8617                           ;lcd_hd44780_pic16.c: 240: else
  8618                           ;lcd_hd44780_pic16.c: 241: {
  8619                           ;lcd_hd44780_pic16.c: 242: (LCDByte(*msg,1));
  8620  0BFB  0020               	movlb	0	; select bank0
  8621  0BFC  01A0               	clrf	LCDByte@isdata
  8622  0BFD  0AA0               	incf	LCDByte@isdata,f
  8623  0BFE  0827               	movf	LCDWriteString@msg,w
  8624  0BFF  0084               	movwf	4
  8625  0C00  0828               	movf	LCDWriteString@msg+1,w
  8626  0C01  0085               	movwf	5
  8627  0C02  0800               	movf	0,w	;code access
  8628  0C03                     L5:	
  8629  0C03  318B  238A  318B   	fcall	_LCDByte
  8630                           
  8631                           ;lcd_hd44780_pic16.c: 243: }
  8632                           ;lcd_hd44780_pic16.c: 244: msg++;
  8633  0C06  3001               	movlw	1
  8634  0C07  0020               	movlb	0	; select bank0
  8635  0C08  07A7               	addwf	LCDWriteString@msg,f
  8636  0C09  3000               	movlw	0
  8637  0C0A  3DA8               	addwfc	LCDWriteString@msg+1,f
  8638  0C0B  2BCB               	goto	l3832
  8639  0C0C                     __end_of_LCDWriteString:	
  8640                           
  8641                           	psect	text38
  8642  0EDD                     __ptext38:	
  8643 ;; *************** function _LCDWriteInt *****************
  8644 ;; Defined at:
  8645 ;;		line 248 in file "lcd_hd44780_pic16.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  val             2    9[BANK0 ] int 
  8648 ;;  field_length    1   11[BANK0 ] char 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  str             5   14[BANK0 ] unsigned char [5]
  8651 ;;  i               2   21[BANK0 ] int 
  8652 ;;  j               2   19[BANK0 ] int 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      void 
  8655 ;; Registers used:
  8656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8662 ;;      Params:         0       3       0       0       0       0       0       0
  8663 ;;      Locals:         0       9       0       0       0       0       0       0
  8664 ;;      Temps:          0       2       0       0       0       0       0       0
  8665 ;;      Totals:         0      14       0       0       0       0       0       0
  8666 ;;Total ram usage:       14 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    5
  8669 ;; This function calls:
  8670 ;;		_LCDByte
  8671 ;;		___awdiv
  8672 ;;		___awmod
  8673 ;; This function is called by:
  8674 ;;		_main
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           
  8679                           ;psect for function _LCDWriteInt
  8680  0EDD                     _LCDWriteInt:	
  8681                           
  8682                           ;lcd_hd44780_pic16.c: 261: char str[5]={0,0,0,0,0};
  8683                           
  8684                           ;incstack = 0
  8685                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8686  0EDD  30DA               	movlw	low LCDWriteInt@F3767
  8687  0EDE  0086               	movwf	6
  8688  0EDF  3001               	movlw	high LCDWriteInt@F3767
  8689  0EE0  0087               	movwf	7
  8690  0EE1  302E               	movlw	low LCDWriteInt@str
  8691  0EE2  0084               	movwf	4
  8692  0EE3  3000               	movlw	high LCDWriteInt@str
  8693  0EE4  0085               	movwf	5
  8694  0EE5  3005               	movlw	5
  8695  0EE6  0020               	movlb	0	; select bank0
  8696  0EE7  00AC               	movwf	??_LCDWriteInt
  8697  0EE8                     u4080:	
  8698  0EE8  0016               	moviw fsr1++
  8699  0EE9  001A               	movwi fsr0++
  8700  0EEA  0BAC               	decfsz	??_LCDWriteInt,f
  8701  0EEB  2EE8               	goto	u4080
  8702                           
  8703                           ;lcd_hd44780_pic16.c: 262: int i=4,j=0;
  8704  0EEC  3004               	movlw	4
  8705  0EED  00B5               	movwf	LCDWriteInt@i
  8706  0EEE  3000               	movlw	0
  8707  0EEF  00B6               	movwf	LCDWriteInt@i+1
  8708  0EF0  01B3               	clrf	LCDWriteInt@j
  8709  0EF1  01B4               	clrf	LCDWriteInt@j+1
  8710                           
  8711                           ;lcd_hd44780_pic16.c: 265: if(val<0)
  8712  0EF2  1FAA               	btfss	LCDWriteInt@val+1,7
  8713  0EF3  2F00               	goto	l3852
  8714                           
  8715                           ;lcd_hd44780_pic16.c: 266: {
  8716                           ;lcd_hd44780_pic16.c: 267: (LCDByte('-',1));
  8717  0EF4  01A0               	clrf	LCDByte@isdata
  8718  0EF5  0AA0               	incf	LCDByte@isdata,f
  8719  0EF6  302D               	movlw	45
  8720  0EF7  318B  238A  318E   	fcall	_LCDByte
  8721                           
  8722                           ;lcd_hd44780_pic16.c: 268: val=val*-1;
  8723  0EFA  0020               	movlb	0	; select bank0
  8724  0EFB  09A9               	comf	LCDWriteInt@val,f
  8725  0EFC  09AA               	comf	LCDWriteInt@val+1,f
  8726  0EFD  0AA9               	incf	LCDWriteInt@val,f
  8727  0EFE  1903               	skipnz
  8728  0EFF  0AAA               	incf	LCDWriteInt@val+1,f
  8729  0F00                     l3852:	
  8730                           ;lcd_hd44780_pic16.c: 269: }
  8731                           ;lcd_hd44780_pic16.c: 271: while(val)
  8732                           
  8733  0F00  0829               	movf	LCDWriteInt@val,w
  8734  0F01  042A               	iorwf	LCDWriteInt@val+1,w
  8735  0F02  1903               	btfsc	3,2
  8736  0F03  2F2D               	goto	l3854
  8737                           
  8738                           ;lcd_hd44780_pic16.c: 272: {
  8739                           ;lcd_hd44780_pic16.c: 273: str[i]=val%10;
  8740  0F04  300A               	movlw	10
  8741  0F05  00A0               	movwf	___awmod@divisor
  8742  0F06  3000               	movlw	0
  8743  0F07  00A1               	movwf	___awmod@divisor+1
  8744  0F08  082A               	movf	LCDWriteInt@val+1,w
  8745  0F09  00A3               	movwf	___awmod@dividend+1
  8746  0F0A  0829               	movf	LCDWriteInt@val,w
  8747  0F0B  00A2               	movwf	___awmod@dividend
  8748  0F0C  318C  2452  318E   	fcall	___awmod
  8749  0F0F  0020               	movlb	0	; select bank0
  8750  0F10  0820               	movf	?___awmod,w
  8751  0F11  00AC               	movwf	??_LCDWriteInt
  8752  0F12  0835               	movf	LCDWriteInt@i,w
  8753  0F13  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  8754  0F14  0086               	movwf	6
  8755  0F15  0187               	clrf	7
  8756  0F16  082C               	movf	??_LCDWriteInt,w
  8757  0F17  0081               	movwf	1
  8758                           
  8759                           ;lcd_hd44780_pic16.c: 274: val=val/10;
  8760  0F18  300A               	movlw	10
  8761  0F19  00A0               	movwf	___awdiv@divisor
  8762  0F1A  3000               	movlw	0
  8763  0F1B  00A1               	movwf	___awdiv@divisor+1
  8764  0F1C  082A               	movf	LCDWriteInt@val+1,w
  8765  0F1D  00A3               	movwf	___awdiv@dividend+1
  8766  0F1E  0829               	movf	LCDWriteInt@val,w
  8767  0F1F  00A2               	movwf	___awdiv@dividend
  8768  0F20  318C  24E2  318E   	fcall	___awdiv
  8769  0F23  0020               	movlb	0	; select bank0
  8770  0F24  0821               	movf	?___awdiv+1,w
  8771  0F25  00AA               	movwf	LCDWriteInt@val+1
  8772  0F26  0820               	movf	?___awdiv,w
  8773  0F27  00A9               	movwf	LCDWriteInt@val
  8774                           
  8775                           ;lcd_hd44780_pic16.c: 275: i--;
  8776  0F28  30FF               	movlw	255
  8777  0F29  07B5               	addwf	LCDWriteInt@i,f
  8778  0F2A  30FF               	movlw	255
  8779  0F2B  3DB6               	addwfc	LCDWriteInt@i+1,f
  8780  0F2C  2F00               	goto	l3852
  8781  0F2D                     l3854:	
  8782                           
  8783                           ;lcd_hd44780_pic16.c: 276: }
  8784                           ;lcd_hd44780_pic16.c: 277: if(field_length==-1)
  8785  0F2D  0A2B               	incf	LCDWriteInt@field_length,w
  8786  0F2E  1903               	btfsc	3,2
  8787  0F2F  2F35               	goto	l3860
  8788  0F30  2F3D               	goto	l3862
  8789  0F31                     l3858:	
  8790                           ;lcd_hd44780_pic16.c: 278: while(str[j]==0) j++;
  8791                           
  8792  0F31  3001               	movlw	1
  8793  0F32  07B3               	addwf	LCDWriteInt@j,f
  8794  0F33  3000               	movlw	0
  8795  0F34  3DB4               	addwfc	LCDWriteInt@j+1,f
  8796  0F35                     l3860:	
  8797  0F35  0833               	movf	LCDWriteInt@j,w
  8798  0F36  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  8799  0F37  0086               	movwf	6
  8800  0F38  0187               	clrf	7
  8801  0F39  0801               	movf	1,w
  8802  0F3A  1D03               	btfss	3,2
  8803  0F3B  2F4D               	goto	l3864
  8804  0F3C  2F31               	goto	l3858
  8805  0F3D                     l3862:	
  8806                           
  8807                           ;lcd_hd44780_pic16.c: 279: else
  8808                           ;lcd_hd44780_pic16.c: 280: j=5-field_length;
  8809  0F3D  082B               	movf	LCDWriteInt@field_length,w
  8810  0F3E  00AC               	movwf	??_LCDWriteInt
  8811  0F3F  01AD               	clrf	??_LCDWriteInt+1
  8812  0F40  1BAC               	btfsc	??_LCDWriteInt,7
  8813  0F41  03AD               	decf	??_LCDWriteInt+1,f
  8814  0F42  09AC               	comf	??_LCDWriteInt,f
  8815  0F43  09AD               	comf	??_LCDWriteInt+1,f
  8816  0F44  0AAC               	incf	??_LCDWriteInt,f
  8817  0F45  1903               	skipnz
  8818  0F46  0AAD               	incf	??_LCDWriteInt+1,f
  8819  0F47  082C               	movf	??_LCDWriteInt,w
  8820  0F48  3E05               	addlw	5
  8821  0F49  00B3               	movwf	LCDWriteInt@j
  8822  0F4A  3000               	movlw	0
  8823  0F4B  3D2D               	addwfc	??_LCDWriteInt+1,w
  8824  0F4C  00B4               	movwf	LCDWriteInt@j+1
  8825  0F4D                     l3864:	
  8826                           
  8827                           ;lcd_hd44780_pic16.c: 283: for(i=j;i<5;i++)
  8828  0F4D  0834               	movf	LCDWriteInt@j+1,w
  8829  0F4E  00B6               	movwf	LCDWriteInt@i+1
  8830  0F4F  0833               	movf	LCDWriteInt@j,w
  8831  0F50  00B5               	movwf	LCDWriteInt@i
  8832  0F51                     L6:	
  8833  0F51  0836               	movf	LCDWriteInt@i+1,w
  8834  0F52  3A80               	xorlw	128
  8835  0F53  00AC               	movwf	??_LCDWriteInt
  8836  0F54  3080               	movlw	128
  8837  0F55  022C               	subwf	??_LCDWriteInt,w
  8838  0F56  1D03               	skipz
  8839  0F57  2F5A               	goto	u4135
  8840  0F58  3005               	movlw	5
  8841  0F59  0235               	subwf	LCDWriteInt@i,w
  8842  0F5A                     u4135:	
  8843  0F5A  1803               	btfsc	3,0
  8844  0F5B  0008               	return
  8845                           
  8846                           ;lcd_hd44780_pic16.c: 284: {
  8847                           ;lcd_hd44780_pic16.c: 285: (LCDByte(48+str[i],1));
  8848  0F5C  0020               	movlb	0	; select bank0
  8849  0F5D  01A0               	clrf	LCDByte@isdata
  8850  0F5E  0AA0               	incf	LCDByte@isdata,f
  8851  0F5F  0835               	movf	LCDWriteInt@i,w
  8852  0F60  3E2E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  8853  0F61  0086               	movwf	6
  8854  0F62  0187               	clrf	7
  8855  0F63  0801               	movf	1,w
  8856  0F64  3E30               	addlw	48
  8857  0F65  318B  238A  318E   	fcall	_LCDByte
  8858  0F68  3001               	movlw	1
  8859  0F69  0020               	movlb	0	; select bank0
  8860  0F6A  07B5               	addwf	LCDWriteInt@i,f
  8861  0F6B  3000               	movlw	0
  8862  0F6C  3DB6               	addwfc	LCDWriteInt@i+1,f
  8863  0F6D  2F51               	goto	L6
  8864  0F6E                     __end_of_LCDWriteInt:	
  8865                           
  8866                           	psect	text39
  8867  0C52                     __ptext39:	
  8868 ;; *************** function ___awmod *****************
  8869 ;; Defined at:
  8870 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  divisor         2    0[BANK0 ] int 
  8873 ;;  dividend        2    2[BANK0 ] int 
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  sign            1    6[BANK0 ] unsigned char 
  8876 ;;  counter         1    5[BANK0 ] unsigned char 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  2    0[BANK0 ] int 
  8879 ;; Registers used:
  8880 ;;		wreg, status,2, status,0
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8886 ;;      Params:         0       4       0       0       0       0       0       0
  8887 ;;      Locals:         0       2       0       0       0       0       0       0
  8888 ;;      Temps:          0       1       0       0       0       0       0       0
  8889 ;;      Totals:         0       7       0       0       0       0       0       0
  8890 ;;Total ram usage:        7 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    4
  8893 ;; This function calls:
  8894 ;;		Nothing
  8895 ;; This function is called by:
  8896 ;;		_LCDWriteInt
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           
  8901                           ;psect for function ___awmod
  8902  0C52                     ___awmod:	
  8903                           
  8904                           ;incstack = 0
  8905                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8906  0C52  0020               	movlb	0	; select bank0
  8907  0C53  01A6               	clrf	___awmod@sign
  8908  0C54  1FA3               	btfss	___awmod@dividend+1,7
  8909  0C55  2C5D               	goto	l3326
  8910  0C56  09A2               	comf	___awmod@dividend,f
  8911  0C57  09A3               	comf	___awmod@dividend+1,f
  8912  0C58  0AA2               	incf	___awmod@dividend,f
  8913  0C59  1903               	skipnz
  8914  0C5A  0AA3               	incf	___awmod@dividend+1,f
  8915  0C5B  01A6               	clrf	___awmod@sign
  8916  0C5C  0AA6               	incf	___awmod@sign,f
  8917  0C5D                     l3326:	
  8918  0C5D  1FA1               	btfss	___awmod@divisor+1,7
  8919  0C5E  2C64               	goto	l3330
  8920  0C5F  09A0               	comf	___awmod@divisor,f
  8921  0C60  09A1               	comf	___awmod@divisor+1,f
  8922  0C61  0AA0               	incf	___awmod@divisor,f
  8923  0C62  1903               	skipnz
  8924  0C63  0AA1               	incf	___awmod@divisor+1,f
  8925  0C64                     l3330:	
  8926  0C64  0820               	movf	___awmod@divisor,w
  8927  0C65  0421               	iorwf	___awmod@divisor+1,w
  8928  0C66  1903               	btfsc	3,2
  8929  0C67  2C8B               	goto	l3348
  8930  0C68  01A5               	clrf	___awmod@counter
  8931  0C69  0AA5               	incf	___awmod@counter,f
  8932  0C6A                     l3338:	
  8933  0C6A  1BA1               	btfsc	___awmod@divisor+1,7
  8934  0C6B  2C76               	goto	l3340
  8935  0C6C  3001               	movlw	1
  8936  0C6D                     u3245:	
  8937  0C6D  35A0               	lslf	___awmod@divisor,f
  8938  0C6E  0DA1               	rlf	___awmod@divisor+1,f
  8939  0C6F  0B89               	decfsz	9,f
  8940  0C70  2C6D               	goto	u3245
  8941  0C71  3001               	movlw	1
  8942  0C72  00A4               	movwf	??___awmod
  8943  0C73  0824               	movf	??___awmod,w
  8944  0C74  07A5               	addwf	___awmod@counter,f
  8945  0C75  2C6A               	goto	l3338
  8946  0C76                     l3340:	
  8947  0C76  0821               	movf	___awmod@divisor+1,w
  8948  0C77  0223               	subwf	___awmod@dividend+1,w
  8949  0C78  1D03               	skipz
  8950  0C79  2C7C               	goto	u3265
  8951  0C7A  0820               	movf	___awmod@divisor,w
  8952  0C7B  0222               	subwf	___awmod@dividend,w
  8953  0C7C                     u3265:	
  8954  0C7C  1C03               	skipc
  8955  0C7D  2C82               	goto	l3344
  8956  0C7E  0820               	movf	___awmod@divisor,w
  8957  0C7F  02A2               	subwf	___awmod@dividend,f
  8958  0C80  0821               	movf	___awmod@divisor+1,w
  8959  0C81  3BA3               	subwfb	___awmod@dividend+1,f
  8960  0C82                     l3344:	
  8961  0C82  3001               	movlw	1
  8962  0C83                     u3275:	
  8963  0C83  36A1               	lsrf	___awmod@divisor+1,f
  8964  0C84  0CA0               	rrf	___awmod@divisor,f
  8965  0C85  0B89               	decfsz	9,f
  8966  0C86  2C83               	goto	u3275
  8967  0C87  3001               	movlw	1
  8968  0C88  02A5               	subwf	___awmod@counter,f
  8969  0C89  1D03               	btfss	3,2
  8970  0C8A  2C76               	goto	l3340
  8971  0C8B                     l3348:	
  8972  0C8B  0826               	movf	___awmod@sign,w
  8973  0C8C  1903               	btfsc	3,2
  8974  0C8D  2C93               	goto	l3352
  8975  0C8E  09A2               	comf	___awmod@dividend,f
  8976  0C8F  09A3               	comf	___awmod@dividend+1,f
  8977  0C90  0AA2               	incf	___awmod@dividend,f
  8978  0C91  1903               	skipnz
  8979  0C92  0AA3               	incf	___awmod@dividend+1,f
  8980  0C93                     l3352:	
  8981  0C93  0823               	movf	___awmod@dividend+1,w
  8982  0C94  00A1               	movwf	?___awmod+1
  8983  0C95  0822               	movf	___awmod@dividend,w
  8984  0C96  00A0               	movwf	?___awmod
  8985  0C97  0008               	return
  8986  0C98                     __end_of___awmod:	
  8987                           
  8988                           	psect	text40
  8989  0CE2                     __ptext40:	
  8990 ;; *************** function ___awdiv *****************
  8991 ;; Defined at:
  8992 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  divisor         2    0[BANK0 ] int 
  8995 ;;  dividend        2    2[BANK0 ] int 
  8996 ;; Auto vars:     Size  Location     Type
  8997 ;;  quotient        2    7[BANK0 ] int 
  8998 ;;  sign            1    6[BANK0 ] unsigned char 
  8999 ;;  counter         1    5[BANK0 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  2    0[BANK0 ] int 
  9002 ;; Registers used:
  9003 ;;		wreg, status,2, status,0
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9009 ;;      Params:         0       4       0       0       0       0       0       0
  9010 ;;      Locals:         0       4       0       0       0       0       0       0
  9011 ;;      Temps:          0       1       0       0       0       0       0       0
  9012 ;;      Totals:         0       9       0       0       0       0       0       0
  9013 ;;Total ram usage:        9 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    4
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_LCDWriteInt
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           
  9024                           ;psect for function ___awdiv
  9025  0CE2                     ___awdiv:	
  9026                           
  9027                           ;incstack = 0
  9028                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9029  0CE2  0020               	movlb	0	; select bank0
  9030  0CE3  01A6               	clrf	___awdiv@sign
  9031  0CE4  1FA1               	btfss	___awdiv@divisor+1,7
  9032  0CE5  2CED               	goto	l3282
  9033  0CE6  09A0               	comf	___awdiv@divisor,f
  9034  0CE7  09A1               	comf	___awdiv@divisor+1,f
  9035  0CE8  0AA0               	incf	___awdiv@divisor,f
  9036  0CE9  1903               	skipnz
  9037  0CEA  0AA1               	incf	___awdiv@divisor+1,f
  9038  0CEB  01A6               	clrf	___awdiv@sign
  9039  0CEC  0AA6               	incf	___awdiv@sign,f
  9040  0CED                     l3282:	
  9041  0CED  1FA3               	btfss	___awdiv@dividend+1,7
  9042  0CEE  2CF8               	goto	l3288
  9043  0CEF  09A2               	comf	___awdiv@dividend,f
  9044  0CF0  09A3               	comf	___awdiv@dividend+1,f
  9045  0CF1  0AA2               	incf	___awdiv@dividend,f
  9046  0CF2  1903               	skipnz
  9047  0CF3  0AA3               	incf	___awdiv@dividend+1,f
  9048  0CF4  3001               	movlw	1
  9049  0CF5  00A4               	movwf	??___awdiv
  9050  0CF6  0824               	movf	??___awdiv,w
  9051  0CF7  06A6               	xorwf	___awdiv@sign,f
  9052  0CF8                     l3288:	
  9053  0CF8  01A7               	clrf	___awdiv@quotient
  9054  0CF9  01A8               	clrf	___awdiv@quotient+1
  9055  0CFA  0820               	movf	___awdiv@divisor,w
  9056  0CFB  0421               	iorwf	___awdiv@divisor+1,w
  9057  0CFC  1903               	btfsc	3,2
  9058  0CFD  2D27               	goto	l3310
  9059  0CFE  01A5               	clrf	___awdiv@counter
  9060  0CFF  0AA5               	incf	___awdiv@counter,f
  9061  0D00                     l3298:	
  9062  0D00  1BA1               	btfsc	___awdiv@divisor+1,7
  9063  0D01  2D0C               	goto	l3300
  9064  0D02  3001               	movlw	1
  9065  0D03                     u3145:	
  9066  0D03  35A0               	lslf	___awdiv@divisor,f
  9067  0D04  0DA1               	rlf	___awdiv@divisor+1,f
  9068  0D05  0B89               	decfsz	9,f
  9069  0D06  2D03               	goto	u3145
  9070  0D07  3001               	movlw	1
  9071  0D08  00A4               	movwf	??___awdiv
  9072  0D09  0824               	movf	??___awdiv,w
  9073  0D0A  07A5               	addwf	___awdiv@counter,f
  9074  0D0B  2D00               	goto	l3298
  9075  0D0C                     l3300:	
  9076  0D0C  3001               	movlw	1
  9077  0D0D                     u3165:	
  9078  0D0D  35A7               	lslf	___awdiv@quotient,f
  9079  0D0E  0DA8               	rlf	___awdiv@quotient+1,f
  9080  0D0F  0B89               	decfsz	9,f
  9081  0D10  2D0D               	goto	u3165
  9082  0D11  0821               	movf	___awdiv@divisor+1,w
  9083  0D12  0223               	subwf	___awdiv@dividend+1,w
  9084  0D13  1D03               	skipz
  9085  0D14  2D17               	goto	u3175
  9086  0D15  0820               	movf	___awdiv@divisor,w
  9087  0D16  0222               	subwf	___awdiv@dividend,w
  9088  0D17                     u3175:	
  9089  0D17  1C03               	skipc
  9090  0D18  2D1E               	goto	l3306
  9091  0D19  0820               	movf	___awdiv@divisor,w
  9092  0D1A  02A2               	subwf	___awdiv@dividend,f
  9093  0D1B  0821               	movf	___awdiv@divisor+1,w
  9094  0D1C  3BA3               	subwfb	___awdiv@dividend+1,f
  9095  0D1D  1427               	bsf	___awdiv@quotient,0
  9096  0D1E                     l3306:	
  9097  0D1E  3001               	movlw	1
  9098  0D1F                     u3185:	
  9099  0D1F  36A1               	lsrf	___awdiv@divisor+1,f
  9100  0D20  0CA0               	rrf	___awdiv@divisor,f
  9101  0D21  0B89               	decfsz	9,f
  9102  0D22  2D1F               	goto	u3185
  9103  0D23  3001               	movlw	1
  9104  0D24  02A5               	subwf	___awdiv@counter,f
  9105  0D25  1D03               	btfss	3,2
  9106  0D26  2D0C               	goto	l3300
  9107  0D27                     l3310:	
  9108  0D27  0826               	movf	___awdiv@sign,w
  9109  0D28  1903               	btfsc	3,2
  9110  0D29  2D2F               	goto	l3314
  9111  0D2A  09A7               	comf	___awdiv@quotient,f
  9112  0D2B  09A8               	comf	___awdiv@quotient+1,f
  9113  0D2C  0AA7               	incf	___awdiv@quotient,f
  9114  0D2D  1903               	skipnz
  9115  0D2E  0AA8               	incf	___awdiv@quotient+1,f
  9116  0D2F                     l3314:	
  9117  0D2F  0828               	movf	___awdiv@quotient+1,w
  9118  0D30  00A1               	movwf	?___awdiv+1
  9119  0D31  0827               	movf	___awdiv@quotient,w
  9120  0D32  00A0               	movwf	?___awdiv
  9121  0D33  0008               	return
  9122  0D34                     __end_of___awdiv:	
  9123                           
  9124                           	psect	text41
  9125  0C0C                     __ptext41:	
  9126 ;; *************** function _LCDInit *****************
  9127 ;; Defined at:
  9128 ;;		line 135 in file "lcd_hd44780_pic16.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  style           1    wreg     unsigned char 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  style           1    8[BANK0 ] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0, pclath, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9142 ;;      Params:         0       0       0       0       0       0       0       0
  9143 ;;      Locals:         0       1       0       0       0       0       0       0
  9144 ;;      Temps:          0       1       0       0       0       0       0       0
  9145 ;;      Totals:         0       2       0       0       0       0       0       0
  9146 ;;Total ram usage:        2 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    5
  9149 ;; This function calls:
  9150 ;;		_LCDByte
  9151 ;; This function is called by:
  9152 ;;		_main
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           
  9157                           ;psect for function _LCDInit
  9158  0C0C                     _LCDInit:	
  9159                           
  9160                           ;incstack = 0
  9161                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  9162                           ;LCDInit@style stored from wreg
  9163  0C0C  0020               	movlb	0	; select bank0
  9164  0C0D  00A8               	movwf	LCDInit@style
  9165                           
  9166                           ;lcd_hd44780_pic16.c: 151: _delay((unsigned long)((30)*(18432000/4000.0)));
  9167  0C0E  30B4               	movlw	180
  9168  0C0F  0020               	movlb	0	; select bank0
  9169  0C10  00A7               	movwf	??_LCDInit
  9170  0C11  3087               	movlw	135
  9171  0C12                     u5957:	
  9172  0C12  0B89               	decfsz	9,f
  9173  0C13  2C12               	goto	u5957
  9174  0C14  0BA7               	decfsz	??_LCDInit,f
  9175  0C15  2C12               	goto	u5957
  9176                           
  9177                           ;lcd_hd44780_pic16.c: 154: TRISB&=(~(0x0F<<0));
  9178  0C16  30F0               	movlw	240
  9179  0C17  0020               	movlb	0	; select bank0
  9180  0C18  00A7               	movwf	??_LCDInit
  9181  0C19  0827               	movf	??_LCDInit,w
  9182  0C1A  0021               	movlb	1	; select bank1
  9183  0C1B  058D               	andwf	13,f	;volatile
  9184                           
  9185                           ;lcd_hd44780_pic16.c: 156: TRISDbits.TRISD0=0;
  9186  0C1C  100F               	bcf	15,0	;volatile
  9187                           
  9188                           ;lcd_hd44780_pic16.c: 157: TRISDbits.TRISD3=0;
  9189  0C1D  118F               	bcf	15,3	;volatile
  9190                           
  9191                           ;lcd_hd44780_pic16.c: 158: TRISDbits.TRISD1=0;
  9192  0C1E  108F               	bcf	15,1	;volatile
  9193                           
  9194                           ;lcd_hd44780_pic16.c: 160: PORTB&=(~(0x0F<<0));
  9195  0C1F  30F0               	movlw	240
  9196  0C20  0020               	movlb	0	; select bank0
  9197  0C21  00A7               	movwf	??_LCDInit
  9198  0C22  0827               	movf	??_LCDInit,w
  9199  0C23  058D               	andwf	13,f	;volatile
  9200                           
  9201                           ;lcd_hd44780_pic16.c: 162: (RD0=0);
  9202  0C24  100F               	bcf	15,0	;volatile
  9203                           
  9204                           ;lcd_hd44780_pic16.c: 163: (RD1=0);
  9205  0C25  108F               	bcf	15,1	;volatile
  9206                           
  9207                           ;lcd_hd44780_pic16.c: 164: (RD3=0);
  9208  0C26  118F               	bcf	15,3	;volatile
  9209                           
  9210                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(18432000/4000000.0)));
  9211  0C27  3200               	nop2	;2 cycle nop
  9212                           
  9213                           ;lcd_hd44780_pic16.c: 169: (RD0=1);
  9214  0C28  0020               	movlb	0	; select bank0
  9215  0C29  140F               	bsf	15,0	;volatile
  9216                           
  9217                           ;lcd_hd44780_pic16.c: 170: PORTB|=((0b00000010)<<0);
  9218  0C2A  148D               	bsf	13,1	;volatile
  9219                           
  9220                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9221  0C2B  3200               	nop2	;2 cycle nop
  9222  0C2C  3200               	nop2	;2 cycle nop
  9223                           
  9224                           ;lcd_hd44780_pic16.c: 172: (RD0=0);
  9225  0C2D  0020               	movlb	0	; select bank0
  9226  0C2E  100F               	bcf	15,0	;volatile
  9227                           
  9228                           ;lcd_hd44780_pic16.c: 173: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9229  0C2F  3200               	nop2	;2 cycle nop
  9230  0C30  3200               	nop2	;2 cycle nop
  9231                           
  9232                           ;lcd_hd44780_pic16.c: 177: _delay((unsigned long)((1)*(18432000/4000.0)));
  9233  0C31  3006               	movlw	6
  9234  0C32  0020               	movlb	0	; select bank0
  9235  0C33  00A7               	movwf	??_LCDInit
  9236  0C34  30FB               	movlw	251
  9237  0C35                     u5967:	
  9238  0C35  0B89               	decfsz	9,f
  9239  0C36  2C35               	goto	u5967
  9240  0C37  0BA7               	decfsz	??_LCDInit,f
  9241  0C38  2C35               	goto	u5967
  9242                           
  9243                           ;lcd_hd44780_pic16.c: 181: (LCDByte(0b00101000,0));
  9244  0C39  0020               	movlb	0	; select bank0
  9245  0C3A  01A0               	clrf	LCDByte@isdata
  9246  0C3B  3028               	movlw	40
  9247  0C3C  318B  238A  318C   	fcall	_LCDByte
  9248                           
  9249                           ;lcd_hd44780_pic16.c: 182: (LCDByte(0b00001100|style,0));
  9250  0C3F  0020               	movlb	0	; select bank0
  9251  0C40  01A0               	clrf	LCDByte@isdata
  9252  0C41  0828               	movf	LCDInit@style,w
  9253  0C42  380C               	iorlw	12
  9254  0C43  318B  238A  318C   	fcall	_LCDByte
  9255                           
  9256                           ;lcd_hd44780_pic16.c: 185: (LCDByte(0b01000000,0));
  9257  0C46  0020               	movlb	0	; select bank0
  9258  0C47  01A0               	clrf	LCDByte@isdata
  9259  0C48  3040               	movlw	64
  9260  0C49  318B  238A  318C   	fcall	_LCDByte
  9261                           
  9262                           ;lcd_hd44780_pic16.c: 186: (LCDByte(0b00000001,0));
  9263  0C4C  0020               	movlb	0	; select bank0
  9264  0C4D  01A0               	clrf	LCDByte@isdata
  9265  0C4E  3001               	movlw	1
  9266  0C4F  318B  238A         	fcall	_LCDByte
  9267  0C51  0008               	return
  9268  0C52                     __end_of_LCDInit:	
  9269                           
  9270                           	psect	text42
  9271  0B8A                     __ptext42:	
  9272 ;; *************** function _LCDByte *****************
  9273 ;; Defined at:
  9274 ;;		line 80 in file "lcd_hd44780_pic16.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  c               1    wreg     unsigned char 
  9277 ;;  isdata          1    0[BANK0 ] unsigned char 
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;  c               1    5[BANK0 ] unsigned char 
  9280 ;;  temp            1    6[BANK0 ] unsigned char 
  9281 ;;  ln              1    4[BANK0 ] unsigned char 
  9282 ;;  hn              1    3[BANK0 ] unsigned char 
  9283 ;; Return value:  Size  Location     Type
  9284 ;;                  1    wreg      void 
  9285 ;; Registers used:
  9286 ;;		wreg, status,2, status,0
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9292 ;;      Params:         0       1       0       0       0       0       0       0
  9293 ;;      Locals:         0       4       0       0       0       0       0       0
  9294 ;;      Temps:          0       2       0       0       0       0       0       0
  9295 ;;      Totals:         0       7       0       0       0       0       0       0
  9296 ;;Total ram usage:        7 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    4
  9299 ;; This function calls:
  9300 ;;		Nothing
  9301 ;; This function is called by:
  9302 ;;		_main
  9303 ;;		_LCDInit
  9304 ;;		_LCDWriteString
  9305 ;;		_LCDWriteInt
  9306 ;;		_LCDGotoXY
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           
  9311                           ;psect for function _LCDByte
  9312  0B8A                     _LCDByte:	
  9313                           
  9314                           ;incstack = 0
  9315                           ; Regs used in _LCDByte: [wreg+status,2+status,0]
  9316                           ;LCDByte@c stored from wreg
  9317  0B8A  0020               	movlb	0	; select bank0
  9318  0B8B  00A5               	movwf	LCDByte@c
  9319                           
  9320                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  9321                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  9322                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  9323  0B8C  0825               	movf	LCDByte@c,w
  9324  0B8D  00A1               	movwf	??_LCDByte
  9325  0B8E  3004               	movlw	4
  9326  0B8F                     u2795:	
  9327  0B8F  36A1               	lsrf	??_LCDByte,f
  9328  0B90  0B89               	decfsz	9,f
  9329  0B91  2B8F               	goto	u2795
  9330  0B92  0821               	movf	??_LCDByte,w
  9331  0B93  00A2               	movwf	??_LCDByte+1
  9332  0B94  0822               	movf	??_LCDByte+1,w
  9333  0B95  00A3               	movwf	LCDByte@hn
  9334                           
  9335                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  9336  0B96  0825               	movf	LCDByte@c,w
  9337  0B97  390F               	andlw	15
  9338  0B98  00A1               	movwf	??_LCDByte
  9339  0B99  0821               	movf	??_LCDByte,w
  9340  0B9A  00A4               	movwf	LCDByte@ln
  9341                           
  9342                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  9343  0B9B  0820               	movf	LCDByte@isdata,w
  9344  0B9C  1D03               	btfss	3,2
  9345  0B9D  2BA0               	goto	l563
  9346                           
  9347                           ;lcd_hd44780_pic16.c: 96: (RD3=0);
  9348  0B9E  118F               	bcf	15,3	;volatile
  9349  0B9F  2BA1               	goto	l564
  9350  0BA0                     l563:	
  9351                           
  9352                           ;lcd_hd44780_pic16.c: 97: else
  9353                           ;lcd_hd44780_pic16.c: 98: (RD3=1);
  9354  0BA0  158F               	bsf	15,3	;volatile
  9355  0BA1                     l564:	
  9356                           
  9357                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(18432000/4000000.0)));
  9358  0BA1  3200               	nop2	;2 cycle nop
  9359                           
  9360                           ;lcd_hd44780_pic16.c: 102: (RD0=1);
  9361  0BA2  0020               	movlb	0	; select bank0
  9362  0BA3  140F               	bsf	15,0	;volatile
  9363                           
  9364                           ;lcd_hd44780_pic16.c: 106: temp=(PORTB & (~(0X0F<<0)))|((hn<<0));
  9365  0BA4  080D               	movf	13,w	;volatile
  9366  0BA5  39F0               	andlw	240
  9367  0BA6  0423               	iorwf	LCDByte@hn,w
  9368  0BA7  00A1               	movwf	??_LCDByte
  9369  0BA8  0821               	movf	??_LCDByte,w
  9370  0BA9  00A6               	movwf	LCDByte@temp
  9371                           
  9372                           ;lcd_hd44780_pic16.c: 107: PORTB=temp;
  9373  0BAA  0826               	movf	LCDByte@temp,w
  9374  0BAB  008D               	movwf	13	;volatile
  9375                           
  9376                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9377  0BAC  3200               	nop2	;2 cycle nop
  9378  0BAD  3200               	nop2	;2 cycle nop
  9379                           
  9380                           ;lcd_hd44780_pic16.c: 113: (RD0=0);
  9381  0BAE  0020               	movlb	0	; select bank0
  9382  0BAF  100F               	bcf	15,0	;volatile
  9383                           
  9384                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9385  0BB0  3200               	nop2	;2 cycle nop
  9386  0BB1  3200               	nop2	;2 cycle nop
  9387                           
  9388                           ;lcd_hd44780_pic16.c: 118: (RD0=1);
  9389  0BB2  0020               	movlb	0	; select bank0
  9390  0BB3  140F               	bsf	15,0	;volatile
  9391                           
  9392                           ;lcd_hd44780_pic16.c: 120: temp=(PORTB & (~(0X0F<<0)))|((ln<<0));
  9393  0BB4  080D               	movf	13,w	;volatile
  9394  0BB5  39F0               	andlw	240
  9395  0BB6  0424               	iorwf	LCDByte@ln,w
  9396  0BB7  00A1               	movwf	??_LCDByte
  9397  0BB8  0821               	movf	??_LCDByte,w
  9398  0BB9  00A6               	movwf	LCDByte@temp
  9399                           
  9400                           ;lcd_hd44780_pic16.c: 122: PORTB=temp;
  9401  0BBA  0826               	movf	LCDByte@temp,w
  9402  0BBB  008D               	movwf	13	;volatile
  9403                           
  9404                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9405  0BBC  3200               	nop2	;2 cycle nop
  9406  0BBD  3200               	nop2	;2 cycle nop
  9407                           
  9408                           ;lcd_hd44780_pic16.c: 128: (RD0=0);
  9409  0BBE  0020               	movlb	0	; select bank0
  9410  0BBF  100F               	bcf	15,0	;volatile
  9411                           
  9412                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(18432000/4000000.0)));
  9413  0BC0  3200               	nop2	;2 cycle nop
  9414  0BC1  3200               	nop2	;2 cycle nop
  9415                           
  9416                           ;lcd_hd44780_pic16.c: 131: _delay((unsigned long)((1)*(18432000/4000.0)));
  9417  0BC2  3006               	movlw	6
  9418  0BC3  0020               	movlb	0	; select bank0
  9419  0BC4  00A1               	movwf	??_LCDByte
  9420  0BC5  30FB               	movlw	251
  9421  0BC6                     u5977:	
  9422  0BC6  0B89               	decfsz	9,f
  9423  0BC7  2BC6               	goto	u5977
  9424  0BC8  0BA1               	decfsz	??_LCDByte,f
  9425  0BC9  2BC6               	goto	u5977
  9426  0BCA  0008               	return
  9427  0BCB                     __end_of_LCDByte:	
  9428                           
  9429                           	psect	text43
  9430  0DED                     __ptext43:	
  9431 ;; *************** function _DHT_result *****************
  9432 ;; Defined at:
  9433 ;;		line 39 in file "dht11.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  x               2   18[BANK0 ] int 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      void 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0, pclath, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9447 ;;      Params:         0       0       0       0       0       0       0       0
  9448 ;;      Locals:         0       2       0       0       0       0       0       0
  9449 ;;      Temps:          0      14       0       0       0       0       0       0
  9450 ;;      Totals:         0      16       0       0       0       0       0       0
  9451 ;;Total ram usage:       16 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    5
  9454 ;; This function calls:
  9455 ;;		_ReadData
  9456 ;; This function is called by:
  9457 ;;		_main
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function _DHT_result
  9463  0DED                     _DHT_result:	
  9464                           
  9465                           ;dht11.c: 41: RH_byte1 = ReadData();
  9466                           
  9467                           ;incstack = 0
  9468                           ; Regs used in _DHT_result: [wreg+status,2+status,0+pclath+cstack]
  9469  0DED  318B  2316  318D   	fcall	_ReadData
  9470  0DF0  0020               	movlb	0	; select bank0
  9471  0DF1  00A4               	movwf	??_DHT_result
  9472  0DF2  0824               	movf	??_DHT_result,w
  9473  0DF3  00ED               	movwf	_RH_byte1
  9474                           
  9475                           ;dht11.c: 42: RH_byte2 = ReadData();
  9476  0DF4  318B  2316  318D   	fcall	_ReadData
  9477  0DF7  0020               	movlb	0	; select bank0
  9478  0DF8  00A4               	movwf	??_DHT_result
  9479  0DF9  0824               	movf	??_DHT_result,w
  9480  0DFA  00E9               	movwf	_RH_byte2
  9481                           
  9482                           ;dht11.c: 43: T_byte1 = ReadData();
  9483  0DFB  318B  2316  318D   	fcall	_ReadData
  9484  0DFE  0020               	movlb	0	; select bank0
  9485  0DFF  00A4               	movwf	??_DHT_result
  9486  0E00  0824               	movf	??_DHT_result,w
  9487  0E01  00EB               	movwf	_T_byte1
  9488                           
  9489                           ;dht11.c: 44: T_byte2 = ReadData();
  9490  0E02  318B  2316  318D   	fcall	_ReadData
  9491  0E05  0020               	movlb	0	; select bank0
  9492  0E06  00A4               	movwf	??_DHT_result
  9493  0E07  0824               	movf	??_DHT_result,w
  9494  0E08  00EA               	movwf	_T_byte2
  9495                           
  9496                           ;dht11.c: 45: Sum = ReadData();
  9497  0E09  318B  2316  318D   	fcall	_ReadData
  9498  0E0C  0020               	movlb	0	; select bank0
  9499  0E0D  00A4               	movwf	??_DHT_result
  9500  0E0E  0824               	movf	??_DHT_result,w
  9501  0E0F  00E8               	movwf	_Sum
  9502                           
  9503                           ;dht11.c: 47: if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF))
  9504  0E10  086A               	movf	_T_byte2,w
  9505  0E11  00A4               	movwf	??_DHT_result
  9506  0E12  01A5               	clrf	??_DHT_result+1
  9507  0E13  086B               	movf	_T_byte1,w
  9508  0E14  00A6               	movwf	??_DHT_result+2
  9509  0E15  01A7               	clrf	??_DHT_result+3
  9510  0E16  086D               	movf	_RH_byte1,w
  9511  0E17  0769               	addwf	_RH_byte2,w
  9512  0E18  00A8               	movwf	??_DHT_result+4
  9513  0E19  01A9               	clrf	??_DHT_result+5
  9514  0E1A  0DA9               	rlf	??_DHT_result+5,f
  9515  0E1B  0826               	movf	??_DHT_result+2,w
  9516  0E1C  0728               	addwf	??_DHT_result+4,w
  9517  0E1D  00AA               	movwf	??_DHT_result+6
  9518  0E1E  0827               	movf	??_DHT_result+3,w
  9519  0E1F  3D29               	addwfc	??_DHT_result+5,w
  9520  0E20  00AB               	movwf	??_DHT_result+7
  9521  0E21  0824               	movf	??_DHT_result,w
  9522  0E22  072A               	addwf	??_DHT_result+6,w
  9523  0E23  00AC               	movwf	??_DHT_result+8
  9524  0E24  0825               	movf	??_DHT_result+1,w
  9525  0E25  3D2B               	addwfc	??_DHT_result+7,w
  9526  0E26  00AD               	movwf	??_DHT_result+9
  9527  0E27  30FF               	movlw	255
  9528  0E28  052C               	andwf	??_DHT_result+8,w
  9529  0E29  00AE               	movwf	??_DHT_result+10
  9530  0E2A  3000               	movlw	0
  9531  0E2B  052D               	andwf	??_DHT_result+9,w
  9532  0E2C  00AF               	movwf	??_DHT_result+11
  9533  0E2D  0868               	movf	_Sum,w
  9534  0E2E  00B0               	movwf	??_DHT_result+12
  9535  0E2F  01B1               	clrf	??_DHT_result+13
  9536  0E30  082F               	movf	??_DHT_result+11,w
  9537  0E31  0631               	xorwf	??_DHT_result+13,w
  9538  0E32  1D03               	skipz
  9539  0E33  2E36               	goto	u4035
  9540  0E34  082E               	movf	??_DHT_result+10,w
  9541  0E35  0630               	xorwf	??_DHT_result+12,w
  9542  0E36                     u4035:	
  9543  0E36  1D03               	skipz
  9544  0E37  2E43               	goto	l734
  9545                           
  9546                           ;dht11.c: 48: {
  9547                           ;dht11.c: 49: Temp = T_byte1;
  9548  0E38  086B               	movf	_T_byte1,w
  9549  0E39  00A4               	movwf	??_DHT_result
  9550  0E3A  0824               	movf	??_DHT_result,w
  9551  0E3B  0022               	movlb	2	; select bank2
  9552  0E3C  00E9               	movwf	_Temp^(0+256)
  9553                           
  9554                           ;dht11.c: 50: RH = RH_byte1;
  9555  0E3D  0020               	movlb	0	; select bank0
  9556  0E3E  086D               	movf	_RH_byte1,w
  9557  0E3F  00A4               	movwf	??_DHT_result
  9558  0E40  0824               	movf	??_DHT_result,w
  9559  0E41  0022               	movlb	2	; select bank2
  9560  0E42  00E8               	movwf	_RH^(0+256)
  9561  0E43                     l734:	
  9562                           
  9563                           ;dht11.c: 51: }
  9564                           ;dht11.c: 52: int x=RH_byte1;
  9565  0E43  0020               	movlb	0	; select bank0
  9566  0E44  086D               	movf	_RH_byte1,w
  9567  0E45  00A4               	movwf	??_DHT_result
  9568  0E46  01A5               	clrf	??_DHT_result+1
  9569  0E47  0824               	movf	??_DHT_result,w
  9570  0E48  00B2               	movwf	DHT_result@x
  9571  0E49  0825               	movf	??_DHT_result+1,w
  9572  0E4A  00B3               	movwf	DHT_result@x+1
  9573                           
  9574                           ;dht11.c: 53: umiditate=RH_byte1;
  9575  0E4B  086D               	movf	_RH_byte1,w
  9576  0E4C  00A4               	movwf	??_DHT_result
  9577  0E4D  01A5               	clrf	??_DHT_result+1
  9578  0E4E  0824               	movf	??_DHT_result,w
  9579  0E4F  0022               	movlb	2	; select bank2
  9580  0E50  00E2               	movwf	_umiditate^(0+256)
  9581  0E51  0020               	movlb	0	; select bank0
  9582  0E52  0825               	movf	??_DHT_result+1,w
  9583  0E53  0022               	movlb	2	; select bank2
  9584  0E54  00E3               	movwf	(_umiditate+1)^(0+256)
  9585  0E55  0008               	return
  9586  0E56                     __end_of_DHT_result:	
  9587                           
  9588                           	psect	text44
  9589  0B16                     __ptext44:	
  9590 ;; *************** function _ReadData *****************
  9591 ;; Defined at:
  9592 ;;		line 25 in file "dht11.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;  j               1    3[BANK0 ] unsigned char 
  9597 ;;  i               1    2[BANK0 ] unsigned char 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  1    wreg      unsigned char 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9607 ;;      Params:         0       0       0       0       0       0       0       0
  9608 ;;      Locals:         0       2       0       0       0       0       0       0
  9609 ;;      Temps:          0       2       0       0       0       0       0       0
  9610 ;;      Totals:         0       4       0       0       0       0       0       0
  9611 ;;Total ram usage:        4 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    4
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_DHT_result
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           
  9622                           ;psect for function _ReadData
  9623  0B16                     _ReadData:	
  9624                           
  9625                           ;dht11.c: 27: char i, j;
  9626                           ;dht11.c: 28: for(j = 0; j < 8; j++){
  9627                           
  9628                           ;incstack = 0
  9629                           ; Regs used in _ReadData: [wreg+status,2+status,0]
  9630  0B16  0020               	movlb	0	; select bank0
  9631  0B17  01A3               	clrf	ReadData@j
  9632  0B18  3008               	movlw	8
  9633  0B19  0223               	subwf	ReadData@j,w
  9634  0B1A  1803               	btfsc	3,0
  9635  0B1B  2B4C               	goto	l3112
  9636  0B1C                     l723:	
  9637                           ;dht11.c: 29: while(!PORTDbits.RD2 );
  9638                           
  9639  0B1C  1D0F               	btfss	15,2	;volatile
  9640  0B1D  2B1C               	goto	l723
  9641                           
  9642                           ;dht11.c: 30: _delay((unsigned long)((30)*(18432000/4000000.0)));
  9643  0B1E  302E               	movlw	46
  9644  0B1F                     u5987:	
  9645  0B1F  0B89               	decfsz	9,f
  9646  0B20  2B1F               	goto	u5987
  9647                           
  9648                           ;dht11.c: 31: if(PORTDbits.RD2 == 0)
  9649  0B21  0020               	movlb	0	; select bank0
  9650  0B22  190F               	btfsc	15,2	;volatile
  9651  0B23  2B34               	goto	l3106
  9652                           
  9653                           ;dht11.c: 32: i&= ~(1<<(7 - j));
  9654  0B24  3001               	movlw	1
  9655  0B25  00A0               	movwf	??_ReadData
  9656  0B26  0323               	decf	ReadData@j,w
  9657  0B27  3AFF               	xorlw	255
  9658  0B28  3E07               	addlw	7
  9659  0B29  0A89               	incf	9,f
  9660  0B2A  2B2C               	goto	u2844
  9661  0B2B                     u2845:	
  9662  0B2B  35A0               	lslf	??_ReadData,f
  9663  0B2C                     u2844:	
  9664  0B2C  0B89               	decfsz	9,f
  9665  0B2D  2B2B               	goto	u2845
  9666  0B2E  0820               	movf	??_ReadData,w
  9667  0B2F  3AFF               	xorlw	255
  9668  0B30  00A1               	movwf	??_ReadData+1
  9669  0B31  0821               	movf	??_ReadData+1,w
  9670  0B32  05A2               	andwf	ReadData@i,f
  9671  0B33  2B44               	goto	l3108
  9672  0B34                     l3106:	
  9673                           
  9674                           ;dht11.c: 33: else {i|= (1 << (7 - j));
  9675  0B34  3001               	movlw	1
  9676  0B35  00A0               	movwf	??_ReadData
  9677  0B36  0323               	decf	ReadData@j,w
  9678  0B37  3AFF               	xorlw	255
  9679  0B38  3E07               	addlw	7
  9680  0B39  0A89               	incf	9,f
  9681  0B3A  2B3C               	goto	u2854
  9682  0B3B                     u2855:	
  9683  0B3B  35A0               	lslf	??_ReadData,f
  9684  0B3C                     u2854:	
  9685  0B3C  0B89               	decfsz	9,f
  9686  0B3D  2B3B               	goto	u2855
  9687  0B3E  0820               	movf	??_ReadData,w
  9688  0B3F  00A1               	movwf	??_ReadData+1
  9689  0B40  0821               	movf	??_ReadData+1,w
  9690  0B41  04A2               	iorwf	ReadData@i,f
  9691  0B42                     l728:	
  9692                           ;dht11.c: 34: while(PORTDbits.RD2 );}
  9693                           
  9694  0B42  190F               	btfsc	15,2	;volatile
  9695  0B43  2B42               	goto	l728
  9696  0B44                     l3108:	
  9697  0B44  3001               	movlw	1
  9698  0B45  00A0               	movwf	??_ReadData
  9699  0B46  0820               	movf	??_ReadData,w
  9700  0B47  07A3               	addwf	ReadData@j,f
  9701  0B48  3008               	movlw	8
  9702  0B49  0223               	subwf	ReadData@j,w
  9703  0B4A  1C03               	skipc
  9704  0B4B  2B1C               	goto	l723
  9705  0B4C                     l3112:	
  9706                           
  9707                           ;dht11.c: 35: }
  9708                           ;dht11.c: 36: return i;
  9709  0B4C  0822               	movf	ReadData@i,w
  9710  0B4D  0008               	return
  9711  0B4E                     __end_of_ReadData:	
  9712                           
  9713                           	psect	text45
  9714  0968                     __ptext45:	
  9715 ;; *************** function _CheckResponse *****************
  9716 ;; Defined at:
  9717 ;;		line 16 in file "dht11.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;		None
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;		None
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  1    wreg      void 
  9724 ;; Registers used:
  9725 ;;		wreg, status,2
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9731 ;;      Params:         0       0       0       0       0       0       0       0
  9732 ;;      Locals:         0       0       0       0       0       0       0       0
  9733 ;;      Temps:          0       0       0       0       0       0       0       0
  9734 ;;      Totals:         0       0       0       0       0       0       0       0
  9735 ;;Total ram usage:        0 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; Hardware stack levels required when called:    4
  9738 ;; This function calls:
  9739 ;;		Nothing
  9740 ;; This function is called by:
  9741 ;;		_main
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           
  9746                           ;psect for function _CheckResponse
  9747  0968                     _CheckResponse:	
  9748                           
  9749                           ;dht11.c: 18: Check = 0;
  9750                           
  9751                           ;incstack = 0
  9752                           ; Regs used in _CheckResponse: [wreg+status,2]
  9753  0968  0020               	movlb	0	; select bank0
  9754  0969  01EC               	clrf	_Check
  9755                           
  9756                           ;dht11.c: 19: _delay((unsigned long)((40)*(18432000/4000000.0)));
  9757  096A  303D               	movlw	61
  9758  096B                     u5997:	
  9759  096B  0B89               	decfsz	9,f
  9760  096C  296B               	goto	u5997
  9761  096D  0000               	nop
  9762                           
  9763                           ;dht11.c: 20: if (PORTDbits.RD2 == 0){
  9764  096E  0020               	movlb	0	; select bank0
  9765  096F  190F               	btfsc	15,2	;volatile
  9766  0970  0008               	return
  9767                           
  9768                           ;dht11.c: 21: _delay((unsigned long)((80)*(18432000/4000000.0)));
  9769  0971  307A               	movlw	122
  9770  0972                     u6007:	
  9771  0972  0B89               	decfsz	9,f
  9772  0973  2972               	goto	u6007
  9773  0974  3200               	nop2
  9774                           
  9775                           ;dht11.c: 22: if (PORTDbits.RD2 == 1) Check = 1; _delay((unsigned long)((40)*(18432000/4
      +                          000000.0)));}
  9776  0975  0020               	movlb	0	; select bank0
  9777  0976  1D0F               	btfss	15,2	;volatile
  9778  0977  297A               	goto	l3802
  9779  0978  01EC               	clrf	_Check
  9780  0979  0AEC               	incf	_Check,f
  9781  097A                     l3802:	
  9782  097A  303D               	movlw	61
  9783  097B                     u6017:	
  9784  097B  0B89               	decfsz	9,f
  9785  097C  297B               	goto	u6017
  9786  097D  0000               	nop
  9787  097E  0008               	return
  9788  097F                     __end_of_CheckResponse:	
  9789                           
  9790                           	psect	text46
  9791  08A2                     __ptext46:	
  9792 ;; *************** function _ADC_StartConversion *****************
  9793 ;; Defined at:
  9794 ;;		line 92 in file "mcc_generated_files/adc.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;		None
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;		None
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      void 
  9801 ;; Registers used:
  9802 ;;		None
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9808 ;;      Params:         0       0       0       0       0       0       0       0
  9809 ;;      Locals:         0       0       0       0       0       0       0       0
  9810 ;;      Temps:          0       0       0       0       0       0       0       0
  9811 ;;      Totals:         0       0       0       0       0       0       0       0
  9812 ;;Total ram usage:        0 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    4
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_main
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           
  9823                           ;psect for function _ADC_StartConversion
  9824  08A2                     _ADC_StartConversion:	
  9825                           
  9826                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  9827                           
  9828                           ;incstack = 0
  9829                           ; Regs used in _ADC_StartConversion: []
  9830  08A2  0021               	movlb	1	; select bank1
  9831  08A3  149D               	bsf	29,1	;volatile
  9832  08A4  0008               	return
  9833  08A5                     __end_of_ADC_StartConversion:	
  9834                           
  9835                           	psect	intentry
  9836  0004                     __pintentry:	
  9837 ;; *************** function _INTERRUPT_InterruptManager *****************
  9838 ;; Defined at:
  9839 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;                  1    wreg      void 
  9846 ;; Registers used:
  9847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9853 ;;      Params:         0       0       0       0       0       0       0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0
  9855 ;;      Temps:          1       0       0       0       0       0       0       0
  9856 ;;      Totals:         1       0       0       0       0       0       0       0
  9857 ;;Total ram usage:        1 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    3
  9860 ;; This function calls:
  9861 ;;		_ADC_ISR
  9862 ;;		_EUSART_Receive_ISR
  9863 ;;		_EUSART_Transmit_ISR
  9864 ;;		_TMR1_ISR
  9865 ;; This function is called by:
  9866 ;;		Interrupt level 1
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870  0004                     _INTERRUPT_InterruptManager:	
  9871                           
  9872                           ;incstack = 0
  9873  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9874                           
  9875                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9876  0005  3180               	pagesel	$
  9877  0006  0020               	movlb	0	; select bank0
  9878  0007  087F               	movf	127,w
  9879  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  9880                           
  9881                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  9882  0009  1F0B               	btfss	11,6	;volatile
  9883  000A  2815               	goto	i1l239
  9884  000B  0021               	movlb	1	; select bank1
  9885  000C  1F11               	btfss	17,6	;volatile
  9886  000D  2815               	goto	i1l239
  9887  000E  0020               	movlb	0	; select bank0
  9888  000F  1F11               	btfss	17,6	;volatile
  9889  0010  2815               	goto	i1l239
  9890                           
  9891                           ;interrupt_manager.c: 55: {
  9892                           ;interrupt_manager.c: 56: ADC_ISR();
  9893  0011  3188  20E3  3180   	fcall	_ADC_ISR
  9894                           
  9895                           ;interrupt_manager.c: 57: }
  9896  0014  2837               	goto	i1l247
  9897  0015                     i1l239:	
  9898                           
  9899                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  9900  0015  1F0B               	btfss	11,6	;volatile
  9901  0016  2821               	goto	i1l241
  9902  0017  0021               	movlb	1	; select bank1
  9903  0018  1E11               	btfss	17,4	;volatile
  9904  0019  2821               	goto	i1l241
  9905  001A  0020               	movlb	0	; select bank0
  9906  001B  1E11               	btfss	17,4	;volatile
  9907  001C  2821               	goto	i1l241
  9908                           
  9909                           ;interrupt_manager.c: 59: {
  9910                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  9911  001D  318A  2225  3180   	fcall	_EUSART_Transmit_ISR
  9912                           
  9913                           ;interrupt_manager.c: 61: }
  9914  0020  2837               	goto	i1l247
  9915  0021                     i1l241:	
  9916                           
  9917                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9918  0021  1F0B               	btfss	11,6	;volatile
  9919  0022  282D               	goto	i1l243
  9920  0023  0021               	movlb	1	; select bank1
  9921  0024  1E91               	btfss	17,5	;volatile
  9922  0025  282D               	goto	i1l243
  9923  0026  0020               	movlb	0	; select bank0
  9924  0027  1E91               	btfss	17,5	;volatile
  9925  0028  282D               	goto	i1l243
  9926                           
  9927                           ;interrupt_manager.c: 63: {
  9928                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  9929  0029  318C  2498  3180   	fcall	_EUSART_Receive_ISR
  9930                           
  9931                           ;interrupt_manager.c: 65: }
  9932  002C  2837               	goto	i1l247
  9933  002D                     i1l243:	
  9934                           
  9935                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  9936  002D  1F0B               	btfss	11,6	;volatile
  9937  002E  2837               	goto	i1l247
  9938  002F  0021               	movlb	1	; select bank1
  9939  0030  1C11               	btfss	17,0	;volatile
  9940  0031  2837               	goto	i1l247
  9941  0032  0020               	movlb	0	; select bank0
  9942  0033  1C11               	btfss	17,0	;volatile
  9943  0034  2837               	goto	i1l247
  9944                           
  9945                           ;interrupt_manager.c: 67: {
  9946                           ;interrupt_manager.c: 68: TMR1_ISR();
  9947  0035  3189  21B3         	fcall	_TMR1_ISR
  9948  0037                     i1l247:	
  9949                           ;interrupt_manager.c: 70: else
  9950                           ;interrupt_manager.c: 71: {
  9951                           
  9952                           ;interrupt_manager.c: 69: }
  9953                           
  9954  0037  0879               	movf	??_INTERRUPT_InterruptManager,w
  9955  0038  0020               	movlb	0	; select bank0
  9956  0039  00FF               	movwf	127
  9957  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9958  003B  0009               	retfie
  9959  003C                     __end_of_INTERRUPT_InterruptManager:	
  9960                           
  9961                           	psect	text48
  9962  09B3                     __ptext48:	
  9963 ;; *************** function _TMR1_ISR *****************
  9964 ;; Defined at:
  9965 ;;		line 171 in file "mcc_generated_files/tmr1.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg, status,2, status,0, pclath, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9979 ;;      Params:         0       0       0       0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0
  9982 ;;      Totals:         0       0       0       0       0       0       0       0
  9983 ;;Total ram usage:        0 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    2
  9986 ;; This function calls:
  9987 ;;		_TMR1_CallBack
  9988 ;; This function is called by:
  9989 ;;		_INTERRUPT_InterruptManager
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           
  9994                           ;psect for function _TMR1_ISR
  9995  09B3                     _TMR1_ISR:	
  9996                           
  9997                           ;tmr1.c: 173: static volatile unsigned int CountCallBack = 0;
  9998                           ;tmr1.c: 176: PIR1bits.TMR1IF = 0;
  9999                           
 10000                           ;incstack = 0
 10001                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 10002  09B3  0020               	movlb	0	; select bank0
 10003  09B4  1011               	bcf	17,0	;volatile
 10004                           
 10005                           ;tmr1.c: 178: TMR1H = (timer1ReloadVal >> 8);
 10006  09B5  086F               	movf	_timer1ReloadVal+1,w	;volatile
 10007  09B6  0097               	movwf	23	;volatile
 10008                           
 10009                           ;tmr1.c: 179: TMR1L = timer1ReloadVal;
 10010  09B7  086E               	movf	_timer1ReloadVal,w	;volatile
 10011  09B8  0096               	movwf	22	;volatile
 10012                           
 10013                           ;tmr1.c: 180: flag_1_ms=1;
 10014  09B9  3001               	movlw	1
 10015  09BA  0022               	movlb	2	; select bank2
 10016  09BB  00D8               	movwf	_flag_1_ms^(0+256)
 10017  09BC  3000               	movlw	0
 10018  09BD  00D9               	movwf	(_flag_1_ms^(0+256)+1)
 10019                           
 10020                           ;tmr1.c: 182: if (++CountCallBack >= 10)
 10021  09BE  3001               	movlw	1
 10022  09BF  07CA               	addwf	TMR1_ISR@CountCallBack^(0+256),f	;volatile
 10023  09C0  3000               	movlw	0
 10024  09C1  3DCB               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+256),f	;volatile
 10025  09C2  3000               	movlw	0
 10026  09C3  024B               	subwf	(TMR1_ISR@CountCallBack+1)^(0+256),w	;volatile
 10027  09C4  300A               	movlw	10
 10028  09C5  1903               	skipnz
 10029  09C6  024A               	subwf	TMR1_ISR@CountCallBack^(0+256),w	;volatile
 10030  09C7  1C03               	skipc
 10031  09C8  0008               	return
 10032                           
 10033                           ;tmr1.c: 183: {
 10034                           ;tmr1.c: 185: TMR1_CallBack();
 10035  09C9  318D  2534         	fcall	_TMR1_CallBack
 10036                           
 10037                           ;tmr1.c: 188: CountCallBack = 0;
 10038  09CB  0022               	movlb	2	; select bank2
 10039  09CC  01CA               	clrf	TMR1_ISR@CountCallBack^(0+256)	;volatile
 10040  09CD  01CB               	clrf	(TMR1_ISR@CountCallBack+1)^(0+256)	;volatile
 10041  09CE  0008               	return
 10042  09CF                     __end_of_TMR1_ISR:	
 10043                           
 10044                           	psect	text49
 10045  0D34                     __ptext49:	
 10046 ;; *************** function _TMR1_CallBack *****************
 10047 ;; Defined at:
 10048 ;;		line 192 in file "mcc_generated_files/tmr1.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, status,2, status,0, pclath, cstack
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10062 ;;      Params:         0       0       0       0       0       0       0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0       0
 10065 ;;      Totals:         0       0       0       0       0       0       0       0
 10066 ;;Total ram usage:        0 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    1
 10069 ;; This function calls:
 10070 ;;		Absolute function
 10071 ;;		_TMR1_DefaultInterruptHandler
 10072 ;; This function is called by:
 10073 ;;		_TMR1_ISR
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           
 10078                           ;psect for function _TMR1_CallBack
 10079  0D34                     _TMR1_CallBack:	
 10080                           
 10081                           ;tmr1.c: 194: flag_10_ms=1;
 10082                           
 10083                           ;incstack = 0
 10084                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 10085  0D34  3001               	movlw	1
 10086  0D35  0022               	movlb	2	; select bank2
 10087  0D36  00D6               	movwf	_flag_10_ms^(0+256)
 10088  0D37  3000               	movlw	0
 10089  0D38  00D7               	movwf	(_flag_10_ms^(0+256)+1)
 10090                           
 10091                           ;tmr1.c: 195: count_100_ms++;
 10092  0D39  3001               	movlw	1
 10093  0D3A  07D2               	addwf	_count_100_ms^(0+256),f
 10094  0D3B  3000               	movlw	0
 10095  0D3C  3DD3               	addwfc	(_count_100_ms+1)^(0+256),f
 10096                           
 10097                           ;tmr1.c: 196: count_500_ms++;
 10098  0D3D  3001               	movlw	1
 10099  0D3E  07D0               	addwf	_count_500_ms^(0+256),f
 10100  0D3F  3000               	movlw	0
 10101  0D40  3DD1               	addwfc	(_count_500_ms+1)^(0+256),f
 10102                           
 10103                           ;tmr1.c: 197: count_1000_ms++;
 10104  0D41  3001               	movlw	1
 10105  0D42  07CE               	addwf	_count_1000_ms^(0+256),f
 10106  0D43  3000               	movlw	0
 10107  0D44  3DCF               	addwfc	(_count_1000_ms+1)^(0+256),f
 10108                           
 10109                           ;tmr1.c: 198: count_4000_ms++;
 10110  0D45  3001               	movlw	1
 10111  0D46  07CC               	addwf	_count_4000_ms^(0+256),f
 10112  0D47  3000               	movlw	0
 10113  0D48  3DCD               	addwfc	(_count_4000_ms+1)^(0+256),f
 10114                           
 10115                           ;tmr1.c: 200: if (count_100_ms==10)
 10116  0D49  300A               	movlw	10
 10117  0D4A  0652               	xorwf	_count_100_ms^(0+256),w
 10118  0D4B  0453               	iorwf	(_count_100_ms+1)^(0+256),w
 10119  0D4C  1D03               	btfss	3,2
 10120  0D4D  2D56               	goto	i1l5000
 10121                           
 10122                           ;tmr1.c: 201: {
 10123                           ;tmr1.c: 202: flag_100_ms=1;
 10124  0D4E  3001               	movlw	1
 10125  0D4F  0023               	movlb	3	; select bank3
 10126  0D50  00E5               	movwf	_flag_100_ms^(0+384)
 10127  0D51  3000               	movlw	0
 10128  0D52  00E6               	movwf	(_flag_100_ms^(0+384)+1)
 10129                           
 10130                           ;tmr1.c: 203: count_100_ms=0;
 10131  0D53  0022               	movlb	2	; select bank2
 10132  0D54  01D2               	clrf	_count_100_ms^(0+256)
 10133  0D55  01D3               	clrf	(_count_100_ms+1)^(0+256)
 10134  0D56                     i1l5000:	
 10135                           
 10136                           ;tmr1.c: 204: }
 10137                           ;tmr1.c: 205: if(count_500_ms==50)
 10138  0D56  3032               	movlw	50
 10139  0D57  0650               	xorwf	_count_500_ms^(0+256),w
 10140  0D58  0451               	iorwf	(_count_500_ms+1)^(0+256),w
 10141  0D59  1D03               	btfss	3,2
 10142  0D5A  2D63               	goto	i1l5006
 10143                           
 10144                           ;tmr1.c: 206: {
 10145                           ;tmr1.c: 207: flag_500_ms=1;
 10146  0D5B  3001               	movlw	1
 10147  0D5C  0023               	movlb	3	; select bank3
 10148  0D5D  00E3               	movwf	_flag_500_ms^(0+384)
 10149  0D5E  3000               	movlw	0
 10150  0D5F  00E4               	movwf	(_flag_500_ms^(0+384)+1)
 10151                           
 10152                           ;tmr1.c: 208: count_500_ms=0;
 10153  0D60  0022               	movlb	2	; select bank2
 10154  0D61  01D0               	clrf	_count_500_ms^(0+256)
 10155  0D62  01D1               	clrf	(_count_500_ms+1)^(0+256)
 10156  0D63                     i1l5006:	
 10157                           
 10158                           ;tmr1.c: 209: }
 10159                           ;tmr1.c: 210: if (count_1000_ms==100)
 10160  0D63  3064               	movlw	100
 10161  0D64  064E               	xorwf	_count_1000_ms^(0+256),w
 10162  0D65  044F               	iorwf	(_count_1000_ms+1)^(0+256),w
 10163  0D66  1D03               	btfss	3,2
 10164  0D67  2D6E               	goto	i1l5012
 10165                           
 10166                           ;tmr1.c: 211: {
 10167                           ;tmr1.c: 212: flag_1000_ms=1;
 10168  0D68  3001               	movlw	1
 10169  0D69  00D4               	movwf	_flag_1000_ms^(0+256)
 10170  0D6A  3000               	movlw	0
 10171  0D6B  00D5               	movwf	(_flag_1000_ms^(0+256)+1)
 10172                           
 10173                           ;tmr1.c: 213: count_1000_ms=0;
 10174  0D6C  01CE               	clrf	_count_1000_ms^(0+256)
 10175  0D6D  01CF               	clrf	(_count_1000_ms+1)^(0+256)
 10176  0D6E                     i1l5012:	
 10177                           
 10178                           ;tmr1.c: 214: }
 10179                           ;tmr1.c: 215: if (count_4000_ms==400)
 10180  0D6E  3090               	movlw	144
 10181  0D6F  064C               	xorwf	_count_4000_ms^(0+256),w
 10182  0D70  1D03               	skipz
 10183  0D71  2D7D               	goto	i1l5018
 10184  0D72  034D               	decf	(_count_4000_ms+1)^(0+256),w
 10185  0D73  1D03               	btfss	3,2
 10186  0D74  2D7D               	goto	i1l5018
 10187                           
 10188                           ;tmr1.c: 216: {
 10189                           ;tmr1.c: 217: flag_4000_ms=1;
 10190  0D75  3001               	movlw	1
 10191  0D76  0023               	movlb	3	; select bank3
 10192  0D77  00E1               	movwf	_flag_4000_ms^(0+384)
 10193  0D78  3000               	movlw	0
 10194  0D79  00E2               	movwf	(_flag_4000_ms^(0+384)+1)
 10195                           
 10196                           ;tmr1.c: 218: count_4000_ms=0;
 10197  0D7A  0022               	movlb	2	; select bank2
 10198  0D7B  01CC               	clrf	_count_4000_ms^(0+256)
 10199  0D7C  01CD               	clrf	(_count_4000_ms+1)^(0+256)
 10200  0D7D                     i1l5018:	
 10201                           
 10202                           ;tmr1.c: 219: }
 10203                           ;tmr1.c: 220: if(TMR1_InterruptHandler)
 10204  0D7D  0023               	movlb	3	; select bank3
 10205  0D7E  0867               	movf	_TMR1_InterruptHandler^(0+384),w
 10206  0D7F  0468               	iorwf	(_TMR1_InterruptHandler+1)^(0+384),w
 10207  0D80  1903               	btfsc	3,2
 10208  0D81  0008               	return
 10209                           
 10210                           ;tmr1.c: 221: {
 10211                           ;tmr1.c: 223: TMR1_InterruptHandler();
 10212  0D82  0868               	movf	(_TMR1_InterruptHandler+1)^(0+384),w
 10213  0D83  008A               	movwf	10
 10214  0D84  0867               	movf	_TMR1_InterruptHandler^(0+384),w
 10215  0D85  000A               	callw
 10216  0D86  318D               	pagesel	$
 10217  0D87  0008               	return
 10218  0D88                     __end_of_TMR1_CallBack:	
 10219                           
 10220                           	psect	text50
 10221  07FF                     __ptext50:	
 10222 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 10223 ;; Defined at:
 10224 ;;		line 231 in file "mcc_generated_files/tmr1.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;		None
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  1    wreg      void 
 10231 ;; Registers used:
 10232 ;;		None
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10238 ;;      Params:         0       0       0       0       0       0       0       0
 10239 ;;      Locals:         0       0       0       0       0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0
 10241 ;;      Totals:         0       0       0       0       0       0       0       0
 10242 ;;Total ram usage:        0 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_TMR1_Initialize
 10248 ;;		_TMR1_CallBack
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _TMR1_DefaultInterruptHandler
 10254  07FF                     _TMR1_DefaultInterruptHandler:	
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 10258  07FF  0008               	return
 10259  0800                     __end_of_TMR1_DefaultInterruptHandler:	
 10260                           
 10261                           	psect	text51
 10262  0A25                     __ptext51:	
 10263 ;; *************** function _EUSART_Transmit_ISR *****************
 10264 ;; Defined at:
 10265 ;;		line 166 in file "mcc_generated_files/eusart.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;		None
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  1    wreg      void 
 10272 ;; Registers used:
 10273 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10279 ;;      Params:         0       0       0       0       0       0       0       0
 10280 ;;      Locals:         0       0       0       0       0       0       0       0
 10281 ;;      Temps:          1       0       0       0       0       0       0       0
 10282 ;;      Totals:         1       0       0       0       0       0       0       0
 10283 ;;Total ram usage:        1 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; This function calls:
 10286 ;;		Nothing
 10287 ;; This function is called by:
 10288 ;;		_INTERRUPT_InterruptManager
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           
 10293                           ;psect for function _EUSART_Transmit_ISR
 10294  0A25                     _EUSART_Transmit_ISR:	
 10295                           
 10296                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10297                           
 10298                           ;incstack = 0
 10299                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10300  0A25  3008               	movlw	8
 10301  0A26  0022               	movlb	2	; select bank2
 10302  0A27  026D               	subwf	_eusartTxBufferRemaining^(0+256),w	;volatile
 10303  0A28  1803               	skipnc
 10304  0A29  2A42               	goto	i1l173
 10305                           
 10306                           ;eusart.c: 171: {
 10307                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
 10308  0A2A  0020               	movlb	0	; select bank0
 10309  0A2B  0866               	movf	_eusartTxTail,w
 10310  0A2C  3ED2               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 10311  0A2D  0086               	movwf	6
 10312  0A2E  3001               	movlw	1	; select bank3/4
 10313  0A2F  0087               	movwf	7
 10314  0A30  0801               	movf	1,w
 10315  0A31  0023               	movlb	3	; select bank3
 10316  0A32  009A               	movwf	26	;volatile
 10317  0A33  3001               	movlw	1
 10318  0A34  00F0               	movwf	??_EUSART_Transmit_ISR
 10319  0A35  0870               	movf	??_EUSART_Transmit_ISR,w
 10320  0A36  0020               	movlb	0	; select bank0
 10321  0A37  07E6               	addwf	_eusartTxTail,f	;volatile
 10322                           
 10323                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10324  0A38  3008               	movlw	8
 10325  0A39  0266               	subwf	_eusartTxTail,w	;volatile
 10326  0A3A  1803               	btfsc	3,0
 10327                           
 10328                           ;eusart.c: 174: {
 10329                           ;eusart.c: 175: eusartTxTail = 0;
 10330  0A3B  01E6               	clrf	_eusartTxTail	;volatile
 10331                           
 10332                           ;eusart.c: 176: }
 10333                           ;eusart.c: 177: eusartTxBufferRemaining++;
 10334  0A3C  3001               	movlw	1
 10335  0A3D  00F0               	movwf	??_EUSART_Transmit_ISR
 10336  0A3E  0870               	movf	??_EUSART_Transmit_ISR,w
 10337  0A3F  0022               	movlb	2	; select bank2
 10338  0A40  07ED               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 10339                           
 10340                           ;eusart.c: 178: }
 10341  0A41  0008               	return
 10342  0A42                     i1l173:	
 10343                           
 10344                           ;eusart.c: 179: else
 10345                           ;eusart.c: 180: {
 10346                           ;eusart.c: 181: PIE1bits.TXIE = 0;
 10347  0A42  0021               	movlb	1	; select bank1
 10348  0A43  1211               	bcf	17,4	;volatile
 10349  0A44  0008               	return
 10350  0A45                     __end_of_EUSART_Transmit_ISR:	
 10351                           
 10352                           	psect	text52
 10353  0C98                     __ptext52:	
 10354 ;; *************** function _EUSART_Receive_ISR *****************
 10355 ;; Defined at:
 10356 ;;		line 185 in file "mcc_generated_files/eusart.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10370 ;;      Params:         0       0       0       0       0       0       0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0
 10372 ;;      Temps:          1       0       0       0       0       0       0       0
 10373 ;;      Totals:         1       0       0       0       0       0       0       0
 10374 ;;Total ram usage:        1 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; This function calls:
 10377 ;;		Nothing
 10378 ;; This function is called by:
 10379 ;;		_INTERRUPT_InterruptManager
 10380 ;; This function uses a non-reentrant model
 10381 ;;
 10382                           
 10383                           
 10384                           ;psect for function _EUSART_Receive_ISR
 10385  0C98                     _EUSART_Receive_ISR:	
 10386                           
 10387                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
 10388                           
 10389                           ;incstack = 0
 10390                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10391  0C98  0023               	movlb	3	; select bank3
 10392  0C99  1C9D               	btfss	29,1	;volatile
 10393  0C9A  2C9D               	goto	i1l3602
 10394                           
 10395                           ;eusart.c: 189: {
 10396                           ;eusart.c: 192: RCSTAbits.CREN = 0;
 10397  0C9B  121D               	bcf	29,4	;volatile
 10398                           
 10399                           ;eusart.c: 193: RCSTAbits.CREN = 1;
 10400  0C9C  161D               	bsf	29,4	;volatile
 10401  0C9D                     i1l3602:	
 10402                           
 10403                           ;eusart.c: 194: }
 10404                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
 10405  0C9D  0819               	movf	25,w	;volatile
 10406  0C9E  00F0               	movwf	??_EUSART_Receive_ISR
 10407  0C9F  0020               	movlb	0	; select bank0
 10408  0CA0  0865               	movf	_eusartRxHead,w
 10409  0CA1  3ECA               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 10410  0CA2  0086               	movwf	6
 10411  0CA3  3001               	movlw	1	; select bank3/4
 10412  0CA4  0087               	movwf	7
 10413  0CA5  0870               	movf	??_EUSART_Receive_ISR,w
 10414  0CA6  0081               	movwf	1
 10415  0CA7  3001               	movlw	1
 10416  0CA8  00F0               	movwf	??_EUSART_Receive_ISR
 10417  0CA9  0870               	movf	??_EUSART_Receive_ISR,w
 10418  0CAA  07E5               	addwf	_eusartRxHead,f	;volatile
 10419                           
 10420                           ;eusart.c: 198: rcreg=RCREG;
 10421  0CAB  0023               	movlb	3	; select bank3
 10422  0CAC  0819               	movf	25,w	;volatile
 10423  0CAD  00F0               	movwf	??_EUSART_Receive_ISR
 10424  0CAE  0870               	movf	??_EUSART_Receive_ISR,w
 10425  0CAF  00FB               	movwf	_rcreg	;volatile
 10426                           
 10427                           ;eusart.c: 200: if(rcreg=='X')
 10428  0CB0  3058               	movlw	88
 10429  0CB1  067B               	xorwf	_rcreg,w	;volatile
 10430  0CB2  1D03               	btfss	3,2
 10431  0CB3  2CBA               	goto	i1l3614
 10432                           
 10433                           ;eusart.c: 201: {
 10434                           ;eusart.c: 203: flag_G=1;
 10435  0CB4  3001               	movlw	1
 10436  0CB5  0022               	movlb	2	; select bank2
 10437  0CB6  00DE               	movwf	_flag_G^(0+256)
 10438  0CB7  3000               	movlw	0
 10439  0CB8  00DF               	movwf	(_flag_G^(0+256)+1)
 10440  0CB9  2CD7               	goto	i1l3630
 10441  0CBA                     i1l3614:	
 10442                           ;eusart.c: 205: }
 10443                           
 10444                           ;eusart.c: 204: rcreg=0;
 10445                           
 10446                           
 10447                           ;eusart.c: 206: else if(rcreg=='Y')
 10448  0CBA  3059               	movlw	89
 10449  0CBB  067B               	xorwf	_rcreg,w	;volatile
 10450  0CBC  1D03               	btfss	3,2
 10451  0CBD  2CC4               	goto	i1l3620
 10452                           
 10453                           ;eusart.c: 207: {
 10454                           ;eusart.c: 208: flag_N=1;
 10455  0CBE  3001               	movlw	1
 10456  0CBF  0022               	movlb	2	; select bank2
 10457  0CC0  00E0               	movwf	_flag_N^(0+256)
 10458  0CC1  3000               	movlw	0
 10459  0CC2  00E1               	movwf	(_flag_N^(0+256)+1)
 10460  0CC3  2CD7               	goto	i1l3630
 10461  0CC4                     i1l3620:	
 10462                           ;eusart.c: 210: }
 10463                           
 10464                           ;eusart.c: 209: rcreg=0;
 10465                           
 10466                           
 10467                           ;eusart.c: 211: else if(rcreg=='A')
 10468  0CC4  3041               	movlw	65
 10469  0CC5  067B               	xorwf	_rcreg,w	;volatile
 10470  0CC6  1D03               	btfss	3,2
 10471  0CC7  2CCE               	goto	i1l3626
 10472                           
 10473                           ;eusart.c: 212: {
 10474                           ;eusart.c: 213: flag_A=1;
 10475  0CC8  3001               	movlw	1
 10476  0CC9  0022               	movlb	2	; select bank2
 10477  0CCA  00DC               	movwf	_flag_A^(0+256)
 10478  0CCB  3000               	movlw	0
 10479  0CCC  00DD               	movwf	(_flag_A^(0+256)+1)
 10480  0CCD  2CD7               	goto	i1l3630
 10481  0CCE                     i1l3626:	
 10482                           ;eusart.c: 215: }
 10483                           
 10484                           ;eusart.c: 214: rcreg=0;
 10485                           
 10486                           
 10487                           ;eusart.c: 216: else if(rcreg=='B')
 10488  0CCE  3042               	movlw	66
 10489  0CCF  067B               	xorwf	_rcreg,w	;volatile
 10490  0CD0  1D03               	btfss	3,2
 10491  0CD1  2CD8               	goto	i1l3632
 10492                           
 10493                           ;eusart.c: 217: {
 10494                           ;eusart.c: 218: flag_B=1;
 10495  0CD2  3001               	movlw	1
 10496  0CD3  0022               	movlb	2	; select bank2
 10497  0CD4  00DA               	movwf	_flag_B^(0+256)
 10498  0CD5  3000               	movlw	0
 10499  0CD6  00DB               	movwf	(_flag_B^(0+256)+1)
 10500  0CD7                     i1l3630:	
 10501                           
 10502                           ;eusart.c: 219: rcreg=0;
 10503  0CD7  01FB               	clrf	_rcreg	;volatile
 10504  0CD8                     i1l3632:	
 10505                           
 10506                           ;eusart.c: 220: }
 10507                           ;eusart.c: 226: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10508  0CD8  3008               	movlw	8
 10509  0CD9  0020               	movlb	0	; select bank0
 10510  0CDA  0265               	subwf	_eusartRxHead,w	;volatile
 10511  0CDB  1803               	btfsc	3,0
 10512                           
 10513                           ;eusart.c: 227: {
 10514                           ;eusart.c: 228: eusartRxHead = 0;
 10515  0CDC  01E5               	clrf	_eusartRxHead	;volatile
 10516                           
 10517                           ;eusart.c: 229: }
 10518                           ;eusart.c: 230: eusartRxCount++;
 10519  0CDD  3001               	movlw	1
 10520  0CDE  00F0               	movwf	??_EUSART_Receive_ISR
 10521  0CDF  0870               	movf	??_EUSART_Receive_ISR,w
 10522  0CE0  07E3               	addwf	_eusartRxCount,f	;volatile
 10523  0CE1  0008               	return
 10524  0CE2                     __end_of_EUSART_Receive_ISR:	
 10525                           
 10526                           	psect	text53
 10527  08E3                     __ptext53:	
 10528 ;; *************** function _ADC_ISR *****************
 10529 ;; Defined at:
 10530 ;;		line 136 in file "mcc_generated_files/adc.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;		None
 10533 ;; Auto vars:     Size  Location     Type
 10534 ;;		None
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      void 
 10537 ;; Registers used:
 10538 ;;		wreg, status,2, status,0, pclath, cstack
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10544 ;;      Params:         0       0       0       0       0       0       0       0
 10545 ;;      Locals:         0       0       0       0       0       0       0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0
 10547 ;;      Totals:         0       0       0       0       0       0       0       0
 10548 ;;Total ram usage:        0 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    1
 10551 ;; This function calls:
 10552 ;;		_ADC_GetConversionResult
 10553 ;; This function is called by:
 10554 ;;		_INTERRUPT_InterruptManager
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _ADC_ISR
 10560  08E3                     _ADC_ISR:	
 10561                           
 10562                           ;adc.c: 139: PIR1bits.ADIF = 0;
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
 10566  08E3  0020               	movlb	0	; select bank0
 10567  08E4  1311               	bcf	17,6	;volatile
 10568                           
 10569                           ;adc.c: 140: rez_conversie=ADC_GetConversionResult();
 10570  08E5  3189  2197         	fcall	_ADC_GetConversionResult
 10571  08E7  0871               	movf	?_ADC_GetConversionResult+1,w
 10572  08E8  0022               	movlb	2	; select bank2
 10573  08E9  00E7               	movwf	(_rez_conversie+1)^(0+256)
 10574  08EA  0870               	movf	?_ADC_GetConversionResult,w
 10575  08EB  00E6               	movwf	_rez_conversie^(0+256)
 10576  08EC  0008               	return
 10577  08ED                     __end_of_ADC_ISR:	
 10578                           
 10579                           	psect	text54
 10580  0997                     __ptext54:	
 10581 ;; *************** function _ADC_GetConversionResult *****************
 10582 ;; Defined at:
 10583 ;;		line 105 in file "mcc_generated_files/adc.c"
 10584 ;; Parameters:    Size  Location     Type
 10585 ;;		None
 10586 ;; Auto vars:     Size  Location     Type
 10587 ;;		None
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  2    0[COMMON] unsigned int 
 10590 ;; Registers used:
 10591 ;;		wreg, status,2, status,0
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10597 ;;      Params:         2       0       0       0       0       0       0       0
 10598 ;;      Locals:         0       0       0       0       0       0       0       0
 10599 ;;      Temps:          7       0       0       0       0       0       0       0
 10600 ;;      Totals:         9       0       0       0       0       0       0       0
 10601 ;;Total ram usage:        9 bytes
 10602 ;; Hardware stack levels used:    1
 10603 ;; This function calls:
 10604 ;;		Nothing
 10605 ;; This function is called by:
 10606 ;;		_ADC_ISR
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           
 10611                           ;psect for function _ADC_GetConversionResult
 10612  0997                     _ADC_GetConversionResult:	
 10613                           
 10614                           ;adc.c: 109: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
 10615                           
 10616                           ;incstack = 0
 10617                           ; Regs used in _ADC_GetConversionResult: [wreg+status,2+status,0]
 10618  0997  0021               	movlb	1	; select bank1
 10619  0998  081B               	movf	27,w	;volatile
 10620  0999  00F2               	movwf	??_ADC_GetConversionResult
 10621  099A  3006               	movlw	6
 10622  099B                     u278_25:	
 10623  099B  36F2               	lsrf	??_ADC_GetConversionResult,f
 10624  099C  0B89               	decfsz	9,f
 10625  099D  299B               	goto	u278_25
 10626  099E  0872               	movf	??_ADC_GetConversionResult,w
 10627  099F  00F3               	movwf	??_ADC_GetConversionResult+1
 10628  09A0  01F4               	clrf	??_ADC_GetConversionResult+2
 10629  09A1  081C               	movf	28,w	;volatile
 10630  09A2  00F5               	movwf	??_ADC_GetConversionResult+3
 10631  09A3  01F6               	clrf	??_ADC_GetConversionResult+4
 10632  09A4  35F5               	lslf	??_ADC_GetConversionResult+3,f
 10633  09A5  0DF6               	rlf	??_ADC_GetConversionResult+4,f
 10634  09A6  35F5               	lslf	??_ADC_GetConversionResult+3,f
 10635  09A7  0DF6               	rlf	??_ADC_GetConversionResult+4,f
 10636  09A8  0873               	movf	??_ADC_GetConversionResult+1,w
 10637  09A9  0775               	addwf	??_ADC_GetConversionResult+3,w
 10638  09AA  00F7               	movwf	??_ADC_GetConversionResult+5
 10639  09AB  0874               	movf	??_ADC_GetConversionResult+2,w
 10640  09AC  3D76               	addwfc	??_ADC_GetConversionResult+4,w
 10641  09AD  00F8               	movwf	??_ADC_GetConversionResult+6
 10642  09AE  0877               	movf	??_ADC_GetConversionResult+5,w
 10643  09AF  00F0               	movwf	?_ADC_GetConversionResult
 10644  09B0  0878               	movf	??_ADC_GetConversionResult+6,w
 10645  09B1  00F1               	movwf	?_ADC_GetConversionResult+1
 10646  09B2  0008               	return
 10647  09B3                     __end_of_ADC_GetConversionResult:	
 10648  007E                     btemp	set	126	;btemp
 10649  007E                     int$flags	set	126
 10650  007E                     wtemp0	set	126


Data Sizes:
    Strings     133
    Constant    10
    Data        44
    BSS         155
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     67      80
    BANK1            80     77      80
    BANK2            80     42      80
    BANK3            80      0      73
    BANK4            80      0      75
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_5(CODE[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 1
		 -> sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_11(CODE[14]), STR_10(CODE[18]), STR_9(CODE[10]), STR_8(CODE[15]), 
		 -> STR_7(CODE[3]), STR_4(CODE[21]), STR_3(CODE[14]), sms_text@umid(BANK0[1]), 
		 -> sms_text@smstext(BANK0[1]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(BANK0[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_11(CODE[14]), STR_10(CODE[18]), STR_9(CODE[10]), STR_8(CODE[15]), 
		 -> STR_7(CODE[3]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[21]), 
		 -> STR_3(CODE[14]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    S1072__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1072__prbuf$ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), sms_text@umid(BANK0[1]), sms_text@smstext(BANK0[1]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(BANK0[3]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[8]), STR_1(CODE[10]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_comparare
    _int_gsm->_printf
    _comparare->___ftadd
    _comparare->___ftdiv
    ___lwtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftge->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _command_turn->_turn_egs
    _check_status_incubator->_sms_text
    _sms_text->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _LCDWriteString->_LCDByte
    _LCDWriteInt->___awdiv
    _LCDInit->_LCDByte
    _DHT_result->_ReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_comparare

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   50233
                                             62 BANK0      5     5      0
                _ADC_StartConversion
                      _CheckResponse
                         _DHT_result
                            _LCDByte
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                  _SYSTEM_Initialize
                        _StartSignal
                       _TMR1_disable
                        _TMR1_enable
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
             _check_status_incubator
                       _command_turn
                          _comparare
                            _int_gsm
 ---------------------------------------------------------------------------------
 (1) _int_gsm                                              2     2      0    7165
                                             34 BANK0      2     2      0
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _comparare                                          135   133      2   15140
                                             46 BANK0     16    14      2
                                              0 BANK1     77    77      0
                                              0 BANK2     42    42      0
                           ___awtoft
                             ___bmul
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol (ARG)
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2323
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2691
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             14 BANK0      9     3      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3179
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2392
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _command_turn                                         0     0      0       0
                           _turn_egs
 ---------------------------------------------------------------------------------
 (2) _turn_egs                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_status_incubator                               0     0      0   13633
                           _sms_text
 ---------------------------------------------------------------------------------
 (2) _sms_text                                             4     4      0   13633
                                             37 BANK0      4     4      0
                             _printf
                              _putch
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             10     6      4    5798
                                             27 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                               7     5      2    6450
                                             27 BANK0      7     5      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             21    18      3    4628
                                             14 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     0      1     715
                                              2 BANK0      1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     316
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (1) _TMR1_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       4     2      2    1361
                                              7 BANK0      4     2      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    2528
                                              9 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     424
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0    1076
                                              7 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              7     6      1    1054
                                              0 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _DHT_result                                          16    16      0     115
                                              4 BANK0     16    16      0
                           _ReadData
 ---------------------------------------------------------------------------------
 (2) _ReadData                                             4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0       0
                                              9 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
            _ADC_GetConversionResult
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversionResult                              9     7      2       0
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _CheckResponse
   _DHT_result
     _ReadData
   _LCDByte
   _LCDInit
     _LCDByte
   _LCDWriteInt
     _LCDByte
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   _StartSignal
   _TMR1_disable
   _TMR1_enable
   ___ftdiv
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   ___lwtoft
     ___ftpack
   _check_status_incubator
     _sms_text
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART_Write
       _putch
         _EUSART_Write
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           _putch *
             _EUSART_Write
   _command_turn
     _turn_egs
   _comparare
     ___awtoft
       ___ftpack
     ___bmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
   _int_gsm
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
     _putch
       _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     192       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     43      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4D      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     2A      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      49      12       91.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4B      14       93.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     192      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Dec 02 15:51:54 2017

                           ?_command_turn 0070                            ___bmul@product 0022  
                             __CFG_CP$OFF 0000                                        _RH 0168  
                                      _Ch 016A                              ___awdiv@sign 0026  
                     ___wmul@multiplicand 0022                               ?_DHT_result 0070  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                             __CFG_LVP$ON 0000                              ___ftadd@sign 004B  
                                     l161 07E6                                       l510 04DC  
                                     l723 0B1C                                       l563 0BA0  
                                     l564 0BA1                                       l734 0E43  
                                     l902 09D8                                       l728 0B42  
                                     l755 057A                                       l766 05C0  
                           _strKey_Counts 007C                                       _RD0 0078  
                                     _RD1 0079                                       _RD3 007B  
                            __CFG_CPD$OFF 0000           __size_of_check_status_incubator 000C  
                                     _Sum 0068                           _timer1ReloadVal 006E  
                         __end_of_ADC_ISR 08ED                              ___awmod@sign 0026  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              __CFG_FOSC$HS 0000  
                 LCDWriteInt@field_length 002B                           __end_of_LCDByte 0BCB  
                         __end_of_LCDInit 0C52                             _count_1000_ms 014E  
                            ?_LCDWriteInt 0029                               LCDByte@temp 0026  
                            ___ftdiv@cntr 0048                              ___ftdiv@sign 004D  
                                    l1070 0DCE                                      l1071 0DD6  
                                    l1063 0DBB                                      l1154 0EC3  
                           _count_4000_ms 014C                                      l1094 03F9  
                                    l3112 0B4C                                      l3106 0B34  
                                    l3108 0B44                                      l3300 0D0C  
                                    l3204 059E                                      l3310 0D27  
                                    l3214 05AB                                      l3240 05D7  
                                    l3216 05AD                                      l3160 0567  
                                    l3136 054B                                      l3232 05C3  
                                    l3314 0D2F                                      l3306 0D1E  
                                    l3330 0C64                                      l3402 03C5  
                                    l3340 0C76                                      l3244 05DF  
                                    l3228 05BC                                      l3172 0576  
                                    l3148 0558                                      l3420 040B  
                                    l3404 03CF                                      l3326 0C5D  
                                    l3158 0565                                      l3262 091A  
                                    l3414 03EB                                      l3406 03D4  
                                    l3352 0C93                                      l3344 0C82  
                                    l2800 0ADC                                      l3192 0591  
                                    l3176 057D                                      l3424 041D  
                                    l3416 03F5                                      l3408 03D8  
                                    l3512 060E                                      l3248 09D2  
                                    l3282 0CED                                      l3338 0C6A  
                                    l3266 0920                                      l3434 0438  
                                    l3450 06C2                                      l3506 05F8  
                                    l3348 0C8B                                      l3364 0A50  
                                    l3444 06AC                                      l3540 066D  
                                    l3524 0649                                      l5140 0468  
                                    l2910 0D91                                      l3374 0382  
                                    l3710 0200                                      l3288 0CF8  
                                    l2752 07FC                                      l3384 0398  
                                    l3472 071C                                      l3464 0703  
                                    l3536 0665                                      l3528 0651  
                                    l3704 019C                                      l3712 0210  
                                    l5152 047D                                      l3802 097A  
                                    l3298 0D00                                      l2738 07DA  
                                    l2914 0D98                                      l3378 0389  
                                    l3714 0222                                      l5162 04DE  
                                    l2924 0DC0                                      l2916 0DA2  
                                    l3396 03B2                                      l3484 0B65  
                                    l2774 0B08                                      l2766 0AEA  
                                    l2790 0ABB                                      l2926 0DC8  
                                    l2918 0DA7                                      l3824 0BF4  
                                    l3832 0BCB                                      l3920 0EBA  
                                    l3912 0E9F                                      l2768 0AF6  
                                    l2792 0AC7                                      l3488 0B7B  
                                    l5176 0524                                      l3922 0EC6  
                                    l3914 0EAD                                      l2778 0B11  
                                    l3860 0F35                                      l3852 0F00  
                                    l3828 0BFB                                      l2796 0AD3  
                                    l3692 012B                                      l3862 0F3D  
                                    l3854 0F2D                                      l3926 0ED4  
                                    l3678 00BB                                      l3864 0F4D  
                                    l4912 026B                                      l4920 0295  
                                    l3858 0F31                                      l4906 0255  
                                    l3698 018E                                      l4940 02D1  
                                    l4908 0257                                      l3894 0E6F  
                                    l4950 02FB                                      l4934 02B2  
                                    l4918 027E                                      l4928 02AC  
                                    l4962 0300                                      l4946 02E9  
                                    l4964 022A                                      l4958 0344  
                                    l4966 0357                                      STR_1 107A  
                                    STR_2 1084                                      STR_3 1058  
                                    STR_4 1000                                      STR_5 1038  
                                    STR_6 1027                                      STR_7 108C  
                                    STR_8 1049                                      STR_9 1070  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _LATD 010F  
                                    _LATE 0110                                      u2405 0B01  
                                    u4005 0220                                      u2415 0B09  
                                    u3145 0D03                                      u3065 09D9  
                                    u4035 0E36                                      u3075 09DE  
                                    u3165 0D0D                                      u3245 0C6D  
                                    u4205 0E76                                      u2445 0ABE  
                                    u3405 03B3                                      u3175 0D17  
                                    u4135 0F5A                                      u2375 0AED  
                                    u4080 0EE8                                      u3185 0D1F  
                                    u3265 0C7C                                      u2465 0ACD  
                                    u3275 0C83                                      u4235 0EA0  
                                    u2395 0AF7                                      u2475 0AD4  
                                    u2715 0DDD                                      u2635 0D9D  
                                    u3435 03C6                                      u3605 071D  
                                    u6007 0972                                      u2655 0DB6  
                                    u6017 097B                                      u4265 0EBB  
                                    u3465 03D9                                      u3705 0652  
                                    u2675 0DC3                                      u3715 0658  
                                    u2844 0B2C                                      u3900 00A7  
                                    u2845 0B2B                                      u3565 06D4  
                                    u2854 0B3C                                      u2855 0B3B  
                                    u3495 03EC                                      u3575 06E4  
                                    u3585 0704                                      u3745 066E  
                                    u2795 0B8F                                      u3595 0713  
                                    u3755 0674                                      u3675 061A  
                                    u3915 00B9                                      u3685 062A  
                                    u3925 00CC                                      u3935 00E0  
                                    u3945 0129                                      u3890 0089  
                                    u5555 02C7                                      u3955 018C  
                                    u3965 019A                                      u5907 075F  
                                    u3995 020E                                      u5917 077B  
                                    u5845 04D7                                      u5927 07B9  
                                    u5937 0931                                      u5857 0F84  
                                    u5947 0938                                      u5867 0FA1  
                                    u5957 0C12                                      u5877 0FBE  
                                    u5967 0C35                                      u5887 0FDB  
                                    u5977 0BC6                                      u5897 0FF8  
                                    u5987 0B1F                                      u5997 096B  
                                    _WPUB 020D                                      _WPUE 0210  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _Temp 0169                                      _main 0450  
                            ___ftpack@arg 0020                              ___ftpack@exp 0023  
                                    _temp 0164                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                          _strKey_Pressed 007D                                      start 003C  
              ??_TMR1_SetInterruptHandler 0022                         ___bmul@multiplier 0023  
                           __CFG_MCLRE$ON 0000                              ___ftmul@cntr 003C  
                         turn_egs@step_nr 016E                              ___ftmul@sign 003D  
                          ??_command_turn 0021                              ___fttol@exp1 002D  
                            ___fttol@lval 0029                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 08B7  
                                   ?_main 0070                           __end_of___awdiv 0D34  
                         __end_of___ftadd 0450                                     STR_10 1015  
                                   STR_11 1058                             __CFG_WDTE$OFF 0000  
                         __end_of___awmod 0C98                           __end_of___ftdiv 073E  
                         _TMR1_StartTimer 08A5                              LCDInit@style 0028  
                         __end_of___ftneg 08E3                           __end_of___ftmul 0695  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0EDD                           __end_of___lwdiv 0B16  
                                   i1l241 0021                                     i1l243 002D  
                                   i1l173 0A42                                     i1l247 0037  
                                   i1l239 0015                           __end_of___lwmod 0AE1  
                         ___awdiv@counter 0025                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTB 000D  
                                   _PORTD 000F                           __end_of__doprnt 035A  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _TRISD 008F  
                                   _TRISE 0090                                     _TXREG 019A  
                                   _TXSTA 019E                                     _Check 006C  
                 comparare@resistor_value 004E          __size_of_ADC_GetConversionResult 001C  
                         _strKey_Released 00EF                          __end_of_TMR1_ISR 09CF  
                             DHT_result@x 0032                             ___awtoft@sign 002D  
                         __end_of_dpowers 1070                            _WDT_Initialize 08AE  
                                   _rcreg 007B                           __end_of_int_gsm 1000  
                           ___ftpack@sign 0024                                     _putch 08B7  
                                   main@x 005F                   __end_of_TMR1_Initialize 0997  
                          __CFG_BOREN$OFF 0000                                     pclath 000A  
                            comparare@dif 0052                              comparare@res 0120  
                                   status 0003                                     wtemp0 007E  
                         __end_of_sprintf 0A25                    _check_status_incubator 08ED  
                     __size_of_DHT_result 0069                           __initialization 003E  
                            __end_of_main 052B                          __end_of_ReadData 0B4E  
                          ??_EUSART_Write 0020                                 ??_ADC_ISR 0079  
             ?_INTERRUPT_InterruptManager 0070                                    ??_main 005E  
                           ___fttol@sign1 0028                             LCDByte@isdata 0020  
                               ??_LCDByte 0021                                 ??_LCDInit 0027  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 08B2  
                            sms_text@umid 0048                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                                  _APFCON 011D                          __end_of___awtoft 0A67  
                                  _ANSELA 018C                                    ?_putch 0022  
                                  _ANSELB 018D                                    _ANSELD 018F  
                                  _ANSELE 0190                          __end_of___ftpack 0DED  
                                  _T1GCON 0019                                    i1l5000 0D56  
                                  i1l5012 0D6E                                    i1l5006 0D63  
                                  i1l3602 0C9D                                    i1l5018 0D7D  
                                  i1l3620 0CC4                                    i1l3630 0CD7  
                                  i1l3614 0CBA                                    i1l3632 0CD8  
                                  i1l3626 0CCE                          __end_of___lwtoft 0952  
                                  u278_25 099B                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                            __CFG_PWRTE$OFF 0000  
                          _LCDWriteString 0BCB      __end_of_TMR1_DefaultInterruptHandler 0800  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 07FF  
                                  ___bmul 0917                                    ___ftge 0B4E  
                 __end_of_TMR1_StartTimer 08A8                                    ___wmul 09CF  
                               ??___awdiv 0024                                 ??___ftadd 0047  
                          __CFG_STVREN$ON 0000                                 ??___awmod 0024  
                               ??___ftdiv 0044                                 ??___ftneg 0041  
                               ??___ftmul 0034                                    _flag_A 015C  
                                  _flag_B 015A                                    _flag_G 015E  
                               ??___fttol 0024                                    _flag_N 0160  
                               ??___lwdiv 0024                                 ??___lwmod 002C  
                     _EUSART_Transmit_ISR 0A25                                 ??__doprnt 0031  
                        ___awdiv@quotient 0027                              ?_TMR1_enable 0070  
                         ___awmod@divisor 0020                              __doprnt@flag 0035  
                         ___awmod@counter 0025                                    _printf 0952  
                            __doprnt@prec 0036                     ___ftmul@f3_as_product 0039  
                  __size_of_CheckResponse 0017                                 ??_int_gsm 0042  
                            LCDWriteInt@i 0035                              LCDWriteInt@j 0033  
                         ?_WDT_Initialize 0070                          __end_of_sms_text 07D8  
                           comparare@step 0055  TMR1_SetInterruptHandler@InterruptHandler 0020  
                               ??_sprintf 003F                      __end_of_command_turn 0905  
                    ?_EUSART_Transmit_ISR 0070                     __end_of_TMR1_CallBack 0D88  
                        __end_of_turn_egs 05E1                          ?_TMR1_Initialize 0070  
                       _SYSTEM_Initialize 0905                      __size_of_LCDWriteInt 0091  
                 __end_of__initialization 007A                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                                ___ftge@ff1 002E  
                              ___ftge@ff2 0031                        ?_SYSTEM_Initialize 0070  
                  __end_of_LCDWriteString 0C0C                                ___ftdiv@f1 0041  
                              ___ftdiv@f2 003E                                ___ftdiv@f3 0049  
                               LCDByte@hn 0023                                 LCDByte@ln 0024  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 0020  
            __size_of_ADC_StartConversion 0003                            __pcstackCOMMON 0070  
                            __pidataBANK2 0002                              __pidataBANK3 0A8A  
                     ??_SYSTEM_Initialize 0022                             ??_StartSignal 0020  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                           __end_of_putch 08BC                              _flag_1000_ms 0154  
                            ??_DHT_result 0024                              _flag_4000_ms 01E1  
                              ___lwtoft@c 0028                   _ADC_GetConversionResult 0997  
                          _OPTION_REGbits 0095                                __doprnt@ap 0030  
                              __doprnt@pb 003A                        __size_of_comparare 01AA  
               __end_of_SYSTEM_Initialize 0917                     ??_EUSART_Transmit_ISR 0070  
                           sms_text@F3612 00EE                             sms_text@F3614 00ED  
                                 ??_putch 0023                                __pbssBANK0 0063  
                              __pbssBANK1 00ED                                __pbssBANK2 014A  
                              __pbssBANK3 01CA                                __pbssBANK4 0220  
                    __end_of_EUSART_Write 07FF                                 ?_ReadData 0070  
                         __CFG_VCAPEN$OFF 0000                             _CheckResponse 0968  
             __size_of_EUSART_Receive_ISR 004A                           ?_LCDWriteString 0027  
                      __end_of_DHT_result 0E56                                _flag_10_ms 0156  
                              __pmaintext 0450                                   ?___bmul 0020  
                                 ?___ftge 002E                           sms_text@smstext 0047  
                                 ?___wmul 0020                          ?_TMR1_StartTimer 0070  
                              ??_TMR1_ISR 0070                                __pintentry 0004  
                       sms_text@sms_index 01DF                                   _ADC_ISR 08E3  
                                 _BAUDCON 019F                                 ?___awtoft 0028  
                               ?___ftpack 0020                                   ?_printf 003B  
                 __size_of_ADC_Initialize 0009                                 ?___lwtoft 0028  
                           _eusartRxCount 0063                                   _LCDByte 0B8A  
                                 _LCDInit 0C0C                       __end_of_StartSignal 093D  
                                 _OSCTUNE 0098                   ?_check_status_incubator 0070  
                              ??_ReadData 0020                            ?_CheckResponse 0070  
                                 _T_byte1 006B                                   _T_byte2 006A  
                         __size_of___bmul 0012                           __size_of___ftge 003C  
                                 ___awdiv 0CE2                                   ___ftadd 035A  
                       __end_of_comparare 0228                                   ___awmod 0C52  
                                 ___ftdiv 0695                                   ___ftneg 08DA  
                         __size_of___wmul 001C                                   ___ftmul 05E1  
                                 ___fttol 0E56                                 ?_sms_text 0070  
                                 ___lwdiv 0AE1                                   ___lwmod 0AB4  
                                 __doprnt 0228                 ??_ADC_GetConversionResult 0072  
                              ??___awtoft 002B                                ??___ftpack 0025  
                                 __ptext1 0F6E                                   __ptext2 007E  
                                 __ptext3 09CF                                   __ptext4 093D  
                                 __ptext5 08DA                                   __ptext6 05E1  
                                 __ptext7 0B4E                                   __ptext8 0695  
                                 __ptext9 035A                                 ?_turn_egs 0070  
                         __size_of_printf 0016                                ??___lwtoft 002B  
          ??_TMR1_DefaultInterruptHandler 0070                                 _T1CONbits 0018  
                    __size_of_TMR1_enable 0003                                   _dpowers 1066  
                   _OSCILLATOR_Initialize 08B2                     __size_of_command_turn 000C  
                                 _int_gsm 0F6E                          ___awmod@dividend 0022  
       __size_of_TMR1_SetInterruptHandler 0009                  ??_PIN_MANAGER_Initialize 0020  
               ?_TMR1_SetInterruptHandler 0020                             ?_TMR1_disable 0070  
          __end_of_check_status_incubator 08F9                __size_of_SYSTEM_Initialize 0012  
                                 _sprintf 0A08                                   clrloop0 08BD  
                    end_of_initialization 007A                            comparare@F3754 0220  
                          comparare@F3749 01A0                                   init_ram 08C2  
                                 initloop 08C3                         _EUSART_Initialize 09EB  
                          comparare@j_805 005C                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                                   printf@f 003B  
                          comparare@table 00A0                                ??_sms_text 0045  
                             _StartSignal 0929                              _command_turn 08F9  
                     ??_EUSART_Initialize 0020                          ??_WDT_Initialize 0020  
                               _PORTDbits 000F                                ??_turn_egs 0020  
                       LCDWriteString@msg 0027                            ??_TMR1_disable 0020  
                               _TRISCbits 008E                                 _TRISDbits 008F  
                   __size_of_EUSART_Write 0027                       _ADC_StartConversion 08A2  
                         ??_CheckResponse 0020                 __end_of_EUSART_Initialize 0A08  
                             ___ftdiv@exp 004C                                 ReadData@i 0022  
                               ReadData@j 0023                              _count_100_ms 0152  
                            _count_500_ms 0150                                comparare@i 00EB  
                              comparare@j 005A                               ___ftmul@exp 0038  
                    ?_ADC_StartConversion 0070                        turn_egs@step_index 007A  
                          __end_of___bmul 0929                            __end_of___ftge 0B8A  
                          __end_of___wmul 09EB                              _EUSART_Write 07D8  
                       __size_of_TMR1_ISR 001C                            _ADC_Initialize 08C8  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_printf 0968  
                     start_initialization 003E           __size_of_PIN_MANAGER_Initialize 0023  
                           ??_LCDWriteInt 002C                               putch@txData 0022  
                        ??_LCDWriteString 0029                         __size_of_ReadData 0038  
                   ??_ADC_StartConversion 0020                  __size_of_TMR1_Initialize 0018  
                                ??___bmul 0021                                  ??___ftge 0034  
                                ??___wmul 0024                    __end_of_ADC_Initialize 08D1  
                             __doprnt@val 0037                               __pdataBANK2 016E  
                             __pdataBANK3 01A0                                  ?_ADC_ISR 0070  
                  __size_of_TMR1_CallBack 0054                                  ??_printf 003D  
                                ?_LCDByte 0020                         __size_of___awtoft 0022  
                                ?_LCDInit 0070                         __size_of___ftpack 0065  
             __end_of_EUSART_Transmit_ISR 0A45                     TMR1_ISR@CountCallBack 014A  
                             __pbssCOMMON 007A                                  LCDByte@c 0025  
                               ___latbits 0002                         __size_of___lwtoft 0015  
                           __pcstackBANK0 0020                             __pcstackBANK1 00A0  
                           __pcstackBANK2 0120                               _flag_100_ms 01E5  
                             _flag_500_ms 01E3                __end_of_EUSART_Receive_ISR 0CE2  
              __size_of_EUSART_Initialize 001D                          LCDWriteInt@F3767 01DA  
                               __doprnt@c 0039                                 __doprnt@f 002E  
                     __end_of_LCDWriteInt 0F6E                                 __pnvBANK0 006E  
                               __pnvBANK2 016B                                 __pnvBANK3 01E7  
                        ___lwdiv@dividend 0022                    _PIN_MANAGER_Initialize 0A67  
                    __end_of_TMR1_disable 08AB                                 _flag_1_ms 0158  
        __end_of_TMR1_SetInterruptHandler 08DA                                  ?___awdiv 0020  
                                ?___ftadd 0041                                  ?___awmod 0020  
                                ?___ftdiv 003E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 0020  
                                ?___lwdiv 0020                                  ?___lwmod 0028  
                         ?_ADC_Initialize 0070                              _eusartRxHead 0065  
                            _eusartTxHead 0067                              _eusartRxTail 0064  
                                ?__doprnt 002E                              _eusartTxTail 0066  
            ??_INTERRUPT_InterruptManager 0079                         __size_of_sms_text 009A  
                               _comparare 007E                   _eusartTxBufferRemaining 016D  
                __size_of_TMR1_StartTimer 0003                                  ?_int_gsm 0070  
                       __size_of_turn_egs 00B6                          ___lwdiv@quotient 0025  
                                ?_sprintf 003B                            __size_of_putch 0005  
                          _eusartRxBuffer 01CA                             _TMR1_CallBack 0D34  
                          _eusartTxBuffer 01D2                            ___wmul@product 0024  
                                _LATCbits 010E                                 clear_ram0 08BC  
                                _PIE1bits 0091       __size_of_INTERRUPT_InterruptManager 0038  
                                _PIR1bits 0011                                  _TMR1_ISR 09B3  
                            ?_StartSignal 0070                          LCDWriteString@cc 002A  
                           ??_TMR1_enable 0020                                 _umiditate 0162  
                       ??_TMR1_Initialize 0022                          __size_of_ADC_ISR 000A  
                              _ADCON0bits 009D                                ?_comparare 004E  
                       ___wmul@multiplier 0020                                  _RH_byte1 006D  
                                _RH_byte2 0069                             _rez_conversie 0166  
                        __size_of_LCDByte 0041                          __size_of_LCDInit 0046  
                             _LCDWriteInt 0EDD                            ?_TMR1_CallBack 0070  
                           _flag_directie 016B                                  _ReadData 0B16  
                ?_ADC_GetConversionResult 0070                   ??_OSCILLATOR_Initialize 0020  
                        __size_of___awdiv 0052                          __size_of___ftadd 00F6  
                        __size_of___awmod 0046                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0035  
                        __size_of___lwmod 002D                                  ___awtoft 0A45  
                                ___ftpack 0D88                          __size_of__doprnt 0132  
                _TMR1_SetInterruptHandler 08D1                                  ___lwtoft 093D  
                   _TMR1_InterruptHandler 01E7                       __end_of_TMR1_enable 08AE  
                        __size_of_int_gsm 0092                           ___lwdiv@divisor 0020  
                         ___lwdiv@counter 0027                                  __ptext10 0917  
                                __ptext11 0A45                                  __ptext20 08B7  
                                __ptext12 0D88                                  __ptext21 07D8  
                                __ptext13 08F9                                _T1GCONbits 0019  
                                __ptext30 097F                                  __ptext22 0AB4  
                                __ptext14 052B                                  __ptext31 08A5  
                                __ptext23 0AE1                                  __ptext15 08ED  
                                __ptext40 0CE2                                  __ptext32 08D1  
                                __ptext24 0E56                                  __ptext16 073E  
                                __ptext41 0C0C                                  __ptext33 0A67  
                                __ptext25 08AB                                  __ptext17 0A08  
                                __ptext50 07FF                                  __ptext42 0B8A  
                                __ptext34 08B2                                  __ptext26 08A8  
                                __ptext18 0952                                  __ptext51 0A25  
                                __ptext43 0DED                                  __ptext35 09EB  
                                __ptext27 0929                                  __ptext19 0228  
                                __ptext52 0C98                                  __ptext44 0B16  
                                __ptext36 08C8                                  __ptext28 0905  
                                __ptext53 08E3                                  __ptext45 0968  
                                __ptext37 0BCB                                  __ptext29 08AE  
                                __ptext54 0997                                  __ptext46 08A2  
                                __ptext38 0EDD                                  __ptext39 0C52  
                                __ptext48 09B3                                  __ptext49 0D34  
                       ??_TMR1_StartTimer 0020                          __size_of_sprintf 001D  
                   __size_of_TMR1_disable 0003                     __end_of_CheckResponse 097F  
                           __size_of_main 00DB                                  int$flags 007E  
                                _sms_text 073E        __end_of_INTERRUPT_InterruptManager 003C  
              _INTERRUPT_InterruptManager 0004                                  main@volt 0060  
                              _DHT_result 0DED                               ??_comparare 0050  
                                _turn_egs 052B                  ??_check_status_incubator 0049  
                              _INTCONbits 000B                              _TMR1_disable 08A8  
                          __pstringtext10 1084                            __pstringtext11 108C  
                          __pstringtext12 0000                           ??_TMR1_CallBack 0070  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                               sprintf@ap 0041                                 sprintf@pb 0042  
                               sprintf@wh 0040               __end_of_ADC_StartConversion 08A5  
                        ___lwmod@dividend 002A                            LCDWriteInt@val 0029  
                          LCDWriteInt@str 002E                   ?_PIN_MANAGER_Initialize 0070  
         __end_of_ADC_GetConversionResult 09B3                         __CFG_CLKOUTEN$OFF 0000  
                        ??_ADC_Initialize 0020                                  printf@ap 003E  
                                printf@pb 003F                        _EUSART_Receive_ISR 0C98  
                             _TMR1_enable 08AB                           comparare@result 0058  
                           __pstringtext1 1066                             __pstringtext2 1000  
                           __pstringtext3 1015                             __pstringtext4 1027  
                           __pstringtext5 1038                             __pstringtext6 1049  
                           __pstringtext7 1058                             __pstringtext8 1070  
                           __pstringtext9 107A                      __size_of_StartSignal 0014  
                                sprintf@f 003B                       ?_EUSART_Receive_ISR 0070  
                         ___lwmod@divisor 0028                           ___lwmod@counter 002D  
                      EUSART_Write@txData 0021              __size_of_EUSART_Transmit_ISR 0020  
          __end_of_PIN_MANAGER_Initialize 0A8A                      ??_EUSART_Receive_ISR 0070  
                         _TMR1_Initialize 097F                   __size_of_LCDWriteString 0041  
