

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Oct 31 20:51:37 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1937
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	intentry,global,class=CODE,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     
    66                           ; Version 1.42
    67                           ; Generated 13/04/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC16F1937 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  001E                     	;# 
   130  001F                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  008F                     	;# 
   135  0090                     	;# 
   136  0091                     	;# 
   137  0092                     	;# 
   138  0093                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  0110                     	;# 
   155  0111                     	;# 
   156  0112                     	;# 
   157  0113                     	;# 
   158  0114                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  011A                     	;# 
   165  011B                     	;# 
   166  011D                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  018F                     	;# 
   170  0190                     	;# 
   171  0191                     	;# 
   172  0191                     	;# 
   173  0192                     	;# 
   174  0193                     	;# 
   175  0193                     	;# 
   176  0193                     	;# 
   177  0194                     	;# 
   178  0195                     	;# 
   179  0196                     	;# 
   180  0199                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  020D                     	;# 
   192  0210                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0214                     	;# 
   197  0215                     	;# 
   198  0215                     	;# 
   199  0216                     	;# 
   200  0217                     	;# 
   201  0291                     	;# 
   202  0291                     	;# 
   203  0292                     	;# 
   204  0293                     	;# 
   205  0294                     	;# 
   206  0295                     	;# 
   207  0295                     	;# 
   208  0296                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029F                     	;# 
   219  0311                     	;# 
   220  0311                     	;# 
   221  0312                     	;# 
   222  0313                     	;# 
   223  0314                     	;# 
   224  0315                     	;# 
   225  0315                     	;# 
   226  0316                     	;# 
   227  0318                     	;# 
   228  0318                     	;# 
   229  0319                     	;# 
   230  031A                     	;# 
   231  031C                     	;# 
   232  031C                     	;# 
   233  031D                     	;# 
   234  031E                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0415                     	;# 
   239  0416                     	;# 
   240  0417                     	;# 
   241  041C                     	;# 
   242  041D                     	;# 
   243  041E                     	;# 
   244  0791                     	;# 
   245  0792                     	;# 
   246  0793                     	;# 
   247  0794                     	;# 
   248  0795                     	;# 
   249  0798                     	;# 
   250  0799                     	;# 
   251  079A                     	;# 
   252  07A0                     	;# 
   253  07A1                     	;# 
   254  07A2                     	;# 
   255  07A3                     	;# 
   256  07A4                     	;# 
   257  07A5                     	;# 
   258  07A6                     	;# 
   259  07A7                     	;# 
   260  07A8                     	;# 
   261  07A9                     	;# 
   262  07AA                     	;# 
   263  07AB                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  000F                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0013                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  001E                     	;# 
   305  001F                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  008F                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  010F                     	;# 
   329  0110                     	;# 
   330  0111                     	;# 
   331  0112                     	;# 
   332  0113                     	;# 
   333  0114                     	;# 
   334  0115                     	;# 
   335  0116                     	;# 
   336  0117                     	;# 
   337  0118                     	;# 
   338  0119                     	;# 
   339  011A                     	;# 
   340  011B                     	;# 
   341  011D                     	;# 
   342  018C                     	;# 
   343  018D                     	;# 
   344  018F                     	;# 
   345  0190                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0193                     	;# 
   352  0194                     	;# 
   353  0195                     	;# 
   354  0196                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019E                     	;# 
   365  019F                     	;# 
   366  020D                     	;# 
   367  0210                     	;# 
   368  0211                     	;# 
   369  0212                     	;# 
   370  0213                     	;# 
   371  0214                     	;# 
   372  0215                     	;# 
   373  0215                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0294                     	;# 
   381  0295                     	;# 
   382  0295                     	;# 
   383  0296                     	;# 
   384  0298                     	;# 
   385  0298                     	;# 
   386  0299                     	;# 
   387  029A                     	;# 
   388  029B                     	;# 
   389  029C                     	;# 
   390  029C                     	;# 
   391  029D                     	;# 
   392  029E                     	;# 
   393  029F                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0314                     	;# 
   399  0315                     	;# 
   400  0315                     	;# 
   401  0316                     	;# 
   402  0318                     	;# 
   403  0318                     	;# 
   404  0319                     	;# 
   405  031A                     	;# 
   406  031C                     	;# 
   407  031C                     	;# 
   408  031D                     	;# 
   409  031E                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0415                     	;# 
   414  0416                     	;# 
   415  0417                     	;# 
   416  041C                     	;# 
   417  041D                     	;# 
   418  041E                     	;# 
   419  0791                     	;# 
   420  0792                     	;# 
   421  0793                     	;# 
   422  0794                     	;# 
   423  0795                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  079A                     	;# 
   427  07A0                     	;# 
   428  07A1                     	;# 
   429  07A2                     	;# 
   430  07A3                     	;# 
   431  07A4                     	;# 
   432  07A5                     	;# 
   433  07A6                     	;# 
   434  07A7                     	;# 
   435  07A8                     	;# 
   436  07A9                     	;# 
   437  07AA                     	;# 
   438  07AB                     	;# 
   439  0FE4                     	;# 
   440  0FE5                     	;# 
   441  0FE6                     	;# 
   442  0FE7                     	;# 
   443  0FE8                     	;# 
   444  0FE9                     	;# 
   445  0FEA                     	;# 
   446  0FEB                     	;# 
   447  0FED                     	;# 
   448  0FEE                     	;# 
   449  0FEF                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000F                     	;# 
   466  0010                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008D                     	;# 
   483  008E                     	;# 
   484  008F                     	;# 
   485  0090                     	;# 
   486  0091                     	;# 
   487  0092                     	;# 
   488  0093                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  010C                     	;# 
   501  010D                     	;# 
   502  010E                     	;# 
   503  010F                     	;# 
   504  0110                     	;# 
   505  0111                     	;# 
   506  0112                     	;# 
   507  0113                     	;# 
   508  0114                     	;# 
   509  0115                     	;# 
   510  0116                     	;# 
   511  0117                     	;# 
   512  0118                     	;# 
   513  0119                     	;# 
   514  011A                     	;# 
   515  011B                     	;# 
   516  011D                     	;# 
   517  018C                     	;# 
   518  018D                     	;# 
   519  018F                     	;# 
   520  0190                     	;# 
   521  0191                     	;# 
   522  0191                     	;# 
   523  0192                     	;# 
   524  0193                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0194                     	;# 
   528  0195                     	;# 
   529  0196                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019C                     	;# 
   537  019C                     	;# 
   538  019D                     	;# 
   539  019E                     	;# 
   540  019F                     	;# 
   541  020D                     	;# 
   542  0210                     	;# 
   543  0211                     	;# 
   544  0212                     	;# 
   545  0213                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0291                     	;# 
   552  0291                     	;# 
   553  0292                     	;# 
   554  0293                     	;# 
   555  0294                     	;# 
   556  0295                     	;# 
   557  0295                     	;# 
   558  0296                     	;# 
   559  0298                     	;# 
   560  0298                     	;# 
   561  0299                     	;# 
   562  029A                     	;# 
   563  029B                     	;# 
   564  029C                     	;# 
   565  029C                     	;# 
   566  029D                     	;# 
   567  029E                     	;# 
   568  029F                     	;# 
   569  0311                     	;# 
   570  0311                     	;# 
   571  0312                     	;# 
   572  0313                     	;# 
   573  0314                     	;# 
   574  0315                     	;# 
   575  0315                     	;# 
   576  0316                     	;# 
   577  0318                     	;# 
   578  0318                     	;# 
   579  0319                     	;# 
   580  031A                     	;# 
   581  031C                     	;# 
   582  031C                     	;# 
   583  031D                     	;# 
   584  031E                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0415                     	;# 
   589  0416                     	;# 
   590  0417                     	;# 
   591  041C                     	;# 
   592  041D                     	;# 
   593  041E                     	;# 
   594  0791                     	;# 
   595  0792                     	;# 
   596  0793                     	;# 
   597  0794                     	;# 
   598  0795                     	;# 
   599  0798                     	;# 
   600  0799                     	;# 
   601  079A                     	;# 
   602  07A0                     	;# 
   603  07A1                     	;# 
   604  07A2                     	;# 
   605  07A3                     	;# 
   606  07A4                     	;# 
   607  07A5                     	;# 
   608  07A6                     	;# 
   609  07A7                     	;# 
   610  07A8                     	;# 
   611  07A9                     	;# 
   612  07AA                     	;# 
   613  07AB                     	;# 
   614  0FE4                     	;# 
   615  0FE5                     	;# 
   616  0FE6                     	;# 
   617  0FE7                     	;# 
   618  0FE8                     	;# 
   619  0FE9                     	;# 
   620  0FEA                     	;# 
   621  0FEB                     	;# 
   622  0FED                     	;# 
   623  0FEE                     	;# 
   624  0FEF                     	;# 
   625  0000                     	;# 
   626  0001                     	;# 
   627  0002                     	;# 
   628  0003                     	;# 
   629  0004                     	;# 
   630  0005                     	;# 
   631  0006                     	;# 
   632  0007                     	;# 
   633  0008                     	;# 
   634  0009                     	;# 
   635  000A                     	;# 
   636  000B                     	;# 
   637  000C                     	;# 
   638  000D                     	;# 
   639  000E                     	;# 
   640  000F                     	;# 
   641  0010                     	;# 
   642  0011                     	;# 
   643  0012                     	;# 
   644  0013                     	;# 
   645  0015                     	;# 
   646  0016                     	;# 
   647  0016                     	;# 
   648  0017                     	;# 
   649  0018                     	;# 
   650  0019                     	;# 
   651  001A                     	;# 
   652  001B                     	;# 
   653  001C                     	;# 
   654  001E                     	;# 
   655  001F                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  008F                     	;# 
   660  0090                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0093                     	;# 
   664  0095                     	;# 
   665  0096                     	;# 
   666  0097                     	;# 
   667  0098                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  010F                     	;# 
   679  0110                     	;# 
   680  0111                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0115                     	;# 
   685  0116                     	;# 
   686  0117                     	;# 
   687  0118                     	;# 
   688  0119                     	;# 
   689  011A                     	;# 
   690  011B                     	;# 
   691  011D                     	;# 
   692  018C                     	;# 
   693  018D                     	;# 
   694  018F                     	;# 
   695  0190                     	;# 
   696  0191                     	;# 
   697  0191                     	;# 
   698  0192                     	;# 
   699  0193                     	;# 
   700  0193                     	;# 
   701  0193                     	;# 
   702  0194                     	;# 
   703  0195                     	;# 
   704  0196                     	;# 
   705  0199                     	;# 
   706  019A                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019B                     	;# 
   710  019B                     	;# 
   711  019C                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019E                     	;# 
   715  019F                     	;# 
   716  020D                     	;# 
   717  0210                     	;# 
   718  0211                     	;# 
   719  0212                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0215                     	;# 
   723  0215                     	;# 
   724  0216                     	;# 
   725  0217                     	;# 
   726  0291                     	;# 
   727  0291                     	;# 
   728  0292                     	;# 
   729  0293                     	;# 
   730  0294                     	;# 
   731  0295                     	;# 
   732  0295                     	;# 
   733  0296                     	;# 
   734  0298                     	;# 
   735  0298                     	;# 
   736  0299                     	;# 
   737  029A                     	;# 
   738  029B                     	;# 
   739  029C                     	;# 
   740  029C                     	;# 
   741  029D                     	;# 
   742  029E                     	;# 
   743  029F                     	;# 
   744  0311                     	;# 
   745  0311                     	;# 
   746  0312                     	;# 
   747  0313                     	;# 
   748  0314                     	;# 
   749  0315                     	;# 
   750  0315                     	;# 
   751  0316                     	;# 
   752  0318                     	;# 
   753  0318                     	;# 
   754  0319                     	;# 
   755  031A                     	;# 
   756  031C                     	;# 
   757  031C                     	;# 
   758  031D                     	;# 
   759  031E                     	;# 
   760  0394                     	;# 
   761  0395                     	;# 
   762  0396                     	;# 
   763  0415                     	;# 
   764  0416                     	;# 
   765  0417                     	;# 
   766  041C                     	;# 
   767  041D                     	;# 
   768  041E                     	;# 
   769  0791                     	;# 
   770  0792                     	;# 
   771  0793                     	;# 
   772  0794                     	;# 
   773  0795                     	;# 
   774  0798                     	;# 
   775  0799                     	;# 
   776  079A                     	;# 
   777  07A0                     	;# 
   778  07A1                     	;# 
   779  07A2                     	;# 
   780  07A3                     	;# 
   781  07A4                     	;# 
   782  07A5                     	;# 
   783  07A6                     	;# 
   784  07A7                     	;# 
   785  07A8                     	;# 
   786  07A9                     	;# 
   787  07AA                     	;# 
   788  07AB                     	;# 
   789  0FE4                     	;# 
   790  0FE5                     	;# 
   791  0FE6                     	;# 
   792  0FE7                     	;# 
   793  0FE8                     	;# 
   794  0FE9                     	;# 
   795  0FEA                     	;# 
   796  0FEB                     	;# 
   797  0FED                     	;# 
   798  0FEE                     	;# 
   799  0FEF                     	;# 
   800  0000                     	;# 
   801  0001                     	;# 
   802  0002                     	;# 
   803  0003                     	;# 
   804  0004                     	;# 
   805  0005                     	;# 
   806  0006                     	;# 
   807  0007                     	;# 
   808  0008                     	;# 
   809  0009                     	;# 
   810  000A                     	;# 
   811  000B                     	;# 
   812  000C                     	;# 
   813  000D                     	;# 
   814  000E                     	;# 
   815  000F                     	;# 
   816  0010                     	;# 
   817  0011                     	;# 
   818  0012                     	;# 
   819  0013                     	;# 
   820  0015                     	;# 
   821  0016                     	;# 
   822  0016                     	;# 
   823  0017                     	;# 
   824  0018                     	;# 
   825  0019                     	;# 
   826  001A                     	;# 
   827  001B                     	;# 
   828  001C                     	;# 
   829  001E                     	;# 
   830  001F                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  008F                     	;# 
   835  0090                     	;# 
   836  0091                     	;# 
   837  0092                     	;# 
   838  0093                     	;# 
   839  0095                     	;# 
   840  0096                     	;# 
   841  0097                     	;# 
   842  0098                     	;# 
   843  0099                     	;# 
   844  009A                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  010C                     	;# 
   851  010D                     	;# 
   852  010E                     	;# 
   853  010F                     	;# 
   854  0110                     	;# 
   855  0111                     	;# 
   856  0112                     	;# 
   857  0113                     	;# 
   858  0114                     	;# 
   859  0115                     	;# 
   860  0116                     	;# 
   861  0117                     	;# 
   862  0118                     	;# 
   863  0119                     	;# 
   864  011A                     	;# 
   865  011B                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018F                     	;# 
   870  0190                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0214                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0216                     	;# 
   900  0217                     	;# 
   901  0291                     	;# 
   902  0291                     	;# 
   903  0292                     	;# 
   904  0293                     	;# 
   905  0294                     	;# 
   906  0295                     	;# 
   907  0295                     	;# 
   908  0296                     	;# 
   909  0298                     	;# 
   910  0298                     	;# 
   911  0299                     	;# 
   912  029A                     	;# 
   913  029B                     	;# 
   914  029C                     	;# 
   915  029C                     	;# 
   916  029D                     	;# 
   917  029E                     	;# 
   918  029F                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0314                     	;# 
   924  0315                     	;# 
   925  0315                     	;# 
   926  0316                     	;# 
   927  0318                     	;# 
   928  0318                     	;# 
   929  0319                     	;# 
   930  031A                     	;# 
   931  031C                     	;# 
   932  031C                     	;# 
   933  031D                     	;# 
   934  031E                     	;# 
   935  0394                     	;# 
   936  0395                     	;# 
   937  0396                     	;# 
   938  0415                     	;# 
   939  0416                     	;# 
   940  0417                     	;# 
   941  041C                     	;# 
   942  041D                     	;# 
   943  041E                     	;# 
   944  0791                     	;# 
   945  0792                     	;# 
   946  0793                     	;# 
   947  0794                     	;# 
   948  0795                     	;# 
   949  0798                     	;# 
   950  0799                     	;# 
   951  079A                     	;# 
   952  07A0                     	;# 
   953  07A1                     	;# 
   954  07A2                     	;# 
   955  07A3                     	;# 
   956  07A4                     	;# 
   957  07A5                     	;# 
   958  07A6                     	;# 
   959  07A7                     	;# 
   960  07A8                     	;# 
   961  07A9                     	;# 
   962  07AA                     	;# 
   963  07AB                     	;# 
   964  0FE4                     	;# 
   965  0FE5                     	;# 
   966  0FE6                     	;# 
   967  0FE7                     	;# 
   968  0FE8                     	;# 
   969  0FE9                     	;# 
   970  0FEA                     	;# 
   971  0FEB                     	;# 
   972  0FED                     	;# 
   973  0FEE                     	;# 
   974  0FEF                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0008                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  000F                     	;# 
   991  0010                     	;# 
   992  0011                     	;# 
   993  0012                     	;# 
   994  0013                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0016                     	;# 
   998  0017                     	;# 
   999  0018                     	;# 
  1000  0019                     	;# 
  1001  001A                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001E                     	;# 
  1005  001F                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  008F                     	;# 
  1010  0090                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0093                     	;# 
  1014  0095                     	;# 
  1015  0096                     	;# 
  1016  0097                     	;# 
  1017  0098                     	;# 
  1018  0099                     	;# 
  1019  009A                     	;# 
  1020  009B                     	;# 
  1021  009B                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009E                     	;# 
  1025  010C                     	;# 
  1026  010D                     	;# 
  1027  010E                     	;# 
  1028  010F                     	;# 
  1029  0110                     	;# 
  1030  0111                     	;# 
  1031  0112                     	;# 
  1032  0113                     	;# 
  1033  0114                     	;# 
  1034  0115                     	;# 
  1035  0116                     	;# 
  1036  0117                     	;# 
  1037  0118                     	;# 
  1038  0119                     	;# 
  1039  011A                     	;# 
  1040  011B                     	;# 
  1041  011D                     	;# 
  1042  018C                     	;# 
  1043  018D                     	;# 
  1044  018F                     	;# 
  1045  0190                     	;# 
  1046  0191                     	;# 
  1047  0191                     	;# 
  1048  0192                     	;# 
  1049  0193                     	;# 
  1050  0193                     	;# 
  1051  0193                     	;# 
  1052  0194                     	;# 
  1053  0195                     	;# 
  1054  0196                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019D                     	;# 
  1064  019E                     	;# 
  1065  019F                     	;# 
  1066  020D                     	;# 
  1067  0210                     	;# 
  1068  0211                     	;# 
  1069  0212                     	;# 
  1070  0213                     	;# 
  1071  0214                     	;# 
  1072  0215                     	;# 
  1073  0215                     	;# 
  1074  0216                     	;# 
  1075  0217                     	;# 
  1076  0291                     	;# 
  1077  0291                     	;# 
  1078  0292                     	;# 
  1079  0293                     	;# 
  1080  0294                     	;# 
  1081  0295                     	;# 
  1082  0295                     	;# 
  1083  0296                     	;# 
  1084  0298                     	;# 
  1085  0298                     	;# 
  1086  0299                     	;# 
  1087  029A                     	;# 
  1088  029B                     	;# 
  1089  029C                     	;# 
  1090  029C                     	;# 
  1091  029D                     	;# 
  1092  029E                     	;# 
  1093  029F                     	;# 
  1094  0311                     	;# 
  1095  0311                     	;# 
  1096  0312                     	;# 
  1097  0313                     	;# 
  1098  0314                     	;# 
  1099  0315                     	;# 
  1100  0315                     	;# 
  1101  0316                     	;# 
  1102  0318                     	;# 
  1103  0318                     	;# 
  1104  0319                     	;# 
  1105  031A                     	;# 
  1106  031C                     	;# 
  1107  031C                     	;# 
  1108  031D                     	;# 
  1109  031E                     	;# 
  1110  0394                     	;# 
  1111  0395                     	;# 
  1112  0396                     	;# 
  1113  0415                     	;# 
  1114  0416                     	;# 
  1115  0417                     	;# 
  1116  041C                     	;# 
  1117  041D                     	;# 
  1118  041E                     	;# 
  1119  0791                     	;# 
  1120  0792                     	;# 
  1121  0793                     	;# 
  1122  0794                     	;# 
  1123  0795                     	;# 
  1124  0798                     	;# 
  1125  0799                     	;# 
  1126  079A                     	;# 
  1127  07A0                     	;# 
  1128  07A1                     	;# 
  1129  07A2                     	;# 
  1130  07A3                     	;# 
  1131  07A4                     	;# 
  1132  07A5                     	;# 
  1133  07A6                     	;# 
  1134  07A7                     	;# 
  1135  07A8                     	;# 
  1136  07A9                     	;# 
  1137  07AA                     	;# 
  1138  07AB                     	;# 
  1139  0FE4                     	;# 
  1140  0FE5                     	;# 
  1141  0FE6                     	;# 
  1142  0FE7                     	;# 
  1143  0FE8                     	;# 
  1144  0FE9                     	;# 
  1145  0FEA                     	;# 
  1146  0FEB                     	;# 
  1147  0FED                     	;# 
  1148  0FEE                     	;# 
  1149  0FEF                     	;# 
  1150  0000                     	;# 
  1151  0001                     	;# 
  1152  0002                     	;# 
  1153  0003                     	;# 
  1154  0004                     	;# 
  1155  0005                     	;# 
  1156  0006                     	;# 
  1157  0007                     	;# 
  1158  0008                     	;# 
  1159  0009                     	;# 
  1160  000A                     	;# 
  1161  000B                     	;# 
  1162  000C                     	;# 
  1163  000D                     	;# 
  1164  000E                     	;# 
  1165  000F                     	;# 
  1166  0010                     	;# 
  1167  0011                     	;# 
  1168  0012                     	;# 
  1169  0013                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  001E                     	;# 
  1180  001F                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  008F                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0093                     	;# 
  1189  0095                     	;# 
  1190  0096                     	;# 
  1191  0097                     	;# 
  1192  0098                     	;# 
  1193  0099                     	;# 
  1194  009A                     	;# 
  1195  009B                     	;# 
  1196  009B                     	;# 
  1197  009C                     	;# 
  1198  009D                     	;# 
  1199  009E                     	;# 
  1200  010C                     	;# 
  1201  010D                     	;# 
  1202  010E                     	;# 
  1203  010F                     	;# 
  1204  0110                     	;# 
  1205  0111                     	;# 
  1206  0112                     	;# 
  1207  0113                     	;# 
  1208  0114                     	;# 
  1209  0115                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  0118                     	;# 
  1213  0119                     	;# 
  1214  011A                     	;# 
  1215  011B                     	;# 
  1216  011D                     	;# 
  1217  018C                     	;# 
  1218  018D                     	;# 
  1219  018F                     	;# 
  1220  0190                     	;# 
  1221  0191                     	;# 
  1222  0191                     	;# 
  1223  0192                     	;# 
  1224  0193                     	;# 
  1225  0193                     	;# 
  1226  0193                     	;# 
  1227  0194                     	;# 
  1228  0195                     	;# 
  1229  0196                     	;# 
  1230  0199                     	;# 
  1231  019A                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019B                     	;# 
  1236  019C                     	;# 
  1237  019C                     	;# 
  1238  019D                     	;# 
  1239  019E                     	;# 
  1240  019F                     	;# 
  1241  020D                     	;# 
  1242  0210                     	;# 
  1243  0211                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0294                     	;# 
  1256  0295                     	;# 
  1257  0295                     	;# 
  1258  0296                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  029B                     	;# 
  1264  029C                     	;# 
  1265  029C                     	;# 
  1266  029D                     	;# 
  1267  029E                     	;# 
  1268  029F                     	;# 
  1269  0311                     	;# 
  1270  0311                     	;# 
  1271  0312                     	;# 
  1272  0313                     	;# 
  1273  0314                     	;# 
  1274  0315                     	;# 
  1275  0315                     	;# 
  1276  0316                     	;# 
  1277  0318                     	;# 
  1278  0318                     	;# 
  1279  0319                     	;# 
  1280  031A                     	;# 
  1281  031C                     	;# 
  1282  031C                     	;# 
  1283  031D                     	;# 
  1284  031E                     	;# 
  1285  0394                     	;# 
  1286  0395                     	;# 
  1287  0396                     	;# 
  1288  0415                     	;# 
  1289  0416                     	;# 
  1290  0417                     	;# 
  1291  041C                     	;# 
  1292  041D                     	;# 
  1293  041E                     	;# 
  1294  0791                     	;# 
  1295  0792                     	;# 
  1296  0793                     	;# 
  1297  0794                     	;# 
  1298  0795                     	;# 
  1299  0798                     	;# 
  1300  0799                     	;# 
  1301  079A                     	;# 
  1302  07A0                     	;# 
  1303  07A1                     	;# 
  1304  07A2                     	;# 
  1305  07A3                     	;# 
  1306  07A4                     	;# 
  1307  07A5                     	;# 
  1308  07A6                     	;# 
  1309  07A7                     	;# 
  1310  07A8                     	;# 
  1311  07A9                     	;# 
  1312  07AA                     	;# 
  1313  07AB                     	;# 
  1314  0FE4                     	;# 
  1315  0FE5                     	;# 
  1316  0FE6                     	;# 
  1317  0FE7                     	;# 
  1318  0FE8                     	;# 
  1319  0FE9                     	;# 
  1320  0FEA                     	;# 
  1321  0FEB                     	;# 
  1322  0FED                     	;# 
  1323  0FEE                     	;# 
  1324  0FEF                     	;# 
  1325                           
  1326                           	psect	idataBANK1
  1327  062E                     __pidataBANK1:	
  1328                           
  1329                           ;initializer for turn_egs@step_nr
  1330  062E  3401               	retlw	1
  1331  062F  3400               	retlw	0
  1332                           
  1333                           	psect	idataBANK2
  1334  03B2                     __pidataBANK2:	
  1335                           
  1336                           ;initializer for comparare@F3724
  1337  03B2  34BA               	retlw	186
  1338  03B3  340B               	retlw	11
  1339  03B4  3481               	retlw	129
  1340  03B5  340A               	retlw	10
  1341  03B6  3449               	retlw	73
  1342  03B7  3409               	retlw	9
  1343  03B8  348A               	retlw	138
  1344  03B9  3408               	retlw	8
  1345  03BA  3467               	retlw	103
  1346  03BB  3407               	retlw	7
  1347  03BC  34AB               	retlw	171
  1348  03BD  3406               	retlw	6
  1349  03BE  34F0               	retlw	240
  1350  03BF  3405               	retlw	5
  1351  03C0  345E               	retlw	94
  1352  03C1  3405               	retlw	5
  1353  03C2  34CC               	retlw	204
  1354  03C3  3404               	retlw	4
  1355  03C4  345A               	retlw	90
  1356  03C5  3404               	retlw	4
  1357  03C6  34E8               	retlw	232
  1358  03C7  3403               	retlw	3
  1359  03C8  348C               	retlw	140
  1360  03C9  3403               	retlw	3
  1361  03CA  3431               	retlw	49
  1362  03CB  3403               	retlw	3
  1363  03CC  34E9               	retlw	233
  1364  03CD  3402               	retlw	2
  1365  03CE  34A1               	retlw	161
  1366  03CF  3402               	retlw	2
  1367  03D0  3467               	retlw	103
  1368  03D1  3402               	retlw	2
  1369  03D2  342D               	retlw	45
  1370  03D3  3402               	retlw	2
  1371  03D4  34F0               	retlw	240
  1372  03D5  3401               	retlw	1
  1373  03D6  34CF               	retlw	207
  1374  03D7  3401               	retlw	1
  1375  03D8  34A9               	retlw	169
  1376  03D9  3401               	retlw	1
  1377  03DA  3483               	retlw	131
  1378  03DB  3401               	retlw	1
  1379                           
  1380                           	psect	stringtext1
  1381  05E2                     __pstringtext1:	
  1382  05E2                     _dpowers:	
  1383  05E2  3401               	retlw	1
  1384  05E3  3400               	retlw	0
  1385  05E4  340A               	retlw	10
  1386  05E5  3400               	retlw	0
  1387  05E6  3464               	retlw	100
  1388  05E7  3400               	retlw	0
  1389  05E8  34E8               	retlw	232
  1390  05E9  3403               	retlw	3
  1391  05EA  3410               	retlw	16
  1392  05EB  3427               	retlw	39
  1393  05EC                     __end_of_dpowers:	
  1394                           
  1395                           	psect	nvBANK0
  1396  006B                     __pnvBANK0:	
  1397  006B                     _timer1ReloadVal:	
  1398  006B                     	ds	2
  1399                           
  1400                           	psect	nvBANK1
  1401  00D1                     __pnvBANK1:	
  1402  00D1                     _TMR1_InterruptHandler:	
  1403  00D1                     	ds	2
  1404  00D3                     _eusartTxBufferRemaining:	
  1405  00D3                     	ds	1
  1406  000F                     _PORTDbits	set	15
  1407  0019                     _T1GCONbits	set	25
  1408  0018                     _T1CONbits	set	24
  1409  0016                     _TMR1L	set	22
  1410  0017                     _TMR1H	set	23
  1411  0019                     _T1GCON	set	25
  1412  0018                     _T1CON	set	24
  1413  0011                     _PIR1bits	set	17
  1414  000B                     _INTCONbits	set	11
  1415  008E                     _TRISCbits	set	142
  1416  008F                     _TRISDbits	set	143
  1417  009D                     _ADCON0bits	set	157
  1418  009C                     _ADRESH	set	156
  1419  009B                     _ADRESL	set	155
  1420  009E                     _ADCON1	set	158
  1421  009D                     _ADCON0	set	157
  1422  0091                     _PIE1bits	set	145
  1423  0095                     _OPTION_REGbits	set	149
  1424  008F                     _TRISD	set	143
  1425  008E                     _TRISC	set	142
  1426  008D                     _TRISB	set	141
  1427  008C                     _TRISA	set	140
  1428  0090                     _TRISE	set	144
  1429  0097                     _WDTCON	set	151
  1430  0098                     _OSCTUNE	set	152
  1431  0099                     _OSCCON	set	153
  1432  010E                     _LATCbits	set	270
  1433  010F                     _LATDbits	set	271
  1434  011D                     _APFCON	set	285
  1435  010E                     _LATC	set	270
  1436  010D                     _LATB	set	269
  1437  010C                     _LATA	set	268
  1438  010F                     _LATD	set	271
  1439  0110                     _LATE	set	272
  1440  0199                     _RCREG	set	409
  1441  019D                     _RCSTAbits	set	413
  1442  019A                     _TXREG	set	410
  1443  019C                     _SPBRGH	set	412
  1444  019B                     _SPBRGL	set	411
  1445  019E                     _TXSTA	set	414
  1446  019D                     _RCSTA	set	413
  1447  019F                     _BAUDCON	set	415
  1448  018C                     _ANSELA	set	396
  1449  0190                     _ANSELE	set	400
  1450  018F                     _ANSELD	set	399
  1451  018D                     _ANSELB	set	397
  1452  020D                     _WPUB	set	525
  1453  0210                     _WPUE	set	528
  1454                           
  1455                           	psect	stringtext2
  1456  0525                     __pstringtext2:	
  1457  0525                     STR_2:	
  1458  0525  3441               	retlw	65	;'A'
  1459  0526  3454               	retlw	84	;'T'
  1460  0527  342B               	retlw	43	;'+'
  1461  0528  3443               	retlw	67	;'C'
  1462  0529  344D               	retlw	77	;'M'
  1463  052A  3447               	retlw	71	;'G'
  1464  052B  3453               	retlw	83	;'S'
  1465  052C  343D               	retlw	61	;'='
  1466  052D  3422               	retlw	34	;'"'
  1467  052E  3430               	retlw	48	;'0'
  1468  052F  3437               	retlw	55	;'7'
  1469  0530  3435               	retlw	53	;'5'
  1470  0531  3437               	retlw	55	;'7'
  1471  0532  3434               	retlw	52	;'4'
  1472  0533  3439               	retlw	57	;'9'
  1473  0534  3434               	retlw	52	;'4'
  1474  0535  3438               	retlw	56	;'8'
  1475  0536  3432               	retlw	50	;'2'
  1476  0537  3433               	retlw	51	;'3'
  1477  0538  3422               	retlw	34	;'"'
  1478  0539  3400               	retlw	0
  1479                           
  1480                           	psect	stringtext3
  1481  0577                     __pstringtext3:	
  1482  0577                     STR_7:	
  1483  0577  3441               	retlw	65	;'A'
  1484  0578  3454               	retlw	84	;'T'
  1485  0579  342B               	retlw	43	;'+'
  1486  057A  3443               	retlw	67	;'C'
  1487  057B  344E               	retlw	78	;'N'
  1488  057C  344D               	retlw	77	;'M'
  1489  057D  3449               	retlw	73	;'I'
  1490  057E  343D               	retlw	61	;'='
  1491  057F  3431               	retlw	49	;'1'
  1492  0580  342C               	retlw	44	;','
  1493  0581  3432               	retlw	50	;'2'
  1494  0582  342C               	retlw	44	;','
  1495  0583  3430               	retlw	48	;'0'
  1496  0584  342C               	retlw	44	;','
  1497  0585  3430               	retlw	48	;'0'
  1498  0586  342C               	retlw	44	;','
  1499  0587  3430               	retlw	48	;'0'
  1500  0588  3400               	retlw	0
  1501                           
  1502                           	psect	stringtext4
  1503  059B                     __pstringtext4:	
  1504  059B                     STR_9:	
  1505  059B  3420               	retlw	32	;' '
  1506  059C  3455               	retlw	85	;'U'
  1507  059D  346D               	retlw	109	;'m'
  1508  059E  3469               	retlw	105	;'i'
  1509  059F  3464               	retlw	100	;'d'
  1510  05A0  343D               	retlw	61	;'='
  1511  05A1  3425               	retlw	37	;'%'
  1512  05A2  3464               	retlw	100	;'d'
  1513  05A3  3420               	retlw	32	;' '
  1514  05A4  3420               	retlw	32	;' '
  1515  05A5  3420               	retlw	32	;' '
  1516  05A6  3420               	retlw	32	;' '
  1517  05A7  3420               	retlw	32	;' '
  1518  05A8  3420               	retlw	32	;' '
  1519  05A9  3420               	retlw	32	;' '
  1520  05AA  3420               	retlw	32	;' '
  1521  05AB  3400               	retlw	0
  1522                           
  1523                           	psect	stringtext5
  1524  05AC                     __pstringtext5:	
  1525  05AC                     STR_5:	
  1526  05AC  3441               	retlw	65	;'A'
  1527  05AD  3454               	retlw	84	;'T'
  1528  05AE  342B               	retlw	43	;'+'
  1529  05AF  3443               	retlw	67	;'C'
  1530  05B0  3450               	retlw	80	;'P'
  1531  05B1  3449               	retlw	73	;'I'
  1532  05B2  344E               	retlw	78	;'N'
  1533  05B3  343D               	retlw	61	;'='
  1534  05B4  3422               	retlw	34	;'"'
  1535  05B5  3430               	retlw	48	;'0'
  1536  05B6  3430               	retlw	48	;'0'
  1537  05B7  3430               	retlw	48	;'0'
  1538  05B8  3430               	retlw	48	;'0'
  1539  05B9  3422               	retlw	34	;'"'
  1540  05BA  3400               	retlw	0
  1541                           
  1542                           	psect	stringtext6
  1543  05BB                     __pstringtext6:	
  1544  05BB                     STR_1:	
  1545  05BB  3441               	retlw	65	;'A'
  1546  05BC  3454               	retlw	84	;'T'
  1547  05BD  342B               	retlw	43	;'+'
  1548  05BE  3443               	retlw	67	;'C'
  1549  05BF  3453               	retlw	83	;'S'
  1550  05C0  3443               	retlw	67	;'C'
  1551  05C1  3453               	retlw	83	;'S'
  1552  05C2  343D               	retlw	61	;'='
  1553  05C3  3422               	retlw	34	;'"'
  1554  05C4  3447               	retlw	71	;'G'
  1555  05C5  3453               	retlw	83	;'S'
  1556  05C6  344D               	retlw	77	;'M'
  1557  05C7  3422               	retlw	34	;'"'
  1558  05C8  3400               	retlw	0
  1559                           
  1560                           	psect	stringtext7
  1561  05D6                     __pstringtext7:	
  1562  05D6                     STR_3:	
  1563  05D6  3469               	retlw	105	;'i'
  1564  05D7  3475               	retlw	117	;'u'
  1565  05D8  3470               	retlw	112	;'p'
  1566  05D9  3469               	retlw	105	;'i'
  1567  05DA  3469               	retlw	105	;'i'
  1568  05DB  3420               	retlw	32	;' '
  1569  05DC  346D               	retlw	109	;'m'
  1570  05DD  3465               	retlw	101	;'e'
  1571  05DE  3472               	retlw	114	;'r'
  1572  05DF  3467               	retlw	103	;'g'
  1573  05E0  3465               	retlw	101	;'e'
  1574  05E1  3400               	retlw	0
  1575                           
  1576                           	psect	stringtext8
  1577  05EC                     __pstringtext8:	
  1578  05EC                     STR_6:	
  1579  05EC  3441               	retlw	65	;'A'
  1580  05ED  3454               	retlw	84	;'T'
  1581  05EE  342B               	retlw	43	;'+'
  1582  05EF  3443               	retlw	67	;'C'
  1583  05F0  344D               	retlw	77	;'M'
  1584  05F1  3447               	retlw	71	;'G'
  1585  05F2  3446               	retlw	70	;'F'
  1586  05F3  343D               	retlw	61	;'='
  1587  05F4  3431               	retlw	49	;'1'
  1588  05F5  3400               	retlw	0
  1589                           
  1590                           	psect	stringtext9
  1591  0622                     __pstringtext9:	
  1592  0622                     STR_4:	
  1593  0622  3441               	retlw	65	;'A'
  1594  0623  3454               	retlw	84	;'T'
  1595  0624  3400               	retlw	0
  1596                           
  1597                           	psect	stringtext10
  1598  0000                     __pstringtext10:	
  1599  05BB                     
  1600                           ; #config settings
  1601  0000                     
  1602                           	psect	cinit
  1603  003E                     start_initialization:	
  1604  003E                     __initialization:	
  1605                           
  1606                           ; Initialize objects allocated to BANK1
  1607  003E  0021               	movlb	1	; select bank1
  1608  003F  3186  262E  3180   	fcall	__pidataBANK1	;fetch initializer
  1609  0042  00D4               	movwf	__pdataBANK1& (0+127)
  1610  0043  3186  262F  3180   	fcall	__pidataBANK1+1	;fetch initializer
  1611  0046  00D5               	movwf	(__pdataBANK1+1)& (0+127)
  1612                           
  1613                           ; Initialize objects allocated to BANK2
  1614  0047  30B2               	movlw	low __pidataBANK2
  1615  0048  0084               	movwf	4
  1616  0049  3083               	movlw	(high __pidataBANK2)| (0+128)
  1617  004A  0085               	movwf	5
  1618  004B  3020               	movlw	low __pdataBANK2
  1619  004C  0086               	movwf	6
  1620  004D  3001               	movlw	high __pdataBANK2
  1621  004E  0087               	movwf	7
  1622  004F  302A               	movlw	42
  1623  0050  3186  2608  3180   	fcall	init_ram
  1624                           
  1625                           ; Clear objects allocated to COMMON
  1626  0053  01FA               	clrf	__pbssCOMMON& (0+127)
  1627  0054  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1628  0055  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  1629  0056  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
  1630                           
  1631                           ; Clear objects allocated to BANK0
  1632  0057  3058               	movlw	low __pbssBANK0
  1633  0058  0084               	movwf	4
  1634  0059  3000               	movlw	high __pbssBANK0
  1635  005A  0085               	movwf	5
  1636  005B  3013               	movlw	19
  1637  005C  3186  260E  3180   	fcall	clear_ram0
  1638                           
  1639                           ; Clear objects allocated to BANK1
  1640  005F  30A0               	movlw	low __pbssBANK1
  1641  0060  0084               	movwf	4
  1642  0061  3000               	movlw	high __pbssBANK1
  1643  0062  0085               	movwf	5
  1644  0063  3031               	movlw	49
  1645  0064  3186  260E  3180   	fcall	clear_ram0
  1646                           
  1647                           ; Clear objects allocated to BANK3
  1648  0067  30A0               	movlw	low __pbssBANK3
  1649  0068  0084               	movwf	4
  1650  0069  3001               	movlw	high __pbssBANK3
  1651  006A  0085               	movwf	5
  1652  006B  304B               	movlw	75
  1653  006C  3186  260E         	fcall	clear_ram0
  1654  006E                     end_of_initialization:	
  1655                           ;End of C runtime variable initialization code
  1656                           
  1657  006E                     __end_of__initialization:	
  1658  006E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1659  006F  0020               	movlb	0
  1660  0070  3181  29F3         	ljmp	_main	;jump to C main() function
  1661                           
  1662                           	psect	bssCOMMON
  1663  007A                     __pbssCOMMON:	
  1664  007A                     turn_egs@step_index:	
  1665  007A                     	ds	1
  1666  007B                     _rcreg:	
  1667  007B                     	ds	1
  1668  007C                     _eusartTxTail:	
  1669  007C                     	ds	1
  1670  007D                     _eusartTxHead:	
  1671  007D                     	ds	1
  1672                           
  1673                           	psect	bssBANK0
  1674  0058                     __pbssBANK0:	
  1675  0058                     int_gsm@sms1_index:	
  1676  0058                     	ds	2
  1677  005A                     sms_text@sms_index:	
  1678  005A                     	ds	2
  1679  005C                     _flag_directie:	
  1680  005C                     	ds	2
  1681  005E                     _Sum:	
  1682  005E                     	ds	1
  1683  005F                     _Temp:	
  1684  005F                     	ds	1
  1685  0060                     _Ch:	
  1686  0060                     	ds	1
  1687  0061                     _RH_byte2:	
  1688  0061                     	ds	1
  1689  0062                     _RH_byte1:	
  1690  0062                     	ds	1
  1691  0063                     _T_byte2:	
  1692  0063                     	ds	1
  1693  0064                     _T_byte1:	
  1694  0064                     	ds	1
  1695  0065                     _Check:	
  1696  0065                     	ds	1
  1697  0066                     _line1:	
  1698  0066                     	ds	1
  1699  0067                     _eusartRxCount:	
  1700  0067                     	ds	1
  1701  0068                     _eusartRxTail:	
  1702  0068                     	ds	1
  1703  0069                     _eusartRxHead:	
  1704  0069                     	ds	1
  1705  006A                     _line2:	
  1706  006A                     	ds	1
  1707                           
  1708                           	psect	bssBANK1
  1709  00A0                     __pbssBANK1:	
  1710  00A0                     _eusartRxBuffer:	
  1711  00A0                     	ds	8
  1712  00A8                     _eusartTxBuffer:	
  1713  00A8                     	ds	8
  1714  00B0                     TMR1_ISR@CountCallBack:	
  1715  00B0                     	ds	2
  1716  00B2                     _count_4000_ms:	
  1717  00B2                     	ds	2
  1718  00B4                     _count_1000_ms:	
  1719  00B4                     	ds	2
  1720  00B6                     _count_500_ms:	
  1721  00B6                     	ds	2
  1722  00B8                     _count_100_ms:	
  1723  00B8                     	ds	2
  1724  00BA                     _flag_4000_ms:	
  1725  00BA                     	ds	2
  1726  00BC                     _flag_1000_ms:	
  1727  00BC                     	ds	2
  1728  00BE                     _flag_500_ms:	
  1729  00BE                     	ds	2
  1730  00C0                     _flag_100_ms:	
  1731  00C0                     	ds	2
  1732  00C2                     _flag_10_ms:	
  1733  00C2                     	ds	2
  1734  00C4                     _flag_1_ms:	
  1735  00C4                     	ds	2
  1736  00C6                     _flag_B:	
  1737  00C6                     	ds	2
  1738  00C8                     _flag_A:	
  1739  00C8                     	ds	2
  1740  00CA                     _flag_G:	
  1741  00CA                     	ds	2
  1742  00CC                     _flag_N:	
  1743  00CC                     	ds	2
  1744  00CE                     _rez_conversie:	
  1745  00CE                     	ds	2
  1746  00D0                     _RH:	
  1747  00D0                     	ds	1
  1748                           
  1749                           	psect	dataBANK1
  1750  00D4                     __pdataBANK1:	
  1751  00D4                     turn_egs@step_nr:	
  1752  00D4                     	ds	2
  1753                           
  1754                           	psect	dataBANK2
  1755  0120                     __pdataBANK2:	
  1756  0120                     comparare@F3724:	
  1757  0120                     	ds	42
  1758                           
  1759                           	psect	bssBANK3
  1760  01A0                     __pbssBANK3:	
  1761  01A0                     comparare@F3729:	
  1762  01A0                     	ds	75
  1763                           
  1764                           	psect	inittext
  1765  0608                     init_ram:	
  1766  0608  00FE               	movwf	126
  1767  0609                     initloop:	
  1768  0609  0012               	moviw fsr0++
  1769  060A  001E               	movwi fsr1++
  1770  060B  0BFE               	decfsz	126,f
  1771  060C  2E09               	goto	initloop
  1772  060D  3400               	retlw	0
  1773                           
  1774                           	psect	clrtext
  1775  060E                     clear_ram0:	
  1776                           ;	Called with FSR0 containing the base address, and
  1777                           ;	WREG with the size to clear
  1778                           
  1779  060E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1780  060F                     clrloop0:	
  1781  060F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1782  0610  3101               	addfsr 0,1
  1783  0611  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1784  0612  2E0F               	goto	clrloop0	;have we reached the end yet?
  1785  0613  3400               	retlw	0	;all done for this memory range, return
  1786                           
  1787                           	psect	cstackCOMMON
  1788  0070                     __pcstackCOMMON:	
  1789  0070                     ?_PIN_MANAGER_Initialize:	
  1790  0070                     ?_OSCILLATOR_Initialize:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  0070                     ?_WDT_Initialize:	
  1794                           ; 1 bytes @ 0x0
  1795                           
  1796  0070                     ?_TMR1_Initialize:	
  1797                           ; 1 bytes @ 0x0
  1798                           
  1799  0070                     ?_ADC_Initialize:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0070                     ?_EUSART_Initialize:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0070                     ?_ADC_ISR:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0070                     ?_TMR1_ISR:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0070                     ??_TMR1_ISR:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0070                     ?_TMR1_DefaultInterruptHandler:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0070                     ??_TMR1_DefaultInterruptHandler:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0070                     ?_TMR1_StartTimer:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0070                     ?_TMR1_CallBack:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  0070                     ??_TMR1_CallBack:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  0070                     ?_send_nibble:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0070                     ?_send_command_byte:	
  1833                           ; 1 bytes @ 0x0
  1834                           
  1835  0070                     ?_SYSTEM_Initialize:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  0070                     ?_EUSART_Write:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841  0070                     ?_EUSART_Transmit_ISR:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0070                     ??_EUSART_Transmit_ISR:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0070                     ?_EUSART_Receive_ISR:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850  0070                     ??_EUSART_Receive_ISR:	
  1851                           ; 1 bytes @ 0x0
  1852                           
  1853  0070                     ?_INTERRUPT_InterruptManager:	
  1854                           ; 1 bytes @ 0x0
  1855                           
  1856  0070                     ?_ADC_StartConversion:	
  1857                           ; 1 bytes @ 0x0
  1858                           
  1859  0070                     ?_init_lcd:	
  1860                           ; 1 bytes @ 0x0
  1861                           
  1862  0070                     ?_comand_lcd:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865  0070                     ?_send_data_byte:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868  0070                     ?_StartSignal:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  0070                     ?_CheckResponse:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  0070                     ?_ReadData:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0070                     ?_DHT_result:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  0070                     ?_main:	
  1881                           ; 1 bytes @ 0x0
  1882                           
  1883  0070                     ?i1_ADC_StartConversion:	
  1884                           ; 1 bytes @ 0x0
  1885                           
  1886  0070                     ??i1_ADC_StartConversion:	
  1887                           ; 1 bytes @ 0x0
  1888                           
  1889  0070                     ?_ADC_GetConversionResult:	
  1890                           ; 1 bytes @ 0x0
  1891                           
  1892                           
  1893                           ; 2 bytes @ 0x0
  1894  0070                     	ds	2
  1895  0072                     ??_ADC_GetConversionResult:	
  1896                           
  1897                           ; 1 bytes @ 0x2
  1898  0072                     	ds	7
  1899  0079                     ??_ADC_ISR:	
  1900  0079                     ??_INTERRUPT_InterruptManager:	
  1901                           ; 1 bytes @ 0x9
  1902                           
  1903                           
  1904                           ; 1 bytes @ 0x9
  1905  0079                     	ds	1
  1906                           
  1907                           	psect	cstackBANK0
  1908  0020                     __pcstackBANK0:	
  1909  0020                     ??_PIN_MANAGER_Initialize:	
  1910  0020                     ??_OSCILLATOR_Initialize:	
  1911                           ; 1 bytes @ 0x0
  1912                           
  1913  0020                     ??_WDT_Initialize:	
  1914                           ; 1 bytes @ 0x0
  1915                           
  1916  0020                     ??_ADC_Initialize:	
  1917                           ; 1 bytes @ 0x0
  1918                           
  1919  0020                     ??_EUSART_Initialize:	
  1920                           ; 1 bytes @ 0x0
  1921                           
  1922  0020                     ?_TMR1_SetInterruptHandler:	
  1923                           ; 1 bytes @ 0x0
  1924                           
  1925  0020                     ??_TMR1_StartTimer:	
  1926                           ; 1 bytes @ 0x0
  1927                           
  1928  0020                     ??_send_nibble:	
  1929                           ; 1 bytes @ 0x0
  1930                           
  1931  0020                     ??_EUSART_Write:	
  1932                           ; 1 bytes @ 0x0
  1933                           
  1934  0020                     ??_ADC_StartConversion:	
  1935                           ; 1 bytes @ 0x0
  1936                           
  1937  0020                     ??_StartSignal:	
  1938                           ; 1 bytes @ 0x0
  1939                           
  1940  0020                     ??_CheckResponse:	
  1941                           ; 1 bytes @ 0x0
  1942                           
  1943  0020                     ??_ReadData:	
  1944                           ; 1 bytes @ 0x0
  1945                           
  1946  0020                     ?___lwdiv:	
  1947                           ; 1 bytes @ 0x0
  1948                           
  1949  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  1950                           ; 2 bytes @ 0x0
  1951                           
  1952  0020                     ___lwdiv@divisor:	
  1953                           ; 2 bytes @ 0x0
  1954                           
  1955                           
  1956                           ; 2 bytes @ 0x0
  1957  0020                     	ds	1
  1958  0021                     EUSART_Write@txData:	
  1959  0021                     send_nibble@nibble:	
  1960                           ; 1 bytes @ 0x1
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x1
  1964  0021                     	ds	1
  1965  0022                     ??_TMR1_Initialize:	
  1966  0022                     ??_TMR1_SetInterruptHandler:	
  1967                           ; 1 bytes @ 0x2
  1968                           
  1969  0022                     ??_send_command_byte:	
  1970                           ; 1 bytes @ 0x2
  1971                           
  1972  0022                     ??_SYSTEM_Initialize:	
  1973                           ; 1 bytes @ 0x2
  1974                           
  1975  0022                     ?_putch:	
  1976                           ; 1 bytes @ 0x2
  1977                           
  1978  0022                     ??_init_lcd:	
  1979                           ; 1 bytes @ 0x2
  1980                           
  1981  0022                     ??_send_data_byte:	
  1982                           ; 1 bytes @ 0x2
  1983                           
  1984  0022                     putch@txData:	
  1985                           ; 1 bytes @ 0x2
  1986                           
  1987  0022                     ReadData@i:	
  1988                           ; 1 bytes @ 0x2
  1989                           
  1990  0022                     ___lwdiv@dividend:	
  1991                           ; 1 bytes @ 0x2
  1992                           
  1993                           
  1994                           ; 2 bytes @ 0x2
  1995  0022                     	ds	1
  1996  0023                     ??_putch:	
  1997  0023                     send_command_byte@byte:	
  1998                           ; 1 bytes @ 0x3
  1999                           
  2000  0023                     send_data_byte@byte:	
  2001                           ; 1 bytes @ 0x3
  2002                           
  2003  0023                     ReadData@j:	
  2004                           ; 1 bytes @ 0x3
  2005                           
  2006                           
  2007                           ; 1 bytes @ 0x3
  2008  0023                     	ds	1
  2009  0024                     ??_comand_lcd:	
  2010  0024                     ??___lwdiv:	
  2011                           ; 1 bytes @ 0x4
  2012                           
  2013                           
  2014                           ; 1 bytes @ 0x4
  2015  0024                     	ds	1
  2016  0025                     ___lwdiv@quotient:	
  2017                           
  2018                           ; 2 bytes @ 0x5
  2019  0025                     	ds	2
  2020  0027                     ___lwdiv@counter:	
  2021                           
  2022                           ; 1 bytes @ 0x7
  2023  0027                     	ds	1
  2024  0028                     ?___lwmod:	
  2025  0028                     ___lwmod@divisor:	
  2026                           ; 2 bytes @ 0x8
  2027                           
  2028                           
  2029                           ; 2 bytes @ 0x8
  2030  0028                     	ds	2
  2031  002A                     ___lwmod@dividend:	
  2032                           
  2033                           ; 2 bytes @ 0xA
  2034  002A                     	ds	2
  2035  002C                     ??___lwmod:	
  2036                           
  2037                           ; 1 bytes @ 0xC
  2038  002C                     	ds	1
  2039  002D                     ___lwmod@counter:	
  2040                           
  2041                           ; 1 bytes @ 0xD
  2042  002D                     	ds	1
  2043  002E                     ?__doprnt:	
  2044  002E                     __doprnt@f:	
  2045                           ; 2 bytes @ 0xE
  2046                           
  2047                           
  2048                           ; 2 bytes @ 0xE
  2049  002E                     	ds	2
  2050  0030                     __doprnt@ap:	
  2051                           
  2052                           ; 1 bytes @ 0x10
  2053  0030                     	ds	1
  2054  0031                     ??__doprnt:	
  2055                           
  2056                           ; 1 bytes @ 0x11
  2057  0031                     	ds	4
  2058  0035                     __doprnt@flag:	
  2059                           
  2060                           ; 1 bytes @ 0x15
  2061  0035                     	ds	1
  2062  0036                     __doprnt@prec:	
  2063                           
  2064                           ; 1 bytes @ 0x16
  2065  0036                     	ds	1
  2066  0037                     __doprnt@val:	
  2067                           
  2068                           ; 2 bytes @ 0x17
  2069  0037                     	ds	2
  2070  0039                     __doprnt@c:	
  2071                           
  2072                           ; 1 bytes @ 0x19
  2073  0039                     	ds	1
  2074  003A                     __doprnt@pb:	
  2075                           
  2076                           ; 1 bytes @ 0x1A
  2077  003A                     	ds	1
  2078  003B                     ?_sprintf:	
  2079  003B                     sprintf@f:	
  2080                           ; 2 bytes @ 0x1B
  2081                           
  2082                           
  2083                           ; 2 bytes @ 0x1B
  2084  003B                     	ds	4
  2085  003F                     ??_sprintf:	
  2086                           
  2087                           ; 1 bytes @ 0x1F
  2088  003F                     	ds	1
  2089  0040                     sprintf@wh:	
  2090                           
  2091                           ; 1 bytes @ 0x20
  2092  0040                     	ds	1
  2093  0041                     sprintf@ap:	
  2094                           
  2095                           ; 1 bytes @ 0x21
  2096  0041                     	ds	1
  2097  0042                     sprintf@pb:	
  2098                           
  2099                           ; 3 bytes @ 0x22
  2100  0042                     	ds	3
  2101  0045                     ??_DHT_result:	
  2102                           
  2103                           ; 1 bytes @ 0x25
  2104  0045                     	ds	14
  2105  0053                     ??_main:	
  2106                           
  2107                           ; 1 bytes @ 0x33
  2108  0053                     	ds	1
  2109  0054                     main@x:	
  2110                           
  2111                           ; 1 bytes @ 0x34
  2112  0054                     	ds	1
  2113  0055                     main@incubator_state:	
  2114                           
  2115                           ; 1 bytes @ 0x35
  2116  0055                     	ds	1
  2117  0056                     main@n:	
  2118                           
  2119                           ; 2 bytes @ 0x36
  2120  0056                     	ds	2
  2121                           
  2122                           	psect	maintext
  2123  01F3                     __pmaintext:	
  2124 ;;
  2125 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2126 ;;
  2127 ;; *************** function _main *****************
  2128 ;; Defined at:
  2129 ;;		line 429 in file "main.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  n               2   54[BANK0 ] int 
  2134 ;;  volt            3    0        float 
  2135 ;;  temp            2    0        int 
  2136 ;;  incubator_st    1   53[BANK0 ] unsigned char 
  2137 ;;  x               1   52[BANK0 ] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : B1F/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2147 ;;      Params:         0       0       0       0       0       0       0
  2148 ;;      Locals:         0       4       0       0       0       0       0
  2149 ;;      Temps:          0       1       0       0       0       0       0
  2150 ;;      Totals:         0       5       0       0       0       0       0
  2151 ;;Total ram usage:        5 bytes
  2152 ;; Hardware stack levels required when called:    9
  2153 ;; This function calls:
  2154 ;;		_ADC_StartConversion
  2155 ;;		_CheckResponse
  2156 ;;		_DHT_result
  2157 ;;		_SYSTEM_Initialize
  2158 ;;		_StartSignal
  2159 ;;		_comand_lcd
  2160 ;;		_init_lcd
  2161 ;;		_send_command_byte
  2162 ;;		_send_data_byte
  2163 ;; This function is called by:
  2164 ;;		Startup code after reset
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _main
  2170  01F3                     _main:	
  2171                           
  2172                           ;main.c: 431: char x=0;
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2176  01F3  0020               	movlb	0	; select bank0
  2177  01F4  01D4               	clrf	main@x
  2178                           
  2179                           ;main.c: 434: SYSTEM_Initialize();
  2180  01F5  3185  2589  3181   	fcall	_SYSTEM_Initialize
  2181                           
  2182                           ;main.c: 435: ADC_StartConversion();
  2183  01F8  3186  2628  3181   	fcall	_ADC_StartConversion
  2184                           
  2185                           ;main.c: 436: TRISCbits.TRISC0=0;
  2186  01FB  0021               	movlb	1	; select bank1
  2187  01FC  100E               	bcf	14,0	;volatile
  2188                           
  2189                           ;main.c: 437: TRISCbits.TRISC3=0;
  2190  01FD  118E               	bcf	14,3	;volatile
  2191                           
  2192                           ;main.c: 438: TRISCbits.TRISC4=0;
  2193  01FE  120E               	bcf	14,4	;volatile
  2194                           
  2195                           ;main.c: 439: TRISCbits.TRISC5=0;
  2196  01FF  128E               	bcf	14,5	;volatile
  2197                           
  2198                           ;main.c: 440: TRISB = 0b00000000;
  2199  0200  018D               	clrf	13	;volatile
  2200                           
  2201                           ;main.c: 441: TRISD = 0x00;
  2202  0201  018F               	clrf	15	;volatile
  2203                           
  2204                           ;main.c: 442: ANSELD=ANSELD & 0b11100000;
  2205  0202  0023               	movlb	3	; select bank3
  2206  0203  080F               	movf	15,w	;volatile
  2207  0204  39E0               	andlw	224
  2208  0205  008F               	movwf	15	;volatile
  2209                           
  2210                           ;main.c: 443: TRISDbits.TRISD2 = 1;
  2211  0206  0021               	movlb	1	; select bank1
  2212  0207  150F               	bsf	15,2	;volatile
  2213                           
  2214                           ;main.c: 449: (INTCONbits.GIE = 1);
  2215  0208  178B               	bsf	11,7	;volatile
  2216                           
  2217                           ;main.c: 452: (INTCONbits.PEIE = 1);
  2218  0209  170B               	bsf	11,6	;volatile
  2219                           
  2220                           ;main.c: 459: char incubator_state=none;
  2221  020A  3006               	movlw	6
  2222  020B  0020               	movlb	0	; select bank0
  2223  020C  00D3               	movwf	??_main
  2224  020D  0853               	movf	??_main,w
  2225  020E  00D5               	movwf	main@incubator_state
  2226                           
  2227                           ;main.c: 460: init_lcd();
  2228  020F  3183  2351  3181   	fcall	_init_lcd
  2229                           
  2230                           ;main.c: 461: comand_lcd();
  2231  0212  3185  254F  3181   	fcall	_comand_lcd
  2232                           
  2233                           ;main.c: 462: flag_directie=1;
  2234  0215  3001               	movlw	1
  2235  0216  0020               	movlb	0	; select bank0
  2236  0217  00DC               	movwf	_flag_directie
  2237  0218  3000               	movlw	0
  2238  0219  00DD               	movwf	_flag_directie+1
  2239  021A                     l4098:	
  2240                           ;main.c: 464: float volt;
  2241                           ;main.c: 465: int temp;
  2242                           ;main.c: 466: while (1)
  2243                           
  2244                           
  2245                           ;main.c: 467: {
  2246                           ;main.c: 469: StartSignal();
  2247  021A  3185  2563  3181   	fcall	_StartSignal
  2248                           
  2249                           ;main.c: 470: CheckResponse();
  2250  021D  3185  250E  3181   	fcall	_CheckResponse
  2251                           
  2252                           ;main.c: 471: if(Check == 1)
  2253  0220  0020               	movlb	0	; select bank0
  2254  0221  0365               	decf	_Check,w
  2255  0222  1D03               	btfss	3,2
  2256  0223  2A27               	goto	l4106
  2257                           
  2258                           ;main.c: 472: {
  2259                           ;main.c: 473: DHT_result();
  2260  0224  3181  218F  3181   	fcall	_DHT_result
  2261  0227                     l4106:	
  2262                           
  2263                           ;main.c: 474: }
  2264                           ;main.c: 475: send_command_byte(0x80);
  2265  0227  3080               	movlw	128
  2266  0228  3184  244A  3181   	fcall	_send_command_byte
  2267                           
  2268                           ;main.c: 476: _delay((unsigned long)((10)*(18432000/4000.0)));
  2269  022B  303C               	movlw	60
  2270  022C  0020               	movlb	0	; select bank0
  2271  022D  00D3               	movwf	??_main
  2272  022E  30D7               	movlw	215
  2273  022F                     u4617:	
  2274  022F  0B89               	decfsz	9,f
  2275  0230  2A2F               	goto	u4617
  2276  0231  0BD3               	decfsz	??_main,f
  2277  0232  2A2F               	goto	u4617
  2278                           
  2279                           ;main.c: 477: for (int n=0 ; line2[n]!=0 ; n++) send_data_byte(line2[n]);
  2280  0233  0020               	movlb	0	; select bank0
  2281  0234  01D6               	clrf	main@n
  2282  0235  01D7               	clrf	main@n+1
  2283  0236                     l4116:	
  2284  0236  0856               	movf	main@n,w
  2285  0237  3E6A               	addlw	(low (_line2| 0))& (0+255)
  2286  0238  0086               	movwf	6
  2287  0239  0187               	clrf	7
  2288  023A  0801               	movf	1,w
  2289  023B  1903               	btfsc	3,2
  2290  023C  2A1A               	goto	l4098
  2291  023D  0856               	movf	main@n,w
  2292  023E  3E6A               	addlw	(low (_line2| 0))& (0+255)
  2293  023F  0086               	movwf	6
  2294  0240  0187               	clrf	7
  2295  0241  0801               	movf	1,w
  2296  0242  3185  253A  3181   	fcall	_send_data_byte
  2297  0245  3001               	movlw	1
  2298  0246  0020               	movlb	0	; select bank0
  2299  0247  07D6               	addwf	main@n,f
  2300  0248  3000               	movlw	0
  2301  0249  3DD7               	addwfc	main@n+1,f
  2302  024A  2A36               	goto	l4116
  2303  024B                     __end_of_main:	
  2304                           
  2305                           	psect	text1
  2306  053A                     __ptext1:	
  2307 ;; *************** function _send_data_byte *****************
  2308 ;; Defined at:
  2309 ;;		line 145 in file "main.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  byte            1    wreg     unsigned char 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  byte            1    3[BANK0 ] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, status,2, status,0, pclath, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2323 ;;      Params:         0       0       0       0       0       0       0
  2324 ;;      Locals:         0       1       0       0       0       0       0
  2325 ;;      Temps:          0       1       0       0       0       0       0
  2326 ;;      Totals:         0       2       0       0       0       0       0
  2327 ;;Total ram usage:        2 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    5
  2330 ;; This function calls:
  2331 ;;		_send_nibble
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _send_data_byte
  2339  053A                     _send_data_byte:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _send_data_byte: [wreg+status,2+status,0+pclath+cstack]
  2343                           ;send_data_byte@byte stored from wreg
  2344  053A  0020               	movlb	0	; select bank0
  2345  053B  00A3               	movwf	send_data_byte@byte
  2346                           
  2347                           ;main.c: 147: LATDbits.LATD3 = 1;
  2348  053C  0022               	movlb	2	; select bank2
  2349  053D  158F               	bsf	15,3	;volatile
  2350                           
  2351                           ;main.c: 148: send_nibble(byte >> 4);
  2352  053E  0020               	movlb	0	; select bank0
  2353  053F  0823               	movf	send_data_byte@byte,w
  2354  0540  00A2               	movwf	??_send_data_byte
  2355  0541  3004               	movlw	4
  2356  0542                     u1655:	
  2357  0542  36A2               	lsrf	??_send_data_byte,f
  2358  0543  0B89               	decfsz	9,f
  2359  0544  2D42               	goto	u1655
  2360  0545  0822               	movf	??_send_data_byte,w
  2361  0546  3183  23DC  3185   	fcall	_send_nibble
  2362                           
  2363                           ;main.c: 149: send_nibble(byte & 0xF);
  2364  0549  0020               	movlb	0	; select bank0
  2365  054A  0823               	movf	send_data_byte@byte,w
  2366  054B  390F               	andlw	15
  2367  054C  3183  23DC         	fcall	_send_nibble
  2368  054E  0008               	return
  2369  054F                     __end_of_send_data_byte:	
  2370                           
  2371                           	psect	text2
  2372  0351                     __ptext2:	
  2373 ;; *************** function _init_lcd *****************
  2374 ;; Defined at:
  2375 ;;		line 88 in file "main.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0, pclath, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2389 ;;      Params:         0       0       0       0       0       0       0
  2390 ;;      Locals:         0       0       0       0       0       0       0
  2391 ;;      Temps:          0       1       0       0       0       0       0
  2392 ;;      Totals:         0       1       0       0       0       0       0
  2393 ;;Total ram usage:        1 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    5
  2396 ;; This function calls:
  2397 ;;		_send_nibble
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _init_lcd
  2405  0351                     _init_lcd:	
  2406                           
  2407                           ;main.c: 90: LATDbits.LATD1 = 0;
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _init_lcd: [wreg+status,2+status,0+pclath+cstack]
  2411  0351  0022               	movlb	2	; select bank2
  2412  0352  108F               	bcf	15,1	;volatile
  2413                           
  2414                           ;main.c: 91: LATDbits.LATD3 = 0;
  2415  0353  118F               	bcf	15,3	;volatile
  2416                           
  2417                           ;main.c: 92: LATDbits.LATD0 = 1;
  2418  0354  140F               	bsf	15,0	;volatile
  2419                           
  2420                           ;main.c: 95: _delay((unsigned long)((16)*(18432000/4000.0)));
  2421  0355  3060               	movlw	96
  2422  0356  0020               	movlb	0	; select bank0
  2423  0357  00A2               	movwf	??_init_lcd
  2424  0358  30BF               	movlw	191
  2425  0359                     u4627:	
  2426  0359  0B89               	decfsz	9,f
  2427  035A  2B59               	goto	u4627
  2428  035B  0BA2               	decfsz	??_init_lcd,f
  2429  035C  2B59               	goto	u4627
  2430                           
  2431                           ;main.c: 96: send_nibble(0b0011);
  2432  035D  3003               	movlw	3
  2433  035E  3183  23DC  3183   	fcall	_send_nibble
  2434                           
  2435                           ;main.c: 97: _delay((unsigned long)((5)*(18432000/4000.0)));
  2436  0361  301E               	movlw	30
  2437  0362  0020               	movlb	0	; select bank0
  2438  0363  00A2               	movwf	??_init_lcd
  2439  0364  30EB               	movlw	235
  2440  0365                     u4637:	
  2441  0365  0B89               	decfsz	9,f
  2442  0366  2B65               	goto	u4637
  2443  0367  0BA2               	decfsz	??_init_lcd,f
  2444  0368  2B65               	goto	u4637
  2445                           
  2446                           ;main.c: 98: send_nibble(0b0011);
  2447  0369  3003               	movlw	3
  2448  036A  3183  23DC  3183   	fcall	_send_nibble
  2449                           
  2450                           ;main.c: 99: _delay((unsigned long)((1)*(18432000/4000.0)));
  2451  036D  3006               	movlw	6
  2452  036E  0020               	movlb	0	; select bank0
  2453  036F  00A2               	movwf	??_init_lcd
  2454  0370  30FB               	movlw	251
  2455  0371                     u4647:	
  2456  0371  0B89               	decfsz	9,f
  2457  0372  2B71               	goto	u4647
  2458  0373  0BA2               	decfsz	??_init_lcd,f
  2459  0374  2B71               	goto	u4647
  2460                           
  2461                           ;main.c: 100: send_nibble(0b0011);
  2462  0375  3003               	movlw	3
  2463  0376  3183  23DC  3183   	fcall	_send_nibble
  2464                           
  2465                           ;main.c: 101: _delay((unsigned long)((5)*(18432000/4000.0)));
  2466  0379  301E               	movlw	30
  2467  037A  0020               	movlb	0	; select bank0
  2468  037B  00A2               	movwf	??_init_lcd
  2469  037C  30EB               	movlw	235
  2470  037D                     u4657:	
  2471  037D  0B89               	decfsz	9,f
  2472  037E  2B7D               	goto	u4657
  2473  037F  0BA2               	decfsz	??_init_lcd,f
  2474  0380  2B7D               	goto	u4657
  2475                           
  2476                           ;main.c: 102: send_nibble(0b0010);
  2477  0381  3002               	movlw	2
  2478  0382  3183  23DC         	fcall	_send_nibble
  2479  0384  0008               	return
  2480  0385                     __end_of_init_lcd:	
  2481                           
  2482                           	psect	text3
  2483  054F                     __ptext3:	
  2484 ;; *************** function _comand_lcd *****************
  2485 ;; Defined at:
  2486 ;;		line 106 in file "main.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0, pclath, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2500 ;;      Params:         0       0       0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0
  2503 ;;      Totals:         0       0       0       0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    6
  2507 ;; This function calls:
  2508 ;;		_send_command_byte
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           
  2515                           ;psect for function _comand_lcd
  2516  054F                     _comand_lcd:	
  2517                           
  2518                           ;main.c: 108: send_command_byte(0b00101000);
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _comand_lcd: [wreg+status,2+status,0+pclath+cstack]
  2522  054F  3028               	movlw	40
  2523  0550  3184  244A  3185   	fcall	_send_command_byte
  2524                           
  2525                           ;main.c: 109: send_command_byte(0b00001000);
  2526  0553  3008               	movlw	8
  2527  0554  3184  244A  3185   	fcall	_send_command_byte
  2528                           
  2529                           ;main.c: 110: send_command_byte(0b00000001);
  2530  0557  3001               	movlw	1
  2531  0558  3184  244A  3185   	fcall	_send_command_byte
  2532                           
  2533                           ;main.c: 111: send_command_byte(0b00000110);
  2534  055B  3006               	movlw	6
  2535  055C  3184  244A  3185   	fcall	_send_command_byte
  2536                           
  2537                           ;main.c: 113: send_command_byte(0x0C);
  2538  055F  300C               	movlw	12
  2539  0560  3184  244A         	fcall	_send_command_byte
  2540  0562  0008               	return
  2541  0563                     __end_of_comand_lcd:	
  2542                           
  2543                           	psect	text4
  2544  044A                     __ptext4:	
  2545 ;; *************** function _send_command_byte *****************
  2546 ;; Defined at:
  2547 ;;		line 136 in file "main.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  byte            1    wreg     unsigned char 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  byte            1    3[BANK0 ] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0, pclath, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2561 ;;      Params:         0       0       0       0       0       0       0
  2562 ;;      Locals:         0       1       0       0       0       0       0
  2563 ;;      Temps:          0       1       0       0       0       0       0
  2564 ;;      Totals:         0       2       0       0       0       0       0
  2565 ;;Total ram usage:        2 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    5
  2568 ;; This function calls:
  2569 ;;		_send_nibble
  2570 ;; This function is called by:
  2571 ;;		_comand_lcd
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _send_command_byte
  2578  044A                     _send_command_byte:	
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _send_command_byte: [wreg+status,2+status,0+pclath+cstack]
  2582                           ;send_command_byte@byte stored from wreg
  2583  044A  0020               	movlb	0	; select bank0
  2584  044B  00A3               	movwf	send_command_byte@byte
  2585                           
  2586                           ;main.c: 138: LATDbits.LATD3 = 0;
  2587  044C  0022               	movlb	2	; select bank2
  2588  044D  118F               	bcf	15,3	;volatile
  2589                           
  2590                           ;main.c: 139: send_nibble(byte >> 4);
  2591  044E  0020               	movlb	0	; select bank0
  2592  044F  0823               	movf	send_command_byte@byte,w
  2593  0450  00A2               	movwf	??_send_command_byte
  2594  0451  3004               	movlw	4
  2595  0452                     u1465:	
  2596  0452  36A2               	lsrf	??_send_command_byte,f
  2597  0453  0B89               	decfsz	9,f
  2598  0454  2C52               	goto	u1465
  2599  0455  0822               	movf	??_send_command_byte,w
  2600  0456  3183  23DC  3184   	fcall	_send_nibble
  2601                           
  2602                           ;main.c: 140: send_nibble(byte & 0x0F);
  2603  0459  0020               	movlb	0	; select bank0
  2604  045A  0823               	movf	send_command_byte@byte,w
  2605  045B  390F               	andlw	15
  2606  045C  3183  23DC  3184   	fcall	_send_nibble
  2607                           
  2608                           ;main.c: 141: _delay((unsigned long)((1)*(18432000/4000.0)));
  2609  045F  3006               	movlw	6
  2610  0460  0020               	movlb	0	; select bank0
  2611  0461  00A2               	movwf	??_send_command_byte
  2612  0462  30FB               	movlw	251
  2613  0463                     u4667:	
  2614  0463  0B89               	decfsz	9,f
  2615  0464  2C63               	goto	u4667
  2616  0465  0BA2               	decfsz	??_send_command_byte,f
  2617  0466  2C63               	goto	u4667
  2618  0467  0008               	return
  2619  0468                     __end_of_send_command_byte:	
  2620                           
  2621                           	psect	text5
  2622  03DC                     __ptext5:	
  2623 ;; *************** function _send_nibble *****************
  2624 ;; Defined at:
  2625 ;;		line 116 in file "main.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  nibble          1    wreg     unsigned char 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  nibble          1    1[BANK0 ] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2639 ;;      Params:         0       0       0       0       0       0       0
  2640 ;;      Locals:         0       1       0       0       0       0       0
  2641 ;;      Temps:          0       1       0       0       0       0       0
  2642 ;;      Totals:         0       2       0       0       0       0       0
  2643 ;;Total ram usage:        2 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    4
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_init_lcd
  2650 ;;		_send_command_byte
  2651 ;;		_send_data_byte
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _send_nibble
  2657  03DC                     _send_nibble:	
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _send_nibble: [wreg+status,2+status,0]
  2661                           ;send_nibble@nibble stored from wreg
  2662  03DC  0020               	movlb	0	; select bank0
  2663  03DD  00A1               	movwf	send_nibble@nibble
  2664                           
  2665                           ;main.c: 122: LATB = (LATB & 0xF0)+nibble;
  2666  03DE  0022               	movlb	2	; select bank2
  2667  03DF  080D               	movf	13,w	;volatile
  2668  03E0  39F0               	andlw	240
  2669  03E1  0020               	movlb	0	; select bank0
  2670  03E2  0721               	addwf	send_nibble@nibble,w
  2671  03E3  0022               	movlb	2	; select bank2
  2672  03E4  008D               	movwf	13	;volatile
  2673                           
  2674                           ;main.c: 125: _delay((unsigned long)((1)*(18432000/4000.0)));
  2675  03E5  3006               	movlw	6
  2676  03E6  0020               	movlb	0	; select bank0
  2677  03E7  00A0               	movwf	??_send_nibble
  2678  03E8  30FB               	movlw	251
  2679  03E9                     u4677:	
  2680  03E9  0B89               	decfsz	9,f
  2681  03EA  2BE9               	goto	u4677
  2682  03EB  0BA0               	decfsz	??_send_nibble,f
  2683  03EC  2BE9               	goto	u4677
  2684                           
  2685                           ;main.c: 127: LATDbits.LATD0 = 0;
  2686  03ED  0022               	movlb	2	; select bank2
  2687  03EE  100F               	bcf	15,0	;volatile
  2688                           
  2689                           ;main.c: 128: _delay((unsigned long)((1)*(18432000/4000.0)));
  2690  03EF  3006               	movlw	6
  2691  03F0  0020               	movlb	0	; select bank0
  2692  03F1  00A0               	movwf	??_send_nibble
  2693  03F2  30FB               	movlw	251
  2694  03F3                     u4687:	
  2695  03F3  0B89               	decfsz	9,f
  2696  03F4  2BF3               	goto	u4687
  2697  03F5  0BA0               	decfsz	??_send_nibble,f
  2698  03F6  2BF3               	goto	u4687
  2699                           
  2700                           ;main.c: 129: LATDbits.LATD0 = 1;
  2701  03F7  0022               	movlb	2	; select bank2
  2702  03F8  140F               	bsf	15,0	;volatile
  2703                           
  2704                           ;main.c: 131: _delay((unsigned long)((2)*(18432000/4000.0)));
  2705  03F9  300C               	movlw	12
  2706  03FA  0020               	movlb	0	; select bank0
  2707  03FB  00A0               	movwf	??_send_nibble
  2708  03FC  30F7               	movlw	247
  2709  03FD                     u4697:	
  2710  03FD  0B89               	decfsz	9,f
  2711  03FE  2BFD               	goto	u4697
  2712  03FF  0BA0               	decfsz	??_send_nibble,f
  2713  0400  2BFD               	goto	u4697
  2714  0401  0008               	return
  2715  0402                     __end_of_send_nibble:	
  2716                           
  2717                           	psect	text6
  2718  0563                     __ptext6:	
  2719 ;; *************** function _StartSignal *****************
  2720 ;; Defined at:
  2721 ;;		line 376 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2735 ;;      Params:         0       0       0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0
  2737 ;;      Temps:          0       1       0       0       0       0       0
  2738 ;;      Totals:         0       1       0       0       0       0       0
  2739 ;;Total ram usage:        1 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    4
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _StartSignal
  2751  0563                     _StartSignal:	
  2752                           
  2753                           ;main.c: 378: TRISDbits.TRISD2 = 0;
  2754                           
  2755                           ;incstack = 0
  2756                           ; Regs used in _StartSignal: [wreg]
  2757  0563  0021               	movlb	1	; select bank1
  2758  0564  110F               	bcf	15,2	;volatile
  2759                           
  2760                           ;main.c: 379: PORTDbits.RD2 = 0;
  2761  0565  0020               	movlb	0	; select bank0
  2762  0566  110F               	bcf	15,2	;volatile
  2763                           
  2764                           ;main.c: 380: _delay((unsigned long)((18)*(18432000/4000.0)));
  2765  0567  306C               	movlw	108
  2766  0568  0020               	movlb	0	; select bank0
  2767  0569  00A0               	movwf	??_StartSignal
  2768  056A  30B7               	movlw	183
  2769  056B                     u4707:	
  2770  056B  0B89               	decfsz	9,f
  2771  056C  2D6B               	goto	u4707
  2772  056D  0BA0               	decfsz	??_StartSignal,f
  2773  056E  2D6B               	goto	u4707
  2774                           
  2775                           ;main.c: 381: PORTDbits.RD2 = 1;
  2776  056F  0020               	movlb	0	; select bank0
  2777  0570  150F               	bsf	15,2	;volatile
  2778                           
  2779                           ;main.c: 382: _delay((unsigned long)((30)*(18432000/4000000.0)));
  2780  0571  302E               	movlw	46
  2781  0572                     u4717:	
  2782  0572  0B89               	decfsz	9,f
  2783  0573  2D72               	goto	u4717
  2784                           
  2785                           ;main.c: 383: TRISDbits.TRISD2 = 1;
  2786  0574  0021               	movlb	1	; select bank1
  2787  0575  150F               	bsf	15,2	;volatile
  2788  0576  0008               	return
  2789  0577                     __end_of_StartSignal:	
  2790                           
  2791                           	psect	text7
  2792  0589                     __ptext7:	
  2793 ;; *************** function _SYSTEM_Initialize *****************
  2794 ;; Defined at:
  2795 ;;		line 70 in file "mcc_generated_files/mcc.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         0       0       0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0
  2812 ;;      Totals:         0       0       0       0       0       0       0
  2813 ;;Total ram usage:        0 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    6
  2816 ;; This function calls:
  2817 ;;		_ADC_Initialize
  2818 ;;		_EUSART_Initialize
  2819 ;;		_OSCILLATOR_Initialize
  2820 ;;		_PIN_MANAGER_Initialize
  2821 ;;		_TMR1_Initialize
  2822 ;;		_WDT_Initialize
  2823 ;; This function is called by:
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           
  2829                           ;psect for function _SYSTEM_Initialize
  2830  0589                     _SYSTEM_Initialize:	
  2831                           
  2832                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2836  0589  3184  2427  3185   	fcall	_PIN_MANAGER_Initialize
  2837                           
  2838                           ;mcc.c: 74: OSCILLATOR_Initialize();
  2839  058C  3186  2614  3185   	fcall	_OSCILLATOR_Initialize
  2840                           
  2841                           ;mcc.c: 75: WDT_Initialize();
  2842  058F  3186  261E  3185   	fcall	_WDT_Initialize
  2843                           
  2844                           ;mcc.c: 76: TMR1_Initialize();
  2845  0592  3184  24F6  3185   	fcall	_TMR1_Initialize
  2846                           
  2847                           ;mcc.c: 77: ADC_Initialize();
  2848  0595  3185  25FF  3185   	fcall	_ADC_Initialize
  2849                           
  2850                           ;mcc.c: 78: EUSART_Initialize();
  2851  0598  3184  2468         	fcall	_EUSART_Initialize
  2852  059A  0008               	return
  2853  059B                     __end_of_SYSTEM_Initialize:	
  2854                           
  2855                           	psect	text8
  2856  061E                     __ptext8:	
  2857 ;; *************** function _WDT_Initialize *****************
  2858 ;; Defined at:
  2859 ;;		line 89 in file "mcc_generated_files/mcc.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       0       0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    4
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_SYSTEM_Initialize
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _WDT_Initialize
  2889  061E                     _WDT_Initialize:	
  2890                           
  2891                           ;mcc.c: 92: WDTCON = 0x16;
  2892                           
  2893                           ;incstack = 0
  2894                           ; Regs used in _WDT_Initialize: [wreg]
  2895  061E  3016               	movlw	22
  2896  061F  0021               	movlb	1	; select bank1
  2897  0620  0097               	movwf	23	;volatile
  2898  0621  0008               	return
  2899  0622                     __end_of_WDT_Initialize:	
  2900                           
  2901                           	psect	text9
  2902  04F6                     __ptext9:	
  2903 ;; *************** function _TMR1_Initialize *****************
  2904 ;; Defined at:
  2905 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, pclath, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2919 ;;      Params:         0       0       0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    5
  2926 ;; This function calls:
  2927 ;;		_TMR1_SetInterruptHandler
  2928 ;;		_TMR1_StartTimer
  2929 ;; This function is called by:
  2930 ;;		_SYSTEM_Initialize
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           
  2935                           ;psect for function _TMR1_Initialize
  2936  04F6                     _TMR1_Initialize:	
  2937                           
  2938                           ;tmr1.c: 69: T1CON = 0x00;
  2939                           
  2940                           ;incstack = 0
  2941                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2942  04F6  0020               	movlb	0	; select bank0
  2943  04F7  0198               	clrf	24	;volatile
  2944                           
  2945                           ;tmr1.c: 72: T1GCON = 0x00;
  2946  04F8  0199               	clrf	25	;volatile
  2947                           
  2948                           ;tmr1.c: 75: TMR1H = 0xEE;
  2949  04F9  30EE               	movlw	238
  2950  04FA  0097               	movwf	23	;volatile
  2951                           
  2952                           ;tmr1.c: 78: TMR1L = 0x00;
  2953  04FB  0196               	clrf	22	;volatile
  2954                           
  2955                           ;tmr1.c: 81: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  2956  04FC  0817               	movf	23,w	;volatile
  2957  04FD  00EC               	movwf	_timer1ReloadVal+1	;volatile
  2958  04FE  0816               	movf	22,w	;volatile
  2959  04FF  00EB               	movwf	_timer1ReloadVal	;volatile
  2960                           
  2961                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
  2962  0500  1011               	bcf	17,0	;volatile
  2963                           
  2964                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
  2965  0501  0021               	movlb	1	; select bank1
  2966  0502  1411               	bsf	17,0	;volatile
  2967                           
  2968                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  2969  0503  3030               	movlw	low _TMR1_DefaultInterruptHandler
  2970  0504  0020               	movlb	0	; select bank0
  2971  0505  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  2972  0506  3006               	movlw	high _TMR1_DefaultInterruptHandler
  2973  0507  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  2974  0508  3185  25F6  3184   	fcall	_TMR1_SetInterruptHandler
  2975                           
  2976                           ;tmr1.c: 93: TMR1_StartTimer();
  2977  050B  3186  2625         	fcall	_TMR1_StartTimer
  2978  050D  0008               	return
  2979  050E                     __end_of_TMR1_Initialize:	
  2980                           
  2981                           	psect	text10
  2982  0625                     __ptext10:	
  2983 ;; *************** function _TMR1_StartTimer *****************
  2984 ;; Defined at:
  2985 ;;		line 96 in file "mcc_generated_files/tmr1.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;		None
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		None
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2999 ;;      Params:         0       0       0       0       0       0       0
  3000 ;;      Locals:         0       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0
  3002 ;;      Totals:         0       0       0       0       0       0       0
  3003 ;;Total ram usage:        0 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    4
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_TMR1_Initialize
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           
  3014                           ;psect for function _TMR1_StartTimer
  3015  0625                     _TMR1_StartTimer:	
  3016                           
  3017                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
  3018                           
  3019                           ;incstack = 0
  3020                           ; Regs used in _TMR1_StartTimer: []
  3021  0625  0020               	movlb	0	; select bank0
  3022  0626  1418               	bsf	24,0	;volatile
  3023  0627  0008               	return
  3024  0628                     __end_of_TMR1_StartTimer:	
  3025                           
  3026                           	psect	text11
  3027  05F6                     __ptext11:	
  3028 ;; *************** function _TMR1_SetInterruptHandler *****************
  3029 ;; Defined at:
  3030 ;;		line 217 in file "mcc_generated_files/tmr1.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3033 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3045 ;;      Params:         0       2       0       0       0       0       0
  3046 ;;      Locals:         0       0       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0
  3048 ;;      Totals:         0       2       0       0       0       0       0
  3049 ;;Total ram usage:        2 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    4
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_TMR1_Initialize
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           
  3060                           ;psect for function _TMR1_SetInterruptHandler
  3061  05F6                     _TMR1_SetInterruptHandler:	
  3062                           
  3063                           ;tmr1.c: 218: TMR1_InterruptHandler = InterruptHandler;
  3064                           
  3065                           ;incstack = 0
  3066                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  3067  05F6  0020               	movlb	0	; select bank0
  3068  05F7  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  3069  05F8  0021               	movlb	1	; select bank1
  3070  05F9  00D2               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  3071  05FA  0020               	movlb	0	; select bank0
  3072  05FB  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  3073  05FC  0021               	movlb	1	; select bank1
  3074  05FD  00D1               	movwf	_TMR1_InterruptHandler^(0+128)
  3075  05FE  0008               	return
  3076  05FF                     __end_of_TMR1_SetInterruptHandler:	
  3077                           
  3078                           	psect	text12
  3079  0427                     __ptext12:	
  3080 ;; *************** function _PIN_MANAGER_Initialize *****************
  3081 ;; Defined at:
  3082 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3096 ;;      Params:         0       0       0       0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0
  3098 ;;      Temps:          0       0       0       0       0       0       0
  3099 ;;      Totals:         0       0       0       0       0       0       0
  3100 ;;Total ram usage:        0 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    4
  3103 ;; This function calls:
  3104 ;;		Nothing
  3105 ;; This function is called by:
  3106 ;;		_SYSTEM_Initialize
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _PIN_MANAGER_Initialize
  3112  0427                     _PIN_MANAGER_Initialize:	
  3113                           
  3114                           ;pin_manager.c: 57: LATE = 0x00;
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3118  0427  0022               	movlb	2	; select bank2
  3119  0428  0190               	clrf	16	;volatile
  3120                           
  3121                           ;pin_manager.c: 58: LATD = 0x00;
  3122  0429  018F               	clrf	15	;volatile
  3123                           
  3124                           ;pin_manager.c: 59: LATA = 0x00;
  3125  042A  018C               	clrf	12	;volatile
  3126                           
  3127                           ;pin_manager.c: 60: LATB = 0x00;
  3128  042B  018D               	clrf	13	;volatile
  3129                           
  3130                           ;pin_manager.c: 61: LATC = 0x00;
  3131  042C  018E               	clrf	14	;volatile
  3132                           
  3133                           ;pin_manager.c: 66: TRISE = 0x0F;
  3134  042D  300F               	movlw	15
  3135  042E  0021               	movlb	1	; select bank1
  3136  042F  0090               	movwf	16	;volatile
  3137                           
  3138                           ;pin_manager.c: 67: TRISA = 0xFF;
  3139  0430  30FF               	movlw	255
  3140  0431  008C               	movwf	12	;volatile
  3141                           
  3142                           ;pin_manager.c: 68: TRISB = 0x00;
  3143  0432  018D               	clrf	13	;volatile
  3144                           
  3145                           ;pin_manager.c: 69: TRISC = 0xBF;
  3146  0433  30BF               	movlw	191
  3147  0434  008E               	movwf	14	;volatile
  3148                           
  3149                           ;pin_manager.c: 70: TRISD = 0xFF;
  3150  0435  30FF               	movlw	255
  3151  0436  008F               	movwf	15	;volatile
  3152                           
  3153                           ;pin_manager.c: 75: ANSELB = 0x0F;
  3154  0437  300F               	movlw	15
  3155  0438  0023               	movlb	3	; select bank3
  3156  0439  008D               	movwf	13	;volatile
  3157                           
  3158                           ;pin_manager.c: 76: ANSELD = 0xFF;
  3159  043A  30FF               	movlw	255
  3160  043B  008F               	movwf	15	;volatile
  3161                           
  3162                           ;pin_manager.c: 77: ANSELE = 0x07;
  3163  043C  3007               	movlw	7
  3164  043D  0090               	movwf	16	;volatile
  3165                           
  3166                           ;pin_manager.c: 78: ANSELA = 0x3F;
  3167  043E  303F               	movlw	63
  3168  043F  008C               	movwf	12	;volatile
  3169                           
  3170                           ;pin_manager.c: 83: WPUE = 0x08;
  3171  0440  3008               	movlw	8
  3172  0441  0024               	movlb	4	; select bank4
  3173  0442  0090               	movwf	16	;volatile
  3174                           
  3175                           ;pin_manager.c: 84: WPUB = 0xFF;
  3176  0443  30FF               	movlw	255
  3177  0444  008D               	movwf	13	;volatile
  3178                           
  3179                           ;pin_manager.c: 85: OPTION_REGbits.nWPUEN = 0;
  3180  0445  0021               	movlb	1	; select bank1
  3181  0446  1395               	bcf	21,7	;volatile
  3182                           
  3183                           ;pin_manager.c: 91: APFCON = 0x00;
  3184  0447  0022               	movlb	2	; select bank2
  3185  0448  019D               	clrf	29	;volatile
  3186  0449  0008               	return
  3187  044A                     __end_of_PIN_MANAGER_Initialize:	
  3188                           
  3189                           	psect	text13
  3190  0614                     __ptext13:	
  3191 ;; *************** function _OSCILLATOR_Initialize *****************
  3192 ;; Defined at:
  3193 ;;		line 81 in file "mcc_generated_files/mcc.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3207 ;;      Params:         0       0       0       0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0       0       0
  3210 ;;      Totals:         0       0       0       0       0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    4
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_SYSTEM_Initialize
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _OSCILLATOR_Initialize
  3223  0614                     _OSCILLATOR_Initialize:	
  3224                           
  3225                           ;mcc.c: 84: OSCCON = 0x38;
  3226                           
  3227                           ;incstack = 0
  3228                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3229  0614  3038               	movlw	56
  3230  0615  0021               	movlb	1	; select bank1
  3231  0616  0099               	movwf	25	;volatile
  3232                           
  3233                           ;mcc.c: 86: OSCTUNE = 0x00;
  3234  0617  0198               	clrf	24	;volatile
  3235  0618  0008               	return
  3236  0619                     __end_of_OSCILLATOR_Initialize:	
  3237                           
  3238                           	psect	text14
  3239  0468                     __ptext14:	
  3240 ;; *************** function _EUSART_Initialize *****************
  3241 ;; Defined at:
  3242 ;;		line 76 in file "mcc_generated_files/eusart.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3256 ;;      Params:         0       0       0       0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0
  3258 ;;      Temps:          0       1       0       0       0       0       0
  3259 ;;      Totals:         0       1       0       0       0       0       0
  3260 ;;Total ram usage:        1 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    4
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_SYSTEM_Initialize
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _EUSART_Initialize
  3272  0468                     _EUSART_Initialize:	
  3273                           
  3274                           ;eusart.c: 79: PIE1bits.RCIE = 0;
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  3278  0468  0021               	movlb	1	; select bank1
  3279  0469  1291               	bcf	17,5	;volatile
  3280                           
  3281                           ;eusart.c: 80: PIE1bits.TXIE = 0;
  3282  046A  1211               	bcf	17,4	;volatile
  3283                           
  3284                           ;eusart.c: 85: BAUDCON = 0x08;
  3285  046B  3008               	movlw	8
  3286  046C  0023               	movlb	3	; select bank3
  3287  046D  009F               	movwf	31	;volatile
  3288                           
  3289                           ;eusart.c: 88: RCSTA = 0x90;
  3290  046E  3090               	movlw	144
  3291  046F  009D               	movwf	29	;volatile
  3292                           
  3293                           ;eusart.c: 91: TXSTA = 0x24;
  3294  0470  3024               	movlw	36
  3295  0471  009E               	movwf	30	;volatile
  3296                           
  3297                           ;eusart.c: 94: SPBRGL = 0xDF;
  3298  0472  30DF               	movlw	223
  3299  0473  009B               	movwf	27	;volatile
  3300                           
  3301                           ;eusart.c: 97: SPBRGH = 0x01;
  3302  0474  3001               	movlw	1
  3303  0475  009C               	movwf	28	;volatile
  3304                           
  3305                           ;eusart.c: 101: eusartTxHead = 0;
  3306  0476  01FD               	clrf	_eusartTxHead	;volatile
  3307                           
  3308                           ;eusart.c: 102: eusartTxTail = 0;
  3309  0477  01FC               	clrf	_eusartTxTail	;volatile
  3310                           
  3311                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  3312  0478  3008               	movlw	8
  3313  0479  0020               	movlb	0	; select bank0
  3314  047A  00A0               	movwf	??_EUSART_Initialize
  3315  047B  0820               	movf	??_EUSART_Initialize,w
  3316  047C  0021               	movlb	1	; select bank1
  3317  047D  00D3               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  3318                           
  3319                           ;eusart.c: 105: eusartRxHead = 0;
  3320  047E  0020               	movlb	0	; select bank0
  3321  047F  01E9               	clrf	_eusartRxHead	;volatile
  3322                           
  3323                           ;eusart.c: 106: eusartRxTail = 0;
  3324  0480  01E8               	clrf	_eusartRxTail	;volatile
  3325                           
  3326                           ;eusart.c: 107: eusartRxCount = 0;
  3327  0481  01E7               	clrf	_eusartRxCount	;volatile
  3328                           
  3329                           ;eusart.c: 110: PIE1bits.RCIE = 1;
  3330  0482  0021               	movlb	1	; select bank1
  3331  0483  1691               	bsf	17,5	;volatile
  3332  0484  0008               	return
  3333  0485                     __end_of_EUSART_Initialize:	
  3334                           
  3335                           	psect	text15
  3336  05FF                     __ptext15:	
  3337 ;; *************** function _ADC_Initialize *****************
  3338 ;; Defined at:
  3339 ;;		line 64 in file "mcc_generated_files/adc.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3353 ;;      Params:         0       0       0       0       0       0       0
  3354 ;;      Locals:         0       0       0       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0
  3356 ;;      Totals:         0       0       0       0       0       0       0
  3357 ;;Total ram usage:        0 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    4
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_SYSTEM_Initialize
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _ADC_Initialize
  3369  05FF                     _ADC_Initialize:	
  3370                           
  3371                           ;adc.c: 69: ADCON0 = 0x01;
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  3375  05FF  3001               	movlw	1
  3376  0600  0021               	movlb	1	; select bank1
  3377  0601  009D               	movwf	29	;volatile
  3378                           
  3379                           ;adc.c: 72: ADCON1 = 0x60;
  3380  0602  3060               	movlw	96
  3381  0603  009E               	movwf	30	;volatile
  3382                           
  3383                           ;adc.c: 75: ADRESL = 0x00;
  3384  0604  019B               	clrf	27	;volatile
  3385                           
  3386                           ;adc.c: 78: ADRESH = 0x00;
  3387  0605  019C               	clrf	28	;volatile
  3388                           
  3389                           ;adc.c: 81: PIE1bits.ADIE = 1;
  3390  0606  1711               	bsf	17,6	;volatile
  3391  0607  0008               	return
  3392  0608                     __end_of_ADC_Initialize:	
  3393                           
  3394                           	psect	text16
  3395  018F                     __ptext16:	
  3396 ;; *************** function _DHT_result *****************
  3397 ;; Defined at:
  3398 ;;		line 409 in file "main.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3412 ;;      Params:         0       0       0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0       0
  3414 ;;      Temps:          0      14       0       0       0       0       0
  3415 ;;      Totals:         0      14       0       0       0       0       0
  3416 ;;Total ram usage:       14 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    8
  3419 ;; This function calls:
  3420 ;;		_ReadData
  3421 ;;		_sprintf
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _DHT_result
  3429  018F                     _DHT_result:	
  3430                           
  3431                           ;main.c: 412: RH_byte1 = ReadData();
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _DHT_result: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3435  018F  3182  22E4  3181   	fcall	_ReadData
  3436  0192  0020               	movlb	0	; select bank0
  3437  0193  00C5               	movwf	??_DHT_result
  3438  0194  0845               	movf	??_DHT_result,w
  3439  0195  00E2               	movwf	_RH_byte1
  3440                           
  3441                           ;main.c: 413: RH_byte2 = ReadData();
  3442  0196  3182  22E4  3181   	fcall	_ReadData
  3443  0199  0020               	movlb	0	; select bank0
  3444  019A  00C5               	movwf	??_DHT_result
  3445  019B  0845               	movf	??_DHT_result,w
  3446  019C  00E1               	movwf	_RH_byte2
  3447                           
  3448                           ;main.c: 414: T_byte1 = ReadData();
  3449  019D  3182  22E4  3181   	fcall	_ReadData
  3450  01A0  0020               	movlb	0	; select bank0
  3451  01A1  00C5               	movwf	??_DHT_result
  3452  01A2  0845               	movf	??_DHT_result,w
  3453  01A3  00E4               	movwf	_T_byte1
  3454                           
  3455                           ;main.c: 415: T_byte2 = ReadData();
  3456  01A4  3182  22E4  3181   	fcall	_ReadData
  3457  01A7  0020               	movlb	0	; select bank0
  3458  01A8  00C5               	movwf	??_DHT_result
  3459  01A9  0845               	movf	??_DHT_result,w
  3460  01AA  00E3               	movwf	_T_byte2
  3461                           
  3462                           ;main.c: 416: Sum = ReadData();
  3463  01AB  3182  22E4  3181   	fcall	_ReadData
  3464  01AE  0020               	movlb	0	; select bank0
  3465  01AF  00C5               	movwf	??_DHT_result
  3466  01B0  0845               	movf	??_DHT_result,w
  3467  01B1  00DE               	movwf	_Sum
  3468                           
  3469                           ;main.c: 418: if(Sum == ((RH_byte1+RH_byte2+T_byte1+T_byte2) & 0XFF))
  3470  01B2  0863               	movf	_T_byte2,w
  3471  01B3  00C5               	movwf	??_DHT_result
  3472  01B4  01C6               	clrf	??_DHT_result+1
  3473  01B5  0864               	movf	_T_byte1,w
  3474  01B6  00C7               	movwf	??_DHT_result+2
  3475  01B7  01C8               	clrf	??_DHT_result+3
  3476  01B8  0862               	movf	_RH_byte1,w
  3477  01B9  0761               	addwf	_RH_byte2,w
  3478  01BA  00C9               	movwf	??_DHT_result+4
  3479  01BB  01CA               	clrf	??_DHT_result+5
  3480  01BC  0DCA               	rlf	??_DHT_result+5,f
  3481  01BD  0847               	movf	??_DHT_result+2,w
  3482  01BE  0749               	addwf	??_DHT_result+4,w
  3483  01BF  00CB               	movwf	??_DHT_result+6
  3484  01C0  0848               	movf	??_DHT_result+3,w
  3485  01C1  3D4A               	addwfc	??_DHT_result+5,w
  3486  01C2  00CC               	movwf	??_DHT_result+7
  3487  01C3  0845               	movf	??_DHT_result,w
  3488  01C4  074B               	addwf	??_DHT_result+6,w
  3489  01C5  00CD               	movwf	??_DHT_result+8
  3490  01C6  0846               	movf	??_DHT_result+1,w
  3491  01C7  3D4C               	addwfc	??_DHT_result+7,w
  3492  01C8  00CE               	movwf	??_DHT_result+9
  3493  01C9  30FF               	movlw	255
  3494  01CA  054D               	andwf	??_DHT_result+8,w
  3495  01CB  00CF               	movwf	??_DHT_result+10
  3496  01CC  3000               	movlw	0
  3497  01CD  054E               	andwf	??_DHT_result+9,w
  3498  01CE  00D0               	movwf	??_DHT_result+11
  3499  01CF  085E               	movf	_Sum,w
  3500  01D0  00D1               	movwf	??_DHT_result+12
  3501  01D1  01D2               	clrf	??_DHT_result+13
  3502  01D2  0850               	movf	??_DHT_result+11,w
  3503  01D3  0652               	xorwf	??_DHT_result+13,w
  3504  01D4  1D03               	skipz
  3505  01D5  29D8               	goto	u4355
  3506  01D6  084F               	movf	??_DHT_result+10,w
  3507  01D7  0651               	xorwf	??_DHT_result+12,w
  3508  01D8                     u4355:	
  3509  01D8  1D03               	skipz
  3510  01D9  29E3               	goto	l3952
  3511                           
  3512                           ;main.c: 419: {
  3513                           ;main.c: 420: Temp = T_byte1;
  3514  01DA  0864               	movf	_T_byte1,w
  3515  01DB  00C5               	movwf	??_DHT_result
  3516  01DC  0845               	movf	??_DHT_result,w
  3517  01DD  00DF               	movwf	_Temp
  3518                           
  3519                           ;main.c: 421: RH = RH_byte1;
  3520  01DE  0862               	movf	_RH_byte1,w
  3521  01DF  00C5               	movwf	??_DHT_result
  3522  01E0  0845               	movf	??_DHT_result,w
  3523  01E1  0021               	movlb	1	; select bank1
  3524  01E2  00D0               	movwf	_RH^(0+128)
  3525  01E3                     l3952:	
  3526                           
  3527                           ;main.c: 422: }
  3528                           ;main.c: 423: sprintf(line2," Umid=%d        ",RH_byte1);
  3529  01E3  309B               	movlw	low (STR_9| (0+32768))
  3530  01E4  0020               	movlb	0	; select bank0
  3531  01E5  00BB               	movwf	sprintf@f
  3532  01E6  3085               	movlw	high (STR_9| (0+32768))
  3533  01E7  00BC               	movwf	sprintf@f+1
  3534  01E8  0862               	movf	_RH_byte1,w
  3535  01E9  00C5               	movwf	??_DHT_result
  3536  01EA  01C6               	clrf	??_DHT_result+1
  3537  01EB  0845               	movf	??_DHT_result,w
  3538  01EC  00BD               	movwf	?_sprintf+2
  3539  01ED  0846               	movf	??_DHT_result+1,w
  3540  01EE  00BE               	movwf	?_sprintf+3
  3541  01EF  306A               	movlw	(low (_line2| 0))& (0+255)
  3542  01F0  3184  2485         	fcall	_sprintf
  3543  01F2  0008               	return
  3544  01F3                     __end_of_DHT_result:	
  3545                           
  3546                           	psect	text17
  3547  0485                     __ptext17:	
  3548 ;; *************** function _sprintf *****************
  3549 ;; Defined at:
  3550 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\sprintf.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;  wh              1    wreg     PTR unsigned char 
  3553 ;;		 -> line2(1), 
  3554 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3555 ;;		 -> STR_9(17), 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  wh              1   32[BANK0 ] PTR unsigned char 
  3558 ;;		 -> line2(1), 
  3559 ;;  pb              3   34[BANK0 ] struct __prbuf
  3560 ;;  ap              1   33[BANK0 ] PTR void [1]
  3561 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  2   27[BANK0 ] int 
  3564 ;; Registers used:
  3565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3571 ;;      Params:         0       4       0       0       0       0       0
  3572 ;;      Locals:         0       5       0       0       0       0       0
  3573 ;;      Temps:          0       1       0       0       0       0       0
  3574 ;;      Totals:         0      10       0       0       0       0       0
  3575 ;;Total ram usage:       10 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    7
  3578 ;; This function calls:
  3579 ;;		__doprnt
  3580 ;; This function is called by:
  3581 ;;		_DHT_result
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           
  3586                           ;psect for function _sprintf
  3587  0485                     _sprintf:	
  3588                           
  3589                           ;incstack = 0
  3590                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3591                           ;sprintf@wh stored from wreg
  3592  0485  0020               	movlb	0	; select bank0
  3593  0486  00C0               	movwf	sprintf@wh
  3594  0487  0840               	movf	sprintf@wh,w
  3595  0488  00BF               	movwf	??_sprintf
  3596  0489  083F               	movf	??_sprintf,w
  3597  048A  00C2               	movwf	sprintf@pb
  3598  048B  01C3               	clrf	low ((sprintf@pb| 0+1))
  3599  048C  01C4               	clrf	(low ((sprintf@pb| 0+1))+1)
  3600  048D  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  3601  048E  00BF               	movwf	??_sprintf
  3602  048F  083F               	movf	??_sprintf,w
  3603  0490  00C1               	movwf	sprintf@ap
  3604  0491  083C               	movf	sprintf@f+1,w
  3605  0492  00AF               	movwf	__doprnt@f+1
  3606  0493  083B               	movf	sprintf@f,w
  3607  0494  00AE               	movwf	__doprnt@f
  3608  0495  3041               	movlw	(low (sprintf@ap| 0))& (0+255)
  3609  0496  00BF               	movwf	??_sprintf
  3610  0497  083F               	movf	??_sprintf,w
  3611  0498  00B0               	movwf	__doprnt@ap
  3612  0499  3042               	movlw	(low (sprintf@pb| 0))& (0+255)
  3613  049A  3180  2072         	fcall	__doprnt
  3614  049C  0020               	movlb	0	; select bank0
  3615  049D  0842               	movf	sprintf@pb,w
  3616  049E  0086               	movwf	6
  3617  049F  0187               	clrf	7
  3618  04A0  0181               	clrf	1
  3619  04A1  0008               	return
  3620  04A2                     __end_of_sprintf:	
  3621                           ;	Return value of _sprintf is never used
  3622                           
  3623                           
  3624                           	psect	text18
  3625  0072                     __ptext18:	
  3626 ;; *************** function __doprnt *****************
  3627 ;; Defined at:
  3628 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  pb              1    wreg     PTR struct __prbuf
  3631 ;;		 -> sprintf@pb(3), printf@pb(3), 
  3632 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  3633 ;;		 -> STR_9(17), STR_8(14), STR_7(18), STR_6(10), 
  3634 ;;		 -> STR_5(15), STR_4(3), STR_3(12), STR_2(21), 
  3635 ;;		 -> STR_1(14), 
  3636 ;;  ap              1   16[BANK0 ] PTR PTR void 
  3637 ;;		 -> sprintf@ap(1), printf@ap(1), 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  pb              1   26[BANK0 ] PTR struct __prbuf
  3640 ;;		 -> sprintf@pb(3), printf@pb(3), 
  3641 ;;  tmpval          4    0        struct .
  3642 ;;  val             2   23[BANK0 ] unsigned int 
  3643 ;;  cp              2    0        PTR const unsigned char 
  3644 ;;  len             2    0        unsigned int 
  3645 ;;  c               1   25[BANK0 ] char 
  3646 ;;  prec            1   22[BANK0 ] char 
  3647 ;;  flag            1   21[BANK0 ] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  2   14[BANK0 ] int 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3657 ;;      Params:         0       3       0       0       0       0       0
  3658 ;;      Locals:         0       6       0       0       0       0       0
  3659 ;;      Temps:          0       4       0       0       0       0       0
  3660 ;;      Totals:         0      13       0       0       0       0       0
  3661 ;;Total ram usage:       13 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    6
  3664 ;; This function calls:
  3665 ;;		Absolute function
  3666 ;;		___lwdiv
  3667 ;;		___lwmod
  3668 ;;		_putch
  3669 ;; This function is called by:
  3670 ;;		_sprintf
  3671 ;;		_printf
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function __doprnt
  3677  0072                     __doprnt:	
  3678                           
  3679                           ;incstack = 0
  3680                           ; Regs used in __doprnt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3681                           ;__doprnt@pb stored from wreg
  3682  0072  0020               	movlb	0	; select bank0
  3683  0073  00BA               	movwf	__doprnt@pb
  3684  0074                     l3884:	
  3685                           ;doprnt.c: 499: signed char c;
  3686                           ;doprnt.c: 506: signed char prec;
  3687                           ;doprnt.c: 508: unsigned char flag;
  3688                           ;doprnt.c: 523: union {
  3689                           ;doprnt.c: 524: unsigned long vd;
  3690                           ;doprnt.c: 525: double integ;
  3691                           ;doprnt.c: 526: } tmpval;
  3692                           ;doprnt.c: 528: unsigned int val;
  3693                           ;doprnt.c: 529: unsigned len;
  3694                           ;doprnt.c: 530: const char * cp;
  3695                           ;doprnt.c: 536: while(c = *f++) {
  3696                           
  3697  0074  0020               	movlb	0	; select bank0
  3698  0075  082F               	movf	__doprnt@f+1,w
  3699  0076  00B2               	movwf	??__doprnt+1
  3700  0077  082E               	movf	__doprnt@f,w
  3701  0078  00B1               	movwf	??__doprnt
  3702  0079  0AAE               	incf	__doprnt@f,f
  3703  007A  1903               	skipnz
  3704  007B  0AAF               	incf	__doprnt@f+1,f
  3705  007C  0831               	movf	??__doprnt,w
  3706  007D  0084               	movwf	4
  3707  007E  0832               	movf	??__doprnt+1,w
  3708  007F  0085               	movwf	5
  3709  0080  0800               	movf	0,w	;code access
  3710  0081  00B3               	movwf	??__doprnt+2
  3711  0082  0833               	movf	??__doprnt+2,w
  3712  0083  00B9               	movwf	__doprnt@c
  3713  0084  0839               	movf	__doprnt@c,w
  3714  0085  1903               	btfsc	3,2
  3715  0086  298C               	goto	l3886
  3716                           
  3717                           ;doprnt.c: 538: if(c != '%')
  3718  0087  3025               	movlw	37
  3719  0088  0639               	xorwf	__doprnt@c,w
  3720  0089  1903               	btfsc	3,2
  3721  008A  28B2               	goto	l3834
  3722                           
  3723                           ;doprnt.c: 540: {
  3724                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3725  008B  0A3A               	incf	__doprnt@pb,w
  3726  008C  0086               	movwf	6
  3727  008D  0187               	clrf	7
  3728  008E  0016               	moviw fsr1++
  3729  008F  0401               	iorwf	1,w
  3730  0090  1903               	btfsc	3,2
  3731  0091  289F               	goto	l3830
  3732  0092  0839               	movf	__doprnt@c,w
  3733  0093  00B1               	movwf	??__doprnt
  3734  0094  0831               	movf	??__doprnt,w
  3735  0095  00A2               	movwf	putch@txData
  3736  0096  0A3A               	incf	__doprnt@pb,w
  3737  0097  0086               	movwf	6
  3738  0098  0187               	clrf	7
  3739  0099  3F41               	moviw [1]fsr1
  3740  009A  008A               	movwf	10
  3741  009B  3F40               	moviw [0]fsr1
  3742  009C  000A               	callw
  3743  009D  3180               	pagesel	$
  3744  009E  2874               	goto	l3884
  3745  009F                     l3830:	
  3746  009F  0020               	movlb	0	; select bank0
  3747  00A0  0839               	movf	__doprnt@c,w
  3748  00A1  00B1               	movwf	??__doprnt
  3749  00A2  083A               	movf	__doprnt@pb,w
  3750  00A3  0086               	movwf	6
  3751  00A4  0187               	clrf	7
  3752  00A5  0801               	movf	1,w
  3753  00A6  0086               	movwf	6
  3754  00A7  0187               	clrf	7
  3755  00A8  0831               	movf	??__doprnt,w
  3756  00A9  0081               	movwf	1
  3757  00AA  3001               	movlw	1
  3758  00AB  00B1               	movwf	??__doprnt
  3759  00AC  083A               	movf	__doprnt@pb,w
  3760  00AD  0086               	movwf	6
  3761  00AE  0187               	clrf	7
  3762  00AF  0831               	movf	??__doprnt,w
  3763  00B0  0781               	addwf	1,f
  3764                           
  3765                           ;doprnt.c: 542: continue;
  3766  00B1  2874               	goto	l3884
  3767  00B2                     l3834:	
  3768                           
  3769                           ;doprnt.c: 543: }
  3770                           ;doprnt.c: 548: flag = 0;
  3771  00B2  01B5               	clrf	__doprnt@flag
  3772                           
  3773                           ;doprnt.c: 822: }
  3774                           
  3775                           ;doprnt.c: 813: continue;
  3776                           
  3777                           ;doprnt.c: 802: default:
  3778                           
  3779                           ;doprnt.c: 698: case 'i':
  3780                           ;doprnt.c: 699: break;
  3781                           
  3782                           ;doprnt.c: 697: case 'd':
  3783                           
  3784                           ;doprnt.c: 638: goto alldone;
  3785                           
  3786                           ;doprnt.c: 637: case 0:
  3787                           
  3788                           ;doprnt.c: 635: switch(c = *f++) {
  3789  00B3  082F               	movf	__doprnt@f+1,w
  3790  00B4  00B2               	movwf	??__doprnt+1
  3791  00B5  082E               	movf	__doprnt@f,w
  3792  00B6  00B1               	movwf	??__doprnt
  3793  00B7  0AAE               	incf	__doprnt@f,f
  3794  00B8  1903               	skipnz
  3795  00B9  0AAF               	incf	__doprnt@f+1,f
  3796  00BA  0831               	movf	??__doprnt,w
  3797  00BB  0084               	movwf	4
  3798  00BC  0832               	movf	??__doprnt+1,w
  3799  00BD  0085               	movwf	5
  3800  00BE  0800               	movf	0,w	;code access
  3801  00BF  00B9               	movwf	__doprnt@c
  3802                           
  3803                           ; Switch size 1, requested type "space"
  3804                           ; Number of cases is 3, Range of values is 0 to 105
  3805                           ; switch strategies available:
  3806                           ; Name         Instructions Cycles
  3807                           ; simple_byte           10     6 (average)
  3808                           ; direct_byte          218     6 (fixed)
  3809                           ; jumptable            260     6 (fixed)
  3810                           ;	Chosen strategy is simple_byte
  3811  00C0  3A00               	xorlw	0	; case 0
  3812  00C1  1903               	skipnz
  3813  00C2  298C               	goto	l3886
  3814  00C3  3A64               	xorlw	100	; case 100
  3815  00C4  1903               	skipnz
  3816  00C5  28CA               	goto	l3840
  3817  00C6  3A0D               	xorlw	13	; case 105
  3818  00C7  1903               	skipnz
  3819  00C8  28CA               	goto	l3840
  3820  00C9  2874               	goto	l3884
  3821  00CA                     l3840:	
  3822                           
  3823                           ;doprnt.c: 1253: {
  3824                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3825  00CA  0830               	movf	__doprnt@ap,w
  3826  00CB  0086               	movwf	6
  3827  00CC  0187               	clrf	7
  3828  00CD  0801               	movf	1,w
  3829  00CE  0084               	movwf	4
  3830  00CF  0185               	clrf	5
  3831  00D0  3002               	movlw	2
  3832  00D1  0781               	addwf	1,f
  3833  00D2  3F00               	moviw [0]fsr0
  3834  00D3  00B7               	movwf	__doprnt@val
  3835  00D4  3F01               	moviw [1]fsr0
  3836  00D5  00B8               	movwf	__doprnt@val+1
  3837                           
  3838                           ;doprnt.c: 1261: if((int)val < 0) {
  3839  00D6  1FB8               	btfss	__doprnt@val+1,7
  3840  00D7  28E1               	goto	l3848
  3841                           
  3842                           ;doprnt.c: 1262: flag |= 0x03;
  3843  00D8  3003               	movlw	3
  3844  00D9  00B1               	movwf	??__doprnt
  3845  00DA  0831               	movf	??__doprnt,w
  3846  00DB  04B5               	iorwf	__doprnt@flag,f
  3847                           
  3848                           ;doprnt.c: 1263: val = -val;
  3849  00DC  09B7               	comf	__doprnt@val,f
  3850  00DD  09B8               	comf	__doprnt@val+1,f
  3851  00DE  0AB7               	incf	__doprnt@val,f
  3852  00DF  1903               	skipnz
  3853  00E0  0AB8               	incf	__doprnt@val+1,f
  3854  00E1                     l3848:	
  3855                           
  3856                           ;doprnt.c: 1264: }
  3857                           ;doprnt.c: 1266: }
  3858                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3859  00E1  01B9               	clrf	__doprnt@c
  3860  00E2  0AB9               	incf	__doprnt@c,f
  3861  00E3  3005               	movlw	5
  3862  00E4  0639               	xorwf	__doprnt@c,w
  3863  00E5  1903               	btfsc	3,2
  3864  00E6  2906               	goto	l3860
  3865  00E7                     l3854:	
  3866                           
  3867                           ;doprnt.c: 1306: if(val < dpowers[c])
  3868  00E7  0839               	movf	__doprnt@c,w
  3869  00E8  00B1               	movwf	??__doprnt
  3870  00E9  01B2               	clrf	??__doprnt+1
  3871  00EA  35B1               	lslf	??__doprnt,f
  3872  00EB  0DB2               	rlf	??__doprnt+1,f
  3873  00EC  30E2               	movlw	low (_dpowers| (0+32768))
  3874  00ED  0731               	addwf	??__doprnt,w
  3875  00EE  0084               	movwf	4
  3876  00EF  3085               	movlw	high (_dpowers| (0+32768))
  3877  00F0  3D32               	addwfc	??__doprnt+1,w
  3878  00F1  0085               	movwf	5
  3879  00F2  3F00               	moviw [0]fsr0
  3880  00F3  00B3               	movwf	??__doprnt+2
  3881  00F4  3F01               	moviw [1]fsr0
  3882  00F5  00B4               	movwf	??__doprnt+3
  3883  00F6  0834               	movf	??__doprnt+3,w
  3884  00F7  0238               	subwf	__doprnt@val+1,w
  3885  00F8  1D03               	skipz
  3886  00F9  28FC               	goto	u4225
  3887  00FA  0833               	movf	??__doprnt+2,w
  3888  00FB  0237               	subwf	__doprnt@val,w
  3889  00FC                     u4225:	
  3890  00FC  1C03               	btfss	3,0
  3891  00FD  2906               	goto	l3860
  3892                           
  3893                           ;doprnt.c: 1307: break;
  3894  00FE  3001               	movlw	1
  3895  00FF  00B1               	movwf	??__doprnt
  3896  0100  0831               	movf	??__doprnt,w
  3897  0101  07B9               	addwf	__doprnt@c,f
  3898  0102  3005               	movlw	5
  3899  0103  0639               	xorwf	__doprnt@c,w
  3900  0104  1D03               	btfss	3,2
  3901  0105  28E7               	goto	l3854
  3902  0106                     l3860:	
  3903                           
  3904                           ;doprnt.c: 1422: {
  3905                           ;doprnt.c: 1438: if(flag & 0x03)
  3906  0106  0835               	movf	__doprnt@flag,w
  3907  0107  3903               	andlw	3
  3908  0108  1903               	btfsc	3,2
  3909  0109  2930               	goto	l3870
  3910                           
  3911                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3912  010A  0A3A               	incf	__doprnt@pb,w
  3913  010B  0086               	movwf	6
  3914  010C  0187               	clrf	7
  3915  010D  0016               	moviw fsr1++
  3916  010E  0401               	iorwf	1,w
  3917  010F  1903               	btfsc	3,2
  3918  0110  291E               	goto	l3866
  3919  0111  302D               	movlw	45
  3920  0112  00B1               	movwf	??__doprnt
  3921  0113  0831               	movf	??__doprnt,w
  3922  0114  00A2               	movwf	putch@txData
  3923  0115  0A3A               	incf	__doprnt@pb,w
  3924  0116  0086               	movwf	6
  3925  0117  0187               	clrf	7
  3926  0118  3F41               	moviw [1]fsr1
  3927  0119  008A               	movwf	10
  3928  011A  3F40               	moviw [0]fsr1
  3929  011B  000A               	callw
  3930  011C  3180               	pagesel	$
  3931  011D  2930               	goto	l3870
  3932  011E                     l3866:	
  3933  011E  302D               	movlw	45
  3934  011F  0020               	movlb	0	; select bank0
  3935  0120  00B1               	movwf	??__doprnt
  3936  0121  083A               	movf	__doprnt@pb,w
  3937  0122  0086               	movwf	6
  3938  0123  0187               	clrf	7
  3939  0124  0801               	movf	1,w
  3940  0125  0086               	movwf	6
  3941  0126  0187               	clrf	7
  3942  0127  0831               	movf	??__doprnt,w
  3943  0128  0081               	movwf	1
  3944  0129  3001               	movlw	1
  3945  012A  00B1               	movwf	??__doprnt
  3946  012B  083A               	movf	__doprnt@pb,w
  3947  012C  0086               	movwf	6
  3948  012D  0187               	clrf	7
  3949  012E  0831               	movf	??__doprnt,w
  3950  012F  0781               	addwf	1,f
  3951  0130                     l3870:	
  3952                           
  3953                           ;doprnt.c: 1469: }
  3954                           ;doprnt.c: 1472: prec = c;
  3955  0130  0020               	movlb	0	; select bank0
  3956  0131  0839               	movf	__doprnt@c,w
  3957  0132  00B1               	movwf	??__doprnt
  3958  0133  0831               	movf	??__doprnt,w
  3959  0134  00B6               	movwf	__doprnt@prec
  3960  0135                     l3882:	
  3961                           ;doprnt.c: 1474: while(prec--) {
  3962                           
  3963  0135  30FF               	movlw	255
  3964  0136  0020               	movlb	0	; select bank0
  3965  0137  00B1               	movwf	??__doprnt
  3966  0138  0831               	movf	??__doprnt,w
  3967  0139  07B6               	addwf	__doprnt@prec,f
  3968  013A  0A36               	incf	__doprnt@prec,w
  3969  013B  1903               	btfsc	3,2
  3970  013C  2874               	goto	l3884
  3971                           
  3972                           ;doprnt.c: 1478: {
  3973                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3974  013D  300A               	movlw	10
  3975  013E  00A8               	movwf	___lwmod@divisor
  3976  013F  3000               	movlw	0
  3977  0140  00A9               	movwf	___lwmod@divisor+1
  3978  0141  0836               	movf	__doprnt@prec,w
  3979  0142  00B1               	movwf	??__doprnt
  3980  0143  01B2               	clrf	??__doprnt+1
  3981  0144  35B1               	lslf	??__doprnt,f
  3982  0145  0DB2               	rlf	??__doprnt+1,f
  3983  0146  30E2               	movlw	low (_dpowers| (0+32768))
  3984  0147  0731               	addwf	??__doprnt,w
  3985  0148  0084               	movwf	4
  3986  0149  3085               	movlw	high (_dpowers| (0+32768))
  3987  014A  3D32               	addwfc	??__doprnt+1,w
  3988  014B  0085               	movwf	5
  3989  014C  3F00               	moviw [0]fsr0
  3990  014D  00A0               	movwf	___lwdiv@divisor
  3991  014E  3F01               	moviw [1]fsr0
  3992  014F  00A1               	movwf	___lwdiv@divisor+1
  3993  0150  0838               	movf	__doprnt@val+1,w
  3994  0151  00A3               	movwf	___lwdiv@dividend+1
  3995  0152  0837               	movf	__doprnt@val,w
  3996  0153  00A2               	movwf	___lwdiv@dividend
  3997  0154  3183  231C  3180   	fcall	___lwdiv
  3998  0157  0020               	movlb	0	; select bank0
  3999  0158  0821               	movf	?___lwdiv+1,w
  4000  0159  00AB               	movwf	___lwmod@dividend+1
  4001  015A  0820               	movf	?___lwdiv,w
  4002  015B  00AA               	movwf	___lwmod@dividend
  4003  015C  3183  2385  3180   	fcall	___lwmod
  4004  015F  0020               	movlb	0	; select bank0
  4005  0160  0828               	movf	?___lwmod,w
  4006  0161  3E30               	addlw	48
  4007  0162  00B3               	movwf	??__doprnt+2
  4008  0163  0833               	movf	??__doprnt+2,w
  4009  0164  00B9               	movwf	__doprnt@c
  4010                           
  4011                           ;doprnt.c: 1523: }
  4012                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4013  0165  0A3A               	incf	__doprnt@pb,w
  4014  0166  0086               	movwf	6
  4015  0167  0187               	clrf	7
  4016  0168  0016               	moviw fsr1++
  4017  0169  0401               	iorwf	1,w
  4018  016A  1903               	btfsc	3,2
  4019  016B  2979               	goto	l3878
  4020  016C  0839               	movf	__doprnt@c,w
  4021  016D  00B1               	movwf	??__doprnt
  4022  016E  0831               	movf	??__doprnt,w
  4023  016F  00A2               	movwf	putch@txData
  4024  0170  0A3A               	incf	__doprnt@pb,w
  4025  0171  0086               	movwf	6
  4026  0172  0187               	clrf	7
  4027  0173  3F41               	moviw [1]fsr1
  4028  0174  008A               	movwf	10
  4029  0175  3F40               	moviw [0]fsr1
  4030  0176  000A               	callw
  4031  0177  3180               	pagesel	$
  4032  0178  2935               	goto	l3882
  4033  0179                     l3878:	
  4034  0179  0020               	movlb	0	; select bank0
  4035  017A  0839               	movf	__doprnt@c,w
  4036  017B  00B1               	movwf	??__doprnt
  4037  017C  083A               	movf	__doprnt@pb,w
  4038  017D  0086               	movwf	6
  4039  017E  0187               	clrf	7
  4040  017F  0801               	movf	1,w
  4041  0180  0086               	movwf	6
  4042  0181  0187               	clrf	7
  4043  0182  0831               	movf	??__doprnt,w
  4044  0183  0081               	movwf	1
  4045  0184  3001               	movlw	1
  4046  0185  00B1               	movwf	??__doprnt
  4047  0186  083A               	movf	__doprnt@pb,w
  4048  0187  0086               	movwf	6
  4049  0188  0187               	clrf	7
  4050  0189  0831               	movf	??__doprnt,w
  4051  018A  0781               	addwf	1,f
  4052  018B  2935               	goto	l3882
  4053  018C                     l3886:	
  4054                           ;doprnt.c: 1525: }
  4055                           ;doprnt.c: 1533: }
  4056                           ;doprnt.c: 1535: alldone:
  4057                           
  4058                           
  4059                           ;doprnt.c: 1540: return 0;
  4060  018C  01AE               	clrf	?__doprnt
  4061  018D  01AF               	clrf	?__doprnt+1
  4062  018E  0008               	return
  4063  018F                     __end_of__doprnt:	
  4064                           
  4065                           	psect	text19
  4066  0619                     __ptext19:	
  4067 ;; *************** function _putch *****************
  4068 ;; Defined at:
  4069 ;;		line 161 in file "mcc_generated_files/eusart.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  txData          1    2[BANK0 ] unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4083 ;;      Params:         0       1       0       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0
  4086 ;;      Totals:         0       1       0       0       0       0       0
  4087 ;;Total ram usage:        1 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    5
  4090 ;; This function calls:
  4091 ;;		_EUSART_Write
  4092 ;; This function is called by:
  4093 ;;		_sms_text
  4094 ;;		_int_gsm
  4095 ;;		__doprnt
  4096 ;;		_printf
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           
  4101                           ;psect for function _putch
  4102  0619                     _putch:	
  4103                           
  4104                           ;eusart.c: 163: EUSART_Write(txData);
  4105                           
  4106                           ;incstack = 0
  4107                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4108  0619  0020               	movlb	0	; select bank0
  4109  061A  0822               	movf	putch@txData,w
  4110  061B  3184  2402         	fcall	_EUSART_Write
  4111  061D  0008               	return
  4112  061E                     __end_of_putch:	
  4113                           
  4114                           	psect	text20
  4115  0402                     __ptext20:	
  4116 ;; *************** function _EUSART_Write *****************
  4117 ;; Defined at:
  4118 ;;		line 133 in file "mcc_generated_files/eusart.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  txData          1    wreg     unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  txData          1    1[BANK0 ] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4132 ;;      Params:         0       0       0       0       0       0       0
  4133 ;;      Locals:         0       1       0       0       0       0       0
  4134 ;;      Temps:          0       1       0       0       0       0       0
  4135 ;;      Totals:         0       2       0       0       0       0       0
  4136 ;;Total ram usage:        2 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    4
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_putch
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function _EUSART_Write
  4148  0402                     _EUSART_Write:	
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4152                           ;EUSART_Write@txData stored from wreg
  4153  0402  0020               	movlb	0	; select bank0
  4154  0403  00A1               	movwf	EUSART_Write@txData
  4155  0404                     l1876:	
  4156                           ;eusart.c: 136: {
  4157                           
  4158                           ;eusart.c: 135: while(0 == eusartTxBufferRemaining)
  4159                           
  4160  0404  0021               	movlb	1	; select bank1
  4161  0405  0853               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  4162  0406  1903               	btfsc	3,2
  4163  0407  2C04               	goto	l1876
  4164                           
  4165                           ;eusart.c: 137: }
  4166                           ;eusart.c: 139: if(0 == PIE1bits.TXIE)
  4167  0408  1A11               	btfsc	17,4	;volatile
  4168  0409  2C0F               	goto	l133
  4169                           
  4170                           ;eusart.c: 140: {
  4171                           ;eusart.c: 141: TXREG = txData;
  4172  040A  0020               	movlb	0	; select bank0
  4173  040B  0821               	movf	EUSART_Write@txData,w
  4174  040C  0023               	movlb	3	; select bank3
  4175  040D  009A               	movwf	26	;volatile
  4176                           
  4177                           ;eusart.c: 142: }
  4178  040E  2C24               	goto	l1890
  4179  040F                     l133:	
  4180                           
  4181                           ;eusart.c: 143: else
  4182                           ;eusart.c: 144: {
  4183                           ;eusart.c: 145: PIE1bits.TXIE = 0;
  4184  040F  1211               	bcf	17,4	;volatile
  4185                           
  4186                           ;eusart.c: 146: eusartTxBuffer[eusartTxHead++] = txData;
  4187  0410  0020               	movlb	0	; select bank0
  4188  0411  0821               	movf	EUSART_Write@txData,w
  4189  0412  00A0               	movwf	??_EUSART_Write
  4190  0413  087D               	movf	_eusartTxHead,w
  4191  0414  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4192  0415  0086               	movwf	6
  4193  0416  0187               	clrf	7
  4194  0417  0820               	movf	??_EUSART_Write,w
  4195  0418  0081               	movwf	1
  4196  0419  3001               	movlw	1
  4197  041A  00A0               	movwf	??_EUSART_Write
  4198  041B  0820               	movf	??_EUSART_Write,w
  4199  041C  07FD               	addwf	_eusartTxHead,f	;volatile
  4200                           
  4201                           ;eusart.c: 147: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4202  041D  3008               	movlw	8
  4203  041E  027D               	subwf	_eusartTxHead,w	;volatile
  4204  041F  1803               	btfsc	3,0
  4205                           
  4206                           ;eusart.c: 148: {
  4207                           ;eusart.c: 149: eusartTxHead = 0;
  4208  0420  01FD               	clrf	_eusartTxHead	;volatile
  4209                           
  4210                           ;eusart.c: 150: }
  4211                           ;eusart.c: 151: eusartTxBufferRemaining--;
  4212  0421  3001               	movlw	1
  4213  0422  0021               	movlb	1	; select bank1
  4214  0423  02D3               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  4215  0424                     l1890:	
  4216                           
  4217                           ;eusart.c: 152: }
  4218                           ;eusart.c: 153: PIE1bits.TXIE = 1;
  4219  0424  0021               	movlb	1	; select bank1
  4220  0425  1611               	bsf	17,4	;volatile
  4221  0426  0008               	return
  4222  0427                     __end_of_EUSART_Write:	
  4223                           
  4224                           	psect	text21
  4225  0385                     __ptext21:	
  4226 ;; *************** function ___lwmod *****************
  4227 ;; Defined at:
  4228 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  divisor         2    8[BANK0 ] unsigned int 
  4231 ;;  dividend        2   10[BANK0 ] unsigned int 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  counter         1   13[BANK0 ] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  2    8[BANK0 ] unsigned int 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4243 ;;      Params:         0       4       0       0       0       0       0
  4244 ;;      Locals:         0       1       0       0       0       0       0
  4245 ;;      Temps:          0       1       0       0       0       0       0
  4246 ;;      Totals:         0       6       0       0       0       0       0
  4247 ;;Total ram usage:        6 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    4
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		__doprnt
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function ___lwmod
  4259  0385                     ___lwmod:	
  4260                           
  4261                           ;incstack = 0
  4262                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4263  0385  0020               	movlb	0	; select bank0
  4264  0386  0828               	movf	___lwmod@divisor,w
  4265  0387  0429               	iorwf	___lwmod@divisor+1,w
  4266  0388  1903               	btfsc	3,2
  4267  0389  2BAD               	goto	l1938
  4268  038A  01AD               	clrf	___lwmod@counter
  4269  038B  0AAD               	incf	___lwmod@counter,f
  4270  038C                     l1928:	
  4271  038C  1BA9               	btfsc	___lwmod@divisor+1,7
  4272  038D  2B98               	goto	l1930
  4273  038E  3001               	movlw	1
  4274  038F                     u1245:	
  4275  038F  35A8               	lslf	___lwmod@divisor,f
  4276  0390  0DA9               	rlf	___lwmod@divisor+1,f
  4277  0391  0B89               	decfsz	9,f
  4278  0392  2B8F               	goto	u1245
  4279  0393  3001               	movlw	1
  4280  0394  00AC               	movwf	??___lwmod
  4281  0395  082C               	movf	??___lwmod,w
  4282  0396  07AD               	addwf	___lwmod@counter,f
  4283  0397  2B8C               	goto	l1928
  4284  0398                     l1930:	
  4285  0398  0829               	movf	___lwmod@divisor+1,w
  4286  0399  022B               	subwf	___lwmod@dividend+1,w
  4287  039A  1D03               	skipz
  4288  039B  2B9E               	goto	u1265
  4289  039C  0828               	movf	___lwmod@divisor,w
  4290  039D  022A               	subwf	___lwmod@dividend,w
  4291  039E                     u1265:	
  4292  039E  1C03               	skipc
  4293  039F  2BA4               	goto	l1934
  4294  03A0  0828               	movf	___lwmod@divisor,w
  4295  03A1  02AA               	subwf	___lwmod@dividend,f
  4296  03A2  0829               	movf	___lwmod@divisor+1,w
  4297  03A3  3BAB               	subwfb	___lwmod@dividend+1,f
  4298  03A4                     l1934:	
  4299  03A4  3001               	movlw	1
  4300  03A5                     u1275:	
  4301  03A5  36A9               	lsrf	___lwmod@divisor+1,f
  4302  03A6  0CA8               	rrf	___lwmod@divisor,f
  4303  03A7  0B89               	decfsz	9,f
  4304  03A8  2BA5               	goto	u1275
  4305  03A9  3001               	movlw	1
  4306  03AA  02AD               	subwf	___lwmod@counter,f
  4307  03AB  1D03               	btfss	3,2
  4308  03AC  2B98               	goto	l1930
  4309  03AD                     l1938:	
  4310  03AD  082B               	movf	___lwmod@dividend+1,w
  4311  03AE  00A9               	movwf	?___lwmod+1
  4312  03AF  082A               	movf	___lwmod@dividend,w
  4313  03B0  00A8               	movwf	?___lwmod
  4314  03B1  0008               	return
  4315  03B2                     __end_of___lwmod:	
  4316                           
  4317                           	psect	text22
  4318  031C                     __ptext22:	
  4319 ;; *************** function ___lwdiv *****************
  4320 ;; Defined at:
  4321 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  divisor         2    0[BANK0 ] unsigned int 
  4324 ;;  dividend        2    2[BANK0 ] unsigned int 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  quotient        2    5[BANK0 ] unsigned int 
  4327 ;;  counter         1    7[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2    0[BANK0 ] unsigned int 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4337 ;;      Params:         0       4       0       0       0       0       0
  4338 ;;      Locals:         0       3       0       0       0       0       0
  4339 ;;      Temps:          0       1       0       0       0       0       0
  4340 ;;      Totals:         0       8       0       0       0       0       0
  4341 ;;Total ram usage:        8 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    4
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		__doprnt
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function ___lwdiv
  4353  031C                     ___lwdiv:	
  4354                           
  4355                           ;incstack = 0
  4356                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4357  031C  0020               	movlb	0	; select bank0
  4358  031D  01A5               	clrf	___lwdiv@quotient
  4359  031E  01A6               	clrf	___lwdiv@quotient+1
  4360  031F  0820               	movf	___lwdiv@divisor,w
  4361  0320  0421               	iorwf	___lwdiv@divisor+1,w
  4362  0321  1903               	btfsc	3,2
  4363  0322  2B4C               	goto	l1916
  4364  0323  01A7               	clrf	___lwdiv@counter
  4365  0324  0AA7               	incf	___lwdiv@counter,f
  4366  0325                     l1904:	
  4367  0325  1BA1               	btfsc	___lwdiv@divisor+1,7
  4368  0326  2B31               	goto	l1906
  4369  0327  3001               	movlw	1
  4370  0328                     u1175:	
  4371  0328  35A0               	lslf	___lwdiv@divisor,f
  4372  0329  0DA1               	rlf	___lwdiv@divisor+1,f
  4373  032A  0B89               	decfsz	9,f
  4374  032B  2B28               	goto	u1175
  4375  032C  3001               	movlw	1
  4376  032D  00A4               	movwf	??___lwdiv
  4377  032E  0824               	movf	??___lwdiv,w
  4378  032F  07A7               	addwf	___lwdiv@counter,f
  4379  0330  2B25               	goto	l1904
  4380  0331                     l1906:	
  4381  0331  3001               	movlw	1
  4382  0332                     u1195:	
  4383  0332  35A5               	lslf	___lwdiv@quotient,f
  4384  0333  0DA6               	rlf	___lwdiv@quotient+1,f
  4385  0334  0B89               	decfsz	9,f
  4386  0335  2B32               	goto	u1195
  4387  0336  0821               	movf	___lwdiv@divisor+1,w
  4388  0337  0223               	subwf	___lwdiv@dividend+1,w
  4389  0338  1D03               	skipz
  4390  0339  2B3C               	goto	u1205
  4391  033A  0820               	movf	___lwdiv@divisor,w
  4392  033B  0222               	subwf	___lwdiv@dividend,w
  4393  033C                     u1205:	
  4394  033C  1C03               	skipc
  4395  033D  2B43               	goto	l1912
  4396  033E  0820               	movf	___lwdiv@divisor,w
  4397  033F  02A2               	subwf	___lwdiv@dividend,f
  4398  0340  0821               	movf	___lwdiv@divisor+1,w
  4399  0341  3BA3               	subwfb	___lwdiv@dividend+1,f
  4400  0342  1425               	bsf	___lwdiv@quotient,0
  4401  0343                     l1912:	
  4402  0343  3001               	movlw	1
  4403  0344                     u1215:	
  4404  0344  36A1               	lsrf	___lwdiv@divisor+1,f
  4405  0345  0CA0               	rrf	___lwdiv@divisor,f
  4406  0346  0B89               	decfsz	9,f
  4407  0347  2B44               	goto	u1215
  4408  0348  3001               	movlw	1
  4409  0349  02A7               	subwf	___lwdiv@counter,f
  4410  034A  1D03               	btfss	3,2
  4411  034B  2B31               	goto	l1906
  4412  034C                     l1916:	
  4413  034C  0826               	movf	___lwdiv@quotient+1,w
  4414  034D  00A1               	movwf	?___lwdiv+1
  4415  034E  0825               	movf	___lwdiv@quotient,w
  4416  034F  00A0               	movwf	?___lwdiv
  4417  0350  0008               	return
  4418  0351                     __end_of___lwdiv:	
  4419                           
  4420                           	psect	text23
  4421  02E4                     __ptext23:	
  4422 ;; *************** function _ReadData *****************
  4423 ;; Defined at:
  4424 ;;		line 394 in file "main.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  j               1    3[BANK0 ] unsigned char 
  4429 ;;  i               1    2[BANK0 ] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      unsigned char 
  4432 ;; Registers used:
  4433 ;;		wreg, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4439 ;;      Params:         0       0       0       0       0       0       0
  4440 ;;      Locals:         0       2       0       0       0       0       0
  4441 ;;      Temps:          0       2       0       0       0       0       0
  4442 ;;      Totals:         0       4       0       0       0       0       0
  4443 ;;Total ram usage:        4 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    4
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_DHT_result
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _ReadData
  4455  02E4                     _ReadData:	
  4456                           
  4457                           ;main.c: 396: char i, j;
  4458                           ;main.c: 397: for(j = 0; j < 8; j++){
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in _ReadData: [wreg+status,2+status,0]
  4462  02E4  0020               	movlb	0	; select bank0
  4463  02E5  01A3               	clrf	ReadData@j
  4464  02E6  3008               	movlw	8
  4465  02E7  0223               	subwf	ReadData@j,w
  4466  02E8  1803               	btfsc	3,0
  4467  02E9  2B1A               	goto	l2150
  4468  02EA                     l504:	
  4469                           ;main.c: 398: while(!PORTDbits.RD2 );
  4470                           
  4471  02EA  1D0F               	btfss	15,2	;volatile
  4472  02EB  2AEA               	goto	l504
  4473                           
  4474                           ;main.c: 399: _delay((unsigned long)((30)*(18432000/4000000.0)));
  4475  02EC  302E               	movlw	46
  4476  02ED                     u4727:	
  4477  02ED  0B89               	decfsz	9,f
  4478  02EE  2AED               	goto	u4727
  4479                           
  4480                           ;main.c: 400: if(PORTDbits.RD2 == 0)
  4481  02EF  0020               	movlb	0	; select bank0
  4482  02F0  190F               	btfsc	15,2	;volatile
  4483  02F1  2B02               	goto	l2144
  4484                           
  4485                           ;main.c: 401: i&= ~(1<<(7 - j));
  4486  02F2  3001               	movlw	1
  4487  02F3  00A0               	movwf	??_ReadData
  4488  02F4  0323               	decf	ReadData@j,w
  4489  02F5  3AFF               	xorlw	255
  4490  02F6  3E07               	addlw	7
  4491  02F7  0A89               	incf	9,f
  4492  02F8  2AFA               	goto	u1504
  4493  02F9                     u1505:	
  4494  02F9  35A0               	lslf	??_ReadData,f
  4495  02FA                     u1504:	
  4496  02FA  0B89               	decfsz	9,f
  4497  02FB  2AF9               	goto	u1505
  4498  02FC  0820               	movf	??_ReadData,w
  4499  02FD  3AFF               	xorlw	255
  4500  02FE  00A1               	movwf	??_ReadData+1
  4501  02FF  0821               	movf	??_ReadData+1,w
  4502  0300  05A2               	andwf	ReadData@i,f
  4503  0301  2B12               	goto	l2146
  4504  0302                     l2144:	
  4505                           
  4506                           ;main.c: 402: else {i|= (1 << (7 - j));
  4507  0302  3001               	movlw	1
  4508  0303  00A0               	movwf	??_ReadData
  4509  0304  0323               	decf	ReadData@j,w
  4510  0305  3AFF               	xorlw	255
  4511  0306  3E07               	addlw	7
  4512  0307  0A89               	incf	9,f
  4513  0308  2B0A               	goto	u1514
  4514  0309                     u1515:	
  4515  0309  35A0               	lslf	??_ReadData,f
  4516  030A                     u1514:	
  4517  030A  0B89               	decfsz	9,f
  4518  030B  2B09               	goto	u1515
  4519  030C  0820               	movf	??_ReadData,w
  4520  030D  00A1               	movwf	??_ReadData+1
  4521  030E  0821               	movf	??_ReadData+1,w
  4522  030F  04A2               	iorwf	ReadData@i,f
  4523  0310                     l509:	
  4524                           ;main.c: 403: while(PORTDbits.RD2 );}
  4525                           
  4526  0310  190F               	btfsc	15,2	;volatile
  4527  0311  2B10               	goto	l509
  4528  0312                     l2146:	
  4529  0312  3001               	movlw	1
  4530  0313  00A0               	movwf	??_ReadData
  4531  0314  0820               	movf	??_ReadData,w
  4532  0315  07A3               	addwf	ReadData@j,f
  4533  0316  3008               	movlw	8
  4534  0317  0223               	subwf	ReadData@j,w
  4535  0318  1C03               	skipc
  4536  0319  2AEA               	goto	l504
  4537  031A                     l2150:	
  4538                           
  4539                           ;main.c: 404: }
  4540                           ;main.c: 405: return i;
  4541  031A  0822               	movf	ReadData@i,w
  4542  031B  0008               	return
  4543  031C                     __end_of_ReadData:	
  4544                           
  4545                           	psect	text24
  4546  050E                     __ptext24:	
  4547 ;; *************** function _CheckResponse *****************
  4548 ;; Defined at:
  4549 ;;		line 386 in file "main.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4563 ;;      Params:         0       0       0       0       0       0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0
  4566 ;;      Totals:         0       0       0       0       0       0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    4
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_main
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _CheckResponse
  4579  050E                     _CheckResponse:	
  4580                           
  4581                           ;main.c: 388: Check = 0;
  4582                           
  4583                           ;incstack = 0
  4584                           ; Regs used in _CheckResponse: [wreg+status,2]
  4585  050E  0020               	movlb	0	; select bank0
  4586  050F  01E5               	clrf	_Check
  4587                           
  4588                           ;main.c: 389: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4589  0510  303D               	movlw	61
  4590  0511                     u4737:	
  4591  0511  0B89               	decfsz	9,f
  4592  0512  2D11               	goto	u4737
  4593  0513  0000               	nop
  4594                           
  4595                           ;main.c: 390: if (PORTDbits.RD2 == 0){
  4596  0514  0020               	movlb	0	; select bank0
  4597  0515  190F               	btfsc	15,2	;volatile
  4598  0516  0008               	return
  4599                           
  4600                           ;main.c: 391: _delay((unsigned long)((80)*(18432000/4000000.0)));
  4601  0517  307A               	movlw	122
  4602  0518                     u4747:	
  4603  0518  0B89               	decfsz	9,f
  4604  0519  2D18               	goto	u4747
  4605  051A  3200               	nop2
  4606                           
  4607                           ;main.c: 392: if (PORTDbits.RD2 == 1) Check = 1; _delay((unsigned long)((40)*(18432000/4
      +                          000000.0)));}
  4608  051B  0020               	movlb	0	; select bank0
  4609  051C  1D0F               	btfss	15,2	;volatile
  4610  051D  2D20               	goto	l2306
  4611  051E  01E5               	clrf	_Check
  4612  051F  0AE5               	incf	_Check,f
  4613  0520                     l2306:	
  4614  0520  303D               	movlw	61
  4615  0521                     u4757:	
  4616  0521  0B89               	decfsz	9,f
  4617  0522  2D21               	goto	u4757
  4618  0523  0000               	nop
  4619  0524  0008               	return
  4620  0525                     __end_of_CheckResponse:	
  4621                           
  4622                           	psect	text25
  4623  0628                     __ptext25:	
  4624 ;; *************** function _ADC_StartConversion *****************
  4625 ;; Defined at:
  4626 ;;		line 92 in file "mcc_generated_files/adc.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		None
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4640 ;;      Params:         0       0       0       0       0       0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0
  4643 ;;      Totals:         0       0       0       0       0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    4
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_main
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _ADC_StartConversion
  4656  0628                     _ADC_StartConversion:	
  4657                           
  4658                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _ADC_StartConversion: []
  4662  0628  0021               	movlb	1	; select bank1
  4663  0629  149D               	bsf	29,1	;volatile
  4664  062A  0008               	return
  4665  062B                     __end_of_ADC_StartConversion:	
  4666                           
  4667                           	psect	intentry
  4668  0004                     __pintentry:	
  4669 ;; *************** function _INTERRUPT_InterruptManager *****************
  4670 ;; Defined at:
  4671 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;		None
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      void 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4685 ;;      Params:         0       0       0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0
  4687 ;;      Temps:          1       0       0       0       0       0       0
  4688 ;;      Totals:         1       0       0       0       0       0       0
  4689 ;;Total ram usage:        1 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    3
  4692 ;; This function calls:
  4693 ;;		_ADC_ISR
  4694 ;;		_EUSART_Receive_ISR
  4695 ;;		_EUSART_Transmit_ISR
  4696 ;;		_TMR1_ISR
  4697 ;; This function is called by:
  4698 ;;		Interrupt level 1
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702  0004                     _INTERRUPT_InterruptManager:	
  4703                           
  4704                           ;incstack = 0
  4705  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4706                           
  4707                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4708  0005  3180               	pagesel	$
  4709  0006  0020               	movlb	0	; select bank0
  4710  0007  087F               	movf	127,w
  4711  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  4712                           
  4713                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.ADIE == 1 && PIR1bits.ADIF
      +                           == 1)
  4714  0009  1F0B               	btfss	11,6	;volatile
  4715  000A  2815               	goto	i1l181
  4716  000B  0021               	movlb	1	; select bank1
  4717  000C  1F11               	btfss	17,6	;volatile
  4718  000D  2815               	goto	i1l181
  4719  000E  0020               	movlb	0	; select bank0
  4720  000F  1F11               	btfss	17,6	;volatile
  4721  0010  2815               	goto	i1l181
  4722                           
  4723                           ;interrupt_manager.c: 55: {
  4724                           ;interrupt_manager.c: 56: ADC_ISR();
  4725  0011  3185  25C9  3180   	fcall	_ADC_ISR
  4726                           
  4727                           ;interrupt_manager.c: 57: }
  4728  0014  2837               	goto	i1l189
  4729  0015                     i1l181:	
  4730                           
  4731                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
  4732  0015  1F0B               	btfss	11,6	;volatile
  4733  0016  2821               	goto	i1l183
  4734  0017  0021               	movlb	1	; select bank1
  4735  0018  1E11               	btfss	17,4	;volatile
  4736  0019  2821               	goto	i1l183
  4737  001A  0020               	movlb	0	; select bank0
  4738  001B  1E11               	btfss	17,4	;volatile
  4739  001C  2821               	goto	i1l183
  4740                           
  4741                           ;interrupt_manager.c: 59: {
  4742                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
  4743  001D  3184  24BE  3180   	fcall	_EUSART_Transmit_ISR
  4744                           
  4745                           ;interrupt_manager.c: 61: }
  4746  0020  2837               	goto	i1l189
  4747  0021                     i1l183:	
  4748                           
  4749                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  4750  0021  1F0B               	btfss	11,6	;volatile
  4751  0022  282D               	goto	i1l185
  4752  0023  0021               	movlb	1	; select bank1
  4753  0024  1E91               	btfss	17,5	;volatile
  4754  0025  282D               	goto	i1l185
  4755  0026  0020               	movlb	0	; select bank0
  4756  0027  1E91               	btfss	17,5	;volatile
  4757  0028  282D               	goto	i1l185
  4758                           
  4759                           ;interrupt_manager.c: 63: {
  4760                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
  4761  0029  3182  2298  3180   	fcall	_EUSART_Receive_ISR
  4762                           
  4763                           ;interrupt_manager.c: 65: }
  4764  002C  2837               	goto	i1l189
  4765  002D                     i1l185:	
  4766                           
  4767                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  4768  002D  1F0B               	btfss	11,6	;volatile
  4769  002E  2837               	goto	i1l189
  4770  002F  0021               	movlb	1	; select bank1
  4771  0030  1C11               	btfss	17,0	;volatile
  4772  0031  2837               	goto	i1l189
  4773  0032  0020               	movlb	0	; select bank0
  4774  0033  1C11               	btfss	17,0	;volatile
  4775  0034  2837               	goto	i1l189
  4776                           
  4777                           ;interrupt_manager.c: 67: {
  4778                           ;interrupt_manager.c: 68: TMR1_ISR();
  4779  0035  3184  24A2         	fcall	_TMR1_ISR
  4780  0037                     i1l189:	
  4781                           ;interrupt_manager.c: 70: else
  4782                           ;interrupt_manager.c: 71: {
  4783                           
  4784                           ;interrupt_manager.c: 69: }
  4785                           
  4786  0037  0879               	movf	??_INTERRUPT_InterruptManager,w
  4787  0038  0020               	movlb	0	; select bank0
  4788  0039  00FF               	movwf	127
  4789  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4790  003B  0009               	retfie
  4791  003C                     __end_of_INTERRUPT_InterruptManager:	
  4792                           
  4793                           	psect	text27
  4794  04A2                     __ptext27:	
  4795 ;; *************** function _TMR1_ISR *****************
  4796 ;; Defined at:
  4797 ;;		line 161 in file "mcc_generated_files/tmr1.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0, pclath, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4811 ;;      Params:         0       0       0       0       0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0
  4814 ;;      Totals:         0       0       0       0       0       0       0
  4815 ;;Total ram usage:        0 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    2
  4818 ;; This function calls:
  4819 ;;		_TMR1_CallBack
  4820 ;; This function is called by:
  4821 ;;		_INTERRUPT_InterruptManager
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _TMR1_ISR
  4827  04A2                     _TMR1_ISR:	
  4828                           
  4829                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
  4830                           ;tmr1.c: 166: PIR1bits.TMR1IF = 0;
  4831                           
  4832                           ;incstack = 0
  4833                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  4834  04A2  0020               	movlb	0	; select bank0
  4835  04A3  1011               	bcf	17,0	;volatile
  4836                           
  4837                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
  4838  04A4  086C               	movf	_timer1ReloadVal+1,w	;volatile
  4839  04A5  0097               	movwf	23	;volatile
  4840                           
  4841                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
  4842  04A6  086B               	movf	_timer1ReloadVal,w	;volatile
  4843  04A7  0096               	movwf	22	;volatile
  4844                           
  4845                           ;tmr1.c: 170: flag_1_ms=1;
  4846  04A8  3001               	movlw	1
  4847  04A9  0021               	movlb	1	; select bank1
  4848  04AA  00C4               	movwf	_flag_1_ms^(0+128)
  4849  04AB  3000               	movlw	0
  4850  04AC  00C5               	movwf	(_flag_1_ms^(0+128)+1)
  4851                           
  4852                           ;tmr1.c: 172: if (++CountCallBack >= 10)
  4853  04AD  3001               	movlw	1
  4854  04AE  07B0               	addwf	TMR1_ISR@CountCallBack^(0+128),f	;volatile
  4855  04AF  3000               	movlw	0
  4856  04B0  3DB1               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+128),f	;volatile
  4857  04B1  3000               	movlw	0
  4858  04B2  0231               	subwf	(TMR1_ISR@CountCallBack+1)^(0+128),w	;volatile
  4859  04B3  300A               	movlw	10
  4860  04B4  1903               	skipnz
  4861  04B5  0230               	subwf	TMR1_ISR@CountCallBack^(0+128),w	;volatile
  4862  04B6  1C03               	skipc
  4863  04B7  0008               	return
  4864                           
  4865                           ;tmr1.c: 173: {
  4866                           ;tmr1.c: 175: TMR1_CallBack();
  4867  04B8  3182  224B         	fcall	_TMR1_CallBack
  4868                           
  4869                           ;tmr1.c: 178: CountCallBack = 0;
  4870  04BA  0021               	movlb	1	; select bank1
  4871  04BB  01B0               	clrf	TMR1_ISR@CountCallBack^(0+128)	;volatile
  4872  04BC  01B1               	clrf	(TMR1_ISR@CountCallBack+1)^(0+128)	;volatile
  4873  04BD  0008               	return
  4874  04BE                     __end_of_TMR1_ISR:	
  4875                           
  4876                           	psect	text28
  4877  024B                     __ptext28:	
  4878 ;; *************** function _TMR1_CallBack *****************
  4879 ;; Defined at:
  4880 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;		None
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;		None
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  1    wreg      void 
  4887 ;; Registers used:
  4888 ;;		wreg, status,2, status,0, pclath, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4894 ;;      Params:         0       0       0       0       0       0       0
  4895 ;;      Locals:         0       0       0       0       0       0       0
  4896 ;;      Temps:          0       0       0       0       0       0       0
  4897 ;;      Totals:         0       0       0       0       0       0       0
  4898 ;;Total ram usage:        0 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    1
  4901 ;; This function calls:
  4902 ;;		Absolute function
  4903 ;;		_TMR1_DefaultInterruptHandler
  4904 ;; This function is called by:
  4905 ;;		_TMR1_ISR
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           
  4910                           ;psect for function _TMR1_CallBack
  4911  024B                     _TMR1_CallBack:	
  4912                           
  4913                           ;tmr1.c: 184: flag_10_ms=1;
  4914                           
  4915                           ;incstack = 0
  4916                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  4917  024B  3001               	movlw	1
  4918  024C  0021               	movlb	1	; select bank1
  4919  024D  00C2               	movwf	_flag_10_ms^(0+128)
  4920  024E  3000               	movlw	0
  4921  024F  00C3               	movwf	(_flag_10_ms^(0+128)+1)
  4922                           
  4923                           ;tmr1.c: 185: count_100_ms++;
  4924  0250  3001               	movlw	1
  4925  0251  07B8               	addwf	_count_100_ms^(0+128),f
  4926  0252  3000               	movlw	0
  4927  0253  3DB9               	addwfc	(_count_100_ms+1)^(0+128),f
  4928                           
  4929                           ;tmr1.c: 186: count_500_ms++;
  4930  0254  3001               	movlw	1
  4931  0255  07B6               	addwf	_count_500_ms^(0+128),f
  4932  0256  3000               	movlw	0
  4933  0257  3DB7               	addwfc	(_count_500_ms+1)^(0+128),f
  4934                           
  4935                           ;tmr1.c: 187: count_1000_ms++;
  4936  0258  3001               	movlw	1
  4937  0259  07B4               	addwf	_count_1000_ms^(0+128),f
  4938  025A  3000               	movlw	0
  4939  025B  3DB5               	addwfc	(_count_1000_ms+1)^(0+128),f
  4940                           
  4941                           ;tmr1.c: 188: count_4000_ms++;
  4942  025C  3001               	movlw	1
  4943  025D  07B2               	addwf	_count_4000_ms^(0+128),f
  4944  025E  3000               	movlw	0
  4945  025F  3DB3               	addwfc	(_count_4000_ms+1)^(0+128),f
  4946                           
  4947                           ;tmr1.c: 190: if (count_100_ms==10)
  4948  0260  300A               	movlw	10
  4949  0261  0638               	xorwf	_count_100_ms^(0+128),w
  4950  0262  0439               	iorwf	(_count_100_ms+1)^(0+128),w
  4951  0263  1D03               	btfss	3,2
  4952  0264  2A6B               	goto	i1l3898
  4953                           
  4954                           ;tmr1.c: 191: {
  4955                           ;tmr1.c: 192: flag_100_ms=1;
  4956  0265  3001               	movlw	1
  4957  0266  00C0               	movwf	_flag_100_ms^(0+128)
  4958  0267  3000               	movlw	0
  4959  0268  00C1               	movwf	(_flag_100_ms^(0+128)+1)
  4960                           
  4961                           ;tmr1.c: 193: count_100_ms=0;
  4962  0269  01B8               	clrf	_count_100_ms^(0+128)
  4963  026A  01B9               	clrf	(_count_100_ms+1)^(0+128)
  4964  026B                     i1l3898:	
  4965                           
  4966                           ;tmr1.c: 194: }
  4967                           ;tmr1.c: 195: if(count_500_ms==50)
  4968  026B  3032               	movlw	50
  4969  026C  0636               	xorwf	_count_500_ms^(0+128),w
  4970  026D  0437               	iorwf	(_count_500_ms+1)^(0+128),w
  4971  026E  1D03               	btfss	3,2
  4972  026F  2A76               	goto	i1l3904
  4973                           
  4974                           ;tmr1.c: 196: {
  4975                           ;tmr1.c: 197: flag_500_ms=1;
  4976  0270  3001               	movlw	1
  4977  0271  00BE               	movwf	_flag_500_ms^(0+128)
  4978  0272  3000               	movlw	0
  4979  0273  00BF               	movwf	(_flag_500_ms^(0+128)+1)
  4980                           
  4981                           ;tmr1.c: 198: count_500_ms=0;
  4982  0274  01B6               	clrf	_count_500_ms^(0+128)
  4983  0275  01B7               	clrf	(_count_500_ms+1)^(0+128)
  4984  0276                     i1l3904:	
  4985                           
  4986                           ;tmr1.c: 199: }
  4987                           ;tmr1.c: 200: if (count_1000_ms==100)
  4988  0276  3064               	movlw	100
  4989  0277  0634               	xorwf	_count_1000_ms^(0+128),w
  4990  0278  0435               	iorwf	(_count_1000_ms+1)^(0+128),w
  4991  0279  1D03               	btfss	3,2
  4992  027A  2A81               	goto	i1l3910
  4993                           
  4994                           ;tmr1.c: 201: {
  4995                           ;tmr1.c: 202: flag_1000_ms=1;
  4996  027B  3001               	movlw	1
  4997  027C  00BC               	movwf	_flag_1000_ms^(0+128)
  4998  027D  3000               	movlw	0
  4999  027E  00BD               	movwf	(_flag_1000_ms^(0+128)+1)
  5000                           
  5001                           ;tmr1.c: 203: count_1000_ms=0;
  5002  027F  01B4               	clrf	_count_1000_ms^(0+128)
  5003  0280  01B5               	clrf	(_count_1000_ms+1)^(0+128)
  5004  0281                     i1l3910:	
  5005                           
  5006                           ;tmr1.c: 204: }
  5007                           ;tmr1.c: 205: if (count_4000_ms==400)
  5008  0281  3090               	movlw	144
  5009  0282  0632               	xorwf	_count_4000_ms^(0+128),w
  5010  0283  1D03               	skipz
  5011  0284  2A8E               	goto	i1l3916
  5012  0285  0333               	decf	(_count_4000_ms+1)^(0+128),w
  5013  0286  1D03               	btfss	3,2
  5014  0287  2A8E               	goto	i1l3916
  5015                           
  5016                           ;tmr1.c: 206: {
  5017                           ;tmr1.c: 207: flag_4000_ms=1;
  5018  0288  3001               	movlw	1
  5019  0289  00BA               	movwf	_flag_4000_ms^(0+128)
  5020  028A  3000               	movlw	0
  5021  028B  00BB               	movwf	(_flag_4000_ms^(0+128)+1)
  5022                           
  5023                           ;tmr1.c: 208: count_4000_ms=0;
  5024  028C  01B2               	clrf	_count_4000_ms^(0+128)
  5025  028D  01B3               	clrf	(_count_4000_ms+1)^(0+128)
  5026  028E                     i1l3916:	
  5027                           
  5028                           ;tmr1.c: 209: }
  5029                           ;tmr1.c: 210: if(TMR1_InterruptHandler)
  5030  028E  0851               	movf	_TMR1_InterruptHandler^(0+128),w
  5031  028F  0452               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  5032  0290  1903               	btfsc	3,2
  5033  0291  0008               	return
  5034                           
  5035                           ;tmr1.c: 211: {
  5036                           ;tmr1.c: 213: TMR1_InterruptHandler();
  5037  0292  0852               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  5038  0293  008A               	movwf	10
  5039  0294  0851               	movf	_TMR1_InterruptHandler^(0+128),w
  5040  0295  000A               	callw
  5041  0296  3182               	pagesel	$
  5042  0297  0008               	return
  5043  0298                     __end_of_TMR1_CallBack:	
  5044                           
  5045                           	psect	text29
  5046  0630                     __ptext29:	
  5047 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  5048 ;; Defined at:
  5049 ;;		line 221 in file "mcc_generated_files/tmr1.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;		None
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;		None
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		None
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5063 ;;      Params:         0       0       0       0       0       0       0
  5064 ;;      Locals:         0       0       0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0
  5066 ;;      Totals:         0       0       0       0       0       0       0
  5067 ;;Total ram usage:        0 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_TMR1_Initialize
  5073 ;;		_TMR1_CallBack
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _TMR1_DefaultInterruptHandler
  5079  0630                     _TMR1_DefaultInterruptHandler:	
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  5083  0630  0008               	return
  5084  0631                     __end_of_TMR1_DefaultInterruptHandler:	
  5085                           
  5086                           	psect	text30
  5087  04BE                     __ptext30:	
  5088 ;; *************** function _EUSART_Transmit_ISR *****************
  5089 ;; Defined at:
  5090 ;;		line 166 in file "mcc_generated_files/eusart.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         0       0       0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0
  5106 ;;      Temps:          1       0       0       0       0       0       0
  5107 ;;      Totals:         1       0       0       0       0       0       0
  5108 ;;Total ram usage:        1 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_INTERRUPT_InterruptManager
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function _EUSART_Transmit_ISR
  5119  04BE                     _EUSART_Transmit_ISR:	
  5120                           
  5121                           ;eusart.c: 170: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5125  04BE  3008               	movlw	8
  5126  04BF  0021               	movlb	1	; select bank1
  5127  04C0  0253               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5128  04C1  1803               	skipnc
  5129  04C2  2CD8               	goto	i1l145
  5130                           
  5131                           ;eusart.c: 171: {
  5132                           ;eusart.c: 172: TXREG = eusartTxBuffer[eusartTxTail++];
  5133  04C3  087C               	movf	_eusartTxTail,w
  5134  04C4  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5135  04C5  0086               	movwf	6
  5136  04C6  0187               	clrf	7
  5137  04C7  0801               	movf	1,w
  5138  04C8  0023               	movlb	3	; select bank3
  5139  04C9  009A               	movwf	26	;volatile
  5140  04CA  3001               	movlw	1
  5141  04CB  00F0               	movwf	??_EUSART_Transmit_ISR
  5142  04CC  0870               	movf	??_EUSART_Transmit_ISR,w
  5143  04CD  07FC               	addwf	_eusartTxTail,f	;volatile
  5144                           
  5145                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5146  04CE  3008               	movlw	8
  5147  04CF  027C               	subwf	_eusartTxTail,w	;volatile
  5148  04D0  1803               	btfsc	3,0
  5149                           
  5150                           ;eusart.c: 174: {
  5151                           ;eusart.c: 175: eusartTxTail = 0;
  5152  04D1  01FC               	clrf	_eusartTxTail	;volatile
  5153                           
  5154                           ;eusart.c: 176: }
  5155                           ;eusart.c: 177: eusartTxBufferRemaining++;
  5156  04D2  3001               	movlw	1
  5157  04D3  00F0               	movwf	??_EUSART_Transmit_ISR
  5158  04D4  0870               	movf	??_EUSART_Transmit_ISR,w
  5159  04D5  0021               	movlb	1	; select bank1
  5160  04D6  07D3               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5161                           
  5162                           ;eusart.c: 178: }
  5163  04D7  0008               	return
  5164  04D8                     i1l145:	
  5165                           
  5166                           ;eusart.c: 179: else
  5167                           ;eusart.c: 180: {
  5168                           ;eusart.c: 181: PIE1bits.TXIE = 0;
  5169  04D8  1211               	bcf	17,4	;volatile
  5170  04D9  0008               	return
  5171  04DA                     __end_of_EUSART_Transmit_ISR:	
  5172                           
  5173                           	psect	text31
  5174  0298                     __ptext31:	
  5175 ;; *************** function _EUSART_Receive_ISR *****************
  5176 ;; Defined at:
  5177 ;;		line 185 in file "mcc_generated_files/eusart.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5191 ;;      Params:         0       0       0       0       0       0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0
  5193 ;;      Temps:          1       0       0       0       0       0       0
  5194 ;;      Totals:         1       0       0       0       0       0       0
  5195 ;;Total ram usage:        1 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_INTERRUPT_InterruptManager
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _EUSART_Receive_ISR
  5206  0298                     _EUSART_Receive_ISR:	
  5207                           
  5208                           ;eusart.c: 188: if(1 == RCSTAbits.OERR)
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5212  0298  0023               	movlb	3	; select bank3
  5213  0299  1C9D               	btfss	29,1	;volatile
  5214  029A  2A9D               	goto	i1l2208
  5215                           
  5216                           ;eusart.c: 189: {
  5217                           ;eusart.c: 192: RCSTAbits.CREN = 0;
  5218  029B  121D               	bcf	29,4	;volatile
  5219                           
  5220                           ;eusart.c: 193: RCSTAbits.CREN = 1;
  5221  029C  161D               	bsf	29,4	;volatile
  5222  029D                     i1l2208:	
  5223                           
  5224                           ;eusart.c: 194: }
  5225                           ;eusart.c: 197: eusartRxBuffer[eusartRxHead++] = RCREG;
  5226  029D  0819               	movf	25,w	;volatile
  5227  029E  00F0               	movwf	??_EUSART_Receive_ISR
  5228  029F  0020               	movlb	0	; select bank0
  5229  02A0  0869               	movf	_eusartRxHead,w
  5230  02A1  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5231  02A2  0086               	movwf	6
  5232  02A3  0187               	clrf	7
  5233  02A4  0870               	movf	??_EUSART_Receive_ISR,w
  5234  02A5  0081               	movwf	1
  5235  02A6  3001               	movlw	1
  5236  02A7  00F0               	movwf	??_EUSART_Receive_ISR
  5237  02A8  0870               	movf	??_EUSART_Receive_ISR,w
  5238  02A9  07E9               	addwf	_eusartRxHead,f	;volatile
  5239                           
  5240                           ;eusart.c: 198: rcreg=RCREG;
  5241  02AA  0023               	movlb	3	; select bank3
  5242  02AB  0819               	movf	25,w	;volatile
  5243  02AC  00F0               	movwf	??_EUSART_Receive_ISR
  5244  02AD  0870               	movf	??_EUSART_Receive_ISR,w
  5245  02AE  00FB               	movwf	_rcreg	;volatile
  5246                           
  5247                           ;eusart.c: 200: if(rcreg=='X')
  5248  02AF  3058               	movlw	88
  5249  02B0  067B               	xorwf	_rcreg,w	;volatile
  5250  02B1  1D03               	btfss	3,2
  5251  02B2  2ABC               	goto	i1l2220
  5252                           
  5253                           ;eusart.c: 201: {
  5254                           ;eusart.c: 202: LATB=0xAA;
  5255  02B3  30AA               	movlw	170
  5256  02B4  0022               	movlb	2	; select bank2
  5257  02B5  008D               	movwf	13	;volatile
  5258                           
  5259                           ;eusart.c: 203: flag_G=1;
  5260  02B6  3001               	movlw	1
  5261  02B7  0021               	movlb	1	; select bank1
  5262  02B8  00CA               	movwf	_flag_G^(0+128)
  5263  02B9  3000               	movlw	0
  5264  02BA  00CB               	movwf	(_flag_G^(0+128)+1)
  5265  02BB  2AD9               	goto	i1l2236
  5266  02BC                     i1l2220:	
  5267                           ;eusart.c: 205: }
  5268                           
  5269                           ;eusart.c: 204: rcreg=0;
  5270                           
  5271                           
  5272                           ;eusart.c: 206: else if(rcreg=='Y')
  5273  02BC  3059               	movlw	89
  5274  02BD  067B               	xorwf	_rcreg,w	;volatile
  5275  02BE  1D03               	btfss	3,2
  5276  02BF  2AC6               	goto	i1l2226
  5277                           
  5278                           ;eusart.c: 207: {
  5279                           ;eusart.c: 208: flag_N=1;
  5280  02C0  3001               	movlw	1
  5281  02C1  0021               	movlb	1	; select bank1
  5282  02C2  00CC               	movwf	_flag_N^(0+128)
  5283  02C3  3000               	movlw	0
  5284  02C4  00CD               	movwf	(_flag_N^(0+128)+1)
  5285  02C5  2AD9               	goto	i1l2236
  5286  02C6                     i1l2226:	
  5287                           ;eusart.c: 210: }
  5288                           
  5289                           ;eusart.c: 209: rcreg=0;
  5290                           
  5291                           
  5292                           ;eusart.c: 211: else if(rcreg=='A')
  5293  02C6  3041               	movlw	65
  5294  02C7  067B               	xorwf	_rcreg,w	;volatile
  5295  02C8  1D03               	btfss	3,2
  5296  02C9  2AD0               	goto	i1l2232
  5297                           
  5298                           ;eusart.c: 212: {
  5299                           ;eusart.c: 213: flag_A=1;
  5300  02CA  3001               	movlw	1
  5301  02CB  0021               	movlb	1	; select bank1
  5302  02CC  00C8               	movwf	_flag_A^(0+128)
  5303  02CD  3000               	movlw	0
  5304  02CE  00C9               	movwf	(_flag_A^(0+128)+1)
  5305  02CF  2AD9               	goto	i1l2236
  5306  02D0                     i1l2232:	
  5307                           ;eusart.c: 215: }
  5308                           
  5309                           ;eusart.c: 214: rcreg=0;
  5310                           
  5311                           
  5312                           ;eusart.c: 216: else if(rcreg=='B')
  5313  02D0  3042               	movlw	66
  5314  02D1  067B               	xorwf	_rcreg,w	;volatile
  5315  02D2  1D03               	btfss	3,2
  5316  02D3  2ADA               	goto	i1l2238
  5317                           
  5318                           ;eusart.c: 217: {
  5319                           ;eusart.c: 218: flag_B=1;
  5320  02D4  3001               	movlw	1
  5321  02D5  0021               	movlb	1	; select bank1
  5322  02D6  00C6               	movwf	_flag_B^(0+128)
  5323  02D7  3000               	movlw	0
  5324  02D8  00C7               	movwf	(_flag_B^(0+128)+1)
  5325  02D9                     i1l2236:	
  5326                           
  5327                           ;eusart.c: 219: rcreg=0;
  5328  02D9  01FB               	clrf	_rcreg	;volatile
  5329  02DA                     i1l2238:	
  5330                           
  5331                           ;eusart.c: 220: }
  5332                           ;eusart.c: 226: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5333  02DA  3008               	movlw	8
  5334  02DB  0020               	movlb	0	; select bank0
  5335  02DC  0269               	subwf	_eusartRxHead,w	;volatile
  5336  02DD  1803               	btfsc	3,0
  5337                           
  5338                           ;eusart.c: 227: {
  5339                           ;eusart.c: 228: eusartRxHead = 0;
  5340  02DE  01E9               	clrf	_eusartRxHead	;volatile
  5341                           
  5342                           ;eusart.c: 229: }
  5343                           ;eusart.c: 230: eusartRxCount++;
  5344  02DF  3001               	movlw	1
  5345  02E0  00F0               	movwf	??_EUSART_Receive_ISR
  5346  02E1  0870               	movf	??_EUSART_Receive_ISR,w
  5347  02E2  07E7               	addwf	_eusartRxCount,f	;volatile
  5348  02E3  0008               	return
  5349  02E4                     __end_of_EUSART_Receive_ISR:	
  5350                           
  5351                           	psect	text32
  5352  05C9                     __ptext32:	
  5353 ;; *************** function _ADC_ISR *****************
  5354 ;; Defined at:
  5355 ;;		line 136 in file "mcc_generated_files/adc.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5369 ;;      Params:         0       0       0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    1
  5376 ;; This function calls:
  5377 ;;		_ADC_GetConversionResult
  5378 ;;		i1_ADC_StartConversion
  5379 ;; This function is called by:
  5380 ;;		_INTERRUPT_InterruptManager
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _ADC_ISR
  5386  05C9                     _ADC_ISR:	
  5387                           
  5388                           ;adc.c: 139: PIR1bits.ADIF = 0;
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
  5392  05C9  0020               	movlb	0	; select bank0
  5393  05CA  1311               	bcf	17,6	;volatile
  5394                           
  5395                           ;adc.c: 140: rez_conversie=ADC_GetConversionResult();
  5396  05CB  3184  24DA  3185   	fcall	_ADC_GetConversionResult
  5397  05CE  0871               	movf	?_ADC_GetConversionResult+1,w
  5398  05CF  0021               	movlb	1	; select bank1
  5399  05D0  00CF               	movwf	(_rez_conversie+1)^(0+128)
  5400  05D1  0870               	movf	?_ADC_GetConversionResult,w
  5401  05D2  00CE               	movwf	_rez_conversie^(0+128)
  5402                           
  5403                           ;adc.c: 141: ADC_StartConversion();
  5404  05D3  3186  262B         	fcall	i1_ADC_StartConversion
  5405  05D5  0008               	return
  5406  05D6                     __end_of_ADC_ISR:	
  5407                           
  5408                           	psect	text33
  5409  062B                     __ptext33:	
  5410 ;; *************** function i1_ADC_StartConversion *****************
  5411 ;; Defined at:
  5412 ;;		line 92 in file "mcc_generated_files/adc.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  1    wreg      void 
  5419 ;; Registers used:
  5420 ;;		None
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5426 ;;      Params:         0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_ADC_ISR
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           
  5440                           ;psect for function i1_ADC_StartConversion
  5441  062B                     i1_ADC_StartConversion:	
  5442                           
  5443                           ;adc.c: 95: ADCON0bits.GO_nDONE = 1;
  5444                           
  5445                           ;incstack = 0
  5446                           ; Regs used in i1_ADC_StartConversion: []
  5447  062B  0021               	movlb	1	; select bank1
  5448  062C  149D               	bsf	29,1	;volatile
  5449  062D  0008               	return
  5450  062E                     __end_ofi1_ADC_StartConversion:	
  5451                           
  5452                           	psect	text34
  5453  04DA                     __ptext34:	
  5454 ;; *************** function _ADC_GetConversionResult *****************
  5455 ;; Defined at:
  5456 ;;		line 105 in file "mcc_generated_files/adc.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  2    0[COMMON] unsigned int 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5470 ;;      Params:         2       0       0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0
  5472 ;;      Temps:          7       0       0       0       0       0       0
  5473 ;;      Totals:         9       0       0       0       0       0       0
  5474 ;;Total ram usage:        9 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; This function calls:
  5477 ;;		Nothing
  5478 ;; This function is called by:
  5479 ;;		_ADC_ISR
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           
  5484                           ;psect for function _ADC_GetConversionResult
  5485  04DA                     _ADC_GetConversionResult:	
  5486                           
  5487                           ;adc.c: 109: return ((adc_result_t)((ADRESH<<2) + (ADRESL>>6)));
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _ADC_GetConversionResult: [wreg+status,2+status,0]
  5491  04DA  0021               	movlb	1	; select bank1
  5492  04DB  081B               	movf	27,w	;volatile
  5493  04DC  00F2               	movwf	??_ADC_GetConversionResult
  5494  04DD  3006               	movlw	6
  5495  04DE                     u145_25:	
  5496  04DE  36F2               	lsrf	??_ADC_GetConversionResult,f
  5497  04DF  0B89               	decfsz	9,f
  5498  04E0  2CDE               	goto	u145_25
  5499  04E1  0872               	movf	??_ADC_GetConversionResult,w
  5500  04E2  00F3               	movwf	??_ADC_GetConversionResult+1
  5501  04E3  01F4               	clrf	??_ADC_GetConversionResult+2
  5502  04E4  081C               	movf	28,w	;volatile
  5503  04E5  00F5               	movwf	??_ADC_GetConversionResult+3
  5504  04E6  01F6               	clrf	??_ADC_GetConversionResult+4
  5505  04E7  35F5               	lslf	??_ADC_GetConversionResult+3,f
  5506  04E8  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  5507  04E9  35F5               	lslf	??_ADC_GetConversionResult+3,f
  5508  04EA  0DF6               	rlf	??_ADC_GetConversionResult+4,f
  5509  04EB  0873               	movf	??_ADC_GetConversionResult+1,w
  5510  04EC  0775               	addwf	??_ADC_GetConversionResult+3,w
  5511  04ED  00F7               	movwf	??_ADC_GetConversionResult+5
  5512  04EE  0874               	movf	??_ADC_GetConversionResult+2,w
  5513  04EF  3D76               	addwfc	??_ADC_GetConversionResult+4,w
  5514  04F0  00F8               	movwf	??_ADC_GetConversionResult+6
  5515  04F1  0877               	movf	??_ADC_GetConversionResult+5,w
  5516  04F2  00F0               	movwf	?_ADC_GetConversionResult
  5517  04F3  0878               	movf	??_ADC_GetConversionResult+6,w
  5518  04F4  00F1               	movwf	?_ADC_GetConversionResult+1
  5519  04F5  0008               	return
  5520  04F6                     __end_of_ADC_GetConversionResult:	
  5521  007E                     btemp	set	126	;btemp
  5522  007E                     int$flags	set	126
  5523  007E                     wtemp0	set	126


Data Sizes:
    Strings     110
    Constant    10
    Data        44
    BSS         147
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     56      77
    BANK1            80      0      54
    BANK2            80      0      42
    BANK3            80      0      75
    BANK4            80      0       0
    BANK5            80      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_9(CODE[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(COMMON[2]), 

    sprintf@wh	PTR unsigned char  size(1) Largest target is 1
		 -> line2(BANK0[1]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), line2(BANK0[1]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), line2(BANK0[1]), 

    _doprnt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), printf@ap(COMMON[1]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_9(CODE[17]), STR_8(CODE[14]), STR_7(CODE[18]), STR_6(CODE[10]), 
		 -> STR_5(CODE[15]), STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[21]), 
		 -> STR_1(CODE[14]), 

    S852__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S852__prbuf$ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), line2(BANK0[1]), 

    _doprnt@pb.ptr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), line2(BANK0[1]), 

    _doprnt@pb	PTR struct __prbuf size(1) Largest target is 4
		 -> sprintf@pb(BANK0[3]), printf@pb(COMMON[3]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ADC_ISR->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_DHT_result
    _send_data_byte->_send_nibble
    _init_lcd->_send_nibble
    _comand_lcd->_send_command_byte
    _send_command_byte->_send_nibble
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _DHT_result->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    5715
                                             51 BANK0      5     5      0
                _ADC_StartConversion
                      _CheckResponse
                         _DHT_result
                  _SYSTEM_Initialize
                        _StartSignal
                         _comand_lcd
                           _init_lcd
                  _send_command_byte
                     _send_data_byte
 ---------------------------------------------------------------------------------
 (1) _send_data_byte                                       2     2      0      66
                                              2 BANK0      2     2      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             1     1      0      22
                                              2 BANK0      1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _comand_lcd                                           0     0      0      66
                  _send_command_byte
 ---------------------------------------------------------------------------------
 (1) _send_command_byte                                    2     2      0      66
                                              2 BANK0      2     2      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _StartSignal                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      86
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DHT_result                                          14    14      0    5209
                                             37 BANK0     14    14      0
                           _ReadData
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             10     6      4    5095
                                             27 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             21    18      3    4109
                                             14 BANK0     13    10      3
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     0      1     672
                                              2 BANK0      1     0      1
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _ReadData                                             4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CheckResponse                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              9 COMMON     1     1      0
                            _ADC_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
            _ADC_GetConversionResult
              i1_ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) i1_ADC_StartConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              9     7      2       0
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion
   _CheckResponse
   _DHT_result
     _ReadData
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         _putch *
           _EUSART_Write
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
     _WDT_Initialize
   _StartSignal
   _comand_lcd
     _send_command_byte
       _send_nibble
   _init_lcd
     _send_nibble
   _send_command_byte
     _send_nibble
   _send_data_byte
     _send_nibble

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     i1_ADC_StartConversion
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1E0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     38      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
ABS                  0      0     106       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      36       8       67.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      2A      10       52.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4B      12       93.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
DATA                 0      0     106      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Oct 31 20:51:37 2017

               __end_of_send_command_byte 0468                               __CFG_CP$OFF 0000  
                                      _RH 00D0                                        _Ch 0060  
                             ?_DHT_result 0070                               __CFG_LVP$ON 0000  
                 __size_of_send_data_byte 0015                                       l133 040F  
                                     l504 02EA                                       l509 0310  
                            __CFG_CPD$OFF 0000                                       _Sum 005E  
                         _timer1ReloadVal 006B                           __end_of_ADC_ISR 05D6  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                              __CFG_FOSC$HS 0000  
                           _count_1000_ms 00B4                             _count_4000_ms 00B2  
                                    l2150 031A                                      l2144 0302  
                                    l2306 0520                                      l2146 0312  
                                    l4106 0227                                      l4116 0236  
                                    l1912 0343                                      l1904 0325  
                                    l1906 0331                                      l1930 0398  
                                    l1916 034C                                      l1934 03A4  
                                    l1928 038C                                      l1938 03AD  
                                    l1890 0424                                      l4098 021A  
                                    l1876 0404                                      l3830 009F  
                                    l3840 00CA                                      l3834 00B2  
                                    l3860 0106                                      l3870 0130  
                                    l3854 00E7                                      l3848 00E1  
                                    l3952 01E3                                      l3882 0135  
                                    l3866 011E                                      l3884 0074  
                                    l3878 0179                                      l3886 018C  
                                    STR_1 05BB                                      STR_2 0525  
                                    STR_3 05D6                                      STR_4 0622  
                                    STR_5 05AC                                      STR_6 05EC  
                                    STR_7 0577                                      STR_9 059B  
                                    u1205 033C                                      u1215 0344  
                                    u1245 038F                                      _LATA 010C  
                                    _LATB 010D                                      u1175 0328  
                                    _LATC 010E                                      u1504 02FA  
                                    _LATD 010F                                      u1505 02F9  
                                    u1265 039E                                      _LATE 0110  
                                    u1514 030A                                      u1515 0309  
                                    u1195 0332                                      u1275 03A5  
                                    u1465 0452                                      u1655 0542  
                                    u4225 00FC                                      u4355 01D8  
                                    u4617 022F                                      u4707 056B  
                                    u4627 0359                                      u4717 0572  
                                    u4637 0365                                      u4727 02ED  
                                    u4647 0371                                      u4737 0511  
                                    u4657 037D                                      u4747 0518  
                                    u4667 0463                                      u4757 0521  
                                    u4677 03E9                                      u4687 03F3  
                                    u4697 03FD                                      _WPUB 020D  
                                    _WPUE 0210                              __CFG_WRT$OFF 0000  
                           __CFG_FCMEN$ON 0000                                      _Temp 005F  
                                    _main 01F3                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000                                      start 003C  
              ??_TMR1_SetInterruptHandler 0022                             __CFG_MCLRE$ON 0000  
                         turn_egs@step_nr 00D4                             ?_EUSART_Write 0070  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 0619  
                                   ?_main 0070                             __CFG_WDTE$OFF 0000  
                         _TMR1_StartTimer 0625                                     _T1CON 0018  
                         __end_of___lwdiv 0351                                     i1l145 04D8  
                                   i1l181 0015                                     i1l183 0021  
                                   i1l185 002D                           __end_of___lwmod 03B2  
                                   i1l189 0037                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TMR1H 0017  
                                   _TMR1L 0016                           __end_of__doprnt 018F  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _TRISD 008F  
                                   _TRISE 0090                    ?i1_ADC_StartConversion 0070  
                                   _TXREG 019A                                     _TXSTA 019E  
                                   _Check 0065          __size_of_ADC_GetConversionResult 001C  
                        __end_of_TMR1_ISR 04BE                           __end_of_dpowers 05EC  
                                   _line1 0066                                     _line2 006A  
                          _WDT_Initialize 061E                                     _rcreg 007B  
                                   _putch 0619                                     main@n 0056  
                                   main@x 0054                   __end_of_TMR1_Initialize 050E  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           __end_of_sprintf 04A2  
                     __size_of_DHT_result 0064                           __initialization 003E  
              __size_of_send_command_byte 001E                              __end_of_main 024B  
                        __end_of_ReadData 031C                            ??_EUSART_Write 0020  
                               ??_ADC_ISR 0079               ?_INTERRUPT_InterruptManager 0070  
                                  ??_main 0053                            __CFG_PLLEN$OFF 0000  
                  __end_of_WDT_Initialize 0622                                    _ADCON0 009D  
                                  _ADCON1 009E                              ?_send_nibble 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  ?_putch 0022                                    _ANSELB 018D  
                                  _ANSELD 018F                                    _ANSELE 0190  
                                  _T1GCON 0019                                    i1l2220 02BC  
                                  i1l2232 02D0                                    i1l2208 029D  
                                  i1l2226 02C6                                    i1l2236 02D9  
                                  i1l2238 02DA                                    i1l3910 0281  
                                  i1l3904 0276                                    i1l3916 028E  
                                  i1l3898 026B                                    u145_25 04DE  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                          __CFG_PWRTE$OFF 0000      __end_of_TMR1_DefaultInterruptHandler 0631  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 0630  
                 __end_of_TMR1_StartTimer 0628                            __CFG_STVREN$ON 0000  
                                  _flag_A 00C8                                    _flag_B 00C6  
                                  _flag_G 00CA                                    _flag_N 00CC  
                               ??___lwdiv 0024                                 ??___lwmod 002C  
                     _EUSART_Transmit_ISR 04BE                                 ??__doprnt 0031  
                        __end_of_init_lcd 0385                              __doprnt@flag 0035  
                          _send_data_byte 053A                              __doprnt@prec 0036  
                  __size_of_CheckResponse 0017                           ?_WDT_Initialize 0070  
TMR1_SetInterruptHandler@InterruptHandler 0020                                 ??_sprintf 003F  
                    ?_EUSART_Transmit_ISR 0070                     __end_of_TMR1_CallBack 0298  
                        ?_TMR1_Initialize 0070                         _SYSTEM_Initialize 0589  
                 __end_of__initialization 006E                        ?_SYSTEM_Initialize 0070  
            __size_of_ADC_StartConversion 0003                            __pcstackCOMMON 0070  
                            __pidataBANK1 062E                              __pidataBANK2 03B2  
                     ??_SYSTEM_Initialize 0022                             ??_StartSignal 0020  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                  __end_of_send_data_byte 054F                             __end_of_putch 061E  
                            _flag_1000_ms 00BC                              ??_DHT_result 0045  
                            _flag_4000_ms 00BA                   _ADC_GetConversionResult 04DA  
                          _OPTION_REGbits 0095                                __doprnt@ap 0030  
                              __doprnt@pb 003A                 __end_of_SYSTEM_Initialize 059B  
                   ??_EUSART_Transmit_ISR 0070                                   ??_putch 0023  
                              __pbssBANK0 0058                                __pbssBANK1 00A0  
                              __pbssBANK3 01A0                      __end_of_EUSART_Write 0427  
                               ?_ReadData 0070                           __CFG_VCAPEN$OFF 0000  
                           _CheckResponse 050E               __size_of_EUSART_Receive_ISR 004C  
                      __end_of_DHT_result 01F3                                _flag_10_ms 00C2  
                              __pmaintext 01F3                          ?_TMR1_StartTimer 0070  
                              ??_TMR1_ISR 0070                                __pintentry 0004  
                         ?_send_data_byte 0070                         sms_text@sms_index 005A  
                                 _ADC_ISR 05C9                                   _BAUDCON 019F  
                 ??i1_ADC_StartConversion 0070                   __size_of_ADC_Initialize 0009  
                           _eusartRxCount 0067                       __end_of_StartSignal 0577  
                              _comand_lcd 054F                                   _OSCTUNE 0098  
                              ??_ReadData 0020                      __size_of_send_nibble 0026  
                          ?_CheckResponse 0070                                 ?_init_lcd 0070  
                   send_command_byte@byte 0023                                   _T_byte1 0064  
                                 _T_byte2 0063                                   ___lwdiv 031C  
                                 ___lwmod 0385                                   __doprnt 0072  
               ??_ADC_GetConversionResult 0072                                   __ptext1 053A  
                                 __ptext2 0351                                   __ptext3 054F  
                                 __ptext4 044A                                   __ptext5 03DC  
                                 __ptext6 0563                                   __ptext7 0589  
                                 __ptext8 061E                                   __ptext9 04F6  
          ??_TMR1_DefaultInterruptHandler 0070                                 _T1CONbits 0018  
                                 _dpowers 05E2                     _OSCILLATOR_Initialize 0614  
       __size_of_TMR1_SetInterruptHandler 0009                  ??_PIN_MANAGER_Initialize 0020  
               ?_TMR1_SetInterruptHandler 0020                __size_of_SYSTEM_Initialize 0012  
                                 _sprintf 0485                                   clrloop0 060F  
                    end_of_initialization 006E                            comparare@F3724 0120  
                          comparare@F3729 01A0                                   init_ram 0608  
                              ??_init_lcd 0022                                   initloop 0609  
                       _EUSART_Initialize 0468                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                         send_nibble@nibble 0021  
                             _StartSignal 0563                       ??_EUSART_Initialize 0020  
                        ??_WDT_Initialize 0020                                 _PORTDbits 000F  
                             ?_comand_lcd 0070                                 _TRISCbits 008E  
                               _TRISDbits 008F                     __size_of_EUSART_Write 0025  
                     _ADC_StartConversion 0628                           ??_CheckResponse 0020  
               __end_of_EUSART_Initialize 0485                                 ReadData@i 0022  
                               ReadData@j 0023                              _count_100_ms 00B8  
                            _count_500_ms 00B6                      ?_ADC_StartConversion 0070  
                      turn_egs@step_index 007A                              _EUSART_Write 0402  
                       __size_of_TMR1_ISR 001C                            _ADC_Initialize 05FF  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 003E  
         __size_of_PIN_MANAGER_Initialize 0023                               putch@txData 0022  
                       int_gsm@sms1_index 0058                         __size_of_ReadData 0038  
                        ??_send_data_byte 0022                       __size_of_comand_lcd 0014  
                   ??_ADC_StartConversion 0020                  __size_of_TMR1_Initialize 0018  
                  __end_of_ADC_Initialize 0608                               __doprnt@val 0037  
                             __pdataBANK1 00D4                               __pdataBANK2 0120  
                                ?_ADC_ISR 0070                    __size_of_TMR1_CallBack 004D  
          __size_ofi1_ADC_StartConversion 0003             __end_ofi1_ADC_StartConversion 062E  
             __end_of_EUSART_Transmit_ISR 04DA                     TMR1_ISR@CountCallBack 00B0  
                             __pbssCOMMON 007A                                 ___latbits 0002  
                      send_data_byte@byte 0023                             __pcstackBANK0 0020  
                             _flag_100_ms 00C0                               _flag_500_ms 00BE  
              __end_of_EUSART_Receive_ISR 02E4                __size_of_EUSART_Initialize 001D  
                               __doprnt@c 0039                                 __doprnt@f 002E  
                               __pnvBANK0 006B                                 __pnvBANK1 00D1  
                       __size_of_init_lcd 0034                          ___lwdiv@dividend 0022  
                  _PIN_MANAGER_Initialize 0427                                 _flag_1_ms 00C4  
        __end_of_TMR1_SetInterruptHandler 05FF                                  ?___lwdiv 0020  
                                ?___lwmod 0028                           ?_ADC_Initialize 0070  
                            _eusartRxHead 0069                              _eusartTxHead 007D  
                            _eusartRxTail 0068                                  ?__doprnt 002E  
                            _eusartTxTail 007C              ??_INTERRUPT_InterruptManager 0079  
                 _eusartTxBufferRemaining 00D3                  __size_of_TMR1_StartTimer 0003  
                           ??_send_nibble 0020                          ___lwdiv@quotient 0025  
                                ?_sprintf 003B                            __size_of_putch 0005  
                          _eusartRxBuffer 00A0                             _TMR1_CallBack 024B  
                          _eusartTxBuffer 00A8                                  _LATCbits 010E  
                                _LATDbits 010F                                 clear_ram0 060E  
                                _PIE1bits 0091       __size_of_INTERRUPT_InterruptManager 0038  
                                _PIR1bits 0011                                  _TMR1_ISR 04A2  
                            ?_StartSignal 0070                         ??_TMR1_Initialize 0022  
                        __size_of_ADC_ISR 000D                                _ADCON0bits 009D  
                                _RH_byte1 0062                                  _RH_byte2 0061  
                            ??_comand_lcd 0024                             _rez_conversie 00CE  
                          ?_TMR1_CallBack 0070                             _flag_directie 005C  
                                _ReadData 02E4                       __end_of_send_nibble 0402  
                      __end_of_comand_lcd 0563                  ?_ADC_GetConversionResult 0070  
                 ??_OSCILLATOR_Initialize 0020                          __size_of___lwdiv 0035  
                        __size_of___lwmod 002D                          __size_of__doprnt 011D  
                _TMR1_SetInterruptHandler 05F6                       main@incubator_state 0055  
                   _TMR1_InterruptHandler 00D1                           ___lwdiv@divisor 0020  
                         ___lwdiv@counter 0027                                  __ptext10 0625  
                                __ptext11 05F6                                  __ptext20 0402  
                                __ptext12 0427                                  __ptext21 0385  
                                __ptext13 0614                                _T1GCONbits 0019  
                                __ptext30 04BE                                  __ptext22 031C  
                                __ptext14 0468                                  __ptext31 0298  
                                __ptext23 02E4                                  __ptext15 05FF  
                                __ptext32 05C9                                  __ptext24 050E  
                                __ptext16 018F                                  __ptext33 062B  
                                __ptext25 0628                                  __ptext17 0485  
                                __ptext34 04DA                                  __ptext18 0072  
                                __ptext27 04A2                                  __ptext19 0619  
                                __ptext28 024B                                  __ptext29 0630  
                       ??_TMR1_StartTimer 0020                          __size_of_sprintf 001D  
                   __end_of_CheckResponse 0525                                  _init_lcd 0351  
                           __size_of_main 0058                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 003C                _INTERRUPT_InterruptManager 0004  
                              _DHT_result 018F                                _INTCONbits 000B  
                          __pstringtext10 0000                           ??_TMR1_CallBack 0070  
                             _send_nibble 03DC                   __size_of_WDT_Initialize 0004  
                                intlevel1 0000                                 sprintf@ap 0041  
                               sprintf@pb 0042                                 sprintf@wh 0040  
             __end_of_ADC_StartConversion 062B                          ___lwmod@dividend 002A  
                 ?_PIN_MANAGER_Initialize 0070           __end_of_ADC_GetConversionResult 04F6  
                       __CFG_CLKOUTEN$OFF 0000                          ??_ADC_Initialize 0020  
                      _EUSART_Receive_ISR 0298                         _send_command_byte 044A  
                           __pstringtext1 05E2                             __pstringtext2 0525  
                           __pstringtext3 0577                             __pstringtext4 059B  
                           __pstringtext5 05AC                             __pstringtext6 05BB  
                           __pstringtext7 05D6                             __pstringtext8 05EC  
                           __pstringtext9 0622                      __size_of_StartSignal 0014  
                      ?_send_command_byte 0070                                  sprintf@f 003B  
                     ?_EUSART_Receive_ISR 0070                           ___lwmod@divisor 0028  
                         ___lwmod@counter 002D                     i1_ADC_StartConversion 062B  
                     ??_send_command_byte 0022                        EUSART_Write@txData 0021  
            __size_of_EUSART_Transmit_ISR 001C            __end_of_PIN_MANAGER_Initialize 044A  
                    ??_EUSART_Receive_ISR 0070                           _TMR1_Initialize 04F6  
